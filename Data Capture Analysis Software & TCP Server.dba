Rem Project: GDS Remote Database Service CLIENT
Rem Created: Thursday, April 21, 2011

Rem ***** Main Source File *****

` CLIENT MACHINE

`Working on this: c_SAVEIMAGE_BuildBitmap

`CF1 : Viewer Mode
`CF2 : Mud Logging System (MLS) Mode


`Note SYNC ON makes the program responsible for handling the screen refresh
sync on : sync rate 0 : backdrop off : autocam off


set window title "GDS CLIENT STARTING, Please Wait. (Starting Program)"

  `l_WindowHndl = FIRST WINDOW("GDS CLIENT STARTING, Please Wait. (Starting Program)", 0)
  `if l_WindowHndl <> 0
  `  SET ACTIVE WINDOW l_WindowHndl
  `endif
  
  `VERSION NUMBERS
  global g_CLIENT_Version_Num$ as string : g_CLIENT_Version_Num$ = "2.0"
  global g_CLIENT_SUBVersion_Num$ as string : g_CLIENT_SUBVersion_Num$ = "(S.1.0)"
  global g_ENG_ProjectMenuTitle$ as string : g_ENG_ProjectMenuTitle$ = "GDS Remote Database Service - Client. V." + g_CLIENT_Version_Num$ + " " + g_CLIENT_SUBVersion_Num$
  
` ---------------------------------- SYSTEM TIMER --------------------------------------
  `System Counter
    global g_TIMER_1 as integer : g_TIMER_1 = 0
    global g_TIMER_H as integer : g_TIMER_H = 0
  `HITIMER Value - 1 second increments
    global g_ENG_T1k as integer : g_ENG_T1k = hitimer()
    global g_ENG_THs as integer : g_ENG_THs = hitimer()
` --------------------------------------------------------------------------------------

  dim mouse_click(4) as integer
  for set_lp = 0 to 4
    mouse_click(set_lp) = -1
  next set_lp
  
  type TestVariable_Type
    Value_Text$ as string
    Value_Integer as integer
    Value_Float as float
  endtype
  dim TestVariable(50) as TestVariable_Type
  
`****************** RC4 ENCRYPTION *******************
  
  dim sbox(512)
  dim key(512)
  dim RC4_PasswordTable$(10, 10) as string  
  
`*****************************************************
  
` ---------------------------------- WITS OVERRIDE ----------------------------
	
	`WITS OVERRIDE - The array holding the MEM DB CHANNEL MAPPING/LINKS
	type WITS_OVERRIDE_MEMDBMAP_Type
		MEM_DB_ChannelName$ as string
		MapTo_COMDATA_ArrPos as integer
	endtype
	dim WITS_OVERRIDE_MEMDBMAP(31) as WITS_OVERRIDE_MEMDBMAP_Type
	`NOTE: 31 = Clear override from selected array
	for set_lp = 0 to 31
	  WITS_OVERRIDE_MEMDBMAP(set_lp).MEM_DB_ChannelName$ = "NULL"
	  WITS_OVERRIDE_MEMDBMAP(set_lp).MapTo_COMDATA_ArrPos = -1
	next set_lp
	
	
	`WITS OVERRIDE - The array holding the COM PORT DATA received from the BOHR workstation 
	type WITS_OVERRIDE_COM_Type
		WITS_Item_BOHROUT_RAWDATA$ as string
  	WITS_Item_BOHROUT_Data# as float
  	WITS_Item_BOHROUT_RecordNum# as float
  	WITS_Item_BOHROUT_ChannelNum# as float
  	MapTo_MEMDBMAP_ChnlArrPos as integer
	endtype
	dim WITS_OVERRIDE_COMDATA(250) as WITS_OVERRIDE_COM_Type
	for set_lp = 0 to 250
	  WITS_OVERRIDE_COMDATA(set_lp).WITS_Item_BOHROUT_RAWDATA$ = "NULL"
	  WITS_OVERRIDE_COMDATA(set_lp).WITS_Item_BOHROUT_Data# = -1
	  WITS_OVERRIDE_COMDATA(set_lp).WITS_Item_BOHROUT_RecordNum# = -1
	  WITS_OVERRIDE_COMDATA(set_lp).WITS_Item_BOHROUT_ChannelNum# = -1
	  WITS_OVERRIDE_COMDATA(set_lp).MapTo_MEMDBMAP_ChnlArrPos = -1
	next set_lp
` ------------------------------------------------------------------------------
	
	
	
	
  
  global g_ENGINE_Alpha_Available as integer : g_ENGINE_Alpha_Available = -1
  if alpha available() = 1
    g_ENGINE_Alpha_Available = 1
  endif
  
  l_ColourDepth = DISPLAY DEPTH()
  if l_ColourDepth <> 32
    lib_ON_ERROR_Handle("The desktop colour depth is not 32bit", "", "Change the desktop colour depth to 32bit", -1)
  endif
  
  type DLS_TABS_Type
    Tab_Text$ as string
  endtype
  dim DLS_TABS(3) as DLS_TABS_Type
  
  dim MEM_DB_EditBDMode_Highlight_XOffset(4, 10) as integer
  
` ---------------------------------- LOGIN USER ID DATABASE ----------------------------

#constant c_LOGIN_ID_MaxArr 15
type LOGIN_ID_Type
  Username$ as string
  Password$ as string
endtype
dim LOGIN_ID(c_LOGIN_ID_MaxArr) as LOGIN_ID_Type
`Dim the 3 arrays for remote editing by a CF2 Client in Diagnostics mode with a relationship of 2001
` - 1) Local Edit Table, 2) Downloaded Authorised Client Login Table from the Authorised Client
`   3) Downloaded Server Login Table from the Server
dim LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(c_LOGIN_ID_MaxArr) as LOGIN_ID_Type
dim LOGIN_ID_CF2_2001_RemoteEdit_AuClient(c_LOGIN_ID_MaxArr) as LOGIN_ID_Type
dim LOGIN_ID_CF2_2001_RemoteEdit_Server(c_LOGIN_ID_MaxArr) as LOGIN_ID_Type
  for set_lp = 0 to c_LOGIN_ID_MaxArr
    LOGIN_ID(set_lp).Username$ = ""
    LOGIN_ID(set_lp).Password$ = ""
  next set_lp
  
`Channel ID System - Used to change any channel on either the Drill or Pits Screen charts
dim CHANNEL_ID_ChannelNames$(40) as string: `Stores the names displayed on the screen for the Index Position
dim CHANNEL_ID_ChannelNames_UserOverride$(40) as string: `Stores the names displayed on the screen for the Index Position - User Override Names set in program allow you to call a channel whatever you want
dim CHANNEL_ID_ChannelLinkIndex(40) as integer: `The Index stores which realworld channel (Block/Channel) is linked to which database channel index number
dim CHANNEL_ID_ChannelRanges(60) as integer: `Stores the channel ranges for each Channel Index
  
`Advanced Reporting Array
#constant c_ARS_ArraySize 10
type ARS_Type
  report$ as string
  local_creation_time$ as string
endtype
dim ENG_AdvRepSys_Report$(c_ARS_ArraySize+5) as ARS_Type

`DRILLING SCREEN COMMENTS SYSTEM
	`Comment System Array - Stores details of Comments to be displayed on the Screen by lib_CMNTS_Display_Comment_Display_Array()
	type CommentSystem_Type
  	Comment_Text$ as string
  	XPos as integer
  	YPos as integer
  	Spaces_WidthPixels as integer
  	ScreenID as integer
  	ChartID as integer
  	Array_Pos as integer
	endtype
	dim CommentSystem(500) as CommentSystem_Type
	global g_CMNTSYS_TotalCommentsOnScreen as integer : g_CMNTSYS_TotalCommentsOnScreen = -1
	

`Comment System - Flashing Cursor Variables
type Comment_System_FlashCursor_Type
  FlashToggle as integer
  XPos_NoOffset as integer
  YPos_NoOffset as integer
  Calc_XOffset as integer
  Calc_SpaceChars_XOffset as integer
endtype
dim CommentSystem_FlashCursor(0) as Comment_System_FlashCursor_Type

`Alarm System - Flashing Cursor Variables (For the add Alarm Input Box - Alarm Label Input)
type AlarmLabelSystem_FlashCursor_Type
  FlashToggle as integer
  XPos_NoOffset as integer
  YPos_NoOffset as integer
  Calc_XOffset as integer
  Calc_SpaceChars_XOffset as integer
endtype
dim AlarmLabelSystem_FlashCursor(0) as AlarmLabelSystem_FlashCursor_Type

#constant c_LOGIN_ID_Universal_MaxArr 2
type LOGIN_ID_Universal_Type
  Username$ as string
  Password$ as string
endtype
dim LOGIN_ID_Universal(c_LOGIN_ID_Universal_MaxArr) as LOGIN_ID_Universal_Type
`Dim the 3 Universal arrays for remote editing by a CF2 Client in Diagnostics mode with a relationship of 2001
` - 1) Local Edit Table, 2) Downloaded Authorised Client Login Table from the Authorised Client
`   3) Downloaded Server Login Table from the Server
dim LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(c_LOGIN_ID_Universal_MaxArr) as LOGIN_ID_Universal_Type
dim LOGIN_ID_Universal_CF2_2001_RemoteEdit_AuClient(c_LOGIN_ID_Universal_MaxArr) as LOGIN_ID_Universal_Type
dim LOGIN_ID_Universal_CF2_2001_RemoteEdit_Server(c_LOGIN_ID_Universal_MaxArr) as LOGIN_ID_Universal_Type
  for set_lp = 0 to c_LOGIN_ID_Universal_MaxArr
    LOGIN_ID_Universal(set_lp).Username$ = ""
    LOGIN_ID_Universal(set_lp).Password$ = ""
  next set_lp
  
global g_LOGIN_ID_SavefileState$ as string : g_LOGIN_ID_SavefileState$ = "NULL VALUE"
  
` ---------------------------------- LOGIN - Server return login table --------------------------

type LOGIN_ID_Server_Type
  Username$ as string
  Password$ as string
endtype
dim LOGIN_ID_ServerArr(c_LOGIN_ID_MaxArr) as LOGIN_ID_Server_Type

type LOGIN_ID_Uni_Server_Type
  Username$ as string
  Password$ as string
endtype
dim LOGIN_ID_Uni_ServerArr(c_LOGIN_ID_Universal_MaxArr) as LOGIN_ID_Uni_Server_Type

`c_ENG_MaxServerClients - this must be the same as the fixed g_Max_Clients in the Host Server Compiled Code
#constant c_ENG_MaxServerClients 15
type LOGIN_ServerUsernames_Type
  Username$ as string
endtype
dim LOGIN_ServerUsernames(c_ENG_MaxServerClients) as LOGIN_ServerUsernames_Type
dim LOGIN_ID_Universal_CF2_2001_ServerUsernames(c_ENG_MaxServerClients) as LOGIN_ServerUsernames_Type

lib_Login_CF2_Reset_Server_ReturnLT_Arrs()
  
` ---------------------------------- SIMPLE SERVER SYNCHRONISATION DATABASE --------------------------
 
  `This array is used by the 'simple server/client system whereby just 1hr of data is transferred
  `and the system is kept as simple as possible.
  
  `The Server maintains a list of all records it has & is responsible for making sure all clients
  `are up to date.
  
  `This mudlogging prog is special in that it sends the data to the server & does not listen for
  `new records


  global g_SIMPLE_SERVER_SYNC_ARR_Transmit_Toggle as integer : g_SIMPLE_SERVER_SYNC_ARR_Transmit_Toggle = -1
  global g_SIMPLE_SERVER_SYNC_TransmitTimer as integer : g_SIMPLE_SERVER_SYNC_TransmitTimer = timer()
  #constant c_SIMPLE_SERVER_SYNC_CheckInterval 100 :`How long between checks for new records to be syncd
  #constant c_SIMPLE_SERVER_SYNC_Timeout 60000 :`Used when this Client asks the Server to shift its database for a new record has been added & waits for the Servers response

  type SIMPLE_SERVER_SYNC_ARRAY_Type
    MEM_DB_ArrPos as integer
    Record_Syncd as integer
  endtype
  dim SIMPLE_SERVER_SYNC_ARRAY(1, 900) as SIMPLE_SERVER_SYNC_ARRAY_Type
  dim SimpSER_SYNC_RecordsArrPosToSend(50) as integer : `Used to queue the Arr Pos to send in one batch
    for set_lp_A = 1 to 900
      SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A).MEM_DB_ArrPos = -1
      SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A).Record_Syncd = -1
    next set_lp_A
    `NOTE: the array at the server is the same except it is MAX_CLIENT_NUM, 900 and not 1,900
    `      1, 900 comes from this being just 1 client, but the one that sends the info etc. So
    `      it only needs 1 array position in this app. The other clients don't need to track
    `      their own array information and just display it. The server tracks what it has sent them.
    
` ---------------------------------- SYNCHRONISATION DATABASE (Older, bigger, complex system, currently disused) --------------------------

type SYNC_DB_Data_Type
  Record_Pntr as integer
endtype
dim SYNC_DB_Data(60) as SYNC_DB_Data_Type

dim SYNC_DB_Pntrs(50) as integer

type SYNC_DB_Data_Type
  Record_Pntr as integer
endtype
dim SYNC_DB_Data(60) as SYNC_DB_Data_Type
  
`****************** DLL CONSTANT DEFINITIONS *******************
#constant c_SystemTrayDLL 10 :` Systray.dll load number
#constant c_User32DLL 11 :` User32.dll load number
#constant c_Kernel32DLL 12 :` Kernel32.dll load number
#constant c_Comdlg32DLL 13 :` Comdlg32.dll load number

global SysTrayMsg
global Hwnd as dword
global IconPopup
global MenuId
load Dll "systray.dll", c_SystemTrayDLL
  if dll exist(c_SystemTrayDLL) = 0
    lib_ON_ERROR_Handle("The program file 'systray.dll' is missing.", "This should be impossible since it is part of the program .exe file.", "Contact GDS for assistance.", -1)
  endif
load Dll "user32.dll", c_User32DLL
  if dll exist(c_User32DLL) = 0
    lib_ON_ERROR_Handle("The windows file 'user32.dll' was not found.", "This file should be part of the Windows Operating System.", "Contact GDS for assistance.", -1)
  endif
load dll "kernel32.dll", c_Kernel32DLL
  if dll exist(c_Kernel32DLL) = 0
    lib_ON_ERROR_Handle("The windows file 'kernel32.dll' was not found.", "This file should be part of the Windows Operating System.", "Contact GDS for assistance.", -1)
  endif
load dll "comdlg32.dll", c_Comdlg32DLL
  if dll exist(c_Comdlg32DLL) = 0
    lib_ON_ERROR_Handle("The windows file 'Comdlg32.dll' was not found.", "This file should be part of the Windows Operating System.", "Contact GDS for assistance.", -1)
  endif
  
`***************************************************************
lib_SETWINDOW_Active()

  
  `***********************************************************************
  `MEMBLOCK DEFINTIONS
  ` Memblock 1 - temp memblock
  ` Memblock 2 - temp memblock
  ` Memblock 3 - DCB Structure permenant memblock
  ` Memblock 10 - Plot Creation Image - DrillScreen Chart Background
  ` Memblock 11 - Plot Creation Image - Historical Screen Chart Background
  ` Memblock 12 - Advanced Report System - Background + Text display image
  ` Memblock 13 - Plot Creation Image - Pits Screen Chart Background
  ` Memblock 14 - PORTABLE MODE - comdlg32.dll - Windows OpenFile Dialogue Box - OFN_MB 
  ` Memblock 15 - PORTABLE MODE - comdlg32.dll - Windows OpenFile Dialogue Box - PathBuffer_MB
  ` Memblock 16 - PORTABLE MODE - comdlg32.dll - Windows OpenFile Dialogue Box - FileFilter_MB
  ` Memblock 17 - PORTABLE MODE - comdlg32.dll - Windows OpenFile Dialogue Box - FileBoxTitle_MB
  ` Memblock 18 - Caps Lock Status : User32.dll 'GetKeyboardState' call
  
  #constant c_Memblock_DCB 3
  make memblock 3, 80 : ` Store for GetState and SetState DCB structure
  `***********************************************************************

Check_For_Program_Instances()

global g_ENG_Half_Screen_Width as integer
global g_ENG_Half_Screen_Height as integer
global g_1024_768_Available as integer : g_1024_768_Available = -1
global g_1360x768_Available as integer : g_1360x768_Available = -1
global g_1366x768_Available as integer : g_1366x768_Available = -1

if check display mode(1024, 768, 32)=1 then g_1024_768_Available = 1
if check display mode(1360, 768, 32)=1 then g_1360x768_Available = 1
if check display mode(1366, 768, 32)=1 then g_1366x768_Available = 1

if g_1024_768_Available = 1
  `True size is not: set display mode 1024, 768, 32
  `Set display smaller since window is 1024x768 and actual display size is decreased by the margins
  set display mode 1024, 742, 32
endif

set image colorkey 255,0,255
global g_autodir_full_directory_path$ as string : g_autodir_full_directory_path$ = dir exe()
disable escapekey
`hide mouse

`Define KEYBOARD VALUES
dim key_state(300,1)



global g_LGSV_ConvertedString_Output_FLT# as float
global g_LGSS_ConvertedString_Output_STR$ as string

global g_CLIENT_Database_Full_Path$ as string
global g_CLIENT_InstallInputIP$ as string : g_CLIENT_InstallInputIP$ = "127.0.0.1"
global g_CLIENT_InstallInputPORT$ as string : g_CLIENT_InstallInputPORT$ = "2332"
global g_CLIENT_InstallInputCLIENTScreenType as integer : g_CLIENT_InstallInputCLIENTScreenType = 1
global g_CLIENT_InstallInputCLIENTFullScreen as integer : g_CLIENT_InstallInputCLIENTFullScreen = -1
global g_CLIENT_InstallInputScreenResolution as integer : g_CLIENT_InstallInputScreenResolution = 1
global g_CLIENT_InstallInputCoreFunctionType as integer : g_CLIENT_InstallInputCoreFunctionType = 1
global g_CLIENT_InstallInputCFTypeGetPassword as integer : g_CLIENT_InstallInputCFTypeGetPassword = -1
`global g_CLIENT_InstallInputEngineUnits as integer : g_CLIENT_InstallInputEngineUnits = 1
global g_DATABASE_MaxTotalRecords as integer : `Note database creates 21600 records per 24 hours (1 per 4 seconds)

#constant c_N_HS_CHARTBOX_BMP_Top_Y 0
#constant c_N_HS_CHARTBOX_BMP_Bottom_Y 440

  set window title "GDS CLIENT STARTING, Please Wait. (Defining Operating Environment)"

  Define_DEBUG_Variables()
  Define_SUPER_SWITCHES()
  
  Define_COMMS_WITH_SIMPLE_SERVER()
  
  Define_COMMENT_SYSTEM_Variables()
  Define_INPUT_LOCKDOWN_Variables()
  Define_Data_List_Screen_Variables()
  Define_PROGRAMMING_Variables()
  Define_MSE_INPUT_RightClick_ContextMenus()
  Define_MSE_INPUT_RightClick_FuncVars()
  Define_ENGINE_External_Variables()
  Define_ALARMS_Variables()
  
  Define_ADVANCED_REPORTING_Variables()
  Define_Variables()
  Define_EXPORT_DATA_Variables()
  Define_CHANNEL_ID_ChangeChnl_Variables()

  Define_MESSAGING_Variables()
  DEFINE_RC4_Encryption()
  Define_PASSWORDS()
  Define_Graphical_Installation_Variables()
  Define_NUMPAD_variables()
  Define_INPUTPAD_Variables()
  Define_SPYMODE_Variables()
  Define_WITS_CONFIG_MAPPING_Variables()
  Define_WITS_OVERRIDE_MAPPING_Variables()
  Define_SYNC_Variables()
  Define_CommandConsole_Variables()
  Define_PLOTCHART_DrillScreen_Variables()
  Define_PLOTCHART_Historical_Variables()
  Define_ColourPad_Variables()
  Define_INFOBOX_Variables()
  Define_Well_Data_Variables()
  Define_ToolTip_Variables()
  Define_RT_PrintToImage_Variables()
  
  Define_ROP_CALCULATION_Variables()
  
  Define_MEM_DATABASE_Variables()
  Define_HD_DATABASE_Variables()
  Define_ServerClient_SYNC_MEMDB_Variables()
  
  Define_Serial_Port_Selection_Variables()
  Define_SERIAL_PORT_and_WITS_Variables()
  Define_RealtimeGraphics_Variables()
  Define_SystemTray_Variables()
  
  Define_SAVEFILE_variables()
  

  lib_Get_OS_Type()
  lib_AUTODETECT_Screen_Resolution()
  
  Define_VIEWERMODE_LOGIN_Variables()
  
  if g_DEBUG_UseExternalVariable = 1
    DEBUG_UseExternalValue()
  endif
  
  
  `CHECK LOAD TYPE - PORTABLE VIEWER OR MAIN MUDLOGGING PROGRAM
    if g_PORTABLE_ENG_OptionAtStartup = 1
      lib_PORTABLE_BootGUI_MenuChoice()
    endif
  
  
  
  
  INITIALISE_GRAPHICS_SYSTEM()
  
  `D3D Required to show text on screen - INIT_GRAPHICS_SYSTEM() not run until main_program()
  INITIALISE_D3D_FUNC()
  
  set window title "GDS CLIENT STARTING, Please Wait. (Checking Installation) (S1)"
  
  `CHECK THE INSTALLATION ENVRIONMENT.
    `NOTE: If Toggle g_PORTABLE_ENG_RunAs_VIEWER = 1 then the Installation Environment (i.e. all the
    `      program variables) are not loaded from the normal folder/file structure, but instead are
    `      ALL set in the function: PORTABLE_ENG_Set_All_Program_Variables()
    
    if g_PORTABLE_ENG_RunAs_VIEWER = -1
      INSTALLATION_Graphical_CHECK_INSTALL()
    else
      PORTABLE_ENG_Set_All_Program_Variables()
    endif
  
  
  
`****************** MAIN DATABASE SETUP  ********************
`CF2 - Mudlogging Mode
  set window title "GDS CLIENT STARTING, Please Wait. (Setting up System Memory)"

if g_ENGINE_CoreFunctionType = 2

  type MEM_MAIN_DATABASE_Type
    Record_Used as integer  
    Record_Syncd as integer
    Record_Sync_Saved as byte
    Time$ as string
    Date$ as string
    Hole_Depth# as float
    Bit_Depth# as float
    ROP# as float
    WOB# as float
    Hookload as word
    RPM as word
    Torque# as float
    TripTank# as float
    BlockPosition# as float
    PVT# as float
    Pit1# as float
    Pit2# as float
    Pit3# as float
    Pit4# as float
    Pit5# as float
    Pit6# as float
    Pit7# as float
    Pit8# as float
    SPP as word
    FlowIn as word
    SPM1 as word
    SPM2 as word
    SPM3 as word
    TotalGas# as float
    H2S# as float
    TempIN# as float
    TempOUT# as float
    Comment$ as string
    CSG as word
    FlowOUT# as float
    Total_Strokes as integer
  endtype
  dim MEM_MAIN_DATABASE(g_DATABASE_MaxTotalRecords + 500) as MEM_MAIN_DATABASE_Type
  global g_DATABASE_HD_Total_Num_Records as integer
  global g_DATABASE_MEM_Total_Num_Records as integer
  
  `#constant c_DATABASE_Bytes_Per_Record 155 : Pre Flow OUT..?
  `#constant c_DATABASE_Bytes_Per_Record 159 : `Flow OUT Added
  #constant c_DATABASE_Bytes_Per_Record 163 : `Total Strokes Added
  `NOTE: each record is 163 bytes long, + 4 bytes for the array position in the record stored in the HD database ? Is this still the case, does it work like this? Not sure, too long ago. Ive put 155 bytes as thats what it is now.
  `      Be aware that the total bytes per record is different from the size of the record during the internet SYNC
  `      transmission due to data compression during the SYNC that does not apply to the HD Database.
endif
  





` ---------------------------------- VIEWER REALTIME DISPLAY DATABASE --------------------------
if g_ENGINE_CoreFunctionType = 1

  type VIEWERMODE_RTDisplay_DB_Type
    Record_Used as integer
    Record_Syncd as integer
    Time$ as string
    Date$ as string
    Hole_Depth# as float
    Bit_Depth# as float
    ROP# as float
    WOB# as float
    Hookload as word
    RPM as word
    TripTank# as float
    BlockPosition# as float
    PVT# as float
    SPP as word
    FlowIn as word
    SPM1 as word
    SPM2 as word
    TotalGas# as float
    H2S# as float
  endtype
  `Note: CF1_Add_Mem_Record adds the push data to the VIEWERMODE DB every 8 seconds. 8*450=3600
  `      The database stores 24hrs worth of data. So 24*450=10800, plus 50 to spare memory overuns.
  #constant c_SMod_RTDis_DB_TtlRecs 10800
  #constant c_SMod_RTDis_DB_TtlRecsToDisplay 450
  dim VIEWERMODE_RTDisplay_DB(c_SMod_RTDis_DB_TtlRecs + 50) as VIEWERMODE_RTDisplay_DB_Type
  dim VIEWERMODE_RTDisplay_DB_HSViewCopy(c_SMod_RTDis_DB_TtlRecs + 50) as VIEWERMODE_RTDisplay_DB_Type
endif

` ---------------------------------------------------------------------------------------

Type DCB_Type
   DCBlength as dword
   BaudRate as dword
   fBinary as dword
   fParity as dword
   fOutxCtsFlow as dword
   fOutcDsrFlow as dword
   fDtrControl as dword
   fDsrSensitivity as dword
   fTXContinueONXoff as dword
   fOutX as dword
   fInX as dword
   fErrorChar as dword
   fNull as dword
   fRtsControl as dword
   fAbortOnError as dword
   fDummy as dword
   XonLim as word
   XoffLim as word
   ByteSize as byte
   Parity as byte
   StopBits as byte
   XonChar as byte
   XoffChar as byte
   ErrorChar as byte
   EofChar as byte
   EvtChar as byte
   wReservedl as word
endtype
global DCB as DCB_Type

Type SCShowDCB_Type
   DCBlength as dword
   BaudRate as dword
   fBinary as dword
   fParity as dword
   fOutxCtsFlow as dword
   fOutcDsrFlow as dword
   fDtrControl as dword
   fDsrSensitivity as dword
   fTXContinueONXoff as dword
   fOutX as dword
   fInX as dword
   fErrorChar as dword
   fNull as dword
   fRtsControl as dword
   fAbortOnError as dword
   fDummy as dword
   XonLim as word
   XoffLim as word
   ByteSize as byte
   Parity as byte
   StopBits as byte
   XonChar as byte
   XoffChar as byte
   ErrorChar as byte
   EofChar as byte
   EvtChar as byte
   wReservedl as word
endtype
global ShowScreen_DCB as SCShowDCB_Type
global g_ENGINE_ShowPortVariables as integer : g_ENGINE_ShowPortVariables = -1
global g_ENGINE_ShowPortVarTime$ as string
global g_ENGINE_ShowPort_Success as integer

type DLS_TIME_BREAKDOWN_CALC_Type
  Period_Start_ArrPos as integer
  Period_Start_Time$ as string
  Period_Start_Date$ as string
  Period_End_ArrPos as integer
  Period_End_Time$ as string
  Period_End_Date$ as string
  Time_Difference as integer
endtype
dim DLS_TIME_BREAKDOWN(100) as DLS_TIME_BREAKDOWN_CALC_Type
global g_DLS_TIME_BRKDOWN_Slctd_Day as integer
global g_DLS_TIME_BRKDOWN_Slctd_Month as integer

global g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_Converted$ as string
global g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_RAWUnconverted$ as string

global g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr as integer
global g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr as integer


`FULL TIME BREAKDOWN Variables - Delete? Might still be useful for losses calc, but is part of old system
type LOSS_CALC_FullTimeBreakdown_Type
  Period_Start_ArrPos as integer
  Period_Start_Time$ as string
  Period_Start_Date$ as string
  Period_End_ArrPos as integer
  Period_End_Time$ as string
  Period_End_Date$ as string
  Time_Difference as integer
endtype
#constant c_LOSS_CALC_FTB_MaxRecords 48
dim LOSS_CALC_FTB(c_LOSS_CALC_FTB_MaxRecords) as LOSS_CALC_FullTimeBreakdown_Type
global g_LOSS_CALC_FTB_IntervalsFound as integer : g_LOSS_CALC_FTB_IntervalsFound = -1
global g_LOSS_CALC_FTB_IntervalCalcPeriod_Minutes as integer : g_LOSS_CALC_FTB_IntervalCalcPeriod_Minutes = 60
  


`************************************************************
  ` Create System Tray Entry
  
  SysTrayMsg = lib_StartSysTray()
  lib_NiCommand(niadd)
  
    if g_ENGINE_CoreFunctionType = 1
      lib_TrayTipText("GDS Client: Running (As Viewer)")
    endif
    if g_ENGINE_CoreFunctionType = 2
      lib_TrayTipText("GDS Client: Running (Full Mudlogging Mode)")
    endif
    
  `global g_OS_Name$ as string : g_OS_Name$ = "Unknown OS Version Code"
  `lib_Get_OS_Type()
  ``TrayTip not supported in win95 or win 98, only win 2000 or more recent
  `if g_OS_Name$ <> ""
  `  if g_OS_Name$ = "Windows 2000" or g_OS_Name$ = "Windows XP" or g_OS_Name$ = "Windows 7"
  `    l_traytexttemp$ = "GDS Client Software (on " + g_OS_Name$ + ")"
  `    lib_TrayTipText(l_traytexttemp$)
  `  endif
  `endif
  
  lib_NiCommand(nifocus)
`************************************************************
  
  set window title "GDS Remote Data Service - Client"
    if g_ENGINE_CoreFunctionType = 1
      set window title "GDS Remote Data Service - Client (Viewer Mode)"
    endif
    if g_ENGINE_CoreFunctionType = 2
      set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Setup: MAIN_Program)"
    endif
  
  g_ENG_T1k = hitimer() + 1000
  g_ENG_THs = hitimer() + 500
   
  if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Setup: lib_SET_DISPLAY_MODE)"
    lib_SET_DISPLAY_MODE()
    
  if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Setup: lib_SetScreen_Windowed_FullScreen_p1or2)"  
    lib_SetScreen_Windowed_FullScreen_p1or2(2)
  
  
  set window title "GDS CLIENT STARTING, Please Wait. (Loading Database)"
  
  `Note: only load the database if CFType=2, if CFType=1 then the arrays for the Viewer Mode have been
  `dimensionalised and all data will come from the Server (no database is required to be loaded)
  if g_ENGINE_CoreFunctionType = 2
    
    `First check last startup date and time. If it was more than a week ago offer the user the chance to
    `start a new well.
    `lib_INITIALISE_Check_Last_DateAndTime()
    `NOTE: This is not done anymore, but the code has been left in in case it is needed in the future. It
    `      (lib_INITIALISE_Check_Last_DateAndTime) is just not called anymore. Instead starting a new
    `      well is handled through the right click context menu, which creates a backup and then creates
    `      a new well.
    
    `LOAD DATABASE
    ` Now load whatever database is present.
    ` Note: if g_PORTABLE_ENG_RunAs_VIEWER = 1 then the program is being run as the PORTABLE VIEWER
    `       and the user needs to select the Database file to be loaded. Else just run as normal
    `       and load whatever Database.dat file is in the Database Folder.
    
      if g_PORTABLE_ENG_RunAs_VIEWER = -1
        MOUNT_ELSE_CREATE_DATABASE()
      else
        MOUNT_ELSE_CREATE_DATABASE()
        `PORTABLE MODE LOAD DATABASE GUI SCREEN
      endif
  
  endif
  
  Main_program()
  
  end
  
`----FUNCTIONS START BELOW ------------------------------------------------------------------------  


function Check_For_Program_Instances()

  local l_Unique_Program_ID$ as string
  l_Unique_Program_ID$ = "e0d07920-ce0b-4d0c-a552-b9f8f15e09e8-e0d758420-ht0b-48hc-CLIENT1"

  `This function checks that there is only 1 instance of the program running, if there is
  `already one running then it informs the user and quite the program.

  make sysobj mutex 1, l_Unique_Program_ID$
  if try lock sysobj(1) = 0
    l_exit_condition = -1
    repeat
      cls
      print "Error: The GDS Client software is already running in another instance"
      sync
      if scancode() <> 0
        l_exit_condition = 1
      endif
    until l_exit_condition = 1
    end
  endif

	

endfunction

function Define_CURRENTLY_WORKING_ON()

// I need to have a look at the export data function and test it. Not sure if it works or what is
// going on with it:
// EXPORT_DATA_Handle()


endfunction

function Define_SUPER_SWITCHES()


  `SUPER SWITCHES
    `Data Logging Engine: On = 1, Off = -1
      global g_ENG_Logging_Active as integer : g_ENG_Logging_Active = 1
      global g_SYNC_Engine_Active as integer : g_SYNC_Engine_Active = -1
  	`Simulate WITS Data Toggle
    	global g_ENGINE_FAKE_WITS_DATA as integer : g_ENGINE_FAKE_WITS_DATA = -1

  `COMPILE AS SIMPLE VIEWER / PORTABLE VIEWER ONLY
    `NOTE: This turns the program into a PORTABLE VIEWER with Logging OFF
       global g_PORTABLE_ENG_OptionAtStartup as integer : g_PORTABLE_ENG_OptionAtStartup = 1
       
  `-----------------------


  `Comment System
    global g_ENG_CommentSystem_Active as integer : g_ENG_CommentSystem_Active = 1
  `Toggle Right Mouse Click Context Menu
    global g_INPUT_MSE_RGHTCLICKMENU_Active as integer : g_INPUT_MSE_RGHTCLICKMENU_Active = 1
  `Automatic Reconnect Client to Server Attempts Enable/Disable: On = 1, Off = -1
    global g_AUTO_CONNECT_ON as integer : g_AUTO_CONNECT_ON = -1
    global g_AUTO_CONNECT_CountdownPeriod as integer : g_AUTO_CONNECT_CountdownPeriod = 30
  `Boot straight into the Realtime Graphics Screens / System
    global g_BOOTUP_StartupOnRTScreen as integer : g_BOOTUP_StartupOnRTScreen = 1
      
      
endfunction

function Define_COMMS_WITH_SIMPLE_SERVER()

  global g_ENG_CLIENT_ID as integer
  
  global g_ENG_Send_RTData_To_SimpleServer_Timer as integer : g_ENG_Send_RTData_To_SimpleServer_Timer = timer()

endfunction

function Define_PROGRAMMING_Variables()

  `This function contained switches that turn on and off programming assistance tools.
  
  `WITS Port Data - Write 'c_Kernel32DLL, "ReadFile"' data to HD datafile per program loop
  global g_PROGSWITCH_Debug_WriteWITS_PortFile as integer : g_PROGSWITCH_Debug_WriteWITS_PortFile = 1


  `Test Variable Array Variables
    #constant c_TESTVAR_MaxView_Items 10 
    global g_TESTVAR_DisplayArr_Toggle as integer : g_TESTVAR_DisplayArr_Toggle = -1


endfunction

function Define_INPUT_LOCKDOWN_Variables()

  `This function stores, or shows, the variables that control INPUT FLOW.
  `They are used to toggle ignoring input code
  
  `To Control Input Flow on a specific screen type search for these line marker codes
    
  `SEARCH FOR THESE CODE MARKERS TO FIND THE POINTS IN THE CODE FOR INPUT FLOW CONTROL  
    
    `g_RCM_MSE_INPUT_Toggle
    `(Input Code Marker: )
  
  `CF1 / Core Function 1 / Viewer Mode
    `None Defined
    
    
  `CF2 / Core Function 2 / Mudlogging Mode
  
    `DRILLING SCREEN
      `Numpad Toggle: 26632
      `Time Period Buttons: 53728
      `Drilling Screen goto Pits Screen Button: 95542
      `System (F9) Button: 34281
      `Data Lists Button: 75526
      `Chart Data Click: 66473
      `Zero Time Button: 96381
      `Line Thickness Button: 16637
      `Goto Historical Screen Button: 34423
    
    `PITS SCREEN
      `Numpad Toggle: 66271
      `Time Period Buttons: 72347
      `System (F9) Button: 34281
      `Data Lists Button: 75526
      `Chart Data Click: 83263
      `Zero Time Button: 45321
      `Goto Drilling Screen Button: 34423
    
    `HISTORICAL SCREEN
      `Numpad Toggle: 
      `Time Buttons: 
      `Pits/Drilling Toggle Button: 
      `System (F9) Button: 34281 
      `Chart Data Click: 
  
  
  `INPUT FLOW: NUMPAD
  ` DS Screen: g_RANGES_Chart_Selected_Num (-1 if numpad not displayed, else stores index of channel)
  ` PITS Screen: g_PITS_NUMPAD_Selected_ChannelID (-1 if numpad not displayed)
  
  `INPUT FLOW: User CHANGE CHANNEL (I.e. Change which channel is being displayed on a chart)
  ` g_CHANNEL_ID_ChngChnl_Toggle (Valid: -1, 1)
  
  `INPUT FLOW: Data View Screen (Main breakdown screen, with tabs)
  ` g_ENG_DLS_ToggleScreenON (OFF: -1, OVERVIEW: 1, CALENDER: 2)
  
  `CHART INPUTS (STOP INPUTS TO DS AND PITS CHART INFO BOXES)
    `LOCKOUT Chart Info Boxes by setting this property to 1
      `Set the lockdown variable to force the Chart Info Boxes on the DS and PITS Screen to non responsive
      global g_LOCKOUT_ChartInfoBoxes as integer : g_LOCKOUT_ChartInfoBoxes = -1 
      
      
      
  `INPUT PAD LOCKOUTS (Should be usable by other functions as these are only enountered by the code
  `                    while running the INPUTPAD function, or closing it down).
    global g_LOCKOUT_INPUTPAD_TimePeriodButtons as integer : g_LOCKOUT_INPUTPAD_TimePeriodButtons = -1
    global g_LOCKOUT_INPUTPAD_ChartInfoBoxes as integer : g_LOCKOUT_INPUTPAD_ChartInfoBoxes = -1
    global g_LOCKOUT_INPUTPAD_DS_ChannelRanges as integer : g_LOCKOUT_INPUTPAD_DS_ChannelRanges = -1
    global g_LOCKOUT_INPUTPAD_PITS_ChannelRanges as integer : g_LOCKOUT_INPUTPAD_PITS_ChannelRanges = -1

endfunction

function Define_PORTABLE_VIEWER_Variables()

  `NOTE: The PORTABLE VIEWER flag (Super Switch) sets the program to run in a portable mode
  `      where it runs and asks to MOUNT a database file. It then opens the database file with
  `      all the normal functionality (add comments, save, scroll data etc). It creates a
  `      special User Settings file for all screen settings etc kept in a SINGLE file to
  `      keep everything clean, but still allow the user to save settings for next use.
  `      So its purpose is:
  `           1. To be portable
  `           2. To use a single file for settings, 
  `           3. Allow the user to select a database file to mount through a startup GUI
  `           4. Have things like engine logging disabled by default so as to act only like a viewer 


  global g_PORTABLE_ENG_RunAs_VIEWER as integer : g_PORTABLE_ENG_RunAs_VIEWER = -1

  global g_PORTABLE_ENG_WindowsBox_OpenFileName$ as string : g_PORTABLE_ENG_WindowsBox_OpenFileName$ = ""
  global g_PORTABLE_ENG_DispClientDBName$ as string : g_PORTABLE_ENG_DispClientDBName$ = ""

endfunction

function Define_DATA_LIST_SCREEN_Variables()

  `ENABLE/DISABLE the Data List Screen access button / functions
  global g_ENG_DLS_Enabled as integer : g_ENG_DLS_Enabled = 1


  `Main Toggle (Display DLS Screen ON/OFF)
  `g_ENG_DLS_ToggleScreenON (OFF: -1, OVERVIEW: 1, CALENDER: 2)
  global g_ENG_DLS_ToggleScreenON as integer : g_ENG_DLS_ToggleScreenON = -1
  
  `TABS
    `Remember that total tabs runs from zero, so 4 total tabes gives 0-5, i.e. 5 tabs
    #constant c_ENG_DLS_TAB_TotalTabs 0
      DLS_TABS(0).Tab_Text$ = "OVERVIEW"
      DLS_TABS(1).Tab_Text$ = "Depths"
      DLS_TABS(2).Tab_Text$ = "Losses"
      DLS_TABS(3).Tab_Text$ = "TAB3"
      
    
    `Current Active TAB Number (Note 1st TAB is array 0)
      global g_ENG_DLS_TAB_ActiveTab as integer : g_ENG_DLS_TAB_ActiveTab = 0
  
  `Mouse Input
    global g_ENG_DLS_MouseClick_LEFT as integer : g_ENG_DLS_MouseClick_LEFT = 1
    global g_ENG_DLS_TAB_MseClk_LEFT as integer : g_ENG_DLS_TAB_MseClk_LEFT = 1
  
  `RT Screens DLS Button Position
  #constant c_ENG_DLS_ButtonPos_X 796
  #constant c_ENG_DLS_ButtonPos_Y 730
  
  `CALCULATON VARIABLES
  
    `Overview Screen
    global g_DLS_DATA_StartTime$ as string
    global g_DLS_DATA_EndTime$ as string
    global g_DLS_DATA_StartDepth$ as string
    global g_DLS_DATA_EndDepth$ as string
    global g_DLS_DATA_StartRecord$ as string
    global g_DLS_DATA_EndRecord$ as string
    `
    global g_DLS_DATA_OnBottomTime$ as string
    global g_DLS_DATA_OnBottomTime_RotatingOnly$ as string
    global g_DLS_DATA_CirculatingTime$ as string
    global g_DLS_DATA_CirculatingTimePerPump$ as string
    global g_DLS_DATA_CircTimePerPump_GPMThreshold$ as string
    global g_DLS_DATA_CircTimePerPump_InputToggle as integer : g_DLS_DATA_CircTimePerPump_InputToggle = -1
    global g_DLS_DATA_RotatingTime$ as string
    
    
    
    
    global g_DLS_DATA_Ttl_RT_Revs as integer : `Rotary Table Revolutions as integer (for use in other functions)
    global g_DLS_DATA_Ttl_RT_Revs_ON_BOTTOM_ONLY as integer
    global g_DLS_DATA_Total_RT_Revs$ as string : `Rotary Table Revolutions as string
    global g_DLS_DATA_Total_RT_Revs_ON_BOTTOM_ONLY$ as string
    `
    global g_DLS_DATA_Total_MM_Revs$ as string : `ALL Mud Motor Revolutions (mud motor factor required)
    global g_DLS_DATA_Total_MM_Revs_ON_BOTTOM_ONLY$ as string : `ALL Mud Motor Revolutions ON BOTTOM ONLY (mud motor factor required)
    `
    global g_DLS_DATA_Combined_RT_MM_Revs_ALL$ as string
    global g_DLS_DATA_Combined_RT_MM_Revs_ON_BOTTOM_ONLY$ as string
    `
    global g_DLS_DATA_Total_SPM1_Minutes# as float
    global g_DLS_DATA_Total_SPM2_Minutes# as float
    global g_DLS_DATA_Total_SPM3_Minutes# as float
    
    global g_DLS_DATA_Total_SPM1_Minutes_OnBottom# as float
    global g_DLS_DATA_Total_SPM2_Minutes_OnBottom# as float
    global g_DLS_DATA_Total_SPM3_Minutes_OnBottom# as float

endfunction

function Define_MSE_INPUT_RightClick_ContextMenus()

  `Define Variables for the Right Mouse Click Menu (RCM)
  `The graphic user interface, context sensitive, activated by right mouse click on a screen
  
  global g_RCM_Left_MouseClick as integer : g_RCM_Left_MouseClick = -1

  global g_RCM_MSE_INPUT_Toggle as integer : g_RCM_MSE_INPUT_Toggle = -1
  global g_INPUT_MSE_RGHTCLICKMENU_Screen_X as integer : g_INPUT_MSE_RGHTCLICKMENU_Screen_X = 0
  global g_INPUT_MSE_RGHTCLICKMENU_Screen_Y as integer : g_INPUT_MSE_RGHTCLICKMENU_Screen_Y = 0

  global g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected as integer : g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected = -1
  global g_INPUT_MSE_RGHTCLICKMENU_L1_Print_PosX as integer
  global g_INPUT_MSE_RGHTCLICKMENU_L1_Print_PosY as integer

  `Lock all other input if the Rightclick context menu is active
  global g_INPUT_MSE_RGHTCLICKMENU_LockdownOtherInputs as integer : g_INPUT_MSE_RGHTCLICKMENU_LockdownOtherInputs = -1

  `2nd Menu Layer Variables
  #constant c_INPUT_MSE_RGHTCLICKMENU_Layer2ON_Timer 450
  #constant c_INPUT_MSE_RGHTCLICKMENU_L2_ImgWidth 210
  global g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE as integer : g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = -1
  global g_INPUT_MSE_RGHTCLICKMENU_L2_SelectedMenuItem as integer : g_INPUT_MSE_RGHTCLICKMENU_L2_SelectedMenuItem = -1
  global g_INPUT_MSE_RGHTCLICKMENU_L2_DisplayTimer as integer : g_INPUT_MSE_RGHTCLICKMENU_L2_DisplayTimer = timer()
  global g_INPUT_MSE_RGHTCLICKMENU_L2_PosX as integer
  global g_INPUT_MSE_RGHTCLICKMENU_L2_PosY as integer
  global g_INPUT_MSE_RGHTCLICKMENU_L2_MouseYPos as integer

  `Menu Structure
  dim INPUT_MSE_RGHTCLICKMENU_MenuText$(50, 50) as string
  dim INPUT_MSE_RGHTCLICKMENU_MenuText_Code$(50, 50) as string
  dim INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(50) as integer
  dim INPUT_MSE_RGHTCLICKMENU_Layer2Menu_YSize_Pixels(50) as integer
  
  dim INPUT_MSE_RGHTCLICKMENU_MenuItemEnabled(50, 50) as integer
  
  #constant c_INPUT_MSE_RGHTCLICKMENU_TotalGroups 6
  
    `INPUT_MSE_RGHTCLICKMENU_MenuText$ 0:=Title 1-50: Menu Entries 
    `INPUT_MSE_RGHTCLICKMENU_MenuText_Code$ = Each item passes an individual code to the action function so that
    `                                         each items order can be changed without needing to recode how
    `                                         it creates an action (Format: Something name related)
  
    `YSize in Pixels =  10 (Above) + (25 x Number of Items) + 15 (below)
  
    `Group 1 - Well Database
      INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(1) = 2
      INPUT_MSE_RGHTCLICKMENU_Layer2Menu_YSize_Pixels(1) = 10 + (INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(1) * 25) + 15
      INPUT_MSE_RGHTCLICKMENU_MenuText$(1, 0) = "Well Database"
      INPUT_MSE_RGHTCLICKMENU_MenuText$(1, 1) = "Backup the Well Database"
        INPUT_MSE_RGHTCLICKMENU_MenuText_Code$(1,1) = "RCM_BackupDatabase"
        INPUT_MSE_RGHTCLICKMENU_MenuItemEnabled(1,1) = 1
      INPUT_MSE_RGHTCLICKMENU_MenuText$(1, 2) = "Start a new well"
        INPUT_MSE_RGHTCLICKMENU_MenuText_Code$(1,2) = "RCM_CreateNewWell"
        INPUT_MSE_RGHTCLICKMENU_MenuItemEnabled(1,2) = 1
        
    `Group 2 - Well Data
      INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(2) = 1
      INPUT_MSE_RGHTCLICKMENU_Layer2Menu_YSize_Pixels(2) = 10 + (INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(2) * 25) + 15
      INPUT_MSE_RGHTCLICKMENU_MenuText$(2, 0) = "Well Data"
      INPUT_MSE_RGHTCLICKMENU_MenuText$(2, 1) = "Edit Well Data"
        INPUT_MSE_RGHTCLICKMENU_MenuText_Code$(2,1) = "RCM_EditWellData"
        INPUT_MSE_RGHTCLICKMENU_MenuItemEnabled(2,1) = 1
        
    `Group 3 - Export Time Data
      INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(3) = 1
      INPUT_MSE_RGHTCLICKMENU_Layer2Menu_YSize_Pixels(3) = 10 + (INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(3) * 25) + 15
      INPUT_MSE_RGHTCLICKMENU_MenuText$(3, 0) = "Export Time Data"
      INPUT_MSE_RGHTCLICKMENU_MenuText$(3, 1) = "Export a Time Data range"
        INPUT_MSE_RGHTCLICKMENU_MenuText_Code$(3,1) = "RCM_ExportTimeData"
        INPUT_MSE_RGHTCLICKMENU_MenuItemEnabled(3,1) = -1
        
    `Group 4 - Internet Syncing
      INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(4) = 1
      INPUT_MSE_RGHTCLICKMENU_Layer2Menu_YSize_Pixels(4) = 10 + (INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(4) * 25) + 15
      INPUT_MSE_RGHTCLICKMENU_MenuText$(4, 0) = "Internet Syncing"
      INPUT_MSE_RGHTCLICKMENU_MenuText$(4, 1) = "Toggle Auto-Connect"
        INPUT_MSE_RGHTCLICKMENU_MenuText_Code$(4,1) = "RCM_ToggleAutoConnect"
        INPUT_MSE_RGHTCLICKMENU_MenuItemEnabled(4,1) = 1

        
    `Group 5 - Program Settings
      INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(5) = 1
      INPUT_MSE_RGHTCLICKMENU_Layer2Menu_YSize_Pixels(5) = 10 + (INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(5) * 25) + 15
      INPUT_MSE_RGHTCLICKMENU_MenuText$(5, 0) = "Settings"
      INPUT_MSE_RGHTCLICKMENU_MenuText$(5, 1) = "Toggle Units"
        INPUT_MSE_RGHTCLICKMENU_MenuText_Code$(5,1) = "RCM_ToggleUnits"
        INPUT_MSE_RGHTCLICKMENU_MenuItemEnabled(5,1) = 1
        
        
    `Group 6 - Print / Create Time Based Screen Composite JPG/BMP
      INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(6) = 2
      INPUT_MSE_RGHTCLICKMENU_Layer2Menu_YSize_Pixels(6) = 10 + (INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(6) * 25) + 15
      INPUT_MSE_RGHTCLICKMENU_MenuText$(6, 0) = "Print to Image"
      INPUT_MSE_RGHTCLICKMENU_MenuText$(6, 1) = "Print to Image (With Comments)"
        INPUT_MSE_RGHTCLICKMENU_MenuText_Code$(6,1) = "RCM_Print_To_Image_CmntYes"
        INPUT_MSE_RGHTCLICKMENU_MenuItemEnabled(6,1) = 1
      INPUT_MSE_RGHTCLICKMENU_MenuText$(6, 2) = "Print to Image (No Comments)"
        INPUT_MSE_RGHTCLICKMENU_MenuText_Code$(6,2) = "RCM_Print_To_Image_CmntNo"
        INPUT_MSE_RGHTCLICKMENU_MenuItemEnabled(6,2) = 1
        

    global g_MSE_RGHTCLICKMENU_MSGBOX_Pos_OldX as integer
    global g_MSE_RGHTCLICKMENU_MSGBOX_Pos_OldY as integer
    global g_MSE_RGHTCLICKMENU_MSGBOX_MouseClick as integer : g_MSE_RGHTCLICKMENU_MSGBOX_MouseClick = -1
    global g_MSE_RGHTCLICKMENU_MSGBOX_L2BkgdImg_OldXPos as integer
    global g_MSE_RGHTCLICKMENU_MSGBOX_L2BkgdImg_OldYPos as integer


    global g_MSE_RGHTCLICKMENU_MSGBOX_Message1$ as string
    global g_MSE_RGHTCLICKMENU_MSGBOX_Message2$ as string
    global g_MSE_RGHTCLICKMENU_MSGBOX_OldDBDelete$ as string
    global g_MSE_RGHTCLICKMENU_MSGBOX_NewDBCreate$ as string
    


    `TOGGLE Switches for Right Context Menu Actions
    
      `Note: g_RCM_ACTIONMENU_GlobalToggle is used only to hold the state of the action menu
      `      so that underlying controls can still be locked out. It is set when ANY action is running, and turned
      `      off at the same time as the action is turned off.
    
      global g_RCM_ACTIONMENU_GlobalToggle as integer : g_RCM_ACTIONMENU_GlobalToggle = -1
      global g_RCM_ACTIONMENU_Deactivate as integer : g_RCM_ACTIONMENU_Deactivate = -1
      global g_RCM_ACTION_Toggle_AnActionIsActive as integer : g_RCM_ACTION_Toggle_AnActionIsActive = -1
    
      `Group 1 - Well Database
        global g_RCM_ACTION_Toggle_BackupDatabase as integer : g_RCM_ACTION_Toggle_BackupDatabase = -1
        global g_RCM_ACTION_Toggle_CreateNewWell as integer : g_RCM_ACTION_Toggle_CreateNewWell = -1
      `Group 2 - Well Data
        global g_RCM_ACTION_Toggle_EditWellData as integer : g_RCM_ACTION_Toggle_EditWellData = -1
      `Group 3 - Export Time Data
      `Group 4 - Internet Syncing
        global g_RCM_ACTION_Toggle_SyncENGINE as integer : g_RCM_ACTION_Toggle_SyncENGINE = -1
        global g_RCM_ACTION_Toggle_AutoReconnect as integer : g_RCM_ACTION_Toggle_AutoReconnect = -1
      `Group 5 - Program Settings
        global g_RCM_ACTION_Toggle_ToggleUnits as integer : g_RCM_ACTION_Toggle_ToggleUnits = -1

endfunction

function Define_MSE_INPUT_RightClick_FuncVars()

  `This function contains the variables specific to the different Functions activated
  `through the Right Mouse Click Menus


  `Group 1 - Well Database
    `Start New Well
      global g_RCM_G1_MSGBOX_StartNewWellInputStage as integer : g_RCM_G1_MSGBOX_StartNewWellInputStage = -1
      global g_RCM_G1_MSGBOX_StartNewWellMouseclick as integer : g_RCM_G1_MSGBOX_StartNewWellMouseclick = 1
    `Backup Well
      global g_RCM_G1_MSGBOX_BkUpFilename$ as string
      global g_RCM_G1_MSGBOX_BkUpPath$ as string
      global g_RCM_G1_MSGBOX_BkUpPath_Filename$ as string
      global g_RCM_G1_MSGBOX_BkUpPath_FilenamePart$ as string
    
  `Group 2 - Well Data
    `Edit Well Data
      global g_RCM_G2_WellData_Stage as integer : g_RCM_G2_WellData_Stage = -1
      global g_RCM_G2_WellData_EditType as integer : g_RCM_G2_WellData_EditType = -1
  
  `Group 3 - Export Time Data
  `Group 4 - Internet Syncing
  `Group 5 - Program Settings






endfunction

function Define_ENGINE_External_Variables()

  `External Variables loaded from the ENGINE_ExternalVariables.txt file

  `FPS Limiter
  global g_ENG_EXTVAL_FPSFrameLimiter_Toggle as integer : g_ENG_EXTVAL_FPSFrameLimiter_Toggle = 1
  global g_ENG_EXTVAL_FPSFrameLimiter_Value as integer : g_ENG_EXTVAL_FPSFrameLimiter_Value = 12
  
  `Propersleep Engine Counter (Propersleep every X number of program cycles)
  global g_ENG_EXTVAL_ProperSleep_Counter as integer : g_ENG_EXTVAL_ProperSleep_Counter = 0
  global g_ENG_EXTVAL_ProperSleep_OnCycleNum as integer : g_ENG_EXTVAL_ProperSleep_OnCycleNum = 20

endfunction

function Define_DEBUG_Variables()

  `Note: This function should be kept as the first variable definition function
  global g_DEBUG_TempVar_INT1 as integer
  global g_DEBUG_TempVar_INT2 as integer
  global g_DEBUG_TempVar_INT3 as integer
  global g_DEBUG_TempVar_INT4 as integer
  global g_DEBUG_TempVar_INT5 as integer  
  
  global g_DEBUG_TempVar_STR1$ as string
  global g_DEBUG_TempVar_STR2$ as string
  
  global g_DEBUG_MEMDB_Edit_CopyAboveCell_Toggle as integer : g_DEBUG_MEMDB_Edit_CopyAboveCell_Toggle = -1
  global g_DEBUG_MEMDB_Edit_CopyAboveLine_Toggle as integer : g_DEBUG_MEMDB_Edit_CopyAboveLine_Toggle = -1
  global g_DEBUG_MEMDB_Edit_CopyAboveCell_To_EOP as integer : g_DEBUG_MEMDB_Edit_CopyAboveCell_To_EOP = -1
  
  global g_DEBUG_VAR_Function_RunOnlyOnce as integer : g_DEBUG_VAR_Function_RunOnlyOnce = -1
  global g_DEBUG_VAR_Function_RunOnlyOnce_KeyPres as integer : g_DEBUG_VAR_Function_RunOnlyOnce_KeyPres = -1
  
  `Use an external variable for quick testing (no full recompile just to change a variable)
  global g_DEBUG_UseExternalVariable as integer : g_DEBUG_UseExternalVariable = -1

  global g_DEBUG_ExternalValue# as float : g_DEBUG_ExternalValue# = 0.0
  
  `LAST BITMAP CREATION TIMERS (Store how long it took to draw the screen charts)
    global g_DEBUG_ChartDrawTimerBreakdown_Toggle as integer : g_DEBUG_ChartDrawTimerBreakdown_Toggle = -1
    `Total Time
      global g_DEBUG_DSCharts_UpdateTime_Start as integer
      global g_DEBUG_PITSCharts_UpdateTime_Start as integer
      global g_DEBUG_DSCharts_UpdateTimeInMS as integer
      global g_DEBUG_HSCharts_UpdateTimeInMS as integer
      global g_DEBUG_PITSCharts_UpdateTimeInMS as integer
    `Individual Process Times
      `DS
      global g_DEBUG_DSCharts_UpdateTime_Block1 as integer
      global g_DEBUG_DSCharts_UpdateTime_Block2 as integer
      global g_DEBUG_DSCharts_UpdateTime_Block3 as integer
        `Block 1
           global g_DEBUG_DSCharts_UpdateTime_Block1_Memblock as integer
           global g_DEBUG_DSCharts_UpdateTime_Block1_WriteData as integer
           global g_DEBUG_DSCharts_UpdateTime_Block1_GetImage as integer
        `Block 2
           global g_DEBUG_DSCharts_UpdateTime_Block2_Memblock as integer
           global g_DEBUG_DSCharts_UpdateTime_Block2_WriteData as integer
           global g_DEBUG_DSCharts_UpdateTime_Block2_GetImage as integer
        `Block 3
           global g_DEBUG_DSCharts_UpdateTime_Block3_Memblock as integer
           global g_DEBUG_DSCharts_UpdateTime_Block3_WriteData as integer
           global g_DEBUG_DSCharts_UpdateTime_Block3_GetImage as integer
      `HS         
      global g_DEBUG_HS_UpdateTime_UpdateTimeInMS as integer
      `PITS
      global g_DEBUG_PITSCharts_UpdateTime_Block1 as integer
      global g_DEBUG_PITSCharts_UpdateTime_Block2 as integer
      global g_DEBUG_PITSCharts_UpdateTime_Block3 as integer
      global g_DEBUG_PITSCharts_UpdateTime_Block4 as integer
        `Block 1
           global g_DEBUG_PITSCharts_UpdateTime_Block1_Memblock as integer
           global g_DEBUG_PITSCharts_UpdateTime_Block1_WriteData as integer
           global g_DEBUG_PITSCharts_UpdateTime_Block1_GetImage as integer
        `Block 2
           global g_DEBUG_PITSCharts_UpdateTime_Block2_Memblock as integer
           global g_DEBUG_PITSCharts_UpdateTime_Block2_WriteData as integer
           global g_DEBUG_PITSCharts_UpdateTime_Block2_GetImage as integer
        `Block 3
           global g_DEBUG_PITSCharts_UpdateTime_Block3_Memblock as integer
           global g_DEBUG_PITSCharts_UpdateTime_Block3_WriteData as integer
           global g_DEBUG_PITSCharts_UpdateTime_Block3_GetImage as integer  
        `Block 4
           global g_DEBUG_PITSCharts_UpdateTime_Block4_Memblock as integer
           global g_DEBUG_PITSCharts_UpdateTime_Block4_WriteData as integer
           global g_DEBUG_PITSCharts_UpdateTime_Block4_GetImage as integer 
      
      

endfunction

function DEFINE_RC4_Encryption()

	global IntLength As Integer
	global l_cipherby As Dword
	
	global l_j As Dword
	global l_i As Dword
	
	`global a1 As Dword
	`global a2 as dword
	
	global g_RC4_INPUT_EnDeCrypt_This_Str$ as string
	global g_RC4_OUTPUT_Final_EnDeCrypt$ as string
	
	global g_RC4_Password_Built_From_Table$ as string : g_RC4_Password_Built_From_Table$ = ""
	
	`This password variable is created by calling the 
	global g_RC4_FinalBuiltPassword_Seq$ as string
	global g_RC4_PasswordTable_RND_Value1 as integer
	global g_RC4_PasswordTable_RND_Value2 as integer
	global g_RC4_PasswordTable_RND_Value3 as integer
	global g_RC4_PasswordTable_RND_Value4 as integer
	global g_RC4_PasswordTable_RND_Value5 as integer

endfunction

function Define_PASSWORDS()

  global g_ENGINE_PASSWORD_InstallationCFModeMLS$ as string
  g_ENGINE_PASSWORD_InstallationCFModeMLS$ = "mudlogging"

endfunction

function Define_Variables()

  `GENERAL 1 SECOND FLASH TIMER - CAN BE USED BY ANYTHING TO MAKE ANYTHING TOGGLE EVERY SECOND
  `NOTE: This is handled in the main program loop, so is completely global.
  global g_GENERAL_1SEC_ON_OFF_TIMER as integer : g_GENERAL_1SEC_ON_OFF_TIMER = timer()
  global g_GENERAL_1SEC_ON_OFF_TOGGLE as integer : g_GENERAL_1SEC_ON_OFF_TOGGLE = -1
  
  global g_GENERAL_1SEC_ON_HalfSecOFF_TIMER as integer : g_GENERAL_1SEC_ON_HalfSecOFF_TIMER = timer()
  global g_GENERAL_1SEC_ON_HalfSecOFF_TOGGLE as integer : g_GENERAL_1SEC_ON_HalfSecOFF_TOGGLE = -1

  `Windowed/Fullscreen Toggle - : Fullscreen windowed = 1   window with titlebar = 2
  global g_Window_Fullscreen_Toggle as integer : g_Window_Fullscreen_Toggle = 1  
  
  global g_ENGINE_FAKE_WITS_DATA_Timer as integer : g_ENGINE_FAKE_WITS_DATA_Timer = timer()
  
  `Note: lib_SetScreen_Windowed_FullScreen_p1or2 sets windowed at this point so it loads in a Window
  `      fullscreen is activated later through lib_SetScreen_Windowed_FullScreen_p1or2(2).
  lib_SetScreen_Windowed_FullScreen_p1or2(1)
  
  `SOFTWARE CORE FUNCTIONALITY SWITCHING
  `Note: 1=Viewer Mode, 2=MLS Mode
  global g_ENGINE_CoreFunctionType as integer : g_ENGINE_CoreFunctionType = -1
    `CF2 Screen mode toggle - Drilling/Historical Screen
    global g_ENGINE_HIST_DRILL_Screen_Routing as integer : g_ENGINE_HIST_DRILL_Screen_Routing = 1 : `1=DS, 3=PITS

  `ENGINE MEM DB Size in days
  global g_ENGINE_MEMDB_Runtime_DAYS as integer : g_ENGINE_MEMDB_Runtime_DAYS = -999
  
  `When transmitting Database records (appears on charts - not the realtime data) from the Client to the Server
  `send either the FULL number of records (all records, inc pits etc etc), or REDUCED number of records
  `(just the original ones from when the prog was designed just to transmit a smaller number of records
  `to keep the bandwidth use to a minimum)- Set to 1 here as that should be the NULL, but loaded in ENGINE_Setup
  `NOTE: Full = 1, Reduced = 2
  global g_ClientSerTransmitDB_Full1OrReduced2 as integer : g_ClientSerTransmitDB_Full1OrReduced2 = 1
  
  `Automatic Database Backups - Date based, will be performed if the date changes.
  global g_AUTO_MIDNIGHTBACKUP_Date$ as string : g_AUTO_MIDNIGHTBACKUP_Date$ = get date$()
  global g_AUTO_MIDNIGHTBACKUP_InfoImg_Msg1$ as string : g_AUTO_MIDNIGHTBACKUP_InfoImg_Msg1$ = ""
  global g_AUTO_MIDNIGHTBACKUP_DispInfoImg as integer : g_AUTO_MIDNIGHTBACKUP_DispInfoImg = -1
  global g_AUTO_MIDNIGHTBACKUP_InfoImg_Timer as integer : g_AUTO_MIDNIGHTBACKUP_InfoImg_Timer = timer()
  global g_AUTO_MIDNIGHTBACKUP_AlphaFade_Timer as integer : g_AUTO_MIDNIGHTBACKUP_AlphaFade_Timer = timer()
  global g_AUTO_MIDNIGHTBACKUP_AlphaFade_Val as integer : g_AUTO_MIDNIGHTBACKUP_AlphaFade_Val = -1
  

  `+\- Keys : UP/DOWN Change Mouse Wheel Scroll Rates (Depends on which screen is active Realtime/Command Console Database Viewers)
  global g_MSEWHL_AdjSensitivity_DEC_Timer as integer : g_MSEWHL_AdjSensitivity_DEC_Timer = timer()
  global g_MSEWHL_AdjSensitivity_INC_Timer as integer : g_MSEWHL_AdjSensitivity_INC_Timer = timer()
  global g_MSEWHL_AdjSensitivity_Amount# as float : g_MSEWHL_AdjSensitivity_Amount# = 1.0

  
  `UK or US Date Settings (UK:1, US:2)
  global g_UK_or_USA_Settings as integer : g_UK_or_USA_Settings = 1
  
  global g_ENG_WITS_PurgePort_PortCleared as integer : g_ENG_WITS_PurgePort_PortCleared = -999
  global g_ENG_WITS_PurgePort_LastDataAtTimer as integer : g_ENG_WITS_PurgePort_LastDataAtTimer = timer()
  
  global g_ENG_CAPSLOCK_CheckStateTimer as integer : g_ENG_CAPSLOCK_CheckStateTimer = timer() : `We dont need to check every program loop
  
  `CF1 (Viewer Mode) HS Screen Start Array Plot Position
  global g_ENG_CF1_HS_StartPlotArrPntr as integer : g_ENG_CF1_HS_StartPlotArrPntr = -1
  
  global g_ENG_WitsFailedRTGraphicFlashTimer as integer : g_ENG_WitsFailedRTGraphicFlashTimer = timer()
  global g_ENG_WitsFailedRTGraphicFlashToggle as integer : g_ENG_WitsFailedRTGraphicFlashToggle = -1
  
  global g_ENG_DataLoggingDisabledRTGraphicFlashTimer as integer : g_ENG_DataLoggingDisabledRTGraphicFlashTimer = timer()
  global g_ENG_DataLoggingDisabledRTGraphicFlashToggle as integer : g_ENG_DataLoggingDisabledRTGraphicFlashToggle = -1
  
  `STARTUP - Check date and time to automatically offer to start a new well if >1 week has passed since last run
  global g_INITFunc_ProgLastRun_Date$ as string
  global g_INITFunc_ProgLastRun_Time$ as string
  global g_INITFunc_ProgLastRun_TotalTime as integer
    `Force the server to create a new database in response to option from too much time since prog last run
    global g_INITFunc_ProgLastRun_ForceServerNewDatabase as integer : g_INITFunc_ProgLastRun_ForceServerNewDatabase = -1
    global g_INITFunc_ProgLastRun_ForceServerTimer as integer : g_INITFunc_ProgLastRun_ForceServerTimer = timer()
    global g_INITFunc_ProgLastRun_ForceServerTtlReqMade as integer : g_INITFunc_ProgLastRun_ForceServerTtlReqMade = 0
    #constant c_INITFunc_ProgLastRun_ForceServerInitTme 20
    global g_INITFunc_ProgLastRun_ForceServerCounter as integer : g_INITFunc_ProgLastRun_ForceServerCounter = 0
    
    global g_lib_BACKUP_Local_Database_Result as integer
  
  `SYSTEM (ENGINE) COLOURS
  global g_ENGINE_COLOUR_Black as dword : g_ENGINE_COLOUR_Black = rgb(0,0,0)
  global g_ENGINE_COLOUR_GreyedOutText as dword : g_ENGINE_COLOUR_GreyedOutText = rgb(109,109,109)
  global g_ENGINE_COLOUR_White as dword : g_ENGINE_COLOUR_White = rgb(255,255,255)
  global g_ENGINE_COLOUR_Green as dword : g_ENGINE_COLOUR_Green = rgb(0,255,0)
  global g_ENGINE_COLOUR_Red as dword : g_ENGINE_COLOUR_Red = rgb(255,0,0)
  global g_ENGINE_COLOUR_DataBlue as dword : g_ENGINE_COLOUR_DataBlue = rgb(0, 0, 128)
  global g_ENGINE_COLOUR_TimeAndDateText as dword : g_ENGINE_COLOUR_TimeAndDateText = rgb(0, 0, 128)
  global g_ENG_COLOUR_NoEditWh as dword : g_ENG_COLOUR_NoEditWh = rgb(190,190,190)
  

  global g_ENGINE_ScreenRefreshLimit_Timer as integer : g_ENGINE_ScreenRefreshLimit_Timer = timer() 
    
  `RT Display Chart Dimensions
  global g_ENG_RTChart_Height as integer
  global g_ENG_RTChart_Width as integer 
    
  `Units
    `Units - 1=ft, 2=m
    global g_ENGINE_UNITS_FT_or_M as integer : g_ENGINE_UNITS_FT_or_M = -1
 
  `Swap the day and month format (US/UK) due to [get date$] outputting in US format on the Operating System
  global g_ENGINE_SwapDayMonthFormat as integer
  
  `Menu F8 connect to server flash
  global g_MENU_F8Connect_Timer as integer : g_MENU_F8Connect_Timer = timer()
  global g_MENU_F8Connect_Toggle as integer : g_MENU_F8Connect_Toggle = -1
 
  `RT Display EXIT BOX (Y/N Question Box)
  global g_RTDispEXITBOX_TOGGLE as integer : g_RTDispEXITBOX_TOGGLE = -1
  global g_RTDispEXITBOX_MOVE_MouseClickHOLD as integer : g_RTDispEXITBOX_MOVE_MouseClickHOLD = -1
  global g_RTDispEXITBOX_MOVE_Old_MseX as integer : g_RTDispEXITBOX_MOVE_Old_MseX = mousex()
  global g_RTDispEXITBOX_MOVE_Old_MseY as integer : g_RTDispEXITBOX_MOVE_Old_MseY = mousey()
  global g_RTDispEXITBOX_PosX as integer
  global g_RTDispEXITBOX_PosY as integer
  global g_RTDispEXITBOX_HighlightYorN as integer : g_RTDispEXITBOX_HighlightYorN = -1
 
  `Monitor Data Transfer Rates
  #constant c_DataTCalcInt 2
  global g_ENG_DataTransfer_Total as integer
  global g_ENG_DataTransfer_Rate_Next_Calc as integer
  global g_ENG_DataTransfer_Rate# as float
  
  global g_ENG_LastServerMSG_Date$ as string : g_ENG_LastServerMSG_Date$ = ""
  global g_ENG_LastServerMSG_Time$ as string : g_ENG_LastServerMSG_Time$ = ""
  
  `Windowed/FullScreen (with return to old window size) using double tap [`] key (below ESC key)
  `Double Tap Fullscreen variables
  global g_DTFULLSCREEN_Toggle as integer : g_DTFULLSCREEN_Toggle = 1
  global g_DTFULLSCREEN_Timer as integer : g_DTFULLSCREEN_Timer = timer()
  #constant c_DTFULLSCREEN_TapSpeed 300
  
  `Autodetect Screen Resolution
  global g_AUTODETECT_ScreenRES_Name$ as string
  global g_AUTODETECT_ScreenRES_Width as integer
  global g_AUTODETECT_ScreenRES_Height as integer
  
  `Double Tap Fullscreen variables
  global g_DTRESOLUTION_Toggle as integer : g_DTRESOLUTION_Toggle = 1
  global g_DTRESOLUTION_Timer as integer : g_DTRESOLUTION_Timer = timer()
  #constant c_DTRESOLUTION_TapSpeed 300

  `Global Engine variable for building an input string
  global g_ENGINE_Input$ as string
  global g_ENGINE_InputNumbersOnly$ as string
  global g_ENGINE_InputSTARS$ as string
  global g_ENGINE_SYNC_COUNTER as integer : g_ENGINE_SYNC_COUNTER = 0
  
  global g_ENG_FrntScrn_DBLoggingOFF_Timer as integer : g_ENG_FrntScrn_DBLoggingOFF_Timer = timer()
  global g_ENG_FrntScrn_DBLoggingOFF_Toggle as integer : g_ENG_FrntScrn_DBLoggingOFF_Toggle = -1

  `Loop exit variables - used in lib_LOOP_EXIT()
  global g_LPEXIT_Keystate as integer
  global g_LPEXIT_Mousestate as integer
  
 `SCREEN VARIABLES
    global g_DISPLAY_DatabaseScreenType as integer : g_DISPLAY_DatabaseScreenType = 1
    global g_DISPLAY_SerialInfoScreenType as integer : g_DISPLAY_SerialInfoScreenType = 1
    
    global g_DISPLAY_Debug_DispVars_ScreenType as integer : g_DISPLAY_Debug_DispVars_ScreenType = 1

  global g_ENGINE_ERROR_DWORD_Code as dword : g_ENGINE_ERROR_DWORD_Code = 0
  
  global g_PROGRAM_Start_Time$ as string : g_PROGRAM_Start_Time$ = get time$()
  
  global g_PROGRAM_Start_Date$ as string
  
  global g_ENGINE_First_Runtime as integer : g_ENGINE_First_Runtime = -999
  global g_ENGINE_ProgrammerMODE as integer : g_ENGINE_ProgrammerMODE = -999
  global g_ENGINE_RTIntGadgets as integer : g_ENGINE_RTIntGadgets = -999

  `Date in UK Format  
  g_PROGRAM_Start_Date$ = right$(left$(get date$(), 5), 2) + "\" + left$(get date$(), 2) + "\" + right$(get date$(), 2)

  global g_Already_Transmitted_To_Server_This_Program_Loop as integer
  
  global g_SYSTRAY_Update_Data$ as string
  
  global g_CONNECTED_To_IP_Address$ as string : g_CONNECTED_To_IP_Address$ = ""
  global g_CONNECTED_To_Port as integer : g_CONNECTED_To_Port = -1
  
 

  `Control the screen flow - 1=Main Screen, 2=Mem Database, 3=HD Database, 4=WITS Port
  global g_MAIN_SCREEN_TYPE as integer : g_MAIN_SCREEN_TYPE = 1

  global g_EXIT_Client_Toggle as integer : g_EXIT_Client_Toggle = -1
  
  global g_ExitProgMouseState as integer : g_ExitProgMouseState = -1
  
  `HOST SERVER VARIABLES
  global g_ClientsideHOST_IP_Address$ as string : g_ClientsideHOST_IP_Address$ = ""
  global g_Last_Msg_From_AUClient$ as string
  
  `MESSAGING VARIABLES
  global g_Last_Msg_From_Server$ as string
  global g_Last_Msg_Relayed_From_AUTH_CLIENT_Via_Server$ as string
  
  `Attempt to connect to server
  global g_connection_attempt_interval as integer : g_connection_attempt_interval = 30
  global g_connection_attempt_timer as integer : g_connection_attempt_timer = g_TIMER_1
  global g_connection_attempt_counter as integer : g_connection_attempt_counter = g_connection_attempt_interval
  global g_connection_attempt_total_time as integer
  global g_Establish_Relationship_Timer as integer
  global g_connection_attempt_ATTEMPT_NOW as integer : g_connection_attempt_ATTEMPT_NOW = -1

  `Initial Connection Variables
  global g_server_connected as integer : g_server_connected = 0
  global g_initial_test_message$ as string
  global g_server_assigned_client_ID as integer
  `
  global g_server_authorised_wits_transmission as integer : g_server_authorised_wits_transmission = -1
  global g_server_relationship_code as integer
  global g_Relationship_Request_Timer as integer : g_Relationship_Request_Timer = timer()
  global g_server_relationship_data_received as integer
  
  global g_EXITBOX_YesButtonClicked_Toggle as integer : g_EXITBOX_YesButtonClicked_Toggle = -1
  global g_EXITBOX_NoButtonClicked_Toggle as integer : g_EXITBOX_NoButtonClicked_Toggle = -1
  global g_EXITBOX_ButtonTimer as integer : g_EXITBOX_ButtonTimer = timer()

    

  

  `Format Float Function
  global g_formatted_float_return$ as string
  
  `General Flash Timer
  global g_ENG_FlashTimer as integer : g_ENG_FlashTimer = timer()
  global g_ENG_FlashTimer_Toggle as integer : g_ENG_FlashTimer_Toggle = -1
  
 
  `Transmit Data Variables
    `Data Transmit Timer, If this is active data will be sent every time period + every data change, else only on data changes
    global g_TRANSMIT_WITS_Timer as integer : g_TRANSMIT_WITS_Timer = g_TIMER_1
    global g_WITS_Transmission_Interval_Int as integer : g_WITS_Transmission_Interval_Int = 0
  
 
  `DATA SEND Variables
    `Note that the Transmission format is as follows:
    ` Either:
    `   'net put byte' "110", followed by a 'net put string' PROG DEFINED USER COMMAND CODE AS STRING, or
    `   'net put byte' "210", followed by a 'net put string' sequence of WITS DATA as strings
    global g_DATASEND_Byte_Value as integer
    



    `Debug Variables
      `These variables are function specific global variables set by functions to allow easier debugging
      global g_DEBUG_lib_Enter_Pressed as integer : g_DEBUG_lib_Enter_Pressed = -1
    
    `Temp Variables
    global g_TEMP_int as integer : g_TEMP_int = 0
    global g_TEMP_int2 as integer : g_TEMP_int2 = 0
    global g_TEMP_float1# as float : g_TEMP_float1# = -1.0
    global g_TEMP_string1$ as string : g_TEMP_string1$ = ""
    
    global g_TEMP_Counter as integer : g_TEMP_Counter = 0
    global g_TEMP_Time1 as integer
    global g_TEMP_Time2 as integer
    
    global g_TEMP_Timer as integer : g_TEMP_Timer = timer()

endfunction

function Define_ALARMS_Variables()

  `Drilling Screen - DEPTH ALARM BUTTON
  	global g_ALARM_ENG_INPUTPAD_LabelText$ as string : g_ALARM_ENG_INPUTPAD_LabelText$ = ""
  	global g_DS_DepthAlarm_Btn_Toggle as integer : g_DS_DepthAlarm_Btn_Toggle = -1
  	
  `Individual Alarm Data - Values and Text Labels
    global g_ALARM_DS_DepthAlarm_Value# as float : g_ALARM_DS_DepthAlarm_Value# = -1
  	global g_ALARM_DS_DepthAlarm_Label$ as string : g_ALARM_DS_DepthAlarm_Label$ = ""

  `INPUT Alarm Label on INPUT BOX Variables
    global g_ALARMSYS_FlashInput_Timer as integer : g_ALARMSYS_FlashInput_Timer = timer()
    global g_ALARMSYS_FlashInput_Toggle as integer : g_ALARMSYS_FlashInput_Toggle = -1
    
    global g_ALARMSYS_ShiftKey_State as integer : g_ALARMSYS_ShiftKey_State = -1
    global g_ALARMSYS_StrEditCharPos as integer : g_ALARMSYS_StrEditCharPos = 0
    global g_ALARMSYS_StrEditChar_CursorKeyState as integer : g_ALARMSYS_StrEditChar_CursorKeyState = -1


endfunction

function Define_EXPORT_DATA_Variables()

 `These variables control the Export Data to text file functions.

  global g_EXPORTDATA_DisplayToolTip as integer : g_EXPORTDATA_DisplayToolTip = -1
  global g_EXPORTDATA_ScreenUpdateTimer as integer : g_EXPORTDATA_ScreenUpdateTimer = timer()







endfunction

function Define_CHANNEL_ID_ChangeChnl_Variables()

  `PRIMARY OUTPUT VARIABLES; store the block and channel numbers the user has clicked on.
  global g_CHANNEL_ID_ChngChnl_OUTPUT_BlockNum as integer : g_CHANNEL_ID_ChngChnl_OUTPUT_BlockNum = -1
  global g_CHANNEL_ID_ChngChnl_OUTPUT_ChnlNum as integer : g_CHANNEL_ID_ChngChnl_OUTPUT_ChnlNum = -1


  global g_CHANNEL_ID_ChngChnl_Toggle as integer : g_CHANNEL_ID_ChngChnl_Toggle = -1
  
  global g_CHANNEL_ID_ChngChnl_BoxPos_x = 100
  `global g_CHANNEL_ID_ChngChnl_BoxPos_y = 100
  global g_CHANNEL_ID_ChngChnl_BoxPos_y = 80
  
  global g_DS_SCREEN_Block1_DisplayFormat as integer : g_DS_SCREEN_Block1_DisplayFormat = -1 : `3=3 Channels, 4=4Channels per chart/block
  global g_DS_SCREEN_Block2_DisplayFormat as integer : g_DS_SCREEN_Block2_DisplayFormat = -1
  global g_DS_SCREEN_Block3_DisplayFormat as integer : g_DS_SCREEN_Block3_DisplayFormat = -1
  
  global g_PITS_SCREEN_Block1_DisplayFormat as integer : g_PITS_SCREEN_Block1_DisplayFormat = -1
  global g_PITS_SCREEN_Block2_DisplayFormat as integer : g_PITS_SCREEN_Block2_DisplayFormat = -1
  global g_PITS_SCREEN_Block3_DisplayFormat as integer : g_PITS_SCREEN_Block3_DisplayFormat = -1
  global g_PITS_SCREEN_Block4_DisplayFormat as integer : g_PITS_SCREEN_Block4_DisplayFormat = -1
  
  global g_MSEINPUT_TOGGLE_ChartBlock_Disp3Or4 as integer : g_MSEINPUT_TOGGLE_ChartBlock_Disp3Or4 = -1
  
  `Upper/Lower Range Ouput Variables
  global g_FUNC_OUTPUT_ChnlID_RANGES_LOWER as integer
  global g_FUNC_OUTPUT_ChnlID_RANGES_UPPER as integer
    
  `Menu System
  global g_CHANNEL_ID_ChngChnl_KeyPressed as integer : g_CHANNEL_ID_ChngChnl_KeyPressed = -1
  global g_CHANNEL_ID_ChngChnl_SelectChannel as integer : g_CHANNEL_ID_ChngChnl_SelectChannel = 1
  `
  global g_CHANNEL_ID_ChngChnl_MouseZ as integer : g_CHANNEL_ID_ChngChnl_MouseZ = mousez()
  global g_CHANNEL_ID_ChngChnl_MouseClick as integer : g_CHANNEL_ID_ChngChnl_MouseClick = -1
  global g_CHANNELIDChngChnl_NUMPAD_TIMEBtb_LOCK as integer : g_CHANNELIDChngChnl_NUMPAD_TIMEBtb_LOCK = -1
  
  global g_DLS_LOCK_UNTIL_CLOSED as integer : g_DLS_LOCK_UNTIL_CLOSED = -1
  
  `Mouse double click to activate function
  global g_CHANNEL_ID_ChngChnl_MseDblClck_MseClicked as integer : g_CHANNEL_ID_ChngChnl_MseDblClck_MseClicked = -1
  global g_CHANNEL_ID_ChngChnl_MseDblClck_Timer as integer : g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer()

  `When mouse double click occurs record the Mouse Screen Coordinates (X/Y) so that if the mouse is
  `moved afterwards it doesn't muck things up (when the mouse coordinates change while the code is
  `determining things.
  global g_CHANNEL_ID_ChngChnl_MseDblClck_MseXPos as integer : g_CHANNEL_ID_ChngChnl_MseDblClck_MseXPos = -1
  global g_CHANNEL_ID_ChngChnl_MseDblClck_MseYPos as integer : g_CHANNEL_ID_ChngChnl_MseDblClck_MseYPos = -1



endfunction

function Define_MESSAGING_Variables()

  `Main instant messaging array to store instant messages
  dim INSTANT_MESSAGING$(200) as string

  global INST_MSG_LocalInput$ as string
  
  global INST_MSG_MessageSent_Toggle as integer : INST_MSG_MessageSent_Toggle = -1
  global INST_MSG_MessageSentTimer as integer : INST_MSG_MessageSentTimer = timer()
  


endfunction

function Define_SPYMODE_Variables()

  `SPY MODE COMMAND VARIABLES
    global g_SPYMODE_ACTIVE as integer : g_SPYMODE_ACTIVE = -1
    `Basic Screen/Advanced Screen Toggle - Basic=1, Advanced=2

  `Spymode Command Console Variables
    dim SPYConsl_ADV$(5, 20) as string
    dim SPYConsl_ADV_Ttl(5) as integer
    global g_SPYConsl_ADV_Lvl1_TotalMenus as integer
    global g_SPYConsl_ADV_Lvl1 as integer : g_SPYConsl_ADV_Lvl1 = 1
    global g_SPYConsl_ADV_Lvl2 as integer : g_SPYConsl_ADV_Lvl2 = 1
    global g_SPYConsl_ADV_Lvl2a as integer : g_SPYConsl_ADV_Lvl2a = 1
  
  `StartUp/ShutDown Original Variables for restoring original functionality across StartUp/ShutDown
    global g_SPYMODE_OriginalValue_SYNC_Engine_Active as integer
    global g_SPYMODE_OriginalValue_ENG_Logging_Active as integer
    global g_SPYMODE_OriginalValue_AUTO_CONNECT_ON as integer
      
  `***** PRIMARY REPLY VARIABLES ***** 
  `REPLY Variables (Server)
    global g_SPYM_SERVER_ServerVersion$ as string
    global g_SPYM_SERVER_SubVersion$ as string
    global g_SPYM_SERVER_Total_HD_Records$ as string
    global g_SPYM_SERVER_Total_MEM_Records$ as string
    global g_SPYM_SERVER_Max_MEM_Records$ as string
    global g_SPYM_SERVER_Total_Connected_Clients$ as string
    global g_SPYM_SERVER_Auth_Client_ID$ as string
    global g_SPYM_SERVER_CurrentTime$ as string

  `REPLY Variables (Authorised Client - Via Server)
    global g_SPYM_CLIENT_VersionNum$ as string
    global g_SPYM_CLIENT_SubVersionNum$ as string
    global g_SPYM_CLIENT_Total_HD_Records$ as string
    global g_SPYM_CLIENT_Total_MEM_Records$ as string
    global g_SPYM_CLIENT_Max_MEM_Records$ as string
    global g_SPYM_CLIENT_LastMEMDB_Time$ as string
    global g_SPYM_CLIENT_Current_Time$ as string
    global g_SPYM_CLIENT_SerialPort_Name$ as string
    global g_SPYM_CLIENT_SerialPort_State as byte
    `Authorised Client settings for spymode menus
      global g_SPYM_M_WitsState as integer
      global g_SPYM_M_Menu_Wits$ as string
      global g_SPYM_M_AutoConnect as integer
      global g_SPYM_M_Menu_AConnect$ as string
      global g_SPYM_M_SYNC as integer
      global g_SPYM_M_Menu_SYNC$ as string
      global g_SPYM_M_LOGGING as integer
      global g_SPYM_M_Menu_LOGGING$ as string
      
  `Diagnostics Mode - Login Screen - Screen Type
  global g_SPYM_Login_Screentype as integer : g_SPYM_Login_Screentype = 1

endfunction

function Define_WITS_CONFIG_MAPPING_Variables()

  `WITS array so user can edit record/channel inside program (0=Channel Name, 1=Record Num, 2=Channel Num)
  dim WITS_UserSelection$(35, 2) as string
    `g_WITS_UserSelection_EditRecOrChnl: 1= Edit Record Numbers, 2= Edit Channel Numbers
    global g_WITS_UserSelection_EditRecOrChnl as integer : g_WITS_UserSelection_EditRecOrChnl = 1
    `g_WITS_UserSelection_EditItemNum: The array position to edit (Range 1 to 25)
    global g_WITS_UserSelection_EditItemNum as integer : g_WITS_UserSelection_EditItemNum = 1
    
    global g_WITS_UserSelection_EditToggle as integer : g_WITS_UserSelection_EditToggle = -1
    
    global g_WITS_UserSelection_BuildStr$ as string : g_WITS_UserSelection_BuildStr$ = ""
    global g_WITS_Userselection_CurrentSelectedValue$ as string : g_WITS_Userselection_CurrentSelectedValue$ = ""

  global g_ENG_WITSCONFIG_RecordNumber_BitDepth$ as string
  global g_ENG_WITSCONFIG_RecordNumber_HoleDepth$ as string
  global g_ENG_WITSCONFIG_RecordNumber_BlockPosition$ as string
  global g_ENG_WITSCONFIG_RecordNumber_HKLD$ as string
  global g_ENG_WITSCONFIG_RecordNumber_WOB$ as string
  global g_ENG_WITSCONFIG_RecordNumber_Torque$ as string
  global g_ENG_WITSCONFIG_RecordNumber_RPM$ as string
  global g_ENG_WITSCONFIG_RecordNumber_SPP$ as string
  global g_ENG_WITSCONFIG_RecordNumber_CSG$ as string
  global g_ENG_WITSCONFIG_RecordNumber_SPM1$ as string
  global g_ENG_WITSCONFIG_RecordNumber_SPM2$ as string
  global g_ENG_WITSCONFIG_RecordNumber_SPM3$ as string
  global g_ENG_WITSCONFIG_RecordNumber_PVT$ as string
  global g_ENG_WITSCONFIG_RecordNumber_PIT1$ as string
  global g_ENG_WITSCONFIG_RecordNumber_PIT2$ as string
  global g_ENG_WITSCONFIG_RecordNumber_PIT3$ as string
  global g_ENG_WITSCONFIG_RecordNumber_PIT4$ as string
  global g_ENG_WITSCONFIG_RecordNumber_PIT5$ as string
  global g_ENG_WITSCONFIG_RecordNumber_PIT6$ as string
  global g_ENG_WITSCONFIG_RecordNumber_PIT7$ as string
  global g_ENG_WITSCONFIG_RecordNumber_PIT8$ as string
  global g_ENG_WITSCONFIG_RecordNumber_FLOWIN$ as string
  global g_ENG_WITSCONFIG_RecordNumber_FLOWOUT$ as string
  global g_ENG_WITSCONFIG_RecordNumber_TG$ as string
  global g_ENG_WITSCONFIG_RecordNumber_H2S$ as string
  global g_ENG_WITSCONFIG_RecordNumber_TripTank$ as string
  global g_ENG_WITSCONFIG_RecordNumber_TempIN$ as string
  global g_ENG_WITSCONFIG_RecordNumber_TempOUT$ as string
  global g_ENG_WITSCONFIG_RecordNumber_LagDepth$ as string
  global g_ENG_WITSCONFIG_RecordNumber_TtlStrks$ as string
  
  global g_ENG_WITSCONFIG_ChannelNumber_BitDepth$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_HoleDepth$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_BlockPosition$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_HKLD$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_WOB$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_Torque$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_RPM$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_SPP$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_CSG$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_SPM1$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_SPM2$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_SPM3$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_PVT$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_PIT1$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_PIT2$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_PIT3$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_PIT4$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_PIT5$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_PIT6$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_PIT7$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_PIT8$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_FLOWIN$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_FLOWOUT$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_TG$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_H2S$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_TripTank$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_TempIN$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_TempOUT$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_LagDepth$ as string
  global g_ENG_WITSCONFIG_ChannelNumber_TtlStrks$ as string

endfunction

function Define_WITS_OVERRIDE_MAPPING_Variables()

  `The WITS OVERRIDE SYSTEM is a little obscure. It was developed to address the issue of the BOHR SYSTEM
  `being incorrectly setup and sending out data incorrectly assigned to the same record/channel IDs.
  `In this example Lag Depth and Total Strokes were being sent out by the BOHR system both on R1, C37.
  `Because Lag Depth came out last it was overwriting Total Strokes. So this override system was designed.

  `It works by ignoring the other WITS system and taking all incoming WITS data into a separate array. It doesn't
  `care about the Record or Channel numbers, but instead maps a WITS channel to the array position and
  `assumes that will be invariable.
  
  Global g_WITS_OVERRIDE_Screen_RawProc_Type as integer : g_WITS_OVERRIDE_Screen_RawProc_Type = 1
  Global g_WITS_OVERRIDE_Screen_Proc_ScrnStage as integer : g_WITS_OVERRIDE_Screen_Proc_ScrnStage = 1
  
  Global g_WITS_OVERRIDE_GlobalItemCounter as integer : g_WITS_OVERRIDE_GlobalItemCounter = -1
  
  global g_WITS_OVERRIDE_DeBug_NumOfSeqResets as integer : g_WITS_OVERRIDE_DeBug_NumOfSeqResets = 0
  
  Global g_WITS_OVERRIDE_User_MaxSetRecords as integer : g_WITS_OVERRIDE_User_MaxSetRecords = 0
  Global g_WITS_OVERRIDE_RecordCounter as integer : g_WITS_OVERRIDE_RecordCounter = 0
  
  `Processed Data Inputs
    global g_WITS_OVERRIDE_SelectedArrPos as integer : g_WITS_OVERRIDE_SelectedArrPos = 1
    global g_WITS_OVERRIDE_Proc_Enter_Pressed as integer : g_WITS_OVERRIDE_Proc_Enter_Pressed = -1
    global g_WITS_OVERRIDE_SlctMenu_ItemNum as integer : g_WITS_OVERRIDE_SlctMenu_ItemNum = 1
    
    global g_WITS_OVERRIDE_EnterButton_FinalStageID as integer : g_WITS_OVERRIDE_EnterButton_FinalStageID = -1

    global g_WITS_OVERRIDE_FINALSELECT_Record as integer
    global g_WITS_OVERRIDE_FINALSELECT_Channel as integer
    global g_WITS_OVERRIDE_FINALSELECT_Data as integer
    global g_WITS_OVERRIDE_FINALSELECT_OR_ArrPos as integer

  WITS_OVERRIDE_MEMDBMAP(1).MEM_DB_ChannelName$ = "Bit Depth"
  WITS_OVERRIDE_MEMDBMAP(2).MEM_DB_ChannelName$ = "Hole Depth"
  WITS_OVERRIDE_MEMDBMAP(3).MEM_DB_ChannelName$ = "Block Position"
  WITS_OVERRIDE_MEMDBMAP(4).MEM_DB_ChannelName$ = "Hookload"
  WITS_OVERRIDE_MEMDBMAP(5).MEM_DB_ChannelName$ = "WOB"
  WITS_OVERRIDE_MEMDBMAP(6).MEM_DB_ChannelName$ = "Torque"
  WITS_OVERRIDE_MEMDBMAP(7).MEM_DB_ChannelName$ = "RPM"
  WITS_OVERRIDE_MEMDBMAP(8).MEM_DB_ChannelName$ = "SPP"
  WITS_OVERRIDE_MEMDBMAP(9).MEM_DB_ChannelName$ = "CSG"
  WITS_OVERRIDE_MEMDBMAP(10).MEM_DB_ChannelName$ = "SPM1"
  WITS_OVERRIDE_MEMDBMAP(11).MEM_DB_ChannelName$ = "SPM2"
  WITS_OVERRIDE_MEMDBMAP(12).MEM_DB_ChannelName$ = "SPM3"
  WITS_OVERRIDE_MEMDBMAP(13).MEM_DB_ChannelName$ = "PVT"
  WITS_OVERRIDE_MEMDBMAP(14).MEM_DB_ChannelName$ = "PIT1"
  WITS_OVERRIDE_MEMDBMAP(15).MEM_DB_ChannelName$ = "PIT2"
  WITS_OVERRIDE_MEMDBMAP(16).MEM_DB_ChannelName$ = "PIT3"
  WITS_OVERRIDE_MEMDBMAP(17).MEM_DB_ChannelName$ = "PIT4"
  WITS_OVERRIDE_MEMDBMAP(18).MEM_DB_ChannelName$ = "PIT5"
  WITS_OVERRIDE_MEMDBMAP(19).MEM_DB_ChannelName$ = "PIT6"
  WITS_OVERRIDE_MEMDBMAP(20).MEM_DB_ChannelName$ = "PIT7"
  WITS_OVERRIDE_MEMDBMAP(21).MEM_DB_ChannelName$ = "PIT8"
  WITS_OVERRIDE_MEMDBMAP(22).MEM_DB_ChannelName$ = "Flow IN"
  WITS_OVERRIDE_MEMDBMAP(23).MEM_DB_ChannelName$ = "Flow OUT"
  WITS_OVERRIDE_MEMDBMAP(24).MEM_DB_ChannelName$ = "TG%"
  WITS_OVERRIDE_MEMDBMAP(25).MEM_DB_ChannelName$ = "H2S"
  WITS_OVERRIDE_MEMDBMAP(26).MEM_DB_ChannelName$ = "Triptank"
  WITS_OVERRIDE_MEMDBMAP(27).MEM_DB_ChannelName$ = "Temp IN"
  WITS_OVERRIDE_MEMDBMAP(28).MEM_DB_ChannelName$ = "Temp OUT"
  WITS_OVERRIDE_MEMDBMAP(29).MEM_DB_ChannelName$ = "Lag Depth"
  WITS_OVERRIDE_MEMDBMAP(30).MEM_DB_ChannelName$ = "Total Strokes"
  WITS_OVERRIDE_MEMDBMAP(31).MEM_DB_ChannelName$ = "* CLEAR OVERRIDE *"


  `Handle Override WITS Sequence Data Sequence Adjust
  global g_WITS_OVERRIDE_SetSeq_LowestRecNum as integer : g_WITS_OVERRIDE_SetSeq_LowestRecNum = 1000000
  `global g_
  `global g_

endfunction

function Define_ToolTip_Variables()

  global g_ENG_ToolTip_Toggle_ON as integer : g_ENG_ToolTip_Toggle_ON = -1
  global g_ENG_ToolTip_Toggle_DisplayON as integer : g_ENG_ToolTip_Toggle_DisplayON = -1
  global g_ENG_ToolTip_Timer as integer
  global g_ENG_ToolTip_Mouse_StartX as integer
  global g_ENG_ToolTip_Mouse_StartY as integer
  
  `c_ENG_ToolTip_BkgdIMG 136
  
  #constant c_ENG_ToolTip_Startup_Sensitivity 5
  #constant c_ENG_ToolTip_Startup_Timer 500
  

endfunction

function Define_Graphical_Installation_Variables()

  `This function stores the default settings for the graphical installation.

  `Screen Resolution, 0: 1024x768, 1: Widescreen
  global g_GINSTVar_ScreenResolution as integer : g_GINSTVar_ScreenResolution = 0
  global g_GINSTVar_CFMode as integer : g_GINSTVar_CFMode = 1
  
  global g_GINSTVar_IPAddress$ as string : g_GINSTVar_IPAddress$ = "10.10.10.10"
  global g_GINSTVar_PortNumber$ as string : g_GINSTVar_PortNumber$ = "4000"
  
  global g_GINSTVar_CFModeMLSPassword$ as string : g_GINSTVar_CFModeMLSPassword$ = ""
  
  `Password Failed Box Position
  global g_GINSTVar_PwdFailBox_X as integer
  global g_GINSTVar_PwdFailBox_Y as integer
  g_GINSTVar_PwdFailBox_X = 112
  g_GINSTVar_PwdFailBox_Y = 194
  
  `Infobox Box Position
  global g_GINSTVar_InfoBox_X as integer
  global g_GINSTVar_InfoBox_Y as integer
  g_GINSTVar_InfoBox_X = 65
  g_GINSTVar_InfoBox_Y = 194

  #constant c_INSTALL_IMAGE_Background 209
  #constant c_INST_DispBkgd_Objnum 209
  #constant c_INSTALL_TickBoxs_StartRange 210
  


endfunction

function Define_Serial_Port_Selection_Variables()

  global g_SERIALPORT_SELECT_full$ as string
  global g_SERIALPORT_SELECT_final$ as string
  global g_SERIALPORT_SELECT_ArrItem as integer : g_SERIALPORT_SELECT_ArrItem = 1
  global g_SERIALPORT_SELECT_KeyPress as integer : g_SERIALPORT_SELECT_KeyPress = -1
  global g_SERIALPORT_SELECT_Ttl_Ports as integer
  


endfunction

function Define_SystemTray_Variables()

  global g_SYSTRAY_Prog_Minimised as integer : g_SYSTRAY_Prog_Minimised = -1

         #Constant niAdd             0 :`Add icon  95+
         #Constant WM_USER                     0x0400

         #Constant WM_MOUSEHOVER               0x02A1
         #Constant WM_MOUSELEAVE               0x02A3
         #Constant WM_MOUSEMOVE                0x0200
         #Constant WM_LBUTTONDOWN              0x0201
         #Constant WM_LBUTTONUP                0x0202
         #Constant WM_LBUTTONDBLCLK            0x0203
         #Constant WM_RBUTTONDOWN              0x0204
         #Constant WM_RBUTTONUP                0x0205
         #Constant WM_RBUTTONDBLCLK            0x0206
         #Constant WM_MBUTTONDOWN              0x0207
         #Constant WM_MBUTTONUP                0x0208
         #Constant WM_MBUTTONDBLCLK            0x0209
         #Constant WM_MOUSEWHEEL               0x020A
         temp=WM_USER + 0x7258
         #Constant WM_NOTIFYICON        = temp

endfunction

function Define_SYNC_Variables()

  `SYNC DATABASE VARIABLES
  `The SYNC DATABASE stores whether a record has been synced with the server so if the client is
  `restarted it does not lose the data and try to resync everything again
  
  global g_SYNC_ViewArray_Mousez as integer : g_SYNC_ViewArray_Mousez = mousez()
  global g_SYNC_ViewArray_ArrOffset as integer : g_SYNC_ViewArray_ArrOffset = 0
  
  `SYNC SAVE RATE VARIABLES
    `Save the SYNC DB after every 900 records are transfered, i.e every 60 minutes
    #constant g_ENGINE_Save_SYNCDB_Rate 900
    global g_ENGINE_Save_SYNC_DB_RecordCounter as integer : g_ENGINE_Save_SYNC_DB_RecordCounter = 0

  `SYNC ENGINE Timer
  global g_SYNC_ARR_ENGINE_Timer as integer : g_SYNC_ARR_ENGINE_Timer = g_TIMER_1
  
  global g_SYNCDATA_PacketType$ as string : g_SYNCDATA_PacketType$ = "NULL"
  
  `On a new connection (New F8 connection etc) need to run the Re-Sync code to ensure the
  `server and client DBs are fully sync'd. This is done by starting a countdown timer when
  `a new authorised sync user connects to the client. A countdown timer is used to give the
  `connection enough time to 'settle down'. 5 seconds is used.
  global g_SYNC_NewF8Conn_ForceCode702 as integer : g_SYNC_NewF8Conn_ForceCode702 = -1
  global g_SYNC_NewF8Conn_ForceCode702_Timer as integer : g_SYNC_NewF8Conn_ForceCode702_Timer = timer()

  `SYNC ARRAY VARIABLES - ArrayPntr of records reqiring syncing
  global g_SYNC_ARR_TTL_Items_Req_SYNC as integer
  global g_SYNC_ARR_Size as integer
  
  global g_SYNC_Ttl_Server_Records as integer
  
  `Force SYNC attempt after receiving data from the server
  global g_SYNC_Force as integer : g_SYNC_Force = -1
  global g_SYNC_Force_Timer as integer
  
  global g_SYNC_Send_Timer as integer : g_SYNC_Send_Timer = hitimer()
  global g_SYNC_TtlTime as integer
  
  global g_SYNC_Last_Sync_RecNum as integer
  
  global g_SERVERConnect_Time$ as string
  global g_SERVERConnect_Date$ as string
  
  dim SYNC_Times(20) as integer
  
  `Server commands a Re-Sync of the full Client/Server (CL/SER) Sync DB Database Fields
    global g_SYNC_ReSyncALL_CL_SER_Toggle as integer : g_SYNC_ReSyncALL_CL_SER_Toggle = -1
    global g_SYNC_ReSyncALL_CL_SER_State as integer : g_SYNC_ReSyncALL_CL_SER_State = -1
    global g_SYNC_ReSyncALL_CL_SER_State_Timer as integer : g_SYNC_ReSyncALL_CL_SER_State_Timer = timer()
    
    #constant c_SYNC_S2TimerAmnt 10000
    
  `Variables to view SYNC progression
    `CLIENT
      global g_SYNC_Code705View_C_DBFieldReset as integer : `At start of SYNC all Client records are set to SYNC'd=YES - Server sends if should be 'NO'
      global g_SYNC_Code705View_C_MEMDBRecStart as integer : `Number of records in the Client MEM DB at Start
      global g_SYNC_Code705View_C_RecordsUnpacked as integer : `Number of records received by Client from Server that the Client has labelled as Unsynced.
    `SERVER
      global g_SYNC_Code705View_S_RecStart as integer : `Number of Server records at the start of the process
      global g_SYNC_Code705View_S_RecUpdated as integer : `Number of Server Records NOW - should be equal to the Clients so the Server scans to that record num and tells the client it doesn't have them past however many it had at the start of the process
      global g_SYNC_Code705View_S_ProcessedXNum as integer : `The current number of checked records by the Server - so we can work out how many it has done and the % etc
    
  `SYNC DEBUG / TEST VARIABLES
  dim SYNC_DEBUG_Packet_ArrayList(550) as integer
  global g_SYNC_DEBUG_PacketArrSize as integer

endfunction

function Define_MEM_DATABASE_Variables()

  ` note g_DATABASE_MEM_Total_Num_Records is defined with the array at the start of the program

  `SYSTEMS MEMORY DATABASE

  `This must be at 4 seconds to work correctly with the Server chart plots at 450 pixels height (4-1 due to timer is >)
  #constant c_DATABASE_MEM_CreateRecordInterval 3
  
  global g_MEMDB_LastRecord_Time$ as string : g_MEMDB_LastRecord_Time$ = "None"
  
  global g_DATABASE_MEM_Make_New_Record_Timer as integer : g_DATABASE_MEM_Make_New_Record_Timer = g_TIMER_1
  
  #constant c_DATABASE_MEM_View_MaxRecordsPerPage 25
  global g_DATABASE_MEM_View_PageNumber as integer : g_DATABASE_MEM_View_PageNumber = 1
  global g_DATABASE_MEM_View_PageLeftRight as integer : g_DATABASE_MEM_View_PageLeftRight = 1
  global g_BDMEM_Screen_MouseZ as integer : g_BDMEM_Screen_MouseZ = mousez()
  
  global g_DATABASE_MEM_GotoPage_Toggle as integer : g_DATABASE_MEM_GotoPage_Toggle = -1
  global g_DATABASE_MEM_GotoPage_BuildString$ as string
  
  global g_MEM_DB_EditBDMode_ON as integer : g_MEM_DB_EditBDMode_ON = -1
  global g_MEM_DB_EditBDMode_Column as integer : g_MEM_DB_EditBDMode_Column = 1
  global g_MEM_DB_EditBDMode_Column_Name$ as string
  global g_MEM_DB_EditBDMode_Row as integer : g_MEM_DB_EditBDMode_Row = 1
  global g_MEM_DB_EditBDMode_DispVal$ as string
  global g_MEM_DB_EditBDMode_ArrPosUsed as integer
  global g_MEM_DB_EditBDMode_PageNumUsed as integer
  global g_MEM_DB_EditBDMode_Highlight_DataReady as integer
  global g_MEM_DB_EditBDMode_Highlight_Row as integer
  global g_MEM_DB_EditBDMode_Highlight_Column as integer
  global g_MEM_DB_EditBDMode_Highlight_PxlLength as integer
  global g_MEM_DB_EditBDMode_Highlight_DataType as integer
  global g_MEM_DB_EditBDMode_EDIT_LOCK as integer : g_MEM_DB_EditBDMode_EDIT_LOCK = -1
  `global g_MEM_DB_EditBDMode_BuildStr$ as string
  global g_MEM_DB_EditBDMode_Final_ColumnName$ as string
  global g_MEM_DB_EditBDMode_Final_DataType as integer
  global g_MEM_DB_EditBDMode_Final_ArrayPos as integer
  global g_MEM_DB_EditBDMode_Final_Orignal_Data$ as string
  global g_MEM_DB_EditBDMode_Input_FlashTimer as integer : g_MEM_DB_EditBDMode_Input_FlashTimer = timer()
  global g_MEM_DB_EditBDMode_Input_BuildStr$ as string
  
  global g_INPUT_DB_EditBDMode_UCursor_Stage as integer : g_INPUT_DB_EditBDMode_UCursor_Stage = -1
  global g_INPUT_DB_EditBDMode_DCursor_Stage as integer : g_INPUT_DB_EditBDMode_DCursor_Stage = -1
  global g_INPUT_DB_EditBDMode_UCursor_Timer as integer : g_INPUT_DB_EditBDMode_UCursor_Timer = timer()
  global g_INPUT_DB_EditBDMode_DCursor_Timer as integer : g_INPUT_DB_EditBDMode_DCursor_Timer = timer()
  
  `EDIT DATA MODE - PASTE LAST EDITED DATA
  global g_MEM_DB_EditBDMode_Paste_ClipBoard$ as string : `Saved last build$ for paste (last g_MEM_DB_EditBDMode_Input_BuildStr$)
  global g_MEM_DB_EditBDMode_Paste_LastEditCol as integer : `Stores the last data edited column, so we know the datatype is locked/the same when we paste, else we might try and paste a different data type into the wrong column.
  global g_MEM_DB_EditBDMode_Paste_Datatype as integer
  global g_MEM_DB_EditBDMode_Paste_ArrPos as integer

    `Page 1
      MEM_DB_EditBDMode_Highlight_XOffset(1, 1) = 80
      MEM_DB_EditBDMode_Highlight_XOffset(1, 2) = 80
      MEM_DB_EditBDMode_Highlight_XOffset(1, 3) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(1, 4) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(1, 5) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(1, 6) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(1, 7) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(1, 8) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(1, 9) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(1, 10) = 70
    `Page 2
      MEM_DB_EditBDMode_Highlight_XOffset(2, 1) = 80
      MEM_DB_EditBDMode_Highlight_XOffset(2, 2) = 80
      MEM_DB_EditBDMode_Highlight_XOffset(2, 3) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(2, 4) = 65
      MEM_DB_EditBDMode_Highlight_XOffset(2, 5) = 60
      MEM_DB_EditBDMode_Highlight_XOffset(2, 6) = 55
      MEM_DB_EditBDMode_Highlight_XOffset(2, 7) = 55
      MEM_DB_EditBDMode_Highlight_XOffset(2, 8) = 60
      MEM_DB_EditBDMode_Highlight_XOffset(2, 9) = 60
    `Page 3
      MEM_DB_EditBDMode_Highlight_XOffset(3, 1) = 80
      MEM_DB_EditBDMode_Highlight_XOffset(3, 2) = 80
      MEM_DB_EditBDMode_Highlight_XOffset(3, 3) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(3, 4) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(3, 5) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(3, 6) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(3, 7) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(3, 8) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(3, 9) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(3, 10) = 70
    `Page 4
      MEM_DB_EditBDMode_Highlight_XOffset(4, 1) = 80
      MEM_DB_EditBDMode_Highlight_XOffset(4, 2) = 80
      MEM_DB_EditBDMode_Highlight_XOffset(4, 3) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(4, 4) = 70
      MEM_DB_EditBDMode_Highlight_XOffset(4, 5) = 100
      MEM_DB_EditBDMode_Highlight_XOffset(4, 6) = 150
      MEM_DB_EditBDMode_Highlight_XOffset(4, 7) = 80
      MEM_DB_EditBDMode_Highlight_XOffset(4, 8) = 80



endfunction

function Define_HD_DATABASE_Variables()

  ` note g_DATABASE_HD_Total_Num_Records is defined with the array at the start of the program

  `HD DATABASE
  #constant c_DATABASE_HD_View_MaxRecordsPerPage 25
  global g_DATABASE_HD_View_PageNumber as integer : g_DATABASE_HD_View_PageNumber = 1
  global g_DATABASE_HD_View_PageLeftRight as integer : g_DATABASE_HD_View_PageLeftRight = 1
  global g_BDHD_Screen_MouseZ as integer : g_BDHD_Screen_MouseZ = mousez()
  
  global g_DATABASE_HD_GotoPage_Toggle as integer : g_DATABASE_HD_GotoPage_Toggle = -1
  global g_DATABASE_HD_GotoPage_BuildString$ as string

endfunction

function Define_ServerClient_SYNC_MEMDB_Variables()

 `Stores the number of records in the Servers Systems Memory Database for comparison with the client
 `program (this programs) Systems Memory database during the SYNC request from the server using code 500.
 global g_SYNC_HOST_DB_MEM_Total_Num_Records as dword
 
 `Server SYNC is being ignored, send code to restart (toggle)
 global g_ENG_ServerSyncOFF_Restart as integer : g_ENG_ServerSyncOFF_Restart = -1

endfunction

function Define_COMMENT_SYSTEM_Variables()

  `This is the Def Var func to be taken to GDS RDS
  
  `INPUT MOUSE
    `Activate by Double Clicking on any Chart.

      global g_CMNTSYS_MseStart_MseState as integer : g_CMNTSYS_MseStart_MseState = -1

      global g_CMNTSYS_Slctd_ArrPos as integer : g_CMNTSYS_Slctd_ArrPos = -1
      global g_CMNTSYS_Edit_ArrPos as integer : g_CMNTSYS_Edit_ArrPos = -1
      
    `Create New Comment - Toggle On, Build$
      global g_CMNTSYS_AddNewCmnt_Stage as integer : g_CMNTSYS_AddNewCmnt_Stage = -1 : `-1=NULL/OFF, 1=Add New, 2=Edit Existing Comment
      global g_CMNTSYS_AddNewCmnt_BuildStr$ as string : g_CMNTSYS_AddNewCmnt_BuildStr$ = ""
      
      global g_CMNTSYS_AddNewCmnt_AutoCloseCmnt_Timer as integer : g_CMNTSYS_AddNewCmnt_AutoCloseCmnt_Timer = timer()
      #constant g_CMNTSYS_AddNewCmnt_TimerMilSecs 180000
      global g_CMNTSYS_AddNewCmnt_Action_CloseCmnt as integer : g_CMNTSYS_AddNewCmnt_Action_CloseCmnt = -1

    `INPUT Comment Variables
      global g_CMNTSYS_FlashInput_Timer as integer
      global g_CMNTSYS_FlashInput_Toggle as integer
      
      global g_CMNTSYS_ShiftKey_State as integer : g_CMNTSYS_ShiftKey_State = -1
      global g_CMNTSYS_StrEditCharPos as integer : g_CMNTSYS_StrEditCharPos = 0
      global g_CMNTSYS_StrEditChar_CursorKeyState as integer : g_CMNTSYS_StrEditChar_CursorKeyState = -1

endfunction


function Define_COMMANDCONSOLE_Variables()

  #constant c_CC_MenuSize 10
  dim CConsl_ADV$(c_CC_MenuSize, 20) as string
  dim CConsl_ADV_Ttl(c_CC_MenuSize) as integer
  



 `COMMAND CONSOLE ADV VARIABLES
 

 
   `Command Console Time To Fade Constant in ms
   #constant c_CMND_CONSL_FadeTimer 6
   `Command console input prompt flash timer
   #constant c_CMND_CONSL_FlashTimer 1
 
   `Download the current server settings from the server into the client for display in the client command console
   global g_CMND_CONSL_ServerSettings_Received as integer : g_CMND_CONSL_ServerSettings_Received = -1
 
   global g_CMND_CONSL_AUClient_Diagnostic_RouteToLoginScreen as integer : g_CMND_CONSL_AUClient_Diagnostic_RouteToLoginScreen = -1
  
   `Activation Toggles
   global g_COMMANDCONSOLE_Toggle as integer : g_COMMANDCONSOLE_Toggle = 0
   global g_COMMANDCONSOLE_Active as integer : g_COMMANDCONSOLE_Active = 0
 
   `Commands for navigating command console command selection hierachy
   global g_CConsl_ADV_Lvl1_TotalMenus as integer
   global g_CConsl_ADV_Lvl1 as integer : g_CConsl_ADV_Lvl1 = 1
   global g_CConsl_ADV_Lvl2 as integer : g_CConsl_ADV_Lvl2 = 1
   global g_CConsl_ADV_Lvl2a as integer : g_CConsl_ADV_Lvl2a = 1
   
 

 
   `Command Console Menu Flash
   global g_COMMANDCONSOLE_Flash_Toggle as integer : g_COMMANDCONSOLE_Flash_Toggle = -1
   global g_COMMANDCONSOLE_Flash_Timer as integer : g_COMMANDCONSOLE_Flash_Timer = g_TIMER_1
   global g_COMMANDCONSOLE_InputFlash_Timer as integer : g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H
   global g_COMMANDCONSOLE_InputFlash_Toggle as integer : g_COMMANDCONSOLE_InputFlash_Toggle = 1
 
   `Command Console Command Reporting
   global g_COMMANDCONSOLE_CommandActivatedSwitch as integer : g_COMMANDCONSOLE_CommandActivatedSwitch = -1
   global g_COMMANDCONSOLE_CommandReport1$ as string : g_COMMANDCONSOLE_CommandReport1$ = ""
   global g_COMMANDCONSOLE_Report_Alpha as integer
   global g_COMMANDCONSOLE_Report_AlphaCMND as integer
   global g_COMMANDCONSOLE_Report_Timer as integer : g_COMMANDCONSOLE_Report_Timer = g_TIMER_1
   global g_CMNDCON_Report_PrintY as integer : g_CMNDCON_Report_PrintY = 650
 
   `Command Console CURRENT SERVER SETTINGS downloaded from the server.
   global g_CMNDCONSL_Received_ServerVal_DS_LineThickness as integer : g_CMNDCONSL_Received_ServerVal_DS_LineThickness = -2
   global g_CMNDCONSL_Received_ServerVal_HS_LineThickness as integer : g_CMNDCONSL_Received_ServerVal_HS_LineThickness = -2
   global g_CMNDCONSL_Received_ServerVal_Display_DS_or_HS as integer : g_CMNDCONSL_Received_ServerVal_Display_DS_or_HS = -2
   global g_CMNDCONSL_Received_ServerVal_Display_MainScreen_Or_CMNDCONSL as integer : g_CMNDCONSL_Received_ServerVal_Display_MainScreen_Or_CMNDCONSL = -2
   
   `Command Console COMMAND INPUT TYPE TOGGLES
     `INPUT New Server IP Address
       global g_CMNDCONSL_CommandINPUT_ToggleON as integer : g_CMNDCONSL_CommandINPUT_ToggleON = -1
       global g_CMNDCONSL_CommandINPUT_ToggleON_RangeEdit as integer : g_CMNDCONSL_CommandINPUT_ToggleON_RangeEdit = -1
       global g_CMNDCONSL_CommandINPUT_Toggle_NewServerIPAddress as integer : g_CMNDCONSL_CommandINPUT_Toggle_NewServerIPAddress = -1
       global g_CMNDCONSL_CommandINPUT_Toggle_NewServerPort as integer : g_CMNDCONSL_CommandINPUT_Toggle_NewServerPort = -1
       global g_CMNDCONSL_CommandINPUT_Toggle_ChannelRange as integer : g_CMNDCONSL_CommandINPUT_Toggle_ChannelRange = -1
       `global g_CMNDCONSL_CommandINPUT_Toggle_MessageON as integer : g_CMNDCONSL_CommandINPUT_Toggle_MessageON = -1
       global g_CMNDCONSL_CommandINPUT_Toggle_ReSYNC as integer : g_CMNDCONSL_CommandINPUT_Toggle_ReSYNC = -1
       global g_CMNDCONSL_CommandINPUT_Toggle_WELLDATA_Input as integer : g_CMNDCONSL_CommandINPUT_Toggle_WELLDATA_Input = -1
       global g_CMNDCONSL_CommandINPUT_WELLDATA_InputType as integer

   `Command console Change Server Drilling Screen Upper/Lower Channel Ranges
     global g_CMNDCONSL_ServerRange_Stage as integer : g_CMNDCONSL_ServerRange_Stage = 1
     global g_CMNDCONSL_ServerRangeChannel_Pntr as integer : g_CMNDCONSL_ServerRangeChannel_Pntr = 1
     global g_CMNDCONSL_ServerRange_UpperLower_Type as integer : g_CMNDCONSL_ServerRange_UpperLower_Type = 1
     dim g_CMNDCONSL_ServerRangeChannels$(10) as string
     g_CMNDCONSL_ServerRangeChannels$(1) = "ROP"
     g_CMNDCONSL_ServerRangeChannels$(2) = "WOB"
     g_CMNDCONSL_ServerRangeChannels$(3) = "HOOKLOAD"
     g_CMNDCONSL_ServerRangeChannels$(4) = "RPM"
     g_CMNDCONSL_ServerRangeChannels$(5) = "TRIPTANK"
     g_CMNDCONSL_ServerRangeChannels$(6) = "BLOCK HEIGHT"
     g_CMNDCONSL_ServerRangeChannels$(7) = "TOTAL VOLUME"
     g_CMNDCONSL_ServerRangeChannels$(8) = "SPP"
     g_CMNDCONSL_ServerRangeChannels$(9) = "FLOW IN"
     `Final selection values
     global g_CMNDCONSL_ServerRangeFinal_ChannelID as integer
     global g_CMNDCONSL_ServerRangeFinal_UpperLower_ID as integer
     global g_CMNDCONSL_ServerRangeFinal_RangeVAL as integer
 
  `Start a new well toggle - Setting this variable will toggle the MLS Client to create a new local well
  `                          and then recurringly attempt to tell the Server to do the same until the
  `                          Server has done it.
  `                          -1 = Not Set
  `                          1 = SET/Working.
  `                          2 = Local DB Deleted, Server being ordered to Start a New Well
  `                          3 = Server Responds that it has recieved the request to create a new well
  `                          4 = Server has created a new well; finished.
     global g_CMNDCONSL_ForceSTART_NEW_WELL as integer: g_CMNDCONSL_ForceSTART_NEW_WELL = -1
     global g_CMNDCONSL_ForceSTART_NEW_WELL_Timer as integer : g_CMNDCONSL_ForceSTART_NEW_WELL_Timer = timer()
     global g_CMNDCONSL_ForceSTART_NEW_WELL_State$ as string : g_CMNDCONSL_ForceSTART_NEW_WELL_State$ = ""
     global g_CMNDCONSL_ForceSTART_NW_ResetTimer as integer : g_CMNDCONSL_ForceSTART_NW_ResetTimer = timer()
     global g_CMNDCONSL_ForceSTART_Unlock as integer : g_CMNDCONSL_ForceSTART_Unlock = 1
     global g_CMNDCONSL_ForceSTART_UnlockSTR$ as string : g_CMNDCONSL_ForceSTART_UnlockSTR$ = ""
     global g_CMNDCONSL_ForceSTART_UnlockTimer as integer : g_CMNDCONSL_ForceSTART_UnlockTimer = timer()
     global g_CMNDCONSL_ForceSTART_UnlockMSGFlash as integer : g_CMNDCONSL_ForceSTART_UnlockMSGFlash = timer()

endfunction

function Define_ADVANCED_REPORTING_Variables()

  `Main Toggle
  global g_ENG_ARS_Toggle_ON as integer : g_ENG_ARS_Toggle_ON = -1
  global g_ENG_ARS_Timer as integer : g_ENG_ARS_Timer = timer()
  global g_ENG_ARS_CntDn_Secs as integer : g_ENG_ARS_CntDn_Secs = -1
  
  `ARS Message Timeout Delay
  #constant c_ENG_ARS_DisplayTimeoutVal 5000
  
  `Start and End Message
  global g_ENG_ARS_RunCommandInfo$ as string : g_ENG_ARS_RunCommandInfo$ = "NULL VALUE"
  global g_ENG_ARS_Completion_State as integer : g_ENG_ARS_Completion_State = -1
  
  `Current Message Array Position
  global g_ENG_ARS_MsgArrPntr as integer : g_ENG_ARS_MsgArrPntr = -1

  `Background Image Print Position
  global g_ENG_ARS_BkgdPosX as integer
  global g_ENG_ARS_BkgdPosY as integer
    `Background Image Size
    #constant c_ENG_ARS_Bkgd_Width 550
    #constant c_ENG_ARS_Bkgd_Height 350


endfunction

function Define_SAVEFILE_variables()

  global g_CLIENT_Obtain_IP_From_File$ as string
  global g_CLIENT_HOSTIP_Address$ as string 
  global g_CLIENT_WITS_Transmission_Period_Seconds$ as string
  global g_CLIENT_Database_Filename$ as string
  global g_CLIENT_Server_Port_Num$ as string
  global g_CLIENT_Server_Port_Int as integer
  global g_ENGINE_Screen_Resolution as integer
  
endfunction

function Define_SERIAL_PORT_and_WITS_Variables()

  `ENGINE VARIABLES
  global g_hPort as integer : g_hPort = -1

  `WITS ENGINE STATUS MONITORING
  global g_SERIALPORT_Time_Last_Data_Received$ as string : g_SERIALPORT_Time_Last_Data_Received$ = ""
   `Timeout from last data received before an error is flagged to the user
  #constant c_WITS_DataTimeout 44
  global g_SERIALPORT_Timer_Last_Data_Timer as integer : g_SERIALPORT_Timer_Last_Data_Timer = g_TIMER_1
  global g_SERIALPORT_DataStatus$ as string : g_SERIALPORT_DataStatus$ = "NOT STARTED"
  global g_SERIALPORT_NotSeen as integer : g_SERIALPORT_NotSeen = -1 :`-1 is no serial port ever seen on the system, else 1
  global g_SERIALPORT_Started as byte : g_SERIALPORT_Started = 1 :`1=Not Started, 2 =started
  global g_SERIALPORT_TimeOuts_Counter as integer : g_SERIALPORT_TimeOuts_Counter = 0
  
  global g_SERIALPORT_ProcessedView_ScreenType as integer : g_SERIALPORT_ProcessedView_ScreenType = 0
  
  `Auto-Restart of the serial port if it has frozen for some reason
  global g_SERIALPORT_AUTO_RESTART as integer : g_SERIALPORT_AUTO_RESTART = -1 : `Main toggle for automatically restarting the serial port
  global g_SERIALPORT_Successful_Restarts as integer : g_SERIALPORT_Successful_Restarts = 0

  `GENERAL SERIAL PORT VARIABLES
  global g_SERIALPORT_AutoReconnect_Timer as integer : g_SERIALPORT_AutoReconnect_Timer = g_TIMER_1
  

  global g_SERIALPORT_ACTIVE as integer : g_SERIALPORT_ACTIVE = -1 : `-1=inactive, 1=active
  global g_SERIALPORT_ACTIVE_ID$ as string : g_SERIALPORT_ACTIVE_ID$ = "" :`Special variable to stores only the current and hence last active ID
  global g_SERIALPORT_TIMEOUTS_SET as integer : g_SERIALPORT_TIMEOUTS_SET = -1 :  `-1=unable to set, 1=set OK
  global g_SERIALPORT_Port_Name$ as string : g_SERIALPORT_Port_Name$ = "" : `Stores the system ID of the inuse port

  global g_SERIALPORT_OS_Available_Ports$ as string : `String containing all available system port name ID's
  
  global g_SERIALPORT_Port_Output_String$ as string : ` Used to capture the data received on the serial port as a string
  global g_SERIALPORT_Port_Output_String_ContinuedData$ as string : ` If the last port read has data from the next good wits output then it will need splitting and adding to next time. 
  global g_SERIALPORT_Previous_Port_Output_String$ as string : ` Last Data Capture

  `The serial port string is checked for changes every time interval. If 500ms goes by and there are no
  `changes to the string it is assume data transmission has ended and the string is checked for SOF and EOF
  `If it passes it is processed, else it is deleted and we wait for the next one.
  #constant c_SERIALPORT_UnchangedData_Time 250

  `WITS VARIABLES
    `Read WITS Table file variables
    global g_WITS_TABLE_Max_Channels as integer
    dim WITS_Chnl_Rcrd_Mnemonics$(200) as string
    global g_WITS_String_Total_Separators as integer
    dim WITS_String_Separator_Positions(400) as integer
    
    `Break down and store the serial port string variables
    dim WITS_RECEIVE_String_Breakdown$(500) as string :`Original String loaded from the SerialWITS_Tmp file
    dim WITS_RECEIVE_String_Breakdown_Values#(500,2) as float: `1=Record Number, 2=Channel Number, 3=Value
    dim WITS_RECEIVE_TempDisplayChnlVals#(100,100) as float: `1=Record Number, 2=Channel Number
    global g_WITS_RECEIVE_String_Breakdown_Ttl_Num as integer
    
    `Break down and store the serial port string variables (Attempt without HD write)
    dim WITS_RECEIVE_String_Breakdown2$(500) as string :`Original String loaded from the SerialWITS_Tmp file
    dim WITS_RECEIVE_String_Breakdown_Values2#(500,2) as float: `1=Record Number, 2=Channel Number, 3=Value
    global g_WITS_RECEIVE_String_Breakdown_Ttl_Num2 as integer
    dim WITS_Return_Positions(500) as integer


    
    global g_WITS_RECEIVE_String_StructureTest_Passed as dword
    global g_WITS_RECEIVE_String_StructureTest_Failed as dword
    
  `SERIAL PORT RECEPTION STORAGE VARIABLES - DO NOT DELETE
  `NOTE: These are receievd from the processed WITS data. The values stored in the MEM DB are processed
  `      again to ensure they are the max values per 4 second interval and stored in the variables below
  `      these.
  	global g_COMMPORT_Receive_HoleDepth# as float
  	global g_COMMPORT_Receive_BitDepth# as float
  	global g_CALCULATED_Received_ROP# as float
  	global g_COMMPORT_Receive_WOB# as float
  	global g_COMMPORT_Receive_Hookload as word
  	global g_COMMPORT_Receive_RPM as word
  	global g_COMMPORT_Receive_Torque# as float
  	global g_COMMPORT_Receive_TripTank# as float
  	global g_COMMPORT_Receive_BlockPosition# as float
  	global g_COMMPORT_Receive_PVT# as float
  	global g_COMMPORT_Receive_Pit1# as float
  	global g_COMMPORT_Receive_Pit2# as float
  	global g_COMMPORT_Receive_Pit3# as float
  	global g_COMMPORT_Receive_Pit4# as float
  	global g_COMMPORT_Receive_Pit5# as float
  	global g_COMMPORT_Receive_Pit6# as float
  	global g_COMMPORT_Receive_Pit7# as float
  	global g_COMMPORT_Receive_Pit8# as float
  	global g_COMMPORT_Receive_SPP as word
  	global g_COMMPORT_Receive_CSG as word
  	global g_COMMPORT_Receive_FlowIN as word
  	global g_COMMPORT_Receive_FlowOUT# as float
  	global g_COMMPORT_Receive_SPM1 as word
  	global g_COMMPORT_Receive_SPM2 as word
  	global g_COMMPORT_Receive_SPM3 as word
  	global g_COMMPORT_Receive_TotalGas# as float
  	global g_COMMPORT_Receive_H2S# as float
  	global g_COMMPORT_Receive_TempIN# as float
  	global g_COMMPORT_Receive_TempOUT# as float
  	global g_COMMPORT_Receive_LagDepth# as float
  	global g_COMMPORT_Receive_TotalStrokes as integer
  	`
  	`NOTE: Processed again - THESE ARE THE VARIABLES STORED TO THE MEM DB
  	`      They are split from the above to allow for the max value per 4 sec interval to be stored
  	`      While the g_COMMPORT_Receive_ variables are still the ones receiving the processed WITS
  	`      data and being displayed on the screen in the RT DISPLAY VALUES code
  	`
  	`NO NEED TO CHANGE - global g_COMMPORT_Receive_StoreToMEMDB_HoleDepth# as float
  	`NO NEED TO CHANGE - global g_COMMPORT_Receive_StoreToMEMDB_BitDepth# as float
  	`NO NEED TO CHANGE - global g_CALCULATED_Received_ROP# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_WOB# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_Hookload as word
  	global g_COMMPORT_Receive_StoreToMEMDB_RPM as word
  	global g_COMMPORT_Receive_StoreToMEMDB_Torque# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_TripTank# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_BlockPosition# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_PVT# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_Pit1# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_Pit2# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_Pit3# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_Pit4# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_Pit5# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_Pit6# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_Pit7# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_Pit8# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_SPP as word
  	global g_COMMPORT_Receive_StoreToMEMDB_CSG as word
  	global g_COMMPORT_Receive_StoreToMEMDB_FlowIN as word
  	global g_COMMPORT_Receive_StoreToMEMDB_FlowOUT# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_SPM1 as word
  	global g_COMMPORT_Receive_StoreToMEMDB_SPM2 as word
  	global g_COMMPORT_Receive_StoreToMEMDB_SPM3 as word
  	global g_COMMPORT_Receive_StoreToMEMDB_TotalGas# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_H2S# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_TempIN# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_TempOUT# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_LagDepth# as float
  	global g_COMMPORT_Receive_StoreToMEMDB_TotalStrokes as integer


  `LagDepth Adjustment/Display Value
  global g_LAGDEPTH_AdjustValue# as float
 

endfunction

function Define_ROP_CALCULATION_Variables()

  `ROP Calculation result
  global g_ROPCALC_ROP_Value# as float : g_ROPCALC_ROP_Value# = 0.0

  `Timer used to calculate new ROP if the time period is exceeded, 3mins = 180000ms
  #constant c_ROPCALC_TimeInterval 299
  global g_ROPCALC_Timer_at_last_calculation as integer
  
  `When off bottom display the old ROP value for 10 minutes, then display 0.
  #constant c_ROPCALC_OffBottomDisplayTime 299
  global g_ROPCALC_OnBottom_Toggle as integer : g_ROPCALC_OnBottom_Toggle = -1
  global g_ROPCALC_LastOnBottom_Timer as integer : g_ROPCALC_LastOnBottom_Timer = g_TIMER_1
  
  `Last holedepth at calculation
  global g_ROPCALC_HoleDepth_at_last_calculation# as float
  global g_ROPCALC_ROPCalcDepthInterval# as float : g_ROPCALC_ROPCalcDepthInterval# = -999.9
  `Current holedepth, increased every
  global g_ROPCALC_Current_HoleDepth# as float


endfunction

function Define_REALTIMEGraphics_Variables()

  #constant c_DRILLING_SCREEN_Imgnum_Background 9
  #constant c_HISTORICAL_SCREEN_Imgnum_Background 10
  #constant c_PITS_SCREEN_Imgnum_Background 11
  #constant c_CMNDCONSOL_Imgnum_Background 182
  
  `See LOAD_Images_and_Objects() for fuller image numbers
  
  global g_Realtime_StartupWindowType as integer
  global g_Realtime_OLDScreenX as integer
  global g_Realtime_OLDScreenY as integer
  
  `Core Functionality Variables
    `Core Function 1 - VIEWER
      global g_ENG_COREF1_RTDisp_Startup as integer : g_ENG_COREF1_RTDisp_Startup = -1
    
    `Core Function 2 - MUDLOGGING SUITE
      global g_ENG_COREF2_RTDisp_Startup as integer : g_ENG_COREF2_RTDisp_Startup = -1
  
  `HOLE DEPTH
  global g_DISPLAY_HOLE_DEPTH_x as integer
  global g_DISPLAY_HOLE_DEPTH_y as integer

  `BIT DEPTH
  global g_DISPLAY_BIT_DEPTH_x as integer
  global g_DISPLAY_BIT_DEPTH_y as integer
    
  `ROP
  global g_DISPLAY_ROP_x as integer
  global g_DISPLAY_ROP_y as integer
  `WOB
  global g_DISPLAY_WOB_x as integer
  global g_DISPLAY_WOB_y as integer
  `HKLD
  global g_DISPLAY_HKLD_x as integer
  global g_DISPLAY_HKLD_y as integer
  `RPM
  global g_DISPLAY_RPM_x as integer
  global g_DISPLAY_RPM_y as integer
  `TRIPTANK
  global g_DISPLAY_TT_x as integer
  global g_DISPLAY_TT_y as integer
  `BLOCKPOSITION
  global g_DISPLAY_BLKPOS_x as integer
  global g_DISPLAY_BLKPOS_y as integer
  `TOTAL VOL
  global g_DISPLAY_PVT_x as integer
  global g_DISPLAY_PVT_y as integer
  `SPP
  global g_DISPLAY_SPP_x as integer
  global g_DISPLAY_SPP_y as integer
  `FLOW IN
  global g_DISPLAY_FLOWIN_x as integer
  global g_DISPLAY_FLOWIN_y as integer
  
  `TOTAL SPM
  global g_DISPLAY_TOTAL_SPM_x as integer
  global g_DISPLAY_TOTAL_SPM_y as integer
  `TOTAL STROKES
  global g_DISPLAY_TOTAL_STROKES_x as integer
  global g_DISPLAY_TOTAL_STROKES_y as integer
  `SPM 1
  global g_DISPLAY_SPM1_x as integer
  global g_DISPLAY_SPM1_y as integer
  `SPM 2
  global g_DISPLAY_SPM2_x as integer
  global g_DISPLAY_SPM2_y as integer
  `SPM 2
  global g_DISPLAY_SPM3_x as integer
  global g_DISPLAY_SPM3_y as integer
  `TOTAL GAS %
  global g_DISPLAY_TOTAL_GAS_x as integer
  global g_DISPLAY_TOTAL_GAS_y as integer
  `H2S
  global g_DISPLAY_H2S_x as integer
  global g_DISPLAY_H2S_y as integer
  `LAG DEPTH
  global g_DISPLAY_LAGDEPTH_x as integer
  global g_DISPLAY_LAGDEPTH_y as integer
  
  
  `DRILLING SCREEN DISPLAY COORDINATES
  
    `3 CHANNELS PER BLOCK
  	`DS CF2 Drilling Screen - Channel Name Screen Positions (3 Channels per Block)
  		global g_DRILL_DISPLAY_Block1_Channel1_Name_x as integer : global g_DRILL_DISPLAY_Block1_Channel1_Name_y as integer
  		global g_DRILL_DISPLAY_Block1_Channel2_Name_x as integer : global g_DRILL_DISPLAY_Block1_Channel2_Name_y as integer
  		global g_DRILL_DISPLAY_Block1_Channel3_Name_x as integer : global g_DRILL_DISPLAY_Block1_Channel3_Name_y as integer
  		global g_DRILL_DISPLAY_Block2_Channel1_Name_x as integer : global g_DRILL_DISPLAY_Block2_Channel1_Name_y as integer
  		global g_DRILL_DISPLAY_Block2_Channel2_Name_x as integer : global g_DRILL_DISPLAY_Block2_Channel2_Name_y as integer
  		global g_DRILL_DISPLAY_Block2_Channel3_Name_x as integer : global g_DRILL_DISPLAY_Block2_Channel3_Name_y as integer
  		global g_DRILL_DISPLAY_Block3_Channel1_Name_x as integer : global g_DRILL_DISPLAY_Block3_Channel1_Name_y as integer
  		global g_DRILL_DISPLAY_Block3_Channel2_Name_x as integer : global g_DRILL_DISPLAY_Block3_Channel2_Name_y as integer
  		global g_DRILL_DISPLAY_Block3_Channel3_Name_x as integer : global g_DRILL_DISPLAY_Block3_Channel3_Name_y as integer
  		global g_DRILL_DISPLAY_Block4_Channel1_Name_x as integer : global g_DRILL_DISPLAY_Block4_Channel1_Name_y as integer
  		global g_DRILL_DISPLAY_Block4_Channel2_Name_x as integer : global g_DRILL_DISPLAY_Block4_Channel2_Name_y as integer
  		global g_DRILL_DISPLAY_Block4_Channel3_Name_x as integer : global g_DRILL_DISPLAY_Block4_Channel3_Name_y as integer
  	`DS CF2 Drilling Screen - Channel High/Low ranges screen positions (3 Channels per Block)
  		global g_DRILL_DISPLAY_Block1_Channel1_LO_x as integer   : global g_DRILL_DISPLAY_Block1_Channel1_LO_y as integer
  		global g_DRILL_DISPLAY_Block1_Channel1_HIGH_x as integer : global g_DRILL_DISPLAY_Block1_Channel1_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block1_Channel2_LO_x as integer   : global g_DRILL_DISPLAY_Block1_Channel2_LO_y as integer
  		global g_DRILL_DISPLAY_Block1_Channel2_HIGH_x as integer : global g_DRILL_DISPLAY_Block1_Channel2_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block1_Channel3_LO_x as integer   : global g_DRILL_DISPLAY_Block1_Channel3_LO_y as integer
  		global g_DRILL_DISPLAY_Block1_Channel3_HIGH_x as integer : global g_DRILL_DISPLAY_Block1_Channel3_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block2_Channel1_LO_x as integer   : global g_DRILL_DISPLAY_Block2_Channel1_LO_y as integer
  		global g_DRILL_DISPLAY_Block2_Channel1_HIGH_x as integer : global g_DRILL_DISPLAY_Block2_Channel1_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block2_Channel2_LO_x as integer   : global g_DRILL_DISPLAY_Block2_Channel2_LO_y as integer
  		global g_DRILL_DISPLAY_Block2_Channel2_HIGH_x as integer : global g_DRILL_DISPLAY_Block2_Channel2_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block2_Channel3_LO_x as integer   : global g_DRILL_DISPLAY_Block2_Channel3_LO_y as integer
  		global g_DRILL_DISPLAY_Block2_Channel3_HIGH_x as integer : global g_DRILL_DISPLAY_Block2_Channel3_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block3_Channel1_LO_x as integer   : global g_DRILL_DISPLAY_Block3_Channel1_LO_y as integer
  		global g_DRILL_DISPLAY_Block3_Channel1_HIGH_x as integer : global g_DRILL_DISPLAY_Block3_Channel1_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block3_Channel2_LO_x as integer   : global g_DRILL_DISPLAY_Block3_Channel2_LO_y as integer
  		global g_DRILL_DISPLAY_Block3_Channel2_HIGH_x as integer : global g_DRILL_DISPLAY_Block3_Channel2_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block3_Channel3_LO_x as integer   : global g_DRILL_DISPLAY_Block3_Channel3_LO_y as integer
  		global g_DRILL_DISPLAY_Block3_Channel3_HIGH_x as integer : global g_DRILL_DISPLAY_Block3_Channel3_HIGH_y as integer
  	`DS CF2 Drilling Screen - Values screen positions (3 Channels per Block)
  		global g_DRILL_DISPLAY_Block1_Channel1_ValuePos_x as integer : global g_DRILL_DISPLAY_Block1_Channel1_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block1_Channel2_ValuePos_x as integer : global g_DRILL_DISPLAY_Block1_Channel2_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block1_Channel3_ValuePos_x as integer : global g_DRILL_DISPLAY_Block1_Channel3_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block2_Channel1_ValuePos_x as integer : global g_DRILL_DISPLAY_Block2_Channel1_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block2_Channel2_ValuePos_x as integer : global g_DRILL_DISPLAY_Block2_Channel2_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block2_Channel3_ValuePos_x as integer : global g_DRILL_DISPLAY_Block2_Channel3_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block3_Channel1_ValuePos_x as integer : global g_DRILL_DISPLAY_Block3_Channel1_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block3_Channel2_ValuePos_x as integer : global g_DRILL_DISPLAY_Block3_Channel2_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block3_Channel3_ValuePos_x as integer : global g_DRILL_DISPLAY_Block3_Channel3_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block4_Channel1_ValuePos_x as integer : global g_DRILL_DISPLAY_Block4_Channel1_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block4_Channel2_ValuePos_x as integer : global g_DRILL_DISPLAY_Block4_Channel2_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block4_Channel3_ValuePos_x as integer : global g_DRILL_DISPLAY_Block4_Channel3_ValuePos_y as integer
  		
    `4 CHANNELS PER BLOCK
  	`DS CF2 Drilling Screen - Channel Name Screen Positions (4 Channels per Block)
  		global g_DRILL_DISPLAY_Block1_4_Channel1_Name_x as integer : global g_DRILL_DISPLAY_Block1_4_Channel1_Name_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel2_Name_x as integer : global g_DRILL_DISPLAY_Block1_4_Channel2_Name_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel3_Name_x as integer : global g_DRILL_DISPLAY_Block1_4_Channel3_Name_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel4_Name_x as integer : global g_DRILL_DISPLAY_Block1_4_Channel4_Name_y as integer
  		
  		global g_DRILL_DISPLAY_Block2_4_Channel1_Name_x as integer : global g_DRILL_DISPLAY_Block2_4_Channel1_Name_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel2_Name_x as integer : global g_DRILL_DISPLAY_Block2_4_Channel2_Name_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel3_Name_x as integer : global g_DRILL_DISPLAY_Block2_4_Channel3_Name_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel4_Name_x as integer : global g_DRILL_DISPLAY_Block2_4_Channel4_Name_y as integer
  		
  		global g_DRILL_DISPLAY_Block3_4_Channel1_Name_x as integer : global g_DRILL_DISPLAY_Block3_4_Channel1_Name_y as integer
  		global g_DRILL_DISPLAY_Block3_4_Channel2_Name_x as integer : global g_DRILL_DISPLAY_Block3_4_Channel2_Name_y as integer
  		global g_DRILL_DISPLAY_Block3_4_Channel3_Name_x as integer : global g_DRILL_DISPLAY_Block3_4_Channel3_Name_y as integer
  		global g_DRILL_DISPLAY_Block3_4_Channel4_Name_x as integer : global g_DRILL_DISPLAY_Block3_4_Channel4_Name_y as integer
  		
  		global g_DRILL_DISPLAY_Block4_4_Channel1_Name_x as integer : global g_DRILL_DISPLAY_Block4_4_Channel1_Name_y as integer
  		global g_DRILL_DISPLAY_Block4_4_Channel2_Name_x as integer : global g_DRILL_DISPLAY_Block4_4_Channel2_Name_y as integer
  		global g_DRILL_DISPLAY_Block4_4_Channel3_Name_x as integer : global g_DRILL_DISPLAY_Block4_4_Channel3_Name_y as integer
  	  global g_DRILL_DISPLAY_Block4_4_Channel4_Name_x as integer : global g_DRILL_DISPLAY_Block4_4_Channel4_Name_y as integer
  	
  	`DS CF2 Drilling Screen - Channel High/Low ranges screen positions (4 Channels per Block)
  		global g_DRILL_DISPLAY_Block1_4_Channel1_LO_x as integer   : global g_DRILL_DISPLAY_Block1_4_Channel1_LO_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel1_HIGH_x as integer : global g_DRILL_DISPLAY_Block1_4_Channel1_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel2_LO_x as integer   : global g_DRILL_DISPLAY_Block1_4_Channel2_LO_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel2_HIGH_x as integer : global g_DRILL_DISPLAY_Block1_4_Channel2_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel3_LO_x as integer   : global g_DRILL_DISPLAY_Block1_4_Channel3_LO_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel3_HIGH_x as integer : global g_DRILL_DISPLAY_Block1_4_Channel3_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel4_LO_x as integer   : global g_DRILL_DISPLAY_Block1_4_Channel4_LO_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel4_HIGH_x as integer : global g_DRILL_DISPLAY_Block1_4_Channel4_HIGH_y as integer
  		
  		global g_DRILL_DISPLAY_Block2_4_Channel1_LO_x as integer   : global g_DRILL_DISPLAY_Block2_4_Channel1_LO_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel1_HIGH_x as integer : global g_DRILL_DISPLAY_Block2_4_Channel1_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel2_LO_x as integer   : global g_DRILL_DISPLAY_Block2_4_Channel2_LO_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel2_HIGH_x as integer : global g_DRILL_DISPLAY_Block2_4_Channel2_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel3_LO_x as integer   : global g_DRILL_DISPLAY_Block2_4_Channel3_LO_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel3_HIGH_x as integer : global g_DRILL_DISPLAY_Block2_4_Channel3_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel4_LO_x as integer   : global g_DRILL_DISPLAY_Block2_4_Channel4_LO_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel4_HIGH_x as integer : global g_DRILL_DISPLAY_Block2_4_Channel4_HIGH_y as integer
  		
  		global g_DRILL_DISPLAY_Block3_4_Channel1_LO_x as integer   : global g_DRILL_DISPLAY_Block3_4_Channel1_LO_y as integer
  		global g_DRILL_DISPLAY_Block3_4_Channel1_HIGH_x as integer : global g_DRILL_DISPLAY_Block3_4_Channel1_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block3_4_Channel2_LO_x as integer   : global g_DRILL_DISPLAY_Block3_4_Channel2_LO_y as integer
  		global g_DRILL_DISPLAY_Block3_4_Channel2_HIGH_x as integer : global g_DRILL_DISPLAY_Block3_4_Channel2_HIGH_y as integer
  		global g_DRILL_DISPLAY_Block3_4_Channel3_LO_x as integer   : global g_DRILL_DISPLAY_Block3_4_Channel3_LO_y as integer
  		global g_DRILL_DISPLAY_Block3_4_Channel3_HIGH_x as integer : global g_DRILL_DISPLAY_Block3_4_Channel3_HIGH_y as integer
  	  global g_DRILL_DISPLAY_Block3_4_Channel4_LO_x as integer   : global g_DRILL_DISPLAY_Block3_4_Channel4_LO_y as integer
  		global g_DRILL_DISPLAY_Block3_4_Channel4_HIGH_x as integer : global g_DRILL_DISPLAY_Block3_4_Channel4_HIGH_y as integer
  	
  	`DS CF2 Drilling Screen - Values screen positions (4 Channels per Block)
  		global g_DRILL_DISPLAY_Block1_4_Channel1_ValuePos_x as integer : global g_DRILL_DISPLAY_Block1_4_Channel1_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel2_ValuePos_x as integer : global g_DRILL_DISPLAY_Block1_4_Channel2_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel3_ValuePos_x as integer : global g_DRILL_DISPLAY_Block1_4_Channel3_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block1_4_Channel4_ValuePos_x as integer : global g_DRILL_DISPLAY_Block1_4_Channel4_ValuePos_y as integer
  		
  		global g_DRILL_DISPLAY_Block2_4_Channel1_ValuePos_x as integer : global g_DRILL_DISPLAY_Block2_4_Channel1_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel2_ValuePos_x as integer : global g_DRILL_DISPLAY_Block2_4_Channel2_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel3_ValuePos_x as integer : global g_DRILL_DISPLAY_Block2_4_Channel3_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block2_4_Channel4_ValuePos_x as integer : global g_DRILL_DISPLAY_Block2_4_Channel4_ValuePos_y as integer
  		
  		global g_DRILL_DISPLAY_Block3_4_Channel1_ValuePos_x as integer : global g_DRILL_DISPLAY_Block3_4_Channel1_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block3_4_Channel2_ValuePos_x as integer : global g_DRILL_DISPLAY_Block3_4_Channel2_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block3_4_Channel3_ValuePos_x as integer : global g_DRILL_DISPLAY_Block3_4_Channel3_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block3_4_Channel4_ValuePos_x as integer : global g_DRILL_DISPLAY_Block3_4_Channel4_ValuePos_y as integer
  		
  		global g_DRILL_DISPLAY_Block4_4_Channel1_ValuePos_x as integer : global g_DRILL_DISPLAY_Block4_4_Channel1_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block4_4_Channel2_ValuePos_x as integer : global g_DRILL_DISPLAY_Block4_4_Channel2_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block4_4_Channel3_ValuePos_x as integer : global g_DRILL_DISPLAY_Block4_4_Channel3_ValuePos_y as integer
  		global g_DRILL_DISPLAY_Block4_4_Channel4_ValuePos_x as integer : global g_DRILL_DISPLAY_Block4_4_Channel4_ValuePos_y as integer
  		
	
  `PITS SCREEN DISPLAY COORDINATES 
  	
  	`3 CHANNELS PER BLOCK
  	`DS CF2 Pit Screen - Channel Name Screen Positions (3 Channels per Block)
  		global g_PITS_DISPLAY_Block1_Channel1_Name_x as integer : global g_PITS_DISPLAY_Block1_Channel1_Name_y as integer
  		global g_PITS_DISPLAY_Block1_Channel2_Name_x as integer : global g_PITS_DISPLAY_Block1_Channel2_Name_y as integer
  		global g_PITS_DISPLAY_Block1_Channel3_Name_x as integer : global g_PITS_DISPLAY_Block1_Channel3_Name_y as integer
  		
  		global g_PITS_DISPLAY_Block2_Channel1_Name_x as integer : global g_PITS_DISPLAY_Block2_Channel1_Name_y as integer
  		global g_PITS_DISPLAY_Block2_Channel2_Name_x as integer : global g_PITS_DISPLAY_Block2_Channel2_Name_y as integer
  		global g_PITS_DISPLAY_Block2_Channel3_Name_x as integer : global g_PITS_DISPLAY_Block2_Channel3_Name_y as integer
  		
  		global g_PITS_DISPLAY_Block3_Channel1_Name_x as integer : global g_PITS_DISPLAY_Block3_Channel1_Name_y as integer
  		global g_PITS_DISPLAY_Block3_Channel2_Name_x as integer : global g_PITS_DISPLAY_Block3_Channel2_Name_y as integer
  		global g_PITS_DISPLAY_Block3_Channel3_Name_x as integer : global g_PITS_DISPLAY_Block3_Channel3_Name_y as integer
  		
  		global g_PITS_DISPLAY_Block4_Channel1_Name_x as integer : global g_PITS_DISPLAY_Block4_Channel1_Name_y as integer
  		global g_PITS_DISPLAY_Block4_Channel2_Name_x as integer : global g_PITS_DISPLAY_Block4_Channel2_Name_y as integer
  		global g_PITS_DISPLAY_Block4_Channel3_Name_x as integer : global g_PITS_DISPLAY_Block4_Channel3_Name_y as integer
  	
  	`DS CF2 Pit Screen - Channel High/Low ranges screen positions (3 Channels per Block)
  		global g_PITS_DISPLAY_Block1_Channel1_LO_x as integer   : global g_PITS_DISPLAY_Block1_Channel1_LO_y as integer
  		global g_PITS_DISPLAY_Block1_Channel1_HIGH_x as integer : global g_PITS_DISPLAY_Block1_Channel1_HIGH_y as integer
  		global g_PITS_DISPLAY_Block1_Channel2_LO_x as integer   : global g_PITS_DISPLAY_Block1_Channel2_LO_y as integer
  		global g_PITS_DISPLAY_Block1_Channel2_HIGH_x as integer : global g_PITS_DISPLAY_Block1_Channel2_HIGH_y as integer
  		global g_PITS_DISPLAY_Block1_Channel3_LO_x as integer   : global g_PITS_DISPLAY_Block1_Channel3_LO_y as integer
  		global g_PITS_DISPLAY_Block1_Channel3_HIGH_x as integer : global g_PITS_DISPLAY_Block1_Channel3_HIGH_y as integer
  		
  		global g_PITS_DISPLAY_Block2_Channel1_LO_x as integer   : global g_PITS_DISPLAY_Block2_Channel1_LO_y as integer
  		global g_PITS_DISPLAY_Block2_Channel1_HIGH_x as integer : global g_PITS_DISPLAY_Block2_Channel1_HIGH_y as integer
  		global g_PITS_DISPLAY_Block2_Channel2_LO_x as integer   : global g_PITS_DISPLAY_Block2_Channel2_LO_y as integer
  		global g_PITS_DISPLAY_Block2_Channel2_HIGH_x as integer : global g_PITS_DISPLAY_Block2_Channel2_HIGH_y as integer
  		global g_PITS_DISPLAY_Block2_Channel3_LO_x as integer   : global g_PITS_DISPLAY_Block2_Channel3_LO_y as integer
  		global g_PITS_DISPLAY_Block2_Channel3_HIGH_x as integer : global g_PITS_DISPLAY_Block2_Channel3_HIGH_y as integer
  		
  		global g_PITS_DISPLAY_Block3_Channel1_LO_x as integer   : global g_PITS_DISPLAY_Block3_Channel1_LO_y as integer
  		global g_PITS_DISPLAY_Block3_Channel1_HIGH_x as integer : global g_PITS_DISPLAY_Block3_Channel1_HIGH_y as integer
  		global g_PITS_DISPLAY_Block3_Channel2_LO_x as integer   : global g_PITS_DISPLAY_Block3_Channel2_LO_y as integer
  		global g_PITS_DISPLAY_Block3_Channel2_HIGH_x as integer : global g_PITS_DISPLAY_Block3_Channel2_HIGH_y as integer
  		global g_PITS_DISPLAY_Block3_Channel3_LO_x as integer   : global g_PITS_DISPLAY_Block3_Channel3_LO_y as integer
  		global g_PITS_DISPLAY_Block3_Channel3_HIGH_x as integer : global g_PITS_DISPLAY_Block3_Channel3_HIGH_y as integer
  		
  		global g_PITS_DISPLAY_Block4_Channel1_LO_x as integer   : global g_PITS_DISPLAY_Block4_Channel1_LO_y as integer
  		global g_PITS_DISPLAY_Block4_Channel1_HIGH_x as integer : global g_PITS_DISPLAY_Block4_Channel1_HIGH_y as integer
  		global g_PITS_DISPLAY_Block4_Channel2_LO_x as integer   : global g_PITS_DISPLAY_Block4_Channel2_LO_y as integer
  		global g_PITS_DISPLAY_Block4_Channel2_HIGH_x as integer : global g_PITS_DISPLAY_Block4_Channel2_HIGH_y as integer
  		global g_PITS_DISPLAY_Block4_Channel3_LO_x as integer   : global g_PITS_DISPLAY_Block4_Channel3_LO_y as integer
  		global g_PITS_DISPLAY_Block4_Channel3_HIGH_x as integer : global g_PITS_DISPLAY_Block4_Channel3_HIGH_y as integer
  	
  	`DS CF2 Pit Screen - Values screen positions (3 Channels per Block)
  		global g_PITS_DISPLAY_Block1_Channel1_ValuePos_x as integer : global g_PITS_DISPLAY_Block1_Channel1_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block1_Channel2_ValuePos_x as integer : global g_PITS_DISPLAY_Block1_Channel2_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block1_Channel3_ValuePos_x as integer : global g_PITS_DISPLAY_Block1_Channel3_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block2_Channel1_ValuePos_x as integer : global g_PITS_DISPLAY_Block2_Channel1_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block2_Channel2_ValuePos_x as integer : global g_PITS_DISPLAY_Block2_Channel2_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block2_Channel3_ValuePos_x as integer : global g_PITS_DISPLAY_Block2_Channel3_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block3_Channel1_ValuePos_x as integer : global g_PITS_DISPLAY_Block3_Channel1_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block3_Channel2_ValuePos_x as integer : global g_PITS_DISPLAY_Block3_Channel2_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block3_Channel3_ValuePos_x as integer : global g_PITS_DISPLAY_Block3_Channel3_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block4_Channel1_ValuePos_x as integer : global g_PITS_DISPLAY_Block4_Channel1_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block4_Channel2_ValuePos_x as integer : global g_PITS_DISPLAY_Block4_Channel2_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block4_Channel3_ValuePos_x as integer : global g_PITS_DISPLAY_Block4_Channel3_ValuePos_y as integer
  		
  	`4 CHANNELS PER BLOCK
  	`DS CF2 Pit Screen - Channel Name Screen Positions (4 Channels per Block)
  		global g_PITS_DISPLAY_Block1_4_Channel1_Name_x as integer : global g_PITS_DISPLAY_Block1_4_Channel1_Name_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel2_Name_x as integer : global g_PITS_DISPLAY_Block1_4_Channel2_Name_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel3_Name_x as integer : global g_PITS_DISPLAY_Block1_4_Channel3_Name_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel4_Name_x as integer : global g_PITS_DISPLAY_Block1_4_Channel4_Name_y as integer
  		
  		global g_PITS_DISPLAY_Block2_4_Channel1_Name_x as integer : global g_PITS_DISPLAY_Block2_4_Channel1_Name_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel2_Name_x as integer : global g_PITS_DISPLAY_Block2_4_Channel2_Name_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel3_Name_x as integer : global g_PITS_DISPLAY_Block2_4_Channel3_Name_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel4_Name_x as integer : global g_PITS_DISPLAY_Block2_4_Channel4_Name_y as integer
  		
  		global g_PITS_DISPLAY_Block3_4_Channel1_Name_x as integer : global g_PITS_DISPLAY_Block3_4_Channel1_Name_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel2_Name_x as integer : global g_PITS_DISPLAY_Block3_4_Channel2_Name_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel3_Name_x as integer : global g_PITS_DISPLAY_Block3_4_Channel3_Name_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel4_Name_x as integer : global g_PITS_DISPLAY_Block3_4_Channel4_Name_y as integer
  		
  		global g_PITS_DISPLAY_Block4_4_Channel1_Name_x as integer : global g_PITS_DISPLAY_Block4_4_Channel1_Name_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel2_Name_x as integer : global g_PITS_DISPLAY_Block4_4_Channel2_Name_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel3_Name_x as integer : global g_PITS_DISPLAY_Block4_4_Channel3_Name_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel4_Name_x as integer : global g_PITS_DISPLAY_Block4_4_Channel4_Name_y as integer
  	
  	`DS CF2 Pit Screen - Channel High/Low ranges screen positions (4 Channels per Block)
  		global g_PITS_DISPLAY_Block1_4_Channel1_LO_x as integer   : global g_PITS_DISPLAY_Block1_4_Channel1_LO_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel1_HIGH_x as integer : global g_PITS_DISPLAY_Block1_4_Channel1_HIGH_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel2_LO_x as integer   : global g_PITS_DISPLAY_Block1_4_Channel2_LO_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel2_HIGH_x as integer : global g_PITS_DISPLAY_Block1_4_Channel2_HIGH_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel3_LO_x as integer   : global g_PITS_DISPLAY_Block1_4_Channel3_LO_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel3_HIGH_x as integer : global g_PITS_DISPLAY_Block1_4_Channel3_HIGH_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel4_LO_x as integer   : global g_PITS_DISPLAY_Block1_4_Channel4_LO_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel4_HIGH_x as integer : global g_PITS_DISPLAY_Block1_4_Channel4_HIGH_y as integer
  		
  		global g_PITS_DISPLAY_Block2_4_Channel1_LO_x as integer   : global g_PITS_DISPLAY_Block2_4_Channel1_LO_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel1_HIGH_x as integer : global g_PITS_DISPLAY_Block2_4_Channel1_HIGH_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel2_LO_x as integer   : global g_PITS_DISPLAY_Block2_4_Channel2_LO_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel2_HIGH_x as integer : global g_PITS_DISPLAY_Block2_4_Channel2_HIGH_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel3_LO_x as integer   : global g_PITS_DISPLAY_Block2_4_Channel3_LO_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel3_HIGH_x as integer : global g_PITS_DISPLAY_Block2_4_Channel3_HIGH_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel4_LO_x as integer   : global g_PITS_DISPLAY_Block2_4_Channel4_LO_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel4_HIGH_x as integer : global g_PITS_DISPLAY_Block2_4_Channel4_HIGH_y as integer
  		
  		global g_PITS_DISPLAY_Block3_4_Channel1_LO_x as integer   : global g_PITS_DISPLAY_Block3_4_Channel1_LO_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel1_HIGH_x as integer : global g_PITS_DISPLAY_Block3_4_Channel1_HIGH_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel2_LO_x as integer   : global g_PITS_DISPLAY_Block3_4_Channel2_LO_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel2_HIGH_x as integer : global g_PITS_DISPLAY_Block3_4_Channel2_HIGH_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel3_LO_x as integer   : global g_PITS_DISPLAY_Block3_4_Channel3_LO_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel3_HIGH_x as integer : global g_PITS_DISPLAY_Block3_4_Channel3_HIGH_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel4_LO_x as integer   : global g_PITS_DISPLAY_Block3_4_Channel4_LO_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel4_HIGH_x as integer : global g_PITS_DISPLAY_Block3_4_Channel4_HIGH_y as integer
  		
  		global g_PITS_DISPLAY_Block4_4_Channel1_LO_x as integer   : global g_PITS_DISPLAY_Block4_4_Channel1_LO_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel1_HIGH_x as integer : global g_PITS_DISPLAY_Block4_4_Channel1_HIGH_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel2_LO_x as integer   : global g_PITS_DISPLAY_Block4_4_Channel2_LO_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel2_HIGH_x as integer : global g_PITS_DISPLAY_Block4_4_Channel2_HIGH_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel3_LO_x as integer   : global g_PITS_DISPLAY_Block4_4_Channel3_LO_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel3_HIGH_x as integer : global g_PITS_DISPLAY_Block4_4_Channel3_HIGH_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel4_LO_x as integer   : global g_PITS_DISPLAY_Block4_4_Channel4_LO_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel4_HIGH_x as integer : global g_PITS_DISPLAY_Block4_4_Channel4_HIGH_y as integer
  	
  	         
  	
  	`DS CF2 Pit Screen - Values screen positions (4 Channels per Block)
  		global g_PITS_DISPLAY_Block1_4_Channel1_ValuePos_x as integer : global g_PITS_DISPLAY_Block1_4_Channel1_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel2_ValuePos_x as integer : global g_PITS_DISPLAY_Block1_4_Channel2_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel3_ValuePos_x as integer : global g_PITS_DISPLAY_Block1_4_Channel3_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block1_4_Channel4_ValuePos_x as integer : global g_PITS_DISPLAY_Block1_4_Channel4_ValuePos_y as integer
  		
  		global g_PITS_DISPLAY_Block2_4_Channel1_ValuePos_x as integer : global g_PITS_DISPLAY_Block2_4_Channel1_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel2_ValuePos_x as integer : global g_PITS_DISPLAY_Block2_4_Channel2_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel3_ValuePos_x as integer : global g_PITS_DISPLAY_Block2_4_Channel3_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block2_4_Channel4_ValuePos_x as integer : global g_PITS_DISPLAY_Block2_4_Channel4_ValuePos_y as integer
  		
  		global g_PITS_DISPLAY_Block3_4_Channel1_ValuePos_x as integer : global g_PITS_DISPLAY_Block3_4_Channel1_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel2_ValuePos_x as integer : global g_PITS_DISPLAY_Block3_4_Channel2_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel3_ValuePos_x as integer : global g_PITS_DISPLAY_Block3_4_Channel3_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block3_4_Channel4_ValuePos_x as integer : global g_PITS_DISPLAY_Block3_4_Channel4_ValuePos_y as integer
  		
  		global g_PITS_DISPLAY_Block4_4_Channel1_ValuePos_x as integer : global g_PITS_DISPLAY_Block4_4_Channel1_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel2_ValuePos_x as integer : global g_PITS_DISPLAY_Block4_4_Channel2_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel3_ValuePos_x as integer : global g_PITS_DISPLAY_Block4_4_Channel3_ValuePos_y as integer
  		global g_PITS_DISPLAY_Block4_4_Channel4_ValuePos_x as integer : global g_PITS_DISPLAY_Block4_4_Channel4_ValuePos_y as integer
 
 
 
 
 
  
  `g_DISP_REALTIME_ScreenType 1=Realtime Graphics Display  2=Realtime Variables Screen
  global g_DISP_REALTIME_ScreenType as integer : g_DISP_REALTIME_ScreenType = 1
  
  global g_DISP_REALTIME_SHUTDOWN_Toggle as integer : g_DISP_REALTIME_SHUTDOWN_Toggle = -1
  
  global g_DISP_RT_DatabaseScreenType as integer
  
  `Button to reposition chart drawing back to the start
  global g_DS_ChartButton_TimeZero_Timer as integer : g_DS_ChartButton_TimeZero_Timer = timer()
  global g_PITS_ChartButton_TimeZero_Timer as integer : g_PITS_ChartButton_TimeZero_Timer = timer()
  
  `Waiting for data from the Server info box type toggle
  global g_DS_InfoBox_WaitforDataFromServer_Toggle as integer : g_DS_InfoBox_WaitforDataFromServer_Toggle = 1
  
  `Database View Variables
  global g_DISP_RT_DB_View_PageLeftRight as integer
  global g_DISP_RT_DB_View_PageNumber as integer
  #constant c_DISP_RT_DB_View_MaxRecordsPerPage 27
  
  `Make new record timer
  #constant c_DISP_RT_CreateRecordInterval 7
  global g_DISP_RT_Make_New_Record_Timer as integer
  global g_DISP_RT_DB_Total_Record_Num as integer
   
  `PUSH - Receive Record Timer
  #constant c_DISP_RT_DB_Last_Good_Data_Interval 4500
  global g_DISP_RT_DB_Last_Good_Data_Timer as integer
  global g_DISP_RT_DB_Last_Good_Data_Received$ as string
  
  `PUSH - Receive Record Data Variables
  global g_DISP_RT_DB_Time$ as string
  global g_DISP_RT_DB_Date$ as string
  global g_DISP_RT_DB_Hole_Depth# as float
  global g_DISP_RT_DB_Bit_Depth# as float
  global g_DISP_RT_DB_ROP# as float
  global g_DISP_RT_DB_WOB# as float
  global g_DISP_RT_DB_Hookload as word
  global g_DISP_RT_DB_RPM as word
  global g_DISP_RT_DB_TripTank# as float
  global g_DISP_RT_DB_BlockPosition# as float
  global g_DISP_RT_DB_PVT# as float
  global g_DISP_RT_DB_SPP as word
  global g_DISP_RT_DB_FlowIn as word
  global g_DISP_RT_DB_SPM1 as word
  global g_DISP_RT_DB_SPM2 as word
  global g_DISP_RT_DB_TotalGas# as float
  global g_DISP_RT_DB_H2S# as float
  
  `Request Server Channel Settings Variables state. -1=Null, 1=Requested, 2=Received
  global g_DISP_RT_DB_RequestChannel_State as integer : g_DISP_RT_DB_RequestChannel_State = -1
  global g_DISP_RT_DB_RequestChannel_Timer as integer : g_DISP_RT_DB_RequestChannel_Timer = timer()
  #constant g_DISP_RT_DB_ReqChnlInterval 300
  global g_DISP_RT_DB_RequestChannel_Date$ as string
  global g_DISP_RT_DB_RequestChannel_Time$ as string
  
  `Request PUSH TABLE Relationship
  `g_DISP_RT_DB_PUSHTABLE_State, -1=NULL, 1=Requested, 2=Confirmed
  global g_DISP_RT_DB_PUSHTABLE_State as integer : g_DISP_RT_DB_PUSHTABLE_State = -1
  global g_DISP_RT_DB_PUSHTABLE_Timer as integer : g_DISP_RT_DB_PUSHTABLE_Timer = timer()
  #constant g_DISP_RT_PUSHTABLE_Interval 300
  
  `Server Line Plot Variables (Upper/Lower Ranges and Colours)
  `CHART GLOBAL COLOUR Variables
  global g_Block1_Line1_Colour as dword
  global g_Block1_Line2_Colour as dword
  global g_Block1_Line3_Colour as dword
  global g_Block1_Line4_Colour as dword
  global g_Block2_Line1_Colour as dword
  global g_Block2_Line2_Colour as dword
  global g_Block2_Line3_Colour as dword
  global g_Block2_Line4_Colour as dword
  global g_Block3_Line1_Colour as dword
  global g_Block3_Line2_Colour as dword
  global g_Block3_Line3_Colour as dword
  global g_Block3_Line4_Colour as dword
  global g_Block4_Line1_Colour as dword
  global g_Block4_Line2_Colour as dword
  global g_Block4_Line3_Colour as dword
  global g_Block4_Line4_Colour as dword
  `Line Colour DWORD RGB Component String Stores
  global g_DRT_Block1_Line1_Colour$ as string
  global g_DRT_Block1_Line2_Colour$ as string
  global g_DRT_Block1_Line3_Colour$ as string
  global g_DRT_Block1_Line4_Colour$ as string
  global g_DRT_Block2_Line1_Colour$ as string
  global g_DRT_Block2_Line2_Colour$ as string
  global g_DRT_Block2_Line3_Colour$ as string
  global g_DRT_Block2_Line4_Colour$ as string
  global g_DRT_Block3_Line1_Colour$ as string
  global g_DRT_Block3_Line2_Colour$ as string
  global g_DRT_Block3_Line3_Colour$ as string
  global g_DRT_Block3_Line4_Colour$ as string
  global g_DRT_Block4_Line1_Colour$ as string
  global g_DRT_Block4_Line2_Colour$ as string
  global g_DRT_Block4_Line3_Colour$ as string
  global g_DRT_Block4_Line4_Colour$ as string
  
  `CHART PLOT Range Values
  global g_Block1_Line1_Lower_Value as integer
  global g_Block1_Line1_Upper_Value as integer
  global g_Block1_Line2_Lower_Value as integer
  global g_Block1_Line2_Upper_Value as integer
  global g_Block1_Line3_Lower_Value as integer
  global g_Block1_Line3_Upper_Value as integer
  global g_Block1_Line4_Lower_Value as integer
  global g_Block1_Line4_Upper_Value as integer
  global g_Block2_Line1_Lower_Value as integer
  global g_Block2_Line1_Upper_Value as integer
  global g_Block2_Line2_Lower_Value as integer
  global g_Block2_Line2_Upper_Value as integer
  global g_Block2_Line3_Lower_Value as integer
  global g_Block2_Line3_Upper_Value as integer
  global g_Block2_Line4_Lower_Value as integer
  global g_Block2_Line4_Upper_Value as integer
  global g_Block3_Line1_Lower_Value as integer
  global g_Block3_Line1_Upper_Value as integer
  global g_Block3_Line2_Lower_Value as integer
  global g_Block3_Line2_Upper_Value as integer
  global g_Block3_Line3_Lower_Value as integer
  global g_Block3_Line3_Upper_Value as integer
  global g_Block3_Line4_Lower_Value as integer
  global g_Block3_Line4_Upper_Value as integer
  
  `CF1 Plot Channel Ranges Array: 0=Index (-1 or 1), 1=Value
  dim CF1_CHARTIndex_BlockLine_Val(18) as integer
  
  `DS Unit names and screen position values
    `Unit Names
      global g_DS_Units_Block1Line1_Name$ as string
      global g_DS_Units_Block1Line2_Name$ as string
      global g_DS_Units_Block1Line3_Name$ as string
      global g_DS_Units_Block1Line4_Name$ as string
      global g_DS_Units_Block2Line1_Name$ as string
      global g_DS_Units_Block2Line2_Name$ as string
      global g_DS_Units_Block2Line3_Name$ as string
      global g_DS_Units_Block2Line4_Name$ as string
      global g_DS_Units_Block3Line1_Name$ as string
      global g_DS_Units_Block3Line2_Name$ as string
      global g_DS_Units_Block3Line3_Name$ as string
      global g_DS_Units_Block3Line4_Name$ as string
    `Unit screen positions
      global g_DS_Units_Block1Line1_X as integer
      global g_DS_Units_Block1Line1_Y as integer
      global g_DS_Units_Block1Line2_X as integer
      global g_DS_Units_Block1Line2_Y as integer
      global g_DS_Units_Block1Line3_X as integer
      global g_DS_Units_Block1Line3_Y as integer
      global g_DS_Units_Block1Line4_X as integer
      global g_DS_Units_Block1Line4_Y as integer
      
      global g_DS_Units_Block2Line1_X as integer
      global g_DS_Units_Block2Line1_Y as integer
      global g_DS_Units_Block2Line2_X as integer
      global g_DS_Units_Block2Line2_Y as integer
      global g_DS_Units_Block2Line3_X as integer
      global g_DS_Units_Block2Line3_Y as integer
      global g_DS_Units_Block2Line4_X as integer
      global g_DS_Units_Block2Line4_Y as integer
      
      global g_DS_Units_Block3Line1_X as integer
      global g_DS_Units_Block3Line1_Y as integer
      global g_DS_Units_Block3Line2_X as integer
      global g_DS_Units_Block3Line2_Y as integer
      global g_DS_Units_Block3Line3_X as integer
      global g_DS_Units_Block3Line3_Y as integer
      global g_DS_Units_Block3Line4_X as integer
      global g_DS_Units_Block3Line4_Y as integer
      
  `Array to store the incremental range values to be displayed at the base of the chart
  dim CHARTPLOT_RangeVals(6) as integer
  
  `RANGES Screen Positions
  global g_DISPLAY_RangeLower_Block1_Line1_x as integer
  global g_DISPLAY_RangeLower_Block1_Line1_y as integer
  global g_DISPLAY_RangeUpper_Block1_Line1_x as integer
  global g_DISPLAY_RangeUpper_Block1_Line1_y as integer
  global g_DISPLAY_RangeLower_Block1_Line2_x as integer
  global g_DISPLAY_RangeLower_Block1_Line2_y as integer
  global g_DISPLAY_RangeUpper_Block1_Line2_x as integer
  global g_DISPLAY_RangeUpper_Block1_Line2_y as integer
  global g_DISPLAY_RangeLower_Block1_Line3_x as integer
  global g_DISPLAY_RangeLower_Block1_Line3_y as integer
  global g_DISPLAY_RangeUpper_Block1_Line3_x as integer
  global g_DISPLAY_RangeUpper_Block1_Line3_y as integer
  global g_DISPLAY_RangeLower_Block1_Line4_x as integer
  global g_DISPLAY_RangeLower_Block1_Line4_y as integer
  global g_DISPLAY_RangeUpper_Block1_Line4_x as integer
  global g_DISPLAY_RangeUpper_Block1_Line4_y as integer
  
  global g_DISPLAY_RangeLower_Block2_Line1_x as integer
  global g_DISPLAY_RangeLower_Block2_Line1_y as integer
  global g_DISPLAY_RangeUpper_Block2_Line1_x as integer
  global g_DISPLAY_RangeUpper_Block2_Line1_y as integer
  global g_DISPLAY_RangeLower_Block2_Line2_x as integer
  global g_DISPLAY_RangeLower_Block2_Line2_y as integer
  global g_DISPLAY_RangeUpper_Block2_Line2_x as integer
  global g_DISPLAY_RangeUpper_Block2_Line2_y as integer
  global g_DISPLAY_RangeLower_Block2_Line3_x as integer
  global g_DISPLAY_RangeLower_Block2_Line3_y as integer
  global g_DISPLAY_RangeUpper_Block2_Line3_x as integer
  global g_DISPLAY_RangeUpper_Block2_Line3_y as integer
  global g_DISPLAY_RangeLower_Block2_Line4_x as integer
  global g_DISPLAY_RangeLower_Block2_Line4_y as integer
  global g_DISPLAY_RangeUpper_Block2_Line4_x as integer
  global g_DISPLAY_RangeUpper_Block2_Line4_y as integer
  
  global g_DISPLAY_RangeLower_Block3_Line1_x as integer
  global g_DISPLAY_RangeLower_Block3_Line1_y as integer
  global g_DISPLAY_RangeUpper_Block3_Line1_x as integer
  global g_DISPLAY_RangeUpper_Block3_Line1_y as integer
  global g_DISPLAY_RangeLower_Block3_Line2_x as integer
  global g_DISPLAY_RangeLower_Block3_Line2_y as integer
  global g_DISPLAY_RangeUpper_Block3_Line2_x as integer
  global g_DISPLAY_RangeUpper_Block3_Line2_y as integer
  global g_DISPLAY_RangeLower_Block3_Line3_x as integer
  global g_DISPLAY_RangeLower_Block3_Line3_y as integer
  global g_DISPLAY_RangeUpper_Block3_Line3_x as integer
  global g_DISPLAY_RangeUpper_Block3_Line3_y as integer
  global g_DISPLAY_RangeLower_Block3_Line4_x as integer
  global g_DISPLAY_RangeLower_Block3_Line4_y as integer
  global g_DISPLAY_RangeUpper_Block3_Line4_x as integer
  global g_DISPLAY_RangeUpper_Block3_Line4_y as integer
  
endfunction

function Define_PLOTCHART_DrillScreen_Variables()



  `DRILLING SCREEN CHARTS
  global g_N_Chart_Width as integer
  global g_N_Block1_MinX as integer
  global g_N_Block1_MaxX as integer
  global g_N_Block2_MinX as integer
  global g_N_Block2_MaxX as integer
  global g_N_Block3_MinX as integer
  global g_N_Block3_MaxX as integer
  global g_N_Block4_MinX as integer
  global g_N_Block4_MaxX as integer
  
  `HISTORICAL SCREEN CHARTS
  
  


  `ENGINE
    global g_ENGINE_Display_FPS as integer : g_ENGINE_Display_FPS = -1
    
    `CF1 Database View Mode Variables
    global g_CF1_DatabaseViewer_GotoPage_Toggle as integer : g_CF1_DatabaseViewer_GotoPage_Toggle = -1
    global g_CF1_DatabaseViewer_GotoPage_BuildString$ as string : g_CF1_DatabaseViewer_GotoPage_BuildString$ = ""


      
  global g_BlockAll_Mouse_MinY as integer
  global g_BlockAll_Mouse_MaxY as integer
  global g_Block1_Mouse_MinX as integer
  global g_Block1_Mouse_MaxX as integer
  global g_Block2_Mouse_MinX as integer
  global g_Block2_Mouse_MaxX as integer
  global g_Block3_Mouse_MinX as integer
  global g_Block3_Mouse_MaxX as integer
  global g_Block4_Mouse_MinX as integer
  global g_Block4_Mouse_MaxX as integer
    
  
  `CHART Line Colour Variables
    dim CHART_Line_String$(9) as string : ` Holds the string loaded from the text file
    dim CHART_Line_Colours(28, 3) as integer : ` Line Number, Colour Value (R/G/B)
    
  `Reset chart plot print start offset after 5 minutes of inactivity
    #constant c_DS_CHART_PrintOffsetReset 300000
    global g_DS_CHART_PrintOffsetReset as integer : g_DS_CHART_PrintOffsetReset = timer()
  `Chart mouse scroll rate time period compensation
    global g_DS_ChartScroll_MseSpeed_Multiplier as integer : g_DS_ChartScroll_MseSpeed_Multiplier = 2
    global g_PITS_ChartScroll_MseSpeed_Multiplier as integer : g_PITS_ChartScroll_MseSpeed_Multiplier = 2
    
  `Toggle to click on a chart panel before showing the values displayed in that chart
    global g_PLOTCHART_display_values_click_toggle as integer : g_PLOTCHART_display_values_click_toggle = -1
    global g_PITS_PLOTCHART_display_values_click_toggle as integer : g_PITS_PLOTCHART_display_values_click_toggle = -1
      global g_PITS_ChartData_MouseState as integer : g_PITS_ChartData_MouseState = 1
  `Select a Chart variable
    global g_RANGES_Chart_Selected_Num as integer : g_RANGES_Chart_Selected_Num = -1

  `CHART Page view (CHART SCROLLING) - used for scrolling the charts using the cursor keys etc
    global g_DS_CHART_Scroll_Array_Offset as integer : g_DS_CHART_Scroll_Array_Offset = 0 : `Used to add an offset to the DS array position plotted
    global g_PITS_CHART_Scroll_Array_Offset as integer : g_PITS_CHART_Scroll_Array_Offset = 0
    global g_CHART_Scroll_MouseZ as integer : g_CHART_Scroll_MouseZ = mousez()
    #constant c_CHART_Scroll_Key_Speed 50
    `Pits Screen Chart Scrolling
    global g_PITS_CHART_Scroll_MouseZ as integer : g_PITS_CHART_Scroll_MouseZ = mousez()
    
    `Mouse out of chart timer - used while dragging an area to display data if mouse is above or below chart then scroll chart - timer used to slow down the scroll rate
    global g_ChartScroll_MouseOutOfChart_Timer as integer : g_ChartScroll_MouseOutOfChart_Timer = timer()
    #constant c_ChartScrollMouseOutOfChart_Sensitivity 80

  `Drillscreen Line Thickness
    global g_DS_PLOTCHART_DoubleLineThickness as integer : g_DS_PLOTCHART_DoubleLineThickness = -1
    
  `Drillscreen/HS Toggle Depth Ticks
    global g_DS_Display_DepthTicks as integer : g_DS_Display_DepthTicks = 1
    global g_HS_Display_DepthTicks as integer : g_HS_Display_DepthTicks = 1
  
  `HS Screen Toggle Comments Button
    global g_HS_Display_Comments as integer : g_HS_Display_Comments = 1 
    
  
  `TIME PERIOD (0.5, 1hr, 4hr, 8hr) Variables
    `Display the relevant time period button (0.5hr, 1hr, 4hr, 8hr) - startup at 1hr (0.5=1, 1=2, 4=3, 8=4)
    global g_DISPLAY_SCREEN_TimePeriod_Button as integer : g_DISPLAY_SCREEN_TimePeriod_Button = 1
    global g_PITS_SCREEN_TimePeriod_Button as integer : g_PITS_SCREEN_TimePeriod_Button = 1
    global g_ENGINE_DS_Chart_Time_Period_Adjust as integer : g_ENGINE_DS_Chart_Time_Period_Adjust = 1 : `0.5, 1, 4, 8hr adjust variable (adjusts array indexing)
    global g_ENGINE_PITS_Chart_Time_Period_Adjust as integer : g_ENGINE_PITS_Chart_Time_Period_Adjust = 1 : `0.5, 1, 4, 8hr adjust variable (adjusts array indexing)
  
  `SCROLLING TIME VARIABLES (Note: Doesn't Scroll in the client version)
  #constant c_SCROLLING_Time_Array_Size 8
  
  `Time Period Scroll Adjustments
  global g_DS_MouseScrollMultiplier_HalfHour as integer : g_DS_MouseScrollMultiplier_HalfHour = 1
  global g_DS_MouseScrollMultiplier_1Hour as integer : g_DS_MouseScrollMultiplier_1Hour = 2
  global g_DS_MouseScrollMultiplier_4Hour as integer : g_DS_MouseScrollMultiplier_4Hour = 6
  global g_DS_MouseScrollMultiplier_8Hour as integer : g_DS_MouseScrollMultiplier_8Hour = 12


endfunction

function Define_PLOTCHART_Historical_Variables()

  `SCREEN POSITION VARIABLES
    global g_HS_CHARTBOX_Screen_Left as integer
    global g_HS_CHARTBOX_Screen_Right as integer
    global g_HS_CHARTBOX_Screen_Top as integer
    global g_HS_CHARTBOX_Screen_Bottom as integer
    
    global g_HS_CHARTBOX_Ttl_Height as integer
    global g_HS_CHARTBOX_Ttl_Width as integer
   
    global g_N_HS_CHARTBOX_Screen_Bottom as integer
   
    global g_HS_CHARTBOX_Ttl_Width as integer
    
  `Information Box Position
  #constant c_HS_Box1_LeftX 16
  #constant c_HS_Box2_LeftX 355
  #constant c_HS_Box3_LeftX 693
  #constant c_HS_Box4_LeftX 1031
  #constant c_HS_BoxLeft_To_TickBoxX 14
  #constant c_HS_BoxLeft_To_ChnlNameTextX 44
  #constant c_HS_BoxLeft_To_UnitNameTextX 165
  #constant c_HS_BoxLeft_To_RangeTextX 215
  #constant c_HS_BoxLeft_To_ColourBoxX 289
  #constant c_HS_InfoBox_LineSpacing 22

  `CHART PLOTTING (DATA LINES)
  global g_HS_CHART_Scroll_Array_Offset as integer : g_HS_CHART_Scroll_Array_Offset = 0 : `Used to add an offset to the DS array position plotted
  global g_ENGINE_HS_Chart_Time_Period_Adjust as integer : g_ENGINE_HS_Chart_Time_Period_Adjust = 2 : `0.5, 1, 4, 8hr adjust variable (adjusts array indexing)
  
  `Do not update historical chart unless refresh is clicked. Calculate the start point only on 1st entry and
  `when refresh is clicked
  global g_HS_Chart_Start_Array_Pos as integer
  global g_HS_Chart_Update_Start_Array as integer : g_HS_Chart_Update_Start_Array = 1
  
  `Plot the information display line and information box
  global g_HS_Display_Chart_Values_click_toggle as integer : g_HS_Display_Chart_Values_click_toggle = -1

  dim HS_TickBox_States(20) as integer
  for set_lp = 1 to 20
    HS_TickBox_States(set_lp) = -1
  next set_lp

  `HISTORICAL CHART UPPER AND LOWER RANGE VALUES
  dim HS_Chart_Range_Values#(40) as float
  
  `Range selection with right mouse button
  global g_HS_RangeSelect_Box as integer : `1, 2, 3, 4 i.e left, middle left, middle right and right box's
  global g_HS_RangeSelect_Channel as integer : `get the channel based on the screen Y values
  global g_HS_RangeSelect_UpperLower as integer : `get the upper/lower range option using the string width in pixels

  `HS NUMPAD Toggle
  global g_HS_NUMPAD_Toggle as integer : g_HS_NUMPAD_Toggle = -1
  
  `HISTORICAL CHART GLOBAL COLOUR Variables
  dim HS_Channel_Colour(20) as dword
  for set_lp = 0 to 20
    HS_Channel_Colour(set_lp) = rgb(0,0,0)
  next set_lp
  
  `HS Time Period Buttons
  global g_HS_TimePeriod_Buttons as byte : g_HS_TimePeriod_Buttons = 3 :`1=.05, 2=1hr, 3=4hr, 4=8hr
  
  `Chart mouse scroll rate time period compensation
  global g_HS_ChartScroll_MseSpeed_Multiplier as integer : g_HS_ChartScroll_MseSpeed_Multiplier = 4
  
  global g_HS_MouseScrollMultiplier_1Hour as integer : g_HS_MouseScrollMultiplier_1Hour = 2
  global g_HS_MouseScrollMultiplier_4Hour as integer : g_HS_MouseScrollMultiplier_4Hour = 6
  global g_HS_MouseScrollMultiplier_8Hour as integer : g_HS_MouseScrollMultiplier_8Hour = 12
  global g_HS_MouseScrollMultiplier_12Hour as integer : g_HS_MouseScrollMultiplier_12Hour = 25
  
  global g_HS_PLOTCHART_DoubleLineThickness as byte : g_HS_PLOTCHART_DoubleLineThickness = -1
  
  `Temp data store for channel data while viewing data on the main HS Chart.
  dim HS_Data_Store#(20, 1) as float : `0=Data, 1=Decimal Places
  HS_Data_Store#(1, 1) = 1
  HS_Data_Store#(2, 1) = 1
  HS_Data_Store#(3, 1) = 1
  HS_Data_Store#(4, 1) = 1
  HS_Data_Store#(5, 1) = 0
  HS_Data_Store#(6, 1) = 0
  HS_Data_Store#(7, 1) = 1
  HS_Data_Store#(8, 1) = 1
  HS_Data_Store#(9, 1) = 1
  HS_Data_Store#(10, 1) = 0
  HS_Data_Store#(11, 1) = 0
  HS_Data_Store#(12, 1) = 0
  HS_Data_Store#(13, 1) = 0
  HS_Data_Store#(14, 1) = 1
  HS_Data_Store#(15, 1) = 0
  HS_Data_Store#(16, 1) = 0
  HS_Data_Store#(17, 1) = 0
  HS_Data_Store#(18, 1) = 0
  HS_Data_Store#(19, 1) = 0
  HS_Data_Store#(20, 1) = 0
  
  `Channel Names
  dim HS_Channel_Names$(20) as string
  dim HS_Channel_Units$(20) as string
  
  `CHART Line Colour Variables
    dim HS_CHART_Line_String$(20) as string : ` Holds the string loaded from the text file
    dim HS_CHART_Line_Colours(20, 3) as integer : ` Line Number, Colour Value (R/G/B)
    
  `Refresh Button Flash Timer Toggle
  global g_HS_Refresh_Light_TimTog as integer : g_HS_Refresh_Light_TimTog = -1
  `Refresh Button Flash Timer Toggle
  global g_HS_DrillTemplate_Light_TimTog as integer : g_HS_DrillTemplate_Light_TimTog = -1
  `Refresh Button Flash Timer Toggle
  global g_HS_TripTemplate_Light_TimTog as integer : g_HS_TripTemplate_Light_TimTog = -1
  
  `Button to reposition chart drawing back to the start
  global g_HS_ChartButton_TimeZero_Timer as integer : g_HS_ChartButton_TimeZero_Timer = timer()
  
  global g_HS_ENG_CopyArrayTtlTime as integer

endfunction

function Define_ColourPad_Variables()

  `COLOUR PAD VARIABLES
  global g_COLOURMAP_Toggle as integer : g_COLOURMAP_Toggle = -1
  global g_COLOURPAD_HS_ArrayNum as integer

  `Move the numpad around the screen variables
  global g_COLOURPAD_MOVE_MouseClickHOLD as integer : g_COLOURPAD_MOVE_MouseClickHOLD = -1
  global g_COLOURPAD_MOVE_Old_MseX as integer : g_COLOURPAD_MOVE_Old_MseX = mousex()
  global g_COLOURPAD_MOVE_Old_MseY as integer : g_COLOURPAD_MOVE_Old_MseY = mousey()

  global g_COLOURPAD_Set_Start_Colour as integer : g_COLOURPAD_Set_Start_Colour = -1
  global g_COLOURPAD_Start_ColourR as integer
  global g_COLOURPAD_Start_ColourG as integer
  global g_COLOURPAD_Start_ColourB as integer
  
  global g_COLOURPAD_SET_ColourR as integer
  global g_COLOURPAD_SET_ColourG as integer
  global g_COLOURPAD_SET_ColourB as integer

endfunction

function Define_INFOBOX_Variables()

  `Calculated Data Display
    `Data is displayed through use of an Array, which is filled with the display data and printed at the right time.
    dim INFOBOX_Text$(80) as string
    dim INFOBOX_TextColour(80) as dword
    dim COLOUR_ChartChannelCol(80) as dword
    global g_INFOBOX_DisplayData_Counter as integer
    global g_INFOBOX_DataBox_BkgdImg_Height as integer

  `INFOBOX Mouse Button States (LMB: Left Mouse Button)
  global g_INFOBOX_INPUT_LMB_State as integer : g_INFOBOX_INPUT_LMB_State = -1
  global g_INFOBOX_INPUT_LMB_CheckForModeState2 as integer : g_INFOBOX_INPUT_LMB_CheckForModeState2 = -1
  global g_INFOBOX_INPUT_RMB_State as integer : g_INFOBOX_INPUT_RMB_State = -1

  global g_INFOBOX_ShowButton_ActionState as integer : g_INFOBOX_ShowButton_ActionState = -1
  
  `Toggle InfoBox ON/OFF
    `Drilling Screen
      global g_INFOBOX_DS_ModeState as integer : g_INFOBOX_DS_ModeState = -1
      global g_INFOBOX_PITS_ModeState as integer : g_INFOBOX_PITS_ModeState = -1

    `PITs Screen
      global g_INFOBOX_PITS_Toggle as integer : g_INFOBOX_PITS_Toggle = -1
      global g_INFOBOX_PITS_Stage as integer : g_INFOBOX_PITS_Stage = -1

  `Time Difference between Start and End points in Mode State 2
    global g_INFOBOX_TimeDifferenceInMinutes# as float

  `INITIATE Gadget (in chart block)
    `Drilling Screen
    global g_INFOBOX_DS_GADGET_BlockActive as integer
    global g_INFOBOX_DS_GADGET_StartY as integer
    `PITs Screen
    global g_INFOBOX_PITS_GADGET_BlockActive as integer
    global g_INFOBOX_PITS_GADGET_StartY as integer
    
  `ADD DATA TO CHARTS contextually
    global g_INFOBOX_AddDataToInfoBox_ROP as integer
    global g_INFOBOX_AddDataToInfoBox_TT as integer
    global g_INFOBOX_AddDataToInfoBox_PVT as integer
    global g_INFOBOX_AddDataToInfoBox_CircHrs as integer
    global g_INFOBOX_AddDataToInfoBox_TotalSPMsTime as integer
    global g_INFOBOX_AddDataToInfoBox_RotatingHrs as integer
    global g_INFOBOX_AddDataToInfoBox_DPNumberPulled as integer
    global g_INFOBOX_AddDataToInfoBox_BIT_REVS as integer
    global g_INFOBOX_AddDataToInfoBox_ALL_MORNREP_INFO as integer
    
  `Screen highlight/grab chart area - Start and End   
    global g_INFOBOX_MSEAreaDrag_StartY_ArrPntr as integer : g_INFOBOX_MSEAreaDrag_StartY_ArrPntr = 0
    global g_INFOBOX_MSEAreaDrag_EndY_ArrPntr as integer : g_INFOBOX_MSEAreaDrag_EndY_ArrPntr = 0
    
  `DISPLAY HIGHLIGHT BOX Variables
    global g_INFOBOX_HLBox_YPos as integer
    global g_INFOBOX_HLBox_Height as integer
    global g_INFOBOX_HLBox_CalcYpos1 as integer
    global g_INFOBOX_HLBox_CalcYpos2 as integer
    
  `DISPLAY DATA BOX
    global g_INFOBOX_Databox_IsOnScreen as integer
    global g_INFOBOX_Databox_YPos as integer
    
  `Paste Highlight Box to this positon only - DELETE THESE
    global g_INFOBOX_HighlightBox_ScreenY_ArrPntr as integer
    global g_INFOBOX_HighlightBox_ScreenY as integer
    
  `Start and End Dates
    global g_INFOBOX_Time_Start$ as string
    global g_INFOBOX_Time_End$ as string
    global g_INFOBOX_Date_Start$ as string
    global g_INFOBOX_Date_End$ as string
    
  `Data Search: Maximum and Minimim Values
    global g_INFOBOX_ChannelSearchRange_MaxVal# as float
    global g_INFOBOX_ChannelSearchRange_MinVal# as float



  `OLD VARIABLES BELOW WHILE CHANGING EVERYTHING OVER


  global g_ENGINE_DateDiff_TotalDays as integer
  global g_ENGINE_TimeDiff_TotalMins# as float

  `GADGETS - Graphical Screen Interactive Data Tools
    #constant c_ENG_RTDisp_GADGET_Mse_Sensitivity 5
    global ENG_RTDisp_GADGET_Toggle as integer : ENG_RTDisp_GADGET_Toggle = -1
    global ENG_RTDisp_GADGET_BlockActive as integer : ENG_RTDisp_GADGET_BlockActive = -1
    global ENG_RTDisp_GADGET_Stage as integer : ENG_RTDisp_GADGET_Stage = -1
    global ENG_RTDisp_GADGET_ImgCreatedAtMseY as integer
    global ENG_RTDisp_GADGET_Start_PixelY as integer
    global ENG_RTDisp_GADGET_End_PixelY as integer
    global ENG_RTDisp_GADGET_Mse_Start_Y as integer : ENG_RTDisp_GADGET_Mse_Start_Y = 0
    global ENG_RTDisp_GADGET_Mse_End_Y as integer : ENG_RTDisp_GADGET_Mse_End_Y = 0
    `Gadget Handling Variables
      `Gadget 1 - ADV Chart Data

      
  `GADGET Calculation SHOW Variables
    global g_GADGET_1_ShowWorking as integer : g_GADGET_1_ShowWorking = -1
    global g_GADGET_1_ShowFullTimeBreakdown as integer : g_GADGET_1_ShowFullTimeBreakdown = -1
    global g_GADGET_1_FTB_TimeType as integer : g_GADGET_1_FTB_TimeType = 1

  `GADGET 1 Calculations Variables

    global g_GADGET_1_Time_Start$ as string
    global g_GADGET_1_Time_End$ as string
    global g_GADGET_1_Date_Start$ as string
    global g_GADGET_1_Date_End$ as string
    
    global g_GADGET_1_Hole_Depth_Start# as float
    global g_GADGET_1_Hole_Depth_End# as float
    global g_GADGET_1_Hole_Depth_Difference# as float
    
    global g_GADGET_1_Bit_Depth_Start# as float
    global g_GADGET_1_Bit_Depth_End# as float
    global g_GADGET_1_Bit_Depth_Difference# as float
    
    global g_GADGET_1_AnnularVol_ft# as float
    global g_GADGET_1_PipeCapacity_ft# as float
    global g_GADGET_1_Theo_Volume_Diff# as float
    
    global g_GADGET_1_PVT_Start# as float
    global g_GADGET_1_PVT_End# as float
    global g_GADGET_1_PVT_Difference# as float
    
    global g_GADGET_1_TheoreticalTotalMudLoss# as float
    global g_GADGET_1_PVT_LOSSRATE# as float

    
    `----- Convert Gadget to CHANNEL ID, not fixed
    
    global g_GADGET_1_BLK1_L1_Data_MAX# as float
    global g_GADGET_1_BLK1_L1_Data_MIN# as float
    global g_GADGET_1_BLK1_L2_Data_MAX# as float
    global g_GADGET_1_BLK1_L2_Data_MIN# as float
    global g_GADGET_1_BLK1_L3_Data_MAX# as float
    global g_GADGET_1_BLK1_L3_Data_MIN# as float
    
    global g_GADGET_1_BLK2_L1_Data_MAX# as float
    global g_GADGET_1_BLK2_L1_Data_MIN# as float
    global g_GADGET_1_BLK2_L2_Data_MAX# as float
    global g_GADGET_1_BLK2_L2_Data_MIN# as float
    global g_GADGET_1_BLK2_L3_Data_MAX# as float
    global g_GADGET_1_BLK2_L3_Data_MIN# as float
    
    global g_GADGET_1_BLK3_L1_Data_MAX# as float
    global g_GADGET_1_BLK3_L1_Data_MIN# as float
    global g_GADGET_1_BLK3_L2_Data_MAX# as float
    global g_GADGET_1_BLK3_L2_Data_MIN# as float
    global g_GADGET_1_BLK3_L3_Data_MAX# as float
    global g_GADGET_1_BLK3_L3_Data_MIN# as float
    
    
    


endfunction

function Define_Well_Data_Variables()

  `These valued are used by the system to store well profile data

  global WELLDATA_HoleID# as float
  global WELLDATA_PipeOD# as float
  global WELLDATA_PipeID# as float
  
  global WELLDATA_MudMotorFactor_RevsGallon# as float

endfunction

function Define_VIEWERMODE_LOGIN_Variables()

  `g_lib_Login_CF2_Input_SetActiveCell - this variable sets the array type used to get the password input
  `                                      it can either be set to 1: Standard Array (LOGIN_ID) or
  `                                      2: Editable LOGIN ID array
  global g_lib_Login_CF2_Input_SetActiveCell as integer : g_lib_Login_CF2_Input_SetActiveCell = 1

  `Fade time for Login successful graphic box.
  #constant c_ENGINELOGIN_ConnectedBoxFadeTime 3000
  
  `Hide the DS/HS Screen Toggle Button when logging in (it only hides it, not disables the code).
  global g_ENGINELOGIN_Hide_DSHS_Button as integer : g_ENGINELOGIN_Hide_DSHS_Button = -1

  global g_ENGINELOGIN_Show_Login as integer
  
  global g_ENGINELOGIN_ConnectionInfoText$ as string : g_ENGINELOGIN_ConnectionInfoText$ = ""
  
  `Special ESC Toggle for use in Viewer mode since keystate(1) is actioned across the program
  global g_ENGINELOGIN_ESCToggle as integer : g_ENGINELOGIN_ESCToggle = -1
  
  `If at startup file contains a username and password then we do not need the user to enter one, but
  `the login box is flashed up and fades away as an affect anyway
  global g_ENGINELOGIN_IDInFileAtStartUpAffect as integer : g_ENGINELOGIN_IDInFileAtStartUpAffect = -1
  global g_ENGINELOGIN_IDInFileAtStartUpTimer as integer
  global g_ENGINELOGIN_IDInFileAtStartUpALPHA as integer
  
  global g_ENGINELOGIN_Show_Networking as integer : g_ENGINELOGIN_Show_Networking = 1
  global g_ENGINELOGIN_Login_Hidden as integer : g_ENGINELOGIN_Login_Hidden = -1
  global g_ENGINELOGIN_InputBoxActive as integer : g_ENGINELOGIN_InputBoxActive = 1
  
  global g_ENGINELOGIN_LoginScreenPersistentMessage$ as string : g_ENGINELOGIN_LoginScreenPersistentMessage$ = ""
    
  global g_ENGINELOGIN_InputFlashToggle as integer : g_ENGINELOGIN_InputFlashToggle = -1
  global g_ENGINELOGIN_InputFlashTimer as integer : g_ENGINELOGIN_InputFlashTimer = timer()

  global g_ENGINELOGIN_InputUsername$ as string : g_ENGINELOGIN_InputUsername$ = ""
  global g_ENGINELOGIN_InputPassword$ as string : g_ENGINELOGIN_InputPassword$ = ""
  global g_ENGINELOGIN_InputPasswordSTARS$ as string : g_ENGINELOGIN_InputPasswordSTARS$ = ""
  global g_ENGINELOGIN_InputIPAddress$ as string : g_ENGINELOGIN_InputIPAddress$ = ""
  global g_ENGINELOGIN_InputPortNumber$ as string : g_ENGINELOGIN_InputPortNumber$ = ""

  global g_ENGINELOGIN_Main_Username$ as string
  global g_ENGINELOGIN_Main_Password$ as string
  
  `Login Box Variables
  global g_ENGINELOGIN_MainBox_PosX as integer
  global g_ENGINELOGIN_MainBox_PosY as integer
  
  
  `Drag the Login Box Variables
  global g_LOGINBOX_MOVE_MouseClickHOLD as integer : g_LOGINBOX_MOVE_MouseClickHOLD = -1
  global g_LOGINBOX_MOVE_Old_MseX as integer : g_LOGINBOX_MOVE_Old_MseX = mousex()
  global g_LOGINBOX_MOVE_Old_MseY as integer : g_LOGINBOX_MOVE_Old_MseY = mousey()
  
  `LOGIN - Enter USERID's in User ID Table
  global g_LOGIN_UserID_InputToggle as integer : g_LOGIN_UserID_InputToggle = -1
  global g_LOGIN_UserID_Input$ as string
  global g_LOGIN_UserID_Build$ as string
  global g_LOGIN_UserID_ID_Type as integer : g_LOGIN_UserID_ID_Type = -1
  global g_LOGIN_UserID_ActiveColumnNum as integer : g_LOGIN_UserID_ActiveColumnNum = -1
  global g_LOGIN_UserID_ActiveRowNum as integer : g_LOGIN_UserID_ActiveRowNum = -1
  global g_LOGIN_UserID_InputFlashToggle as integer
  global g_LOGIN_UserID_InputFlashTimer as integer : g_LOGIN_UserID_InputFlashTimer = timer()

  `Timer and Date of last Login Table Transmissions and Receptions to/from Server
  global g_ENG_LOGIN_LastTransmit_Date$ as string
  global g_ENG_LOGIN_LastTransmit_Time$ as string
  global g_ENG_LOGIN_LastUpdate_Date$ as string
  global g_ENG_LOGIN_LastUpdate_Time$ as string


endfunction

function Define_INPUTPAD_Variables()

  global g_INPUTPAD_Startup_Stage as integer : g_INPUTPAD_Startup_Stage = -1

  global g_INPUTPAD_MouseClick as integer : g_INPUTPAD_MouseClick = -1

  `Move the numpad around the screen variables
  global g_INPUTPAD_MOVE_MouseClickHOLD as integer : g_INPUTPAD_MOVE_MouseClickHOLD = -1
  global g_INPUTPAD_SpritePos_x as integer
  global g_INPUTPAD_SpritePos_y as integer
  global g_INPUTPAD_MOVE_Old_MseX as integer : g_INPUTPAD_MOVE_Old_MseX = mousex()
  global g_INPUTPAD_MOVE_Old_MseY as integer : g_INPUTPAD_MOVE_Old_MseY = mousey()

  global g_INPUTPAD_BuildValue$ as string : `Value entered in the number pad to set all plot ranges
  global g_INPUTPAD_BuildValue_Final$ as string
  
  global g_INPUTPAD_Highlighted_Button as integer : g_INPUTPAD_Highlighted_Button = 13
  global g_INPUTPAD_Selected_Button as integer : g_INPUTPAD_Selected_Button = -1
  global g_INPUTPAD_Selected_Button_Mouseclick as integer : g_INPUTPAD_Selected_Button_Mouseclick = -1
  global g_INPUTPAD_Enter_Button_Pressed as integer : g_INPUTPAD_Enter_Button_Pressed = -1
  global g_INPUTPAD_Enter_Button_Timer as integer : g_INPUTPAD_Enter_Button_Timer = hitimer()
  global g_INPUTPAD_Cancel_Button_Pressed as integer : g_INPUTPAD_Cancel_Button_Pressed = -1
  global g_INPUTPAD_Cancel_Button_Timer as integer : g_INPUTPAD_Cancel_Button_Timer = hitimer()

endfunction



function Define_NUMPAD_variables()

  `:NOTE: The DS numpad is turned on if the g_RANGES_Chart_Selected_Num variable contains a number <> -1 (i.e one of the ranges was selected)

  global g_NUMPAD_Highlighted_Button as integer : g_NUMPAD_Highlighted_Button = 13
  global g_NUMPAD_Selected_Button as integer : g_NUMPAD_Selected_Button = -1
  global g_NUMPAD_Selected_Button_Mouseclick as integer : g_NUMPAD_Selected_Button_Mouseclick = -1
  global g_NUMPAD_Enter_Button_Pressed as integer : g_NUMPAD_Enter_Button_Pressed = -1
  global g_NUMPAD_Cancel_Button_Pressed as integer : g_NUMPAD_Cancel_Button_Pressed = -1

  global g_NUMPAD_BuildValue$ as string : `Value entered in the number pad to set all plot ranges
  global g_NUMPAD_BuildValue_Final$ as string
  
  global g_NUMPAD_InputFlashTimer as integer : g_NUMPAD_InputFlashTimer = timer()
  global g_NUMPAD_InputFlashToggle as integer : g_NUMPAD_InputFlashToggle = -1
  
  `Move the numpad around the screen variables
  global g_NUMPAD_MOVE_MouseClickHOLD as integer : g_NUMPAD_MOVE_MouseClickHOLD = -1
  global g_NUMPAD_SpritePos_x as integer
  global g_NUMPAD_SpritePos_y as integer
  global g_NUMPAD_MOVE_Old_MseX as integer : g_NUMPAD_MOVE_Old_MseX = mousex()
  global g_NUMPAD_MOVE_Old_MseY as integer : g_NUMPAD_MOVE_Old_MseY = mousey()

  global g_PITS_NUMPAD_Selected_ChannelID as integer
  global g_PITS_NUMPAD_Selected_LowerUpperChnl as integer
  global g_PITS_NUMPAD_DISPLAY_NUMPAD as integer : g_PITS_NUMPAD_DISPLAY_NUMPAD = -1
  global g_PITS_NUMPAD_SelectRange_MouseClick as integer : g_PITS_NUMPAD_SelectRange_MouseClick = -1

  `Select a Chart variable - stores the number of the chart selected (acts as a toggle to show the NUMPAD)
  global g_RANGES_Chart_Selected_Num as integer : g_RANGES_Chart_Selected_Num = -1
  global g_NUMPAD_High_Low_Choice_Selection as integer : g_NUMPAD_High_Low_Choice_Selection = -1 : `1=Upper Value, 2=Lower Value
  `Display the numpad and only allow input into it
  ` Array positions 
  ` 0-9 = numbers 0-9
  ` 10  = decimal place
  ` 11  = minus sign
  ` 12  = clear
  ` 13  = enter
  ` 14  = cancel



endfunction

function Define_RT_PrintToImage_Variables()

  
  global g_ENG_RTPRNT2IMG_CTRLFLOW as integer : g_ENG_RTPRNT2IMG_CTRLFLOW = -1


  global g_RTPRNT2IMG_DispMsgBox as integer : g_RTPRNT2IMG_DispMsgBox = -1
  
  global g_RTPRNT2IMG_MseExitCondition as integer : g_RTPRNT2IMG_MseExitCondition = -1
  
  global g_RTPRNT2IMG_Info_Folder$ as string : g_RTPRNT2IMG_Info_Folder$ = ""
  global g_RTPRNT2IMG_Info_File$ as string : g_RTPRNT2IMG_Info_File$ = ""
  global g_RTPRNT2IMG_Info_Process$ as string : g_RTPRNT2IMG_Info_Process$ = ""
  global g_RTPRNT2IMG_AddCmntStr$ as string : g_RTPRNT2IMG_AddCmntStr$ = ""
  global g_RTPRNT2IMG_Filename$ as string : g_RTPRNT2IMG_Filename$ = ""
  
  global g_RTPRNT2IMG_SaveImage_FullPath$ as string : g_RTPRNT2IMG_SaveImage_FullPath$ = ""
  
  global g_RTPRNT2IMG_Start_DS_ScrollOffset as integer
  global g_RTPRNT2IMG_Start_PITS_ScrollOffset as integer
  
  global g_RTPRNT2IMG_DisplayCmnts_Toggle_OFF as integer : g_RTPRNT2IMG_DisplayCmnts_Toggle_OFF = -1

endfunction


function INSTALLATION_Graphical_CHECK_INSTALL()

  local l_FileExist_CLIENTtxt as integer : l_FileExist_CLIENTtxt = 1
  local l_FileExist_ENGINE_SETUParr as integer : l_FileExist_ENGINE_SETUParr = 1
  local l_Engine_DataBase_Folder$ as string
  local l_FolderCreated_DB as integer
  local l_FolderCreated_ENG as integer
  local l_TextNoteFile$ as string
  local l_Engine_ENGData_Folder$ as string
  local l_Channel_Setups_IDs$ as string
  local l_1024_768_Folder$ as string
  local l_WideScreen_Folder$ as string
  local l_Engine_DB_BKUP_Folder$ as string


  `This function is a streamlined version of the older INSTALLATION_Check()
  `It is designed to build an image of the installation and then if anything is missing
  `display a graphical setup option that is more professional than the previous text based INSTALLATION_Check()
  `It works by starting with reference variables for the setup options and then loading any files over
  `them while also noting any missing files. At the end if any files were missing it displays the full
  `setup screen using the reference variables copied over by any loaded variables.

  

  `Check Folders and create if neccessary - Note this is done around line 187 during the definition of the
  `global string variables for the program directory root paths.



`--------------------------------------------------------------------------------------------------------


  `This function checks that all folders and files exist, if not it creates them and
  `handles any required user input
   
  `Check that Database Folders Exist, create if not found in the local folder
  l_Engine_DataBase_Folder$ = g_autodir_full_directory_path$ + "\Database"
  if path exist(l_Engine_DataBase_Folder$) = 0
    make directory l_Engine_DataBase_Folder$
    l_FolderCreated_DB = 1
  endif
    `Create text files in Database Folder to provide important information to the User (in the file name).
      l_TextNoteFile$ = g_autodir_full_directory_path$ + "\Database\IMPORTANT - To load a file name it Database.dat.txt"
      if file exist(l_TextNoteFile$) = 0
        open to write 1, l_TextNoteFile$
          write string 1, "IMPORTANT - To load a file name it Database.dat"
          write string 1, "- The Database.dat filename is the only filename loaded by the program."
        close file 1
      endif
      l_TextNoteFile$ = g_autodir_full_directory_path$ + "\Database\IMPORTANT - NEVER COPY Database.dat while the program is running.txt"
      if file exist(l_TextNoteFile$) = 0
        open to write 1, l_TextNoteFile$
          write string 1, "IMPORTANT - NEVER COPY Database.dat while the program is running"
          write string 1, "- It can corrupt the database by locking it in the middle of a write"
        close file 1
      endif
      
   `The Database Backups are now moved from the main Database Folder to a sub Database Folder
   `to keep the main folder a bit more tidy.
  l_Engine_DB_BKUP_Folder$ = g_autodir_full_directory_path$ + "\Database\DB Backups"
  if path exist(l_Engine_DB_BKUP_Folder$) = 0
    make directory l_Engine_DB_BKUP_Folder$
  endif

  `Check directory exists; if not then the program was unable to create it and it is likely that the
  `user does not have Administrator Rights.
  if path exist(l_Engine_DataBase_Folder$) = 0
    if display width() > 1300
      g_ENGINE_Screen_Resolution = 1
    else
      g_ENGINE_Screen_Resolution = 0
    endif
    lib_SET_DISPLAY_MODE()
    lib_FULLSCREEN_Force_Fullscreen_Mode()
    lib_ON_ERROR_Handle("Unable to write to the installation directory.", "Make sure that the program is run with Administrator Privileges.", "", 1)
  endif
  
  l_Engine_ENGData_Folder$ = g_autodir_full_directory_path$ + "\Engine Data"
  if path exist(l_Engine_ENGData_Folder$) = 0
    make directory l_Engine_ENGData_Folder$
    l_FolderCreated_ENG = 1
  endif
  `
  l_Channel_Setups_IDs$ = g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data"
  if path exist(l_Channel_Setups_IDs$) = 0
    make directory l_Channel_Setups_IDs$
  endif  
  `
  l_1024_768_Folder$ = g_autodir_full_directory_path$ + "\Engine Data\1024x768"
  if path exist(l_1024_768_Folder$) = 0
    make directory l_1024_768_Folder$
  endif
  `  
  l_WideScreen_Folder$ = g_autodir_full_directory_path$ + "\Engine Data\WideScreen"
  if path exist(l_WideScreen_Folder$) = 0
    make directory l_WideScreen_Folder$
  endif
`---------------------------------------------------------

  `Check that Files Exist, create if not found in the path folders
  
    `l_Path_DS_DisplayARR$ = g_autodir_full_directory_path$ + "\Engine Data\1024x768\DS_Display.arr"
    `if file exist(l_Path_DS_DisplayARR$) = 0
    `  CREATE_RTDisp_Display_1024x768()
    `  l_FileCreated_DS_1024_768_Display = 1
    `endif
    l_Path_DS_Unit_Data$ = g_autodir_full_directory_path$ + "\Engine Data\1024x768\DS_Screen_Units.arr"
    if file exist(l_Path_DS_Unit_Data$) = 0
      CREATE_RTDisp_Unit_Mappings_1024x768()
      l_FileCreated_DS_1024_768_Unit_Mappings = 1
    endif
    `  
    `l_Path_Display_WideScreen$ = g_autodir_full_directory_path$ + "\Engine Data\WideScreen\DS_Display_WideScreen.arr"
    `if file exist(l_Path_Display_WideScreen$) = 0
    `  CREATE_RTDisp_Display_WideScreen()
    `  l_FileCreated_DS_WideScreen_Display = 1
    `endif
    l_Path_DS_Unit_WideScreenData$ = g_autodir_full_directory_path$ + "\Engine Data\WideScreen\DS_Screen_Units_WideScreen.arr"
    if file exist(l_Path_DS_Unit_WideScreenData$) = 0
      CREATE_RTDisp_Unit_Mappings_WideScreen()
      l_FileCreated_DS_WideScreen_Unit_Mappings = 1
    endif
`---



    `PITS SCREEN COORDINATES FILE 
    l_Path_PITSCREEN_1024x768$ = g_autodir_full_directory_path$ + "\Engine Data\1024x768\Pits_Display.arr"
    if file exist(l_Path_PITSCREEN_1024x768$) = 0
      CREATE_RTDisp_Pits_1024x768()
    endif
    l_Path_PITSCREEN_WideScreenData$ = g_autodir_full_directory_path$ + "\Engine Data\WideScreen\Pits_Display_WideScreen.arr"
    if file exist(l_Path_PITSCREEN_WideScreenData$) = 0
      CREATE_RTDisp_Pits_Widescreen()
    endif
    
`---    
    l_Path_WellProfile$ = g_autodir_full_directory_path$ + "\Engine Data\Well_Profile.txt"
    if file exist(l_Path_WellProfile$) = 0
      CREATE_WELL_DATA_File()
      l_FileCreated_WellProfile = 1
    endif
    LOAD_WELL_DATA_File()
  
 
  `Historical Screen Channel States (ON/OFF)
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\HS_ChannelStates.arr"
  if file exist(l_testfile$) = 0
    SAVE_HS_ChannelStates()
  endif
  LOAD_HS_Channel_States()
  
  `Historical Screen Channel Colours (RGB)
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\HS_ChannelColours.arr"
  if file exist(l_testfile$) = 0
    CREATE_HS_Channel_Colours()
  endif
  LOAD_HS_Channel_Colours()
  
  `Historical Screen Chart Upper and Lower Range Values
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\HS_ChannelRanges.arr"
  if file exist(l_testfile$) = 0
    CREATE_HS_Ranges_Data()
  endif
  LOAD_HS_Range_Values()
  
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\HS_Screen_Channel_ID.arr"
  if file exist(l_testfile$) = 0
    CREATE_HS_Channel_ID()
  endif
  LOAD_HS_Channel_ID()
  
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\OTHER_Variables.txt"
  if file exist(l_testfile$) = 0
    CREATE_OTHER_Variables()
  endif
  LOAD_OTHER_Variables()
  
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\WITS_CONFIGURATION.txt"
  if file exist(l_testfile$) = 0
    CREATE_WITS_CONFIG_File()
  endif
  LOAD_WITS_CONFIG_File()
  
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\WITS_OVERRIDE_CONFIGURATION.txt"
  if file exist(l_testfile$) = 0
    CREATE_WITS_OVERRIDE_CONFIG_File()
  endif
  LOAD_WITS_OVERRIDE_CONFIG_File()
  
  `CHANNEL ID - Load Channel Names
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Names.txt"
  if file exist(l_testfile$) = 0
    CREATE_CHANNEL_ID_Names()
  endif
  LOAD_CHANNEL_ID_Names()
  
  `CHANNEL ID - Load Channel Names - USER OVERRIDE DISPLAY NAMES
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Names_Overrides.txt"
  if file exist(l_testfile$) = 0
    CREATE_CHANNEL_ID_Names_USER_OVERRIDE()
  endif
  LOAD_CHANNEL_ID_Names_USER_OVERRIDE()
  
   
  `CHANNEL ID - Load Channel Index Pointers (Which on screen chart is pointing to which database channel)
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Index.txt"
  if file exist(l_testfile$) = 0
    CREATE_CHANNEL_ID_ChannelIndex()
  endif
  LOAD_CHANNEL_ID_ChannelIndex()

  `CHANNEL ID - Load Channel Ranges (Lower/Higher ranges for each channel)
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Ranges.txt"
  if file exist(l_testfile$) = 0
    CREATE_CHANNEL_ID_Ranges()
  endif
  LOAD_CHANNEL_ID_Ranges()
  
  `ALARMS
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\Alarms.txt"
  if file exist(l_testfile$) = 0
    CREATE_ALARMS_TXT_File()
  endif
  LOAD_ALARMS_TXT_File()

  `ENGINE EXTERNAL VARIABLES - User changable ENGINE variables
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\ENGINE_ExternalVariables.txt"
  if file exist(l_testfile$) = 0
    CREATE_Engine_ExternalVariables()
  endif
  LOAD_Engine_ExternalVariables()

  l_Path_DRILLSCREEN_1024x768$ = g_autodir_full_directory_path$ + "\Engine Data\1024x768\Drilling_Display.arr"
  if file exist(l_Path_DRILLSCREEN_1024x768$) = 0
    CREATE_RTDisp_Drilling_1024x768()
  endif
  l_Path_DRILLSCREEN_WideScreenData$ = g_autodir_full_directory_path$ + "\Engine Data\WideScreen\Drilling_Display_WideScreen.arr"
  if file exist(l_Path_DRILLSCREEN_WideScreenData$) = 0
    CREATE_RTDisp_Drilling_Widescreen()
  endif
  
`-------------------------------------------------------------------------------------------------------- 
  
  `USER CHOICE FILES
  `1. Screen Resolution - CLIENT.txt
  `1. Server IP Address and Port - CLIENT.txt
  `3. Core Function type - ENGINE_SETUP.arr

    `1, 2
    l_ClientFile$ = g_autodir_full_directory_path$ + "\Engine Data\CLIENT.txt"
    if file exist(l_ClientFile$) = 0
      l_FileExist_CLIENTtxt = -1
    else
      l_FileExist_CLIENTtxt = 1
      LOAD_CLIENT_TXT_File()
    endif
    `3
    l_File_ENGSetup$ = g_autodir_full_directory_path$ + "\Engine Data\ENGINE_Setup.arr"
    if file exist(l_File_ENGSetup$) = 0
      l_FileExist_ENGINE_SETUParr = -1
    else
      l_FileExist_ENGINE_SETUParr = 1
      LOAD_Engine_Setup() 
    endif
  



  
  if l_FileExist_CLIENTtxt = -1 or l_FileExist_ENGINE_SETUParr = -1
    INSTALLATION_Graphical_SCREEN()
      g_CLIENT_InstallInputIP$ = g_GINSTVar_IPAddress$
      g_CLIENT_InstallInputPORT$ = g_GINSTVar_PortNumber$
      g_CLIENT_InstallInputScreenResolution = g_GINSTVar_ScreenResolution
    CREATE_CLIENT_TXT_File()
    LOAD_CLIENT_TXT_File()
    `
    g_ENGINE_CoreFunctionType = g_GINSTVar_CFMode
    g_ENGINE_First_Runtime = 1
    g_ENGINE_MEMDB_Runtime_DAYS = 182
    CREATE_Engine_Setup()
    LOAD_Engine_Setup()
  endif
  
 ` 
 ` 
 ` 
 ` g_GINSTVar_CFMode
 ` g_GINSTVar_CFModeMLSPassword$

  
  




  `**************** POST ENGINE_SETUP.arr and CLIENT.txt Creation ******************************
  `NOTE: all files created after this point require that the user has selected the user
  `      input installation variables.
  
  `If CF=1 then load the file to override the Server downloaded range values and use the local ones
  `instead - this file stores any user entered data for use and reload.
  l_testfile$ = g_autodir_full_directory_path$ + "\Engine Data\DS_Chart_Ranges.arr"
  if file exist(l_testfile$) = 0
    if g_ENGINE_CoreFunctionType = 1
      CREATE_PLOT_CF1_Local_RangesData()
      CREATE_CHANNEL_ID_Ranges()
    endif
    if g_ENGINE_CoreFunctionType = 2
      `CREATE_PLOT_CF2_Local_RangesData()
      CREATE_CHANNEL_ID_Ranges()
    endif
  endif
  `LOAD_PLOT_Local_RangesData()
  LOAD_CHANNEL_ID_Ranges()
   
  if g_ENGINE_CoreFunctionType = 1
    l_Path_Display_LOGIN_CF1$ = g_autodir_full_directory_path$ + "\Engine Data\Login_Account.txt"
    if file exist(l_Path_Display_LOGIN_CF1$) = 0
      l_FileCreated_LOGIN_AccountDetails = 1
      CREATE_CF1_Login_Account_File()
      LOAD_CF1_Login_Account_File()
    else
      LOAD_CF1_Login_Account_File()
    endif
  endif

  if g_ENGINE_CoreFunctionType = 2
    l_Path_Display_LOGIN_CF2$ = g_autodir_full_directory_path$ + "\Engine Data\Server_Login_Accounts.txt"
    if file exist(l_Path_Display_LOGIN_CF2$) = 0
      l_FileCreated_LOGIN_AccountDetails = 1
        `Create a single universal login account within the startup template
        if c_LOGIN_ID_Universal_MaxArr > 0
          LOGIN_ID_Universal(1).Username$ = "dkanegds"
          LOGIN_ID_Universal(1).Password$ = "logging1"
        endif
      CREATE_CF2_Login_Accounts_File()
    else
      LOAD_CF2_Login_Account_File() 
    endif
  endif
  
  
  `************************* End of function Settings *************************
  
  `Screen Dimension Setup
  `if g_RUN_IN_WIDESCREEN_ON = 1
  `  LOAD_DATA_ENGINE_WideScreen()
  `else
  `  LOAD_DATA_ENGINE_1024x768()
  `endif
  
  
  `lib_SET_SCREEN_RESOLUTION(1)
  INITIALISE_GRAPHICS_SYSTEM()
  

endfunction

function INSTALLATION_Graphical_SCREEN()

  `This function displays the setup screen
  
  `Setup Local Variables
  local l_ExitCondition as integer : l_ExitCondition = -1
  local l_LMouseClick as integer : l_LMouseClick = -1
  
  `Password failed ToggleON
  local l_OK_Button_Response as integer : l_OK_Button_Response = -1
  
  `Local Flash Toggle
  local l_FlashTimer as integer : l_FlashTimer = timer()
  local l_FlashToggle as integer : l_FlashToggle = -1
  
  
  g_GINSTVar_IPAddress$ = ""
  g_GINSTVar_PortNumber$ = ""

  local l_InputIPorPortType as integer : l_InputIPorPortType = 1
  g_ENGINE_Input$ = g_GINSTVar_IPAddress$
  
  local l_InputCFModeType as integer : l_InputCFModeType = 1
  g_GINSTVar_CFModeMLSPassword$ = ""

  
  `Attempt to set g_GINSTVar_ScreenResolution based on Screen Width
  if display width() > 1300
    g_GINSTVar_ScreenResolution = 1
  endif

  
  set window size 449, 521
  set display mode 449, 521, 32
  
  set window title "GDS Remote Database Service - Installation"
  set window layout 0, 1, 3
  
  `set camera aspect (get window client width() + 0.0) / get window client height()
  
  `INITIALISE_GRAPHICS_SYSTEM()
  INITIALISE_D3D_FUNC()



  repeat
  
    if mouseclick() = 0 and l_LMouseClick = 1
      l_LMouseClick = -1
    endif  
  
    INSTALLATION_Graphical_ImageHandle()
    
    paste image c_INSTALL_IMAGE_Background, 0, 0
    
    `Display Screen Resolution Tick Boxes
    `1024x768
    if g_GINSTVar_ScreenResolution = 0
      paste image c_END_INST_ResTick_ON, 313, 142
    endif
    `Widescreen
    if g_GINSTVar_ScreenResolution = 1
      paste image c_END_INST_ResTick_ON, 313, 171
    endif
    
    `Select screen resolution tick box
    if mouseclick() = 1 and l_LMouseClick = -1
      if mousex() > 312 and mousex() < 331
        `1024x768
        if mousey() > 143 and mousey() < 161
          g_GINSTVar_ScreenResolution = 0
          l_LMouseClick = 1
        endif
        `Widescreen
        if mousey() > 172 and mousey() < 190
          g_GINSTVar_ScreenResolution = 1
          l_LMouseClick = 1
        endif
      endif
    endif
    
    `Flash Timer/Toggle
    if timer() > l_FlashTimer
      l_FlashTimer = timer() + 750
      if l_FlashToggle = -1
        l_FlashToggle = 1
      else
        l_FlashToggle = -1
      endif
    endif
    
    `Select Input Box Areas
    if mouseclick() = 1 and l_LMouseClick = -1 and l_OK_Button_Response = -1
      if mousex() > 280 and mousex() < 435
        if mousey() > 250 and mousey() < 306
          if mousey() < 280
            l_LMouseClick = 1
            l_FlashToggle = 1 : l_FlashTimer = timer() + 750
            l_InputIPorPortType = 1
            clear entry buffer
          else
            l_LMouseClick = 1
            l_FlashToggle = 1 : l_FlashTimer = timer() + 750
            l_InputIPorPortType = 2
            clear entry buffer
          endif    
        endif
      endif
    endif
    `Select CFMode MLS Password Input Box
    if mouseclick() = 1 and l_LMouseClick = -1 and l_OK_Button_Response = -1
      if mousex() > 295 and mousex() < 435
        if mousey() > 419 and mousey() < 440
          l_LMouseClick = 1
          l_FlashToggle = 1 : l_FlashTimer = timer() + 750
          l_InputIPorPortType = 3
        endif
      endif
    endif
    
    if l_InputIPorPortType = 1
      g_GINSTVar_IPAddress$ = lib_INPUT_GetStringX(g_GINSTVar_IPAddress$, 14, 1, 0)
    endif
    if l_InputIPorPortType = 2
      g_GINSTVar_PortNumber$ = lib_INPUT_GetStringX(g_GINSTVar_PortNumber$, 4, 0, 1)
    endif
    if l_InputIPorPortType = 3
      g_GINSTVar_CFModeMLSPassword$ = lower$(lib_INPUT_GetStringX(g_GINSTVar_CFModeMLSPassword$, 9, 0, 0))
    endif
        
    d3d_starttext
    `IP Address
      if l_InputIPorPortType = 1
        if l_FlashToggle = 1
          d3d_text 12, 296, 255, 0, ": " + g_GINSTVar_IPAddress$ + "|", g_ENGINE_COLOUR_Black
        else
          d3d_text 12, 296, 255, 0, ": " + g_GINSTVar_IPAddress$, g_ENGINE_COLOUR_Black
        endif
        d3d_text 12, 296, 284, 0, ": " + g_GINSTVar_PortNumber$, g_ENGINE_COLOUR_Black
      endif
    `Port Number
      if l_InputIPorPortType = 2
        d3d_text 12, 296, 255, 0, ": " + g_GINSTVar_IPAddress$, g_ENGINE_COLOUR_Black
        if l_FlashToggle = 1
          d3d_text 12, 296, 284, 0, ": " + g_GINSTVar_PortNumber$ + "|", g_ENGINE_COLOUR_Black
        else
          d3d_text 12, 296, 284, 0, ": " + g_GINSTVar_PortNumber$, g_ENGINE_COLOUR_Black
        endif
      endif
    d3d_endtext
      
      
    `Display CF Mode Tick Boxes
    `Viewer Mode
    if g_GINSTVar_CFMode = 1
      paste image c_END_INST_ResTick_ON, 313, 365
    endif
    `Mudlogging Suite
    if g_GINSTVar_CFMode = 2
      paste image c_END_INST_ResTick_ON, 313, 394
      paste image c_ENG_INST_MLSPassword, 215, 422
      d3d_starttext
        if l_InputIPorPortType = 3
          d3d_text 12, 296, 255, 0, ": " + g_GINSTVar_IPAddress$, g_ENGINE_COLOUR_Black
          d3d_text 12, 296, 284, 0, ": " + g_GINSTVar_PortNumber$, g_ENGINE_COLOUR_Black
          if l_FlashToggle = 1
            d3d_text 12, 296, 422, 0, " " + g_GINSTVar_CFModeMLSPassword$ + "|", g_ENGINE_COLOUR_Black
          else
            d3d_text 12, 296, 422, 0, " " + g_GINSTVar_CFModeMLSPassword$, g_ENGINE_COLOUR_Black
          endif
        else
          d3d_text 12, 296, 422, 0, " " + g_GINSTVar_CFModeMLSPassword$, g_ENGINE_COLOUR_Black
        endif
      d3d_endtext
    endif
      
    `Select CFMode tick box
    if mouseclick() = 1 and l_LMouseClick = -1
      if mousex() > 312 and mousex() < 331
        `Viewer Mode
        if mousey() > 366 and mousey() < 384
          g_GINSTVar_CFMode = 1
          l_LMouseClick = 1
          l_InputIPorPortType = 1
        endif
        `Mudlogging Suite
        if mousey() > 395 and mousey() < 413
          g_GINSTVar_CFMode = 2
          l_LMouseClick = 1
        endif
      endif
    endif

    `[TAB] - Alternate Between Active Cells
    if keystate(15)= 1 and key_state(15,0)= 0
      l_FlashToggle = 1 : l_FlashTimer = timer() + 750
      l_runonce = -1
      if l_InputIPorPortType = 3 and l_runonce = -1
        l_InputIPorPortType = 1
        l_runonce = 1
      endif
      if l_InputIPorPortType = 2 and l_runonce = -1
        if g_GINSTVar_CFMode = 2
            l_InputIPorPortType = 3
        else
          l_InputIPorPortType = 1
        endif
        l_runonce = 1
      endif
      if l_InputIPorPortType = 1 and l_runonce = -1
        l_InputIPorPortType = 2
        l_runonce = 1
      endif  
      key_state(15,0)=1
    endif
    if keystate(15)=0 and key_state(15,0)=1 then key_state(15,0)=0

    `Highlight Box Buttons
    if mousey() > 489 and mousey() < 511 and l_OK_Button_Response = -1
      `Close Button
      if mousex() > 282 and mousex() < 356
        paste image c_ENG_WinStyle_CLOSE_Lit_Img, 283, 490
        if mouseclick() = 1 and l_LMouseClick = -1
          INITIALISE_GRAPHICS_SYSTEM()
          lib_EXIT_Program(1, 1)
          l_LMouseClick = 1
        endif
      endif
      `OK Button
      if mousex() > 365 and mousex() < 439
        paste image c_ENG_WinStyle_OK_Lit_Img, 366, 490
        if mouseclick() = 1 and l_LMouseClick = -1
          l_OK_Button_Response = lib_INSTALLATION_Graphical_OKClicked(l_OK_Button_Response)
        endif
      endif
    endif
    `Handle keyboard Enter Buttons
    if lib_Enter_Pressed(2874) = 1
      l_OK_Button_Response = lib_INSTALLATION_Graphical_OKClicked(l_OK_Button_Response)
    endif

    `Display and Handle Password Failed Graphics and Box
    if l_OK_Button_Response = 1
      `If alpha is available then shadow the screen below the password fail box
      if g_ENGINE_Alpha_Available = 1
        paste sprite c_ENG_INST_SPRITE_MLSPwdFail_Bkgd, 0, 0
      endif
      paste image c_ENG_INST_IMG_MLSPwdFailBox, g_GINSTVar_PwdFailBox_X, g_GINSTVar_PwdFailBox_Y
      `Highlight and interact with password failed box
      if mousex() > g_GINSTVar_PwdFailBox_X + 141 and mousex() < g_GINSTVar_PwdFailBox_X + 215
        if mousey() > g_GINSTVar_PwdFailBox_Y + 101 and mousey() < g_GINSTVar_PwdFailBox_Y + 123
          paste image c_ENG_WinStyle_OK_Lit_Img, g_GINSTVar_PwdFailBox_X + 141, g_GINSTVar_PwdFailBox_Y + 101
          if mouseclick() = 1 and l_LMouseClick = -1
            l_LMouseClick = 1
            l_OK_Button_Response = -1
          endif
        endif
      endif
    endif
    
    `Display No IP Address or Port Number Entered - will use loopback instead user info
    if l_OK_Button_Response = 2
      `If alpha is available then shadow the screen below the password fail box
      if g_ENGINE_Alpha_Available = 1
        paste sprite c_ENG_INST_SPRITE_MLSPwdFail_Bkgd, 0, 0
      endif
      paste image c_ENG_INST_IMG_InfoBox, g_GINSTVar_InfoBox_X, g_GINSTVar_InfoBox_Y
      d3d_starttext
        d3d_text 3, g_GINSTVar_InfoBox_X + 21, g_GINSTVar_InfoBox_Y + 18, 0, "IP Address or Port Number Missing", g_ENGINE_COLOUR_Black
        d3d_text 2, g_GINSTVar_InfoBox_X + 61, g_GINSTVar_InfoBox_Y + 53, 0, "Continue using default values?", g_ENGINE_COLOUR_Black
      d3d_endtext
      `Highlight and interact with the BACK box
      if mousex() > g_GINSTVar_InfoBox_X + 147 and mousex() < g_GINSTVar_InfoBox_X + 222
        if mousey() > g_GINSTVar_InfoBox_Y + 101 and mousey() < g_GINSTVar_InfoBox_Y + 123
          paste image c_ENG_WinStyle_BACK_Lit_Img, g_GINSTVar_InfoBox_X + 148, g_GINSTVar_InfoBox_Y + 101
          if mouseclick() = 1 and l_LMouseClick = -1
            l_LMouseClick = 1
            l_OK_Button_Response = -1
          endif
        endif
      endif
      `Highlight and interact with the OK box
      if mousex() > g_GINSTVar_InfoBox_X + 227 and mousex() < g_GINSTVar_InfoBox_X + 302
        if mousey() > g_GINSTVar_InfoBox_Y + 101 and mousey() < g_GINSTVar_InfoBox_Y + 123
          paste image c_ENG_WinStyle_OK_Lit_Img, g_GINSTVar_InfoBox_X + 229, g_GINSTVar_InfoBox_Y + 101
          if mouseclick() = 1 and l_LMouseClick = -1
            l_LMouseClick = 1
            l_OK_Button_Response = 999
            g_GINSTVar_IPAddress$ = "127.0.0.1"
            g_GINSTVar_PortNumber$ = "2332"
          endif
        endif
      endif
    endif
    
    if l_OK_Button_Response = 999
      l_ExitCondition = 1
    endif
    
    `lib_ToolTip_Display(1)

    `d3d_starttext
    `  d3d_text 1, 20, 20, 0, "  W : " + str$(get window client width()), g_ENGINE_COLOUR_Black
    `  d3d_text 1, 20, 40, 0, "  H : " + str$(get window client height()), g_ENGINE_COLOUR_Black
    `  d3d_text 1, 20, 80, 0, "  mousex() : " + str$(mousex()), g_ENGINE_COLOUR_Black
    ` d3d_text 1, 20, 100, 0, "  mousey() : " + str$(mousey()), g_ENGINE_COLOUR_Black
    ` d3d_text 1, 20, 120, 0, "  Desktop W : " + str$(DISPLAY WIDTH()), g_ENGINE_COLOUR_Black
    `d3d_endtext

    sync
  
  until l_ExitCondition = 1


  `Delete Images and objects - ADD ALL TO THIS!!!!
  if image exist(c_INSTALL_IMAGE_Background) = 1 then delete image c_INSTALL_IMAGE_Background
  if image exist(c_ENG_WinStyle_OK_Lit_Img) = 1 then delete image c_ENG_WinStyle_OK_Lit_Img
  if image exist(c_ENG_WinStyle_CLOSE_Lit_Img) = 1 then delete image c_ENG_WinStyle_CLOSE_Lit_Img
  if image exist(c_END_INST_ResTick_ON) = 1 then delete image c_END_INST_ResTick_ON
  if object exist(c_INST_DispBkgd_Objnum) = 1 then delete object c_INST_DispBkgd_Objnum

  cls
  set window layout 1, 1, 0
  lib_SET_DISPLAY_MODE()


endfunction

function INSTALLATION_Graphical_ImageHandle()

  `Handle Images in a Ctrl+Alt_Del safe way.
  if image exist(c_INSTALL_IMAGE_Background) = 0
    load image "SuperIMAGE_GRInst_CLIENT.bmp", c_INSTALL_IMAGE_Background, 1
    
    load bitmap "SuperIMAGE.bmp", 32
      #constant c_ENG_WinStyle_OK_Lit_Img 130
      get image c_ENG_WinStyle_OK_Lit_Img, 1024, 250, 1097, 271, 1
      #constant c_ENG_WinStyle_CLOSE_Lit_Img 131
      get image c_ENG_WinStyle_CLOSE_Lit_Img, 1099, 250, 1172, 271, 1
      #constant c_ENG_WinStyle_BACK_Lit_Img 132
      get image c_ENG_WinStyle_BACK_Lit_Img, 1174, 250, 1247, 271, 1
      #constant c_END_INST_ResTick_ON 133
      get image c_END_INST_ResTick_ON, 1024, 272, 1043, 291, 1
      #constant c_ENG_INST_MLSPassword 134
      get image c_ENG_INST_MLSPassword, 1141, 423, 1358, 446, 1
      #constant c_ENG_INST_IMG_MLSPwdFailBox 135
      get image c_ENG_INST_IMG_MLSPwdFailBox, 1141, 273, 1366, 406, 1
      #constant c_ENG_INST_IMG_InfoBox 136
      get image c_ENG_INST_IMG_InfoBox, 1141, 448, 1454, 581, 1

      #constant c_ENG_INST_IMG_MLSPwdFail_Bkgd 137
      lib_Create_Image(450, 522, rgb(140, 140, 140), c_ENG_INST_IMG_MLSPwdFail_Bkgd, -1, rgb(0,0,0))
      
      #constant c_ENG_INST_SPRITE_MLSPwdFail_Bkgd 160
      sprite c_ENG_INST_SPRITE_MLSPwdFail_Bkgd, 0, 0, c_ENG_INST_IMG_MLSPwdFail_Bkgd
        if g_ENGINE_Alpha_Available = 1
          set sprite alpha c_ENG_INST_SPRITE_MLSPwdFail_Bkgd, 150
        endif
        hide sprite c_ENG_INST_SPRITE_MLSPwdFail_Bkgd
      
    delete bitmap 32
    set current bitmap 0
  endif
    
  if object exist(c_INST_DispBkgd_Objnum) = 0
    set camera range 1, 5000
    position camera 0, 0, -450
    point camera 0, 0, 0
    make object plain c_INST_DispBkgd_Objnum, 720, 540
    texture object c_INST_DispBkgd_Objnum, c_INSTALL_IMAGE_Background
    set object light c_INST_DispBkgd_Objnum, 0
    set object ambient c_INST_DispBkgd_Objnum, 0
    set object filter c_INST_DispBkgd_Objnum, 0
    set object transparency c_INST_DispBkgd_Objnum, 0
    position object c_INST_DispBkgd_Objnum, 0, 0, -1
    `hide object c_INST_DispBkgd_Objnum
  endif  

endfunction

function lib_INSTALLATION_Graphical_OKClicked(r_ExternalOKState as integer)

  local p_InternalOKState as integer

  `This function handles an OK button being pressed. There are two possible OK buttons
  `one on the main box and one on the password failed box.

  if r_ExternalOKState = -1
    if g_GINSTVar_CFMode = 2
      if g_GINSTVar_CFModeMLSPassword$ = g_ENGINE_PASSWORD_InstallationCFModeMLS$
        p_InternalOKState = 999 : `Set state to exit the installation functions
        l_LMouseClick = 1
      else
        p_InternalOKState = 1
        l_LMouseClick = 1
      endif
    else
      `Check that the IP Address and Port Number have been entered
      if g_GINSTVar_IPAddress$ <> "" and g_GINSTVar_PortNumber$ <> ""
        p_InternalOKState = 999 : `Set state to exit the installation functions
        l_LMouseClick = 1
      else
        p_InternalOKState = 2
      endif
    endif
  else
    p_InternalOKState = -1
  endif

endfunction p_InternalOKState


function INITIALISE_D3D_FUNC()

  d3d_init
  d3d_font 1, "Ariel", 10, 0, 0, 1 : ` Print Values Font
  d3d_font 2, "Ariel", 10, 1, 0, 1 : ` Print in Bold
  d3d_font 3, "Ariel", 11, 1, 0, 1 : ` Closing down message at exit
  d3d_font 4, "Ariel", 16, 1, 0, 1 : ` Large Header Text
  d3d_font 5, "Ariel", 20, 1, 0, 1 : ` DS Realtime PUSH - Last record received at Font Size
  d3d_font 6, "Ariel", 20, 1, 0, 1 : ` DS - Depth Font Size
  d3d_font 7, "Ariel", 13, 1, 0, 1 : ` DS - Data in the main yellow boxes font
  d3d_font 8, "Times New Roman", 13, 1, 0, 1 : ` Display the chart plot ranges
  d3d_font 9, "Ariel", 10, 1, 1, 1 : ` HS - Selected Range values on Historical Screen - Bold Italic
  d3d_font 10, "Ariel", 8, 1, 0, 1 : ` HS - Screen Channel Units text on lower 3 box's
  d3d_font 11, "Times New Roman", 8, 0, 0, 1 : ` Numpad Channel and Higher/Lower range text
  d3d_font 12, "Times New Roman", 12, 1, 0, 1 : ` Graphical Install Values
  d3d_font 13, "Times New Roman", 13, 1, 0, 1 : ` Channel Names - Names displayed on Realtime Screen (ROP, SPP etc)
  d3d_font 14, "Ariel", 8, 0, 0, 1 : ` Depth Tick Text
  d3d_font 15, "Segoe UI", 10, 0, 0, 1 : ` Right Click Mouse Menus Font
  d3d_font 16, "Ariel", 9, 1, 0, 1 : ` Ariel 9 Bold

  d3d_color 255, 255, 255, 255

endfunction

function INITIALISE_GRAPHICS_SYSTEM()

  set camera range 1, 5000
  position camera 0, 0, -640
  point camera 0, 0, 0

  if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Function: lib_SET_DISPLAY_MODE > Initialise Graphics System: INIT D3D)" 
  INITIALISE_D3D_FUNC()
  
  g_ENG_Half_Screen_Width = GET WINDOW CLIENT WIDTH() / 2
  g_ENG_Half_Screen_Height = GET WINDOW CLIENT HEIGHT() / 2
  
  `Advanced Reporting Image Position
  g_ENG_ARS_BkgdPosX = g_ENG_Half_Screen_Width - (c_ENG_ARS_Bkgd_Width / 2)
  g_ENG_ARS_BkgdPosY = g_ENG_Half_Screen_Height - (c_ENG_ARS_Bkgd_Height / 2)

  g_NUMPAD_SpritePos_x = int(g_ENG_Half_Screen_Width - 118)
  g_NUMPAD_SpritePos_y = int(g_ENG_Half_Screen_Height - 121)

  g_INPUTPAD_SpritePos_x = int(g_ENG_Half_Screen_Width - 118)
  g_INPUTPAD_SpritePos_y = int(g_ENG_Half_Screen_Height - 121)

  if image exist(c_ENGINE_Mouse_DOT_Imgnum) = 0
    LOAD_Images_and_Objects()
  endif
  
  if sprite exist(c_ENGINE_SPRITE_MouseDOT) = 0
    CREATE_SPRITES()
  endif
  


endfunction

function lib_INITIALISE_Check_Last_DateAndTime()

  `At startup check to see if the program was last run more than a week ago.
  `This is done to automatically offer the user the chance to start a new well.
  `If the user opts to start a new well then a flag is set to create a new well on
  `the server upon connection. The program sends the request to the server and repeats every 5 minutes
  `until a new well has been created. Backups of the old well are created at the client and server.
  
  local l_StartupDateTime_name$ as string
  l_StartupDateTime_name$ = g_autodir_full_directory_path$ + "\Engine Data\Init_Data.arr"

  if file exist(l_StartupDateTime_name$) = 0
    SAVE_Startup_Date_and_Time()
  else
    LOAD_Startup_Date_and_Time()
    lib_Get_TIME_DIFFERENCE(g_INITFunc_ProgLastRun_Time$, g_INITFunc_ProgLastRun_Date$, get time$(), lib_CONVERT_DATE_US_to_UK_Format(get date$()))
    g_INITFunc_ProgLastRun_TotalTime = int(g_ENGINE_TimeDiff_TotalMins#)
    
    `Note: There are 10080 minutes per week
    if g_INITFunc_ProgLastRun_TotalTime > 10080
      lib_SET_DISPLAY_MODE()
      lib_INITIALISE_Chk_L_DAndT_NewWellOption()
    endif
    SAVE_Startup_Date_and_Time()
  endif

endfunction

function lib_INITIALISE_Chk_L_DAndT_NewWellOption()

  local l_exit_condition as integer : l_exit_condition = -1
  local l_Function_Stage as integer : l_Function_Stage = -1
  local l_Y_N_Option as integer : l_Y_N_Option = -1
  local l_FlashTimer as integer : l_FlashTimer = timer()
  local l_FlashToggle as integer : l_FlashToggle = 1
  local l_keystate as integer : l_keystate = 1
  local l_MakeNewDatabaseOption as integer : l_MakeNewDatabaseOption = -1
  local l_NewDatabaseCondition$ as string : l_NewDatabaseCondition$ = "Null Value"
  local l_DeleteOldDBFile$ as string : l_DeleteOldDBFile$ = "Null Value"
  local l_CreateNewDBFile$ as string : l_CreateNewDBFile$ = "Null Value"
  local l_TotalElapsedTimeDays# as float
  
  
  l_TotalElapsedTimeDays# = g_INITFunc_ProgLastRun_TotalTime / 10080.0
  
  repeat
  
    if timer() > l_FlashTimer + 750
      l_FlashTimer = timer()
      if l_FlashToggle = -1
        l_FlashToggle = 1
      else
        l_FlashToggle = -1
      endif    
    endif  
  
    d3d_starttext
  
      wdth_prnt = screen width() * 0.05 : sp = 0
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
      inc sp,19
      inc sp,19 : d3d_text 3, wdth_prnt, sp, 0, "  Create New Well Option"
      inc sp,19
      inc sp,19 : d3d_text 3, wdth_prnt, sp, 0, "    Program last run : " + g_INITFunc_ProgLastRun_Date$ + " at " + g_INITFunc_ProgLastRun_Time$
      inc sp,19
      inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    It has been " + str$(l_TotalElapsedTimeDays#, 1) + " weeks since the program was last run. Do you want to start a new well?"
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Note: The old well will be backed up."
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "             A new well will also be created on the Server upon connection."
      inc sp,19
      inc sp,19
      
      if l_Function_Stage = -1
        if l_FlashToggle = -1
          inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    (Y/N) > "
        else
          inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    (Y/N) > |"
        endif
      endif
      
      if l_Function_Stage = 1
        if l_Y_N_Option = 1
          inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    You Selected: Yes"
          inc sp,19
          inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    1) " + l_NewDatabaseCondition$
          inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    2) " + l_DeleteOldDBFile$
          inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    3) " + l_CreateNewDBFile$
          inc sp,19
          inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    Press any key to continue."
          if scancode() <> 0 and l_keystate = -1
            l_exit_condition = 1
          endif
        endif
        if l_Y_N_Option = 2
          inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    You Selected: No"
          inc sp,19
          inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    Press any key to continue."
          if scancode() <> 0 and l_keystate = -1
            l_exit_condition = 1
          endif
        endif
      endif
      
      if l_MakeNewDatabaseOption = 1
        `Backup Database
          l_MakeNewDatabaseOption = -1
          l_NewDatabaseCondition$ = lib_BACKUP_Local_Database_StrOUT()
        `Create New Database
          if file exist(g_CLIENT_Database_Full_Path$) = 1
            delete file g_CLIENT_Database_Full_Path$
            if file exist(g_CLIENT_Database_Full_Path$) = 1
              l_DeleteOldDBFile$ = "OLD DATABASE : Error: Unable to delete Database File"
            else
              l_DeleteOldDBFile$ = "OLD DATABASE : Old File Removed OK."
            endif  
          endif  
          g_DATABASE_HD_Total_Num_Records = 0
          g_DATABASE_MEM_Total_Num_Records = 0
          open datafile to write 1, g_CLIENT_Database_Full_Path$
          close datafile 1
          if file exist(g_CLIENT_Database_Full_Path$) = 1
            l_CreateNewDBFile$ = "NEW DATABASE : Created OK."
          else
            l_CreateNewDBFile$ = "NEW DATABASE : Error: Unable to create new database file."
          endif  
          l_SYNC_Filename$ = g_autodir_full_directory_path$ + "\Database\SyncData.dat"
          if file exist(l_SYNC_Filename$) = 1
            delete file l_SYNC_Filename$
          endif
        `Order Server to create new Serverside Database
        g_INITFunc_ProgLastRun_ForceServerNewDatabase = 1
      endif
      
    d3d_endtext
    
    sync
    
    if l_Function_Stage = -1
      if scancode() = 21 :`Y
        l_Function_Stage = 1
        l_Y_N_Option = 1
        l_keystate = 1
        l_MakeNewDatabaseOption = 1
      endif
      if scancode() = 49 :`N
        l_Function_Stage = 1
        l_Y_N_Option = 2
        l_keystate = 1
      endif
    endif
    
    if scancode() = 0 and l_keystate = 1
      l_keystate = -1
    endif  
  
  until l_exit_condition = 1
  

endfunction

function __________LOAD_IMAGES___CREATE_SPRITES_OBJECTS_____________________tx17e1()
endfunction

function LOAD_Images_and_Objects()

  if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Function: lib_SET_DISPLAY_MODE > Initialise Graphics System: LOAD IMAGES)" 

  if image exist(c_DRILLING_SCREEN_Imgnum_Background) = 0
    LOAD_Background_Image()
  endif

  `  Load the Super Image as bitmap 32, set as current for further get image command, delete
  `  at end and reset current bitmap
  load bitmap "SuperIMAGE.bmp", 32
  
    #constant c_ENGINE_Mouse_DOT_Imgnum 2
      get image c_ENGINE_Mouse_DOT_Imgnum, 864, 0, 865, 1, 1
    
    `No Data Received Bar
    #constant c_ENGINE_NoDataRec_Imgnum 8
      get image c_ENGINE_NoDataRec_Imgnum, 303, 0, 903, 70, 1
  
    `See in function: Define_REALTIMEGraphics_Variables()
    `#constant c_DRILLING_SCREEN_Imgnum_Background 10
    `#constant c_HISTORICAL_SCREEN_Imgnum_Background 11
  
    `Create the black background image in memory using memblocks and bitmaps
    #constant c_DISPLAY_Imgnum_BlackBackground 12
    	if image exist(c_DISPLAY_Imgnum_BlackBackground) = 0
      	lib_Create_Image(SCREEN WIDTH(), SCREEN HEIGHT(), rgb(0, 0, 0), c_DISPLAY_Imgnum_BlackBackground, 0, rgb(0, 0, 0))
    	endif
      `Create Background Object to display image on
      #constant c_DISPOBJ_BlackBackground 12
        `NOTE: The above constant [c_DISPOBJ_BlackBackground] is used for displaying below control screen text
        if object exist(c_DISPOBJ_BlackBackground) = 0
          make object plain c_DISPOBJ_BlackBackground, image width(c_DISPLAY_Imgnum_BlackBackground), image height(c_DISPLAY_Imgnum_BlackBackground)
          position object c_DISPOBJ_BlackBackground, 0, 0, -1
          texture object c_DISPOBJ_BlackBackground, c_DISPLAY_Imgnum_BlackBackground
          set object light c_DISPOBJ_BlackBackground, 0
          set object ambient c_DISPOBJ_BlackBackground, 0
          set object filter c_DISPOBJ_BlackBackground, 0
          set object transparency c_DISPOBJ_BlackBackground, 1
        endif
        
    `Create the Command Console Background Image
    if image exist(c_CMNDCONSOL_Imgnum_Background) = 0
      lib_Create_Image(900, 600, rgb(20, 20, 20), c_CMNDCONSOL_Imgnum_Background, 1, rgb(90, 90, 90))
    endif
    
    #constant c_DISPLAY_Imgnum_Chart_Values 13
      get image c_DISPLAY_Imgnum_Chart_Values, 102, 0, 302, 133, 1
    
    `Close Screen/Exit Y/N Box images
    #constant c_DISPLAY_CLOSEButton_UNLIT 14
      get image c_DISPLAY_CLOSEButton_UNLIT, 0, 184, 48, 200, 1
    #constant c_DISPLAY_CLOSEButton_LIT 15
      get image c_DISPLAY_CLOSEButton_LIT, 0, 201, 48, 217, 1
    
    `Close Fullscreen/Boxed Toggle Button images
    #constant c_DISPLAY_WINDOWEDButton_UNLIT 16
      get image c_DISPLAY_WINDOWEDButton_UNLIT, 304, 71, 333, 87, 1
    #constant c_DISPLAY_WINDOWEDButton_LIT 17
      get image c_DISPLAY_WINDOWEDButton_LIT, 304, 88, 333, 104, 1
    
    `Close Fullscreen/Boxed Toggle Button images
    #constant c_DISPLAY_MINIMISEButton_UNLIT 18
      get image c_DISPLAY_MINIMISEButton_UNLIT, 334, 71, 363, 87, 1
    #constant c_DISPLAY_MINIMISEButton_LIT 19
      get image c_DISPLAY_MINIMISEButton_LIT, 334, 88, 363, 104, 1
    
    `Exit Box (Y/N Option)
    `Layer 1 - Shadow
    #constant c_DISP_ExitBox_L1_Imgnum 20
      get image c_DISP_ExitBox_L1_Imgnum, 0, 497, 391, 618, 1
    `Layer 2 - Transparency
    #constant c_DISP_ExitBox_L2_Imgnum 21
      get image c_DISP_ExitBox_L2_Imgnum, 0, 375, 391, 496, 1
    `Layer 3 - Overlay (Main Image)
    #constant c_DISP_ExitBox_L3_Imgnum 22
      get image c_DISP_ExitBox_L3_Imgnum, 0, 253, 391, 374, 1
    `Yes/No Button Highlight Overlay.
    #constant c_DISP_ExitBox_YNHighlight_Imgnum 23
    get image c_DISP_ExitBox_YNHighlight_Imgnum, 0, 218, 63, 241, 1
    
    `Switch from Front Screen to Graphics Mode Button - Buttons displayed on the Front Screen
    #constant c_DISP_Button_Graphics_Tiny_Imgnum 24
      get image c_DISP_Button_Graphics_Tiny_Imgnum, 304, 105, 372, 143, 1
    #constant c_DISP_Button_Graphics_Tiny_LIT_Imgnum 25
      get image c_DISP_Button_Graphics_Tiny_LIT_Imgnum, 373, 105, 441, 143, 1
    
    `Close Client Program YES/NO Interface Graphics
    #constant c_CLOSECLIENT_Graphic_YES_UNLIT_Imgnum 26
      get image c_CLOSECLIENT_Graphic_YES_UNLIT_Imgnum, 1458, 448, 1516, 508, 1
    #constant c_CLOSECLIENT_Graphic_YES_LIT_Imgnum 27
      get image c_CLOSECLIENT_Graphic_YES_LIT_Imgnum, 1458, 510, 1516, 570, 1
    
    #constant c_CLOSECLIENT_Graphic_NO_UNLIT_Imgnum 28
      get image c_CLOSECLIENT_Graphic_NO_UNLIT_Imgnum, 1522, 448, 1580, 508, 1
    #constant c_CLOSECLIENT_Graphic_NO_LIT_Imgnum 29
      get image c_CLOSECLIENT_Graphic_NO_LIT_Imgnum, 1522, 510, 1580, 570, 1
    
    #constant c_TIMEPERIOD_Halfhr_OFF_Imgnum 30
      get image c_TIMEPERIOD_Halfhr_OFF_Imgnum, 51, 0, 101, 36, 1
    #constant c_TIMEPERIOD_Halfhr_ON_Imgnum 31
      get image c_TIMEPERIOD_Halfhr_ON_Imgnum, 0, 0, 50, 36, 1
    #constant c_TIMEPERIOD_1hr_OFF_Imgnum 32
      get image c_TIMEPERIOD_1hr_OFF_Imgnum, 51, 37, 101, 73, 1
    #constant c_TIMEPERIOD_1hr_ON_Imgnum 33
      get image c_TIMEPERIOD_1hr_ON_Imgnum, 0, 37, 50, 73, 1
    #constant c_TIMEPERIOD_4hr_OFF_Imgnum 34
      get image c_TIMEPERIOD_4hr_OFF_Imgnum, 51, 74, 101, 109, 1
    #constant c_TIMEPERIOD_4hr_ON_Imgnum 35
      get image c_TIMEPERIOD_4hr_ON_Imgnum, 0, 74, 50, 109, 1
    #constant c_TIMEPERIOD_8hr_OFF_Imgnum 36
      get image c_TIMEPERIOD_8hr_OFF_Imgnum, 51, 110, 101, 146, 1
    #constant c_TIMEPERIOD_8hr_ON_Imgnum 37
      get image c_TIMEPERIOD_8hr_ON_Imgnum, 0, 110, 50, 146, 1
    #constant c_TIMEPERIOD_12hr_OFF_Imgnum 38
      get image c_TIMEPERIOD_12hr_OFF_Imgnum, 51, 147, 101, 183, 1 
    #constant c_TIMEPERIOD_12hr_ON_Imgnum 39
      get image c_TIMEPERIOD_12hr_ON_Imgnum, 0, 147, 50, 183, 1
    
    `RT Graphics Screen SYSTEM Button - Returns to Front Screen Menus etc
    #constant c_RTScreen_SYSTEM_Button 40
      get image c_RTScreen_SYSTEM_Button, 158, 198, 228, 217, 1
    #constant c_RTScreen_SYSTEM_LIT_Button 41
      get image c_RTScreen_SYSTEM_LIT_Button, 158, 218, 228, 237, 1
    
    `Line Thickness Button Images
    #constant c_RTScreen_LineThickness_Single 42
      get image c_RTScreen_LineThickness_Single, 364, 71, 379, 92, 1
    #constant c_RTScreen_LineThickness_Double 43
      get image c_RTScreen_LineThickness_Double, 380, 71, 395, 92, 1
    
    `Login Box Images
    #constant c_IMG_ENG_LOGINBox_Bkgd  50
      get image c_IMG_ENG_LOGINBox_Bkgd, 473, 71, 903, 421, 1
    #constant c_IMG_ENG_LOGINBox_ButtonLit  51
      get image c_IMG_ENG_LOGINBox_ButtonLit, 155, 134, 256, 174, 1
    #constant c_IMG_ENG_LOGINBox_InputCellLit  52
      get image c_IMG_ENG_LOGINBox_InputCellLit, 0, 619, 217, 658, 1
    #constant c_IMG_ENG_LOGINBox_NetworkBkgd  53
      get image c_IMG_ENG_LOGINBox_NetworkBkgd, 473, 423, 903, 614, 1
    #constant c_IMG_ENG_LOGINBox_NetworkBtnLit  54
      get image c_IMG_ENG_LOGINBox_NetworkBtnLit, 64, 211, 107, 252, 1
    #constant c_IMG_ENG_LOGINBox_NoDataReqBkgd 55
      get image c_IMG_ENG_LOGINBox_NoDataReqBkgd, 1369, 0, 1799, 420, 1
    #constant c_IMG_ENG_LOGINBox_NoDataReqGet 56
    
    `Assign Variables for the CHART PLOT Creation Images
    #constant c_CHT_PLOT_Img_Block1 60
    #constant c_CHT_PLOT_Img_Block2 61
    #constant c_CHT_PLOT_Img_Block3 62
    #constant c_CHT_PLOT_Img_Block4 63
  
    #constant c_CHT_HS_ChartPlot 64
    
    #constant c_HS_Data_FloatingTime_Imgnum 69
      get image c_HS_Data_FloatingTime_Imgnum, 102, 175, 187, 195, 1
    
    `Assign Variables for Chart GADGET tools
    #constant c_ENG_IMG_RTDisp_GADGET_1_Background 70
    
    `GADGET_1 Advanced Data Background Box
    #constant c_GADGET_1_IMG_DataBox_VAR 71
    
    `#constant c_GADGET_1_IMG_DataBox_Small 71
      `lib_Create_Image(290, 190, rgb(255, 255, 255), c_GADGET_1_IMG_DataBox_Small, 1, rgb(195, 195, 195))
    `#constant c_GADGET_1_IMG_DataBox_Big 72
      `lib_Create_Image(290, 300, rgb(255, 255, 255), c_GADGET_1_IMG_DataBox_Big, 1, rgb(195, 195, 195))
    
    #constant c_GADGET_1_IMG_DataBox_FTB 73
      lib_Create_Image(800, 355, rgb(255, 255, 255), c_GADGET_1_IMG_DataBox_FTB, 1, rgb(195, 195, 195))
    #constant c_GADGET_1_IMG_DataBox_FTB_Large 74
      lib_Create_Image(800, 595, rgb(255, 255, 255), c_GADGET_1_IMG_DataBox_FTB_Large, 1, rgb(195, 195, 195))
    
    #constant c_GADGET_IMG_ShowWorking_Background 75
    if image exist(c_GADGET_IMG_ShowWorking_Background) = 0
      lib_Create_Image(324, 443, rgb(255, 255, 255), c_GADGET_IMG_ShowWorking_Background, 1, rgb(195, 195, 195))
    endif
    
    `Show working button
    #constant c_GADGET_IMG_ShowWorkingButton_UNLIT 76
      get image c_GADGET_IMG_ShowWorkingButton_UNLIT, 102, 154, 153, 173, 1
    #constant c_GADGET_IMG_ShowWorkingButton_LIT 77
      get image c_GADGET_IMG_ShowWorkingButton_LIT, 102, 134, 153, 153, 1
    `Show full time breakdown button
    #constant c_GADGET_IMG_ShowFTBButton_UNLIT 78
      get image c_GADGET_IMG_ShowFTBButton_UNLIT, 314, 164, 365, 183, 1
    #constant c_GADGET_IMG_ShowFTBButton_LIT 79
      get image c_GADGET_IMG_ShowFTBButton_LIT, 314, 144, 365, 163, 1
    
    #constant c_PITS_Button_UNLIT 80
      get image c_PITS_Button_UNLIT, 257, 144, 313, 177, 1
    
    `COLOUR PAD
    #constant c_COLOURMAP_Imgnum 81
      get image c_COLOURMAP_Imgnum, 904, 0, 1367, 249, 1
    	global g_COLOURMAP_PosX as integer
    	global g_COLOURMAP_PosY as integer
    	g_COLOURMAP_PosX = (screen width() / 2) - (image width(c_COLOURMAP_Imgnum) / 2)
    	g_COLOURMAP_PosY = (screen height() / 3) - (image height(c_COLOURMAP_Imgnum) / 2)
    
    `Drilling and Historical Screen button images
    #constant c_DRILLING_BUTTONImgnum 82
      get image c_DRILLING_BUTTONImgnum, 234, 184, 347, 217, 1
    #constant c_HISTORICAL_BUTTONImgnum 83
      get image c_HISTORICAL_BUTTONImgnum, 234, 219, 347, 252, 1
    
    #constant c_HS_Template_Drilling_Img 84
      get image c_HS_Template_Drilling_Img, 904, 250, 1023, 290, 1
    #constant c_HS_Template_Tripping_Img 85
      get image c_HS_Template_Tripping_Img, 904, 291, 1023, 331, 1
    
    #constant c_DS_Chart_PosZero_Img 86
      get image c_DS_Chart_PosZero_Img, 138, 196, 153, 227, 1
    #constant c_HS_Chart_PosZero_Img 87
      get image c_HS_Chart_PosZero_Img, 108, 196, 137, 216, 1
    
    #constant c_HS_RefreshButtonLight_Imgnum 88
      get image c_HS_RefreshButtonLight_Imgnum, 348, 219, 461, 252, 1

    #constant c_ChartData_ZeroTime_Yes_Imgnum 89
      get image c_ChartData_ZeroTime_Yes_Imgnum, 188, 175, 203, 190, 1
    
    #constant c_HS_Chart_Values1_Imgnum 90
      lib_Create_Image(901, 32, rgb(255, 255, 255), c_HS_Chart_Values1_Imgnum, 1, rgb(195, 195, 195))
    #constant c_HS_Chart_Values2_Imgnum 91
      lib_Create_Image(901, 64, rgb(255, 255, 255), c_HS_Chart_Values2_Imgnum, 1, rgb(195, 195, 195))
    #constant c_HS_Chart_Values3_Imgnum 92
      lib_Create_Image(901, 96, rgb(255, 255, 255), c_HS_Chart_Values3_Imgnum, 1, rgb(195, 195, 195))
    #constant c_HS_Chart_Values4_Imgnum 93
      lib_Create_Image(901, 128, rgb(255, 255, 255), c_HS_Chart_Values4_Imgnum, 1, rgb(195, 195, 195))
    
    `Historical Screen Tick Box's - Ticked and Unticked
    #constant c_HS_TickBox_Unticked_Imgnum 95
      get image c_HS_TickBox_Unticked_Imgnum, 49, 184, 67, 199, 1
    #constant c_HS_TickBox_Ticked_Imgnum 96
      get image c_HS_TickBox_Ticked_Imgnum, 68, 184, 86, 199, 1
    #constant c_HS_ColourBox_ImgNum 97
      get image c_HS_ColourBox_ImgNum, 87, 184, 100, 197, 1
    
    #constant c_HS_ColourBox_StartImg 100
      `Images 100-115 reserved for the colour box image backgrounds
    

    
    #constant c_CF2_HS_MinMaxClose_Cover_1024 126
      get image c_CF2_HS_MinMaxClose_Cover_1024, 219, 619, 300, 675, 1
    
    #constant c_CF2_HS_MinMaxClose_Cover_WideScreen 127
      get image c_CF2_HS_MinMaxClose_Cover_WideScreen, 302, 619, 383, 675, 1
    
    `In Use - Graphical Installation Images
    `#constant c_ENG_WinStyle_OK_Lit_Img 130
    `#constant c_ENG_WinStyle_CLOSE_Lit_Img 131
    `#constant c_END_INST_ResTick_ON 132
    `#constant c_ENG_INST_MLSPassword 133
    `#constant c_ENG_INST_IMG_MLSPwdFailBox 134
    `#constant c_ENG_INST_IMG_MLSPwdFail_Bkgd 135
    
    #constant c_ENG_ToolTip_BkgdIMG 136
    
    #constant c_CHANNEL_ID_CloseButton 137
      get image c_CHANNEL_ID_CloseButton, 1044, 272, 1063, 289, 1
     
    #constant c_ENG_AdvConlRep_Bkgd 138
      lib_Create_Image(c_ENG_ARS_Bkgd_Width, c_ENG_ARS_Bkgd_Height, rgb(0,0,0), c_ENG_AdvConlRep_Bkgd, 1, rgb(255,255,255))
      make memblock from image 12, c_ENG_AdvConlRep_Bkgd
    
    #constant c_ENG_CHANNEL_ID_Menu_BkgdIMG 139
      `lib_Create_Image(260, 650, rgb(0,0,0), c_ENG_CHANNEL_ID_Menu_BkgdIMG, 1, rgb(255,255,255))
      lib_Create_Image(260, 670, rgb(0,0,0), c_ENG_CHANNEL_ID_Menu_BkgdIMG, 1, rgb(255,255,255))
    
    #constant c_DEBUG_DRAWCHARTS_Timers_BkgdIMG 140
      lib_Create_Image(500, 650, rgb(0,0,0), c_DEBUG_DRAWCHARTS_Timers_BkgdIMG, 1, rgb(255,255,255))
    
    #constant c_GADGET1_FTB_Time_30Mins_Unlit 141
      get image c_GADGET1_FTB_Time_30Mins_Unlit, 366, 144, 417, 163, 1
    #constant c_GADGET1_FTB_Time_30Mins_lit 142
      get image c_GADGET1_FTB_Time_30Mins_lit, 418, 144, 469, 163, 1
    
    #constant c_GADGET1_FTB_Time_1Hour_Unlit 143
      get image c_GADGET1_FTB_Time_1Hour_Unlit, 366, 164, 417, 183, 1
    #constant c_GADGET1_FTB_Time_1Hour_lit 144
      get image c_GADGET1_FTB_Time_1Hour_lit, 418, 164, 469, 183, 1
    
    `Caution: Wits Comms Failed RT Graphics Image
    #constant c_WITS_Failed_InfoGraphic 145
      get image c_WITS_Failed_InfoGraphic, 1800, 0, 1997, 61, 1
    
    `Caution: Data Logging Disabled RT Graphics Image
    #constant c_DataLogging_Disabled_InfoGraphic 146
      get image c_DataLogging_Disabled_InfoGraphic, 1800, 62, 1997, 123, 1
    
    #constant c_DATALISTSCREEN_ButtonImg_Unlit 147
      get image c_DATALISTSCREEN_ButtonImg_Unlit, 389, 619, 500, 649, 1
    
    #constant c_DATALISTSCREEN_Background_Img 148
    #constant c_DATALISTSCREEN_BkgdWidth 800
    #constant c_DATALISTSCREEN_BkgdHeight 600
    if image exist(c_DATALISTSCREEN_Background_Img) = 0
      lib_Create_Image(c_DATALISTSCREEN_BkgdWidth, c_DATALISTSCREEN_BkgdHeight, rgb(235, 235, 235), c_DATALISTSCREEN_Background_Img, 1, rgb(195, 195, 195))
    endif
    
    #constant c_DATALISTSCREEN_TABImg_Unlit 149
      get image c_DATALISTSCREEN_TABImg_Unlit, 504, 619, 655, 644, 1
    #constant c_DATALISTSCREEN_TABImg_Lit 150
      get image c_DATALISTSCREEN_TABImg_Lit, 659, 619, 810, 644, 1
    
    #constant c_DATALISTSCREEN_CloseBtnImg_Unlit 151
      get image c_DATALISTSCREEN_CloseBtnImg_Unlit, 1024, 292, 1055, 309, 1
    #constant c_DATALISTSCREEN_CloseBtnImg_Lit 152
      get image c_DATALISTSCREEN_CloseBtnImg_Lit, 1024, 310, 1055, 327, 1
    
    #constant c_DATALISTSCREEN_SelectDateBoxImg 153
      get image c_DATALISTSCREEN_SelectDateBoxImg, 904, 575, 1000, 596, 1
    
    
    #constant c_DATALISTSCREEN_SelectDateLeftImg 154
      get image c_DATALISTSCREEN_SelectDateLeftImg, 1066, 274, 1083, 293, 1
    #constant c_DATALISTSCREEN_SelectDateLeftLitImg 155
      get image c_DATALISTSCREEN_SelectDateLeftLitImg, 1250, 251, 1267, 270, 1
		`
    #constant c_DATALISTSCREEN_SelectDateRightImg 156
      get image c_DATALISTSCREEN_SelectDateRightImg, 1090, 274, 1107, 293, 1
    #constant c_DATALISTSCREEN_SelectDateRightLitImg 157
      get image c_DATALISTSCREEN_SelectDateRightLitImg, 1274, 251, 1291, 270, 1
    
    #constant c_DATALISTSCREEN_SlctDateTodayBtnImg 158
      get image c_DATALISTSCREEN_SlctDateTodayBtnImg, 1057, 295, 1108, 320, 1
    #constant c_DATALISTSCREEN_SlctDateTodayBtnLitImg 159
      get image c_DATALISTSCREEN_SlctDateTodayBtnLitImg, 394, 374, 445, 399, 1
    
    #constant c_DATALISTSCREEN_SlctGotoDateBtnImg 160
      get image c_DATALISTSCREEN_SlctGotoDateBtnImg, 514, 648, 602, 673, 1
    #constant c_DATALISTSCREEN_SlctGotoDateBtnLitImg 161
      get image c_DATALISTSCREEN_SlctGotoDateBtnLitImg, 603, 648, 691, 673, 1
    
    #constant c_DATALISTSCREEN_ExportDataBtnImg 162
      get image c_DATALISTSCREEN_ExportDataBtnImg, 693, 648, 781, 673, 1
    #constant c_DATALISTSCREEN_ExportDataBtnImg_Lit 163
      get image c_DATALISTSCREEN_ExportDataBtnImg_Lit, 782, 648, 870, 673, 1
    
    
    #constant c_DepthTick_ToggleImg_Lit 164
      get image c_DepthTick_ToggleImg_Lit, 396, 71, 404, 88, 1
   
    
    #constant c_RGHTCLICKMENU_MenuArrow 165
      get image c_RGHTCLICKMENU_MenuArrow, 364, 93, 368, 100, 1
    
    `Hover Mouse over right click context menu item and it shows the Item Select Image
    #constant c_RGHTCLICKMENU_L1_ItemSlctBkgd 166
      get image c_RGHTCLICKMENU_L1_ItemSlctBkgd, 904, 597, 1158, 619, 1
    #constant c_RGHTCLICKMENU_L2_ItemSlctBkgd 167
      get image c_RGHTCLICKMENU_L2_ItemSlctBkgd, 904, 620, 1108, 642, 1
    
    #constant c_ENG_WinStyle_OK_LitImgMain 168
      get image c_ENG_WinStyle_OK_LitImgMain, 1024, 250, 1097, 271, 1
    
    #constant c_ENG_WinStyle_CLOSE_LitImgMain 169
      get image c_ENG_WinStyle_CLOSE_LitImgMain, 1099, 250, 1172, 271, 1
    
    #constant c_ENG_WinStyle_YES_UnLitImg 170
      get image c_ENG_WinStyle_YES_UnLitImg, 1159, 582, 1246, 606, 1
    #constant c_ENG_WinStyle_YES_LitImg 171
      get image c_ENG_WinStyle_YES_LitImg, 1159, 607, 1246, 631, 1
    #constant c_ENG_WinStyle_NO_UnLitImg 172
      get image c_ENG_WinStyle_NO_UnLitImg, 1247, 582, 1334, 606, 1
    #constant c_ENG_WinStyle_NO_LitImg 173
      get image c_ENG_WinStyle_NO_LitImg, 1247, 607, 1334, 631, 1
    
    #constant c_LagDepth_BoxDisplayGraphic 174
      get image c_LagDepth_BoxDisplayGraphic, 1335, 582, 1445, 649, 1
    
    `#constant c_CMNDCONSOL_Imgnum_Background 182 - Note set with other background images, but number is reserved and in use.
       
    #constant c_Timebuttons_Strip_Img 188 : `Loaded here: When startup and show progress bar need to independently show a strip of time buttons so it looks better
      get image c_Timebuttons_Strip_Img, 395, 402, 445, 580, 1
    
    #constant c_CF2_ExitButton_TextQ_Img 189
      get image c_CF2_ExitButton_TextQ_Img, 1, 659, 216, 677, 1
    
    #constant c_CF2_ExitButton_YESClicked_Img 190
      get image c_CF2_ExitButton_YESClicked_Img, 385, 652, 448, 675, 1
    
    #constant c_CF2_ExitButton_NOClicked_Img 191
      get image c_CF2_ExitButton_NOClicked_Img, 449, 652, 512, 675, 1
    
    #constant c_PLOT_BKGD_TimeIsNotNow_HashedArea 192
      get image c_PLOT_BKGD_TimeIsNotNow_HashedArea, 1800, 124, 1821, 575, 1
    
    #constant c_MIDNIGHTBACKUP_BkgdImg 193
      get image c_MIDNIGHTBACKUP_BkgdImg, 1582, 422, 1798, 557, 1
    
    #constant c_NETWORK_Connected_Image 194
      get image c_NETWORK_Connected_Image, 1360, 422, 1381, 446, 1
    
    `NOTE: 196, 197, 198 used elsewhere (just below actually)
  	
    `NOTE: c_PORTABLE_ENG_IMG_MountedDB_Name_BkGd 209: Note loaded here as needs to be in the SuperImage.
    if image exist(c_PORTABLE_ENG_IMG_MountedDB_Name_BkGd) = 0
      get image c_PORTABLE_ENG_IMG_MountedDB_Name_BkGd, 1458, 572, 1769, 668, 1
    endif
    
    #constant c_MSEWHL_AdjSensitivity_Img_LEFT 217
    get image c_MSEWHL_AdjSensitivity_Img_LEFT, 1822, 124, 1898, 213, 1
    
    #constant c_MSEWHL_AdjSensitivity_Img_RIGHT 218
    get image c_MSEWHL_AdjSensitivity_Img_RIGHT, 1822, 215, 1898, 304, 1
    
    #constant c_ENG_RT_ConnectingToServer_IMG 226
    	get image c_ENG_RT_ConnectingToServer_IMG, 1110, 633, 1252, 687, 1
  	
  	#constant c_EXPORT_DATA_ToolTip 227
  	  get image c_EXPORT_DATA_ToolTip, 1, 678, 312, 774, 1
  	
    #constant c_HS_DispComments_ToggleImg_Lit 228
      get image c_HS_DispComments_ToggleImg_Lit, 405, 71, 413, 88, 1
    #constant c_HS_DispComments_ToggleImg_Unlit 229
      get image c_HS_DispComments_ToggleImg_Unlit, 423, 71, 431, 88, 1
    
    #constant c_HS_DispComments_CmntBkgdImg 230
    
    #constant c_NUMPAD_BaseImgNum 231
      get image c_NUMPAD_BaseImgNum, 904, 332, 1140, 574, 1
      
    #constant c_NUMPAD_Button_Small_Highlighted 232
      get image c_NUMPAD_Button_Small_Highlighted, 394, 253, 432, 282, 1
    #constant c_NUMPAD_Button_Small_Selected 233
      get image c_NUMPAD_Button_Small_Selected, 394, 283, 432, 312, 1
    #constant c_NUMPAD_Button_Large_Highlighted 234
      get image c_NUMPAD_Button_Large_Highlighted, 394, 343, 471, 372, 1
    #constant c_NUMPAD_Button_Large_Selected 235
      get image c_NUMPAD_Button_Large_Selected, 394, 313, 471, 342, 1
      
    #constant c_HS_Comment_SideBlankingPart_Img 236
    	get image c_HS_Comment_SideBlankingPart_Img, 453, 374, 465, 544, 1
    	
    #constant c_DepthTick_ToggleImg_Unlit 237
      get image c_DepthTick_ToggleImg_Unlit, 414, 71, 422, 88, 1
      
    #constant c_DS_DEPTH_ALARM_Button_Img 238
      get image c_DS_DEPTH_ALARM_Button_Img, 396, 89, 407, 101, 1
    #constant c_DS_DEPTH_ALARM_Green_Button_Img 239
      get image c_DS_DEPTH_ALARM_Green_Button_Img, 408, 89, 419, 101, 1
      
    #constant c_ALARM_ON_Background_Img 240
      get image c_ALARM_ON_Background_Img, 1, 779, 366, 966, 1
      
    #constant c_NUMPAD_ALARMS_BaseImgNum 241
      get image c_NUMPAD_ALARMS_BaseImgNum, 368, 677, 604, 967, 1
      
    #constant c_DATALISTSCREEN_GotoDateToolTip 242
      get image c_DATALISTSCREEN_GotoDateToolTip, 607, 677, 752, 739, 1
  	

  `***** Delete Super Image Bitmap 32 ******
  delete bitmap 32
  set current bitmap 0 : `set the current bitmap to write to the screen
  
  
  `--------------------------------------------------------------------------------------------------------
  `--------------------------------------------------------------------------------------------------------
  
  
  `Comment System Images
  #constant c_CMNTSYS_InputNewComment_BkgdImg 400
  if image exist(c_CMNTSYS_InputNewComment_BkgdImg) = 0
    lib_Create_Image(150, 20, rgb(255,255,177), c_CMNTSYS_InputNewComment_BkgdImg, 1, rgb(0,0,0))
  endif
  
  `Create the Right Click Context Menu Background Image
  #constant c_RGHTCLICKMENU_L1_ImgBkgd 401
    `RGHTCLICKMENU_Img_Bkgd_Height = 10 (Above) + (25 x Number of Items) + 10 (Below)
  global g_RGHTCLICKMENU_Img_Bkgd_Height as integer : g_RGHTCLICKMENU_Img_Bkgd_Height = 145 + 25
  if image exist(c_RGHTCLICKMENU_L1_ImgBkgd) = 0
    lib_Create_Image(260, g_RGHTCLICKMENU_Img_Bkgd_Height, rgb(240, 240, 240), c_RGHTCLICKMENU_L1_ImgBkgd, 1, rgb(151, 151, 151))
  endif
  
  #constant c_RGHTCLICKMENU_L2_ImgBkgd 402
  
  #constant c_UserInputBox1_Image 403
  if file exist("UserInput_Image1.bmp") = 1
    if image exist(c_UserInputBox1_Image) = 0
      load image "UserInput_Image1.bmp", c_UserInputBox1_Image, 1
    endif
  endif
  global g_UserInputBox1_InitBoxPosition_X as integer
  global g_UserInputBox1_InitBoxPosition_Y as integer
  g_UserInputBox1_InitBoxPosition_X = (screen width() / 2) - (image width(c_UserInputBox1_Image) / 2)
  g_UserInputBox1_InitBoxPosition_Y = (screen height() / 2) - (image height(c_UserInputBox1_Image) / 2)
  
  `--- PROGRESS BAR -------------------------------------------------------------------------------------------------
  
    load bitmap "DB_ProgressBar_Textures.bmp", 32

    	#constant c_DB_ProgressBar_Img_BkgdBox 404
    	get image c_DB_ProgressBar_Img_BkgdBox, 0, 0, 699, 157, 1
	
    	#constant c_DB_ProgressBar_Img_ProgBarText 405
    	get image c_DB_ProgressBar_Img_ProgBarText, 2, 159, 583, 220, 1
    	
    	#constant c_DB_ProgressBar_Img_ProgBarMSG 406
    	get image c_DB_ProgressBar_Img_ProgBarMSG, 250, 222, 575, 242, 1
    	
    	#constant c_DB_ExitProgram_ExitBox_Image 407
    	get image c_DB_ExitProgram_ExitBox_Image, 0, 221, 247, 334, 1
    	
    	#constant c_COMPORT_Selection_Bkgd_Image 408
    	get image c_COMPORT_Selection_Bkgd_Image, 0, 335, 625, 605, 1
    	
        
    `***** Delete Super Image Bitmap 32 ******
    delete bitmap 32
    set current bitmap 0 : `set the current bitmap to write to the screen
  
  `--- RT DISP WITS RAW DATA QUICK VIEW OVERLAY -------------------------------------------------------
  
  `Quick INCOMING WITS DATA View
  #constant c_WITSVIEW_QuickWITS_ImageBkgd 409
  if image exist(c_WITSVIEW_QuickWITS_ImageBkgd) = 0
    lib_Create_Image(300, 500, rgb(255,255,177), c_WITSVIEW_QuickWITS_ImageBkgd, 1, rgb(151, 151, 151))
  endif
  
  `--- PORTABLE MODE IMAGES ---------------------------------------------------------------------------
  
    `NOTE: The PORTABLE VIEWER MODE images have to be loaded in a separate function that can be run
    `      at its own time because the set window size & set display mode combination resets the
    `      loaded images / clears the video card memory. So for it to be run at the start of the program
    `      and not clear all the Mudlogging Mode's loaded images it needs to be able to run separately
    `      to that mode. Below are listed the image numbers it uses so this list is still complete.
  
    `  c_PORTABLE_ENG_IMG_Bootup_BKGD 206
    `  c_PORTABLE_ENG_IMG_MouseSprite 207
    `  c_PORTABLE_ENG_IMG_Button1_Lit 208
    `  c_PORTABLE_ENG_IMG_Button1_Unlit 209
    `  c_PORTABLE_ENG_IMG_Button2_Lit 210
    `  c_PORTABLE_ENG_IMG_Button2_Unlit 211
    `  c_PORTABLE_ENG_IMG_MountedDB_Name_BkGd 212
    `  c_PORTABLE_ENG_IMG_StartNewWell 213
    `  c_PORTABLE_ENG_IMG_StartNewWell_Lit 214
    
  #constant c_CHART_BLOCK_DISP_3_Bkgd_Image 410
  if image exist(c_CHART_BLOCK_DISP_3_Bkgd_Image) = 0
    load image "GDS_Chart_Block_Disp3.bmp", c_CHART_BLOCK_DISP_3_Bkgd_Image, 1
  endif  
     
  #constant c_CHART_BLOCK_DISP_4_Bkgd_Image 411
  if image exist(c_CHART_BLOCK_DISP_4_Bkgd_Image) = 0
    load image "GDS_Chart_Block_Disp4.bmp", c_CHART_BLOCK_DISP_4_Bkgd_Image, 1
  endif
  
  `c_MSEWHL_AdjSensitivity_Img_LEFT 217
  `c_MSEWHL_AdjSensitivity_Img_LEFT 218
  
  #constant c_OVERRIDE_WITS_OR_Chse_Chnl_BkgdImg 412
  if image exist(c_OVERRIDE_WITS_OR_Chse_Chnl_BkgdImg) = 0
    lib_Create_Image(500, 700, rgb(70, 70, 70), c_OVERRIDE_WITS_OR_Chse_Chnl_BkgdImg, 1, rgb(151, 151, 151))
  endif
  `Note: A good size for just the menu items is 240, 650
  
  #constant c_SAVEIMAGE_GetImage 413 : `Used to print the screen image / save screen time period to file
  #constant c_SAVEIMAGE_BuildBitmap 414 : `Used to print the screen image / save screen time period to file
  #constant c_SAVEIMAGE_FinalBMPGrab 415
  
  #constant c_RTPRNT2IMG_MsgBox_BkgdImg 416
  global g_RTPRNT2IMG_MsgBox_Width as integer : g_RTPRNT2IMG_MsgBox_Width = 500
  global g_RTPRNT2IMG_MsgBox_Height as integer : g_RTPRNT2IMG_MsgBox_Height = 220
    if image exist(c_RTPRNT2IMG_MsgBox_BkgdImg) = 0
      lib_Create_Image(g_RTPRNT2IMG_MsgBox_Width, g_RTPRNT2IMG_MsgBox_Height, rgb(240, 240, 240), c_RTPRNT2IMG_MsgBox_BkgdImg, 1, rgb(151, 151, 151))
    endif
    
  `  c_PORTABLE_ENG_IMG_DBViewer_ToolTip 224
  `  c_PORTABLE_ENG_IMG_MudLogMode_ToolTip 225
  
  `  c_ENG_RT_ConnectingToServer_IMG 226

endfunction

function LOAD_Background_Image()

  `***** Load Drilling Screen Image
  if g_ENGINE_Screen_Resolution = 1
    if file exist("GDS_Client_DS_Background_Widescreen.bmp") = 1
      if image exist(c_DRILLING_SCREEN_Imgnum_Background) = 0
        load image "GDS_Client_DS_Background_Widescreen.bmp", c_DRILLING_SCREEN_Imgnum_Background, 1
        load bitmap "GDS_Client_DS_Background_Widescreen.bmp", 1
      endif
    endif
  else
    if file exist("GDS_Client_DS_Background_1024x768.bmp") = 1
      if image exist(c_DRILLING_SCREEN_Imgnum_Background) = 0
        load image "GDS_Client_DS_Background_1024x768.bmp", c_DRILLING_SCREEN_Imgnum_Background, 1
        load bitmap "GDS_Client_DS_Background_1024x768.bmp", 1
      endif  
    endif
  endif
  
  `PLOT CHART IMAGE CREATION
  `Create a memblock of the DS Chart backgrounds for either 1024x768 or Widescreen
    global g_ENG_RTChart_Height as integer
    global g_ENG_RTChart_Width as integer
    `Widescreen
    if g_ENGINE_Screen_Resolution = 1
      get image 1, 10, 197, 312, 648, 1
        if memblock exist(10) = 1
          delete memblock 10
        endif  
      make memblock from image 10, 1
      delete image 1
      g_ENG_RTChart_Height = 451
      g_ENG_RTChart_Width = 302
    else
      `1024x768
      get image 1, 10, 197, 204, 648, 1
        if memblock exist(10) = 1
          delete memblock 10
        endif  
      make memblock from image 10, 1
      delete image 1
      g_ENG_RTChart_Height = 451
      g_ENG_RTChart_Width = 194
    endif
    
    delete bitmap 1: `Note bitmap 1 here is created where the background images are loaded 
  
  
  
  `***** Load Historical Screen Image
  if g_ENGINE_Screen_Resolution = 1
    if file exist("GDS_Historical_Screen_Background_WideScreen.bmp") = 1
      if image exist(c_HISTORICAL_SCREEN_Imgnum_Background) = 0
        load image "GDS_Historical_Screen_Background_WideScreen.bmp", c_HISTORICAL_SCREEN_Imgnum_Background, 1
        load bitmap "GDS_Historical_Screen_Background_WideScreen.bmp", 1
      endif
    endif
  else
    if file exist("GDS_Historical_Screen_Background.bmp") = 1
      if image exist(c_HISTORICAL_SCREEN_Imgnum_Background) = 0
        load image "GDS_Historical_Screen_Background.bmp", c_HISTORICAL_SCREEN_Imgnum_Background, 1
        load bitmap "GDS_Historical_Screen_Background.bmp", 1
      endif  
    endif
  endif
  
  `PLOT CHART IMAGE CREATION
  `Create a memblock of the PITS Chart backgrounds for either 1024x768 or Widescreen
    `Widescreen
    if g_ENGINE_Screen_Resolution = 1
      get image 1, 75, 63, 1323, 505, 1
        if memblock exist(11) = 1
          delete memblock 11
        endif  
      make memblock from image 11, 1
      delete image 1
    else
      `1024x768
      get image 1, 75, 63, 983, 505, 1
        if memblock exist(11) = 1
          delete memblock 11
        endif  
      make memblock from image 11, 1
      delete image 1
    endif
    delete bitmap 1: `Note bitmap 1 here is created where the background images are loaded


  `***** Load Pits Screen Image
  if g_ENGINE_Screen_Resolution = 1
    if file exist("GDS_Pits_Screen_Widescreen.bmp") = 1
      if image exist(c_PITS_SCREEN_Imgnum_Background) = 0
        load image "GDS_Pits_Screen_Widescreen.bmp", c_PITS_SCREEN_Imgnum_Background, 1
        load bitmap "GDS_Pits_Screen_Widescreen.bmp", 1
      endif
    endif
  else
    if file exist("GDS_Pits_Screen_1024x768.bmp") = 1
      if image exist(c_PITS_SCREEN_Imgnum_Background) = 0
        load image "GDS_Pits_Screen_1024x768.bmp", c_PITS_SCREEN_Imgnum_Background, 1
        load bitmap "GDS_Pits_Screen_1024x768.bmp", 1
      endif
    endif
  endif
  
  `PLOT CHART IMAGE CREATION
  `Create a memblock of the PITS Chart backgrounds for either 1024x768 or Widescreen
    `Widescreen
    if g_ENGINE_Screen_Resolution = 1
      get image 1, 10,197, 312, 648, 1
        if memblock exist(13) = 1
          delete memblock 13
        endif  
      make memblock from image 13, 1
      delete image 1
    else
      `1024x768
      get image 1, 10,197, 204, 648, 1
        if memblock exist(13) = 1
          delete memblock 13
        endif  
      make memblock from image 13, 1
      delete image 1
    endif
    
    delete bitmap 1: `Note bitmap 1 here is created where the background images are loaded




endfunction

function LOAD_PORTABLE_All_Images_And_Sprites()


    load bitmap "SuperIMAGE_PORTABLE.bmp", 32
  
  	`PORTABLE Mode - BootUp Menu Choice Background Image
  	#constant c_PORTABLE_ENG_IMG_Bootup_BKGD 206
  	get image c_PORTABLE_ENG_IMG_Bootup_BKGD, 0, 0, 859, 527, 1
  	
  	#constant c_PORTABLE_ENG_IMG_MouseSprite 207
  	get image c_PORTABLE_ENG_IMG_MouseSprite, 0, 527, 1, 528, 1
  	
  	#constant c_PORTABLE_ENG_IMG_Button1_Lit 208
  	get image c_PORTABLE_ENG_IMG_Button1_Lit, 860, 0, 1094, 234, 1
  	#constant c_PORTABLE_ENG_IMG_Button1_Unlit 209
  	get image c_PORTABLE_ENG_IMG_Button1_Unlit, 1097, 0, 1331, 234, 1
  	
  	#constant c_PORTABLE_ENG_IMG_Button2_Lit 210
  	get image c_PORTABLE_ENG_IMG_Button2_Lit, 860, 335, 1094, 569, 1
  	#constant c_PORTABLE_ENG_IMG_Button2_Unlit 211
  	get image c_PORTABLE_ENG_IMG_Button2_Unlit, 1097, 335, 1331, 569, 1

  	#constant c_PORTABLE_ENG_IMG_MountedDB_Name_BkGd 212
  	get image c_PORTABLE_ENG_IMG_MountedDB_Name_BkGd, 863, 237, 1174, 333, 1
  	
  	#constant c_PORTABLE_ENG_IMG_StartNewWell_Unlit 213
  	get image c_PORTABLE_ENG_IMG_StartNewWell_Unlit, 210, 475, 660, 510, 1
  	
  	#constant c_PORTABLE_ENG_IMG_StartNewWell_Lit 214
  	get image c_PORTABLE_ENG_IMG_StartNewWell_Lit, 859, 575, 1309, 610, 1
  	
  	#constant c_PORTABLE_ENG_IMG_DBViewer_ToolTip 224
  	get image c_PORTABLE_ENG_IMG_DBViewer_ToolTip, 492, 534, 686, 656, 1

  	#constant c_PORTABLE_ENG_IMG_MudLogMode_ToolTip 225
  	get image c_PORTABLE_ENG_IMG_MudLogMode_ToolTip, 492, 657, 686, 739, 1
  	
  	`Image 226 in use elsewhere : c_ENG_RT_ConnectingToServer_IMG 226
  	

  	


    `***** Delete Super Image Bitmap 32 ******
    delete bitmap 32
    set current bitmap 0 : `set the current bitmap to write to the screen
    
    
    `--- Sprites -----------------------------
    
  `PORTABLE SPRITES
  `#constant c_SPRITE_PORTABLE_MousePxl 249
  `#constant c_SPRITE_PORTABLE_Button_1 250
  `#constant c_SPRITE_PORTABLE_Button_2 251
  `#constant c_SPRITE_PORTABLE_Button_NewWell 252
  `#constant c_SPRITE_PORTABLE_ToolTip_1 253
  `#constant c_SPRITE_PORTABLE_ToolTip_2 254
    
    #constant c_SPRITE_PORTABLE_MousePxl 249
    
    #constant c_SPRITE_PORTABLE_Button_1 250
    sprite c_SPRITE_PORTABLE_Button_1, 157, 224, c_PORTABLE_ENG_IMG_Button1_Unlit
    set sprite c_SPRITE_PORTABLE_Button_1, 0, 1
    
    #constant c_SPRITE_PORTABLE_Button_2 251
    sprite c_SPRITE_PORTABLE_Button_2, 468, 224, c_PORTABLE_ENG_IMG_Button2_Unlit
    set sprite c_SPRITE_PORTABLE_Button_2, 0, 1

    #constant c_SPRITE_PORTABLE_Button_NewWell 252
    sprite c_SPRITE_PORTABLE_Button_NewWell, 210, 475, c_PORTABLE_ENG_IMG_StartNewWell_Unlit
    set sprite c_SPRITE_PORTABLE_Button_NewWell, 0, 1
    
    #constant c_SPRITE_PORTABLE_ToolTip_1 253
    sprite c_SPRITE_PORTABLE_ToolTip_1, 157, 224, c_PORTABLE_ENG_IMG_DBViewer_ToolTip
    set sprite c_SPRITE_PORTABLE_ToolTip_1, 0, 1
  
    #constant c_SPRITE_PORTABLE_ToolTip_2 254
    sprite c_SPRITE_PORTABLE_ToolTip_2, 157, 224, c_PORTABLE_ENG_IMG_MudLogMode_ToolTip
    set sprite c_SPRITE_PORTABLE_ToolTip_2, 0, 1


endfunction

function CREATE_SPRITES()

  if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Function: lib_SET_DISPLAY_MODE > Initialise Graphics System: CREATE SPRITES)" 

  `ENGINE - Mouse DOT Sprite
  #constant c_ENGINE_SPRITE_MouseDOT 2
  if sprite exist(c_ENGINE_SPRITE_MouseDOT) = 0
    if image exist(c_ENGINE_Mouse_DOT_Imgnum) = 1
      sprite c_ENGINE_SPRITE_MouseDOT, mousex(), mousey(), c_ENGINE_Mouse_DOT_Imgnum
      hide sprite c_ENGINE_SPRITE_MouseDOT
    endif
  endif
  
  
  `No Data Received Sprite
  #constant c_SPRITE_NoDataReceived 19
  if sprite exist(c_SPRITE_NoDataReceived) = 0
    if image exist(c_ENGINE_NoDataRec_Imgnum) = 1
      sprite c_SPRITE_NoDataReceived, 0, 0, c_ENGINE_NoDataRec_Imgnum
      hide sprite c_SPRITE_NoDataReceived
      if g_ENGINE_Alpha_Available = 1
        set sprite alpha c_SPRITE_NoDataReceived, 200
      endif
    endif
  endif
  
  `Exit Box (Y/N) Option Box
  #constant c_SPRITE_ExitBox_L1 20
  sprite c_SPRITE_ExitBox_L1, 0, 0, c_DISP_ExitBox_L1_Imgnum
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_ExitBox_L1, 30
    endif
  hide sprite c_SPRITE_ExitBox_L1
  
  #constant c_SPRITE_ExitBox_L2 21
  sprite c_SPRITE_ExitBox_L2, 0, 0, c_DISP_ExitBox_L2_Imgnum
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_ExitBox_L2, 150
    endif
  hide sprite c_SPRITE_ExitBox_L2
  
  #constant c_SPRITE_ExitBox_L3 22
  global g_SPRITE_ExitBox_Half_Width as integer
  global g_SPRITE_ExitBox_Half_Height as integer
  sprite c_SPRITE_ExitBox_L3, 0, 0, c_DISP_ExitBox_L3_Imgnum
  g_SPRITE_ExitBox_Half_Width = sprite width(c_SPRITE_ExitBox_L3) / 2
  g_SPRITE_ExitBox_Half_Height = sprite height(c_SPRITE_ExitBox_L3) / 2
  hide sprite c_SPRITE_ExitBox_L3
  
  #constant c_SPRITE_Exitbox_YNhighlight 23
  sprite c_SPRITE_Exitbox_YNhighlight, 0, 0, c_DISP_ExitBox_YNHighlight_Imgnum
  hide sprite c_SPRITE_Exitbox_YNhighlight
  
  `DS Chart Values Sprite
  #constant c_SPRITE_DS_Chart_Values 26
  sprite c_SPRITE_DS_Chart_Values, 0, 0, c_DISPLAY_Imgnum_Chart_Values
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_DS_Chart_Values, 200
    endif
  hide sprite c_SPRITE_DS_Chart_Values
  
  `DS TIME PERIOD SPRITES
  `0.5hr
  #constant c_SPRITE_TimePeriod_HalfHrOFF 30
  sprite c_SPRITE_TimePeriod_HalfHrOFF, 0, 0, c_TIMEPERIOD_Halfhr_OFF_Imgnum
  hide sprite c_SPRITE_TimePeriod_HalfHrOFF
  #constant c_SPRITE_TimePeriod_HalfHrON 31
  sprite c_SPRITE_TimePeriod_HalfHrON, 0, 0, c_TIMEPERIOD_Halfhr_ON_Imgnum
  hide sprite c_SPRITE_TimePeriod_HalfHrON
  `1Hr
  #constant c_SPRITE_TimePeriod_1HrOFF 32
  sprite c_SPRITE_TimePeriod_1HrOFF, 0, 0, c_TIMEPERIOD_1hr_OFF_Imgnum
  hide sprite c_SPRITE_TimePeriod_1HrOFF
  #constant c_SPRITE_TimePeriod_1HrON 33
  sprite c_SPRITE_TimePeriod_1HrON, 0, 0, c_TIMEPERIOD_1hr_ON_Imgnum
  hide sprite c_SPRITE_TimePeriod_1HrON
  `4Hr
  #constant c_SPRITE_TimePeriod_4HrOFF 34
  sprite c_SPRITE_TimePeriod_4HrOFF, 0, 0, c_TIMEPERIOD_4hr_OFF_Imgnum
  hide sprite c_SPRITE_TimePeriod_4HrOFF
  #constant c_SPRITE_TimePeriod_4HrON 35
  sprite c_SPRITE_TimePeriod_4HrON, 0, 0, c_TIMEPERIOD_4hr_ON_Imgnum
  hide sprite c_SPRITE_TimePeriod_4HrON
  `8Hr
  #constant c_SPRITE_TimePeriod_8HrOFF 36
  sprite c_SPRITE_TimePeriod_8HrOFF, 0, 0, c_TIMEPERIOD_8hr_OFF_Imgnum
  hide sprite c_SPRITE_TimePeriod_8HrOFF
  #constant c_SPRITE_TimePeriod_8HrON 37
  sprite c_SPRITE_TimePeriod_8HrON, 0, 0, c_TIMEPERIOD_8hr_ON_Imgnum
  hide sprite c_SPRITE_TimePeriod_8HrON
  `12Hr
  #constant c_SPRITE_TimePeriod_12HrOFF 38
  sprite c_SPRITE_TimePeriod_12HrOFF, 0, 0, c_TIMEPERIOD_12hr_OFF_Imgnum
  hide sprite c_SPRITE_TimePeriod_12HrOFF
  #constant c_SPRITE_TimePeriod_12HrON 39
  sprite c_SPRITE_TimePeriod_12HrON, 0, 0, c_TIMEPERIOD_12hr_ON_Imgnum
  hide sprite c_SPRITE_TimePeriod_12HrON
  
  `Login Box Sprites
  #constant c_SPRITE_ENG_LoginBox_Bkgd 50
  sprite c_SPRITE_ENG_LoginBox_Bkgd, 0, 0, c_IMG_ENG_LOGINBox_Bkgd
  hide sprite c_SPRITE_ENG_LoginBox_Bkgd
  #constant c_SPRITE_ENG_LoginBox_BkgdBtm 51
  sprite c_SPRITE_ENG_LoginBox_BkgdBtm, 0, 0, c_IMG_ENG_LOGINBox_NetworkBkgd
  hide sprite c_SPRITE_ENG_LoginBox_BkgdBtm
  #constant c_SPRITE_ENG_LoginBox_NoDataReq 52
  sprite c_SPRITE_ENG_LoginBox_NoDataReq, 0, 0, c_IMG_ENG_LOGINBox_NetworkBkgd
  hide sprite c_SPRITE_ENG_LoginBox_NoDataReq
  
  #constant c_SPRITE_RTDisp_Gadget_1_Background 79
  sprite c_SPRITE_RTDisp_Gadget_1_Background, 0, 0, c_TIMEPERIOD_12hr_ON_Imgnum
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_RTDisp_Gadget_1_Background, 160
    endif
  hide sprite c_SPRITE_RTDisp_Gadget_1_Background
  
  `Databox Sprites
  #constant c_SPRITE_RTDisp_Gadget_1_DataBoxVAR 80
  sprite c_SPRITE_RTDisp_Gadget_1_DataBoxVAR, 0, 0, c_TIMEPERIOD_12hr_ON_Imgnum
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_RTDisp_Gadget_1_DataBoxVAR, 225
    endif
  hide sprite c_SPRITE_RTDisp_Gadget_1_DataBoxVAR
  
  
  `Databox Sprites
  `#constant c_SPRITE_RTDisp_Gadget_1_DataBoxSmall 80
  `sprite c_SPRITE_RTDisp_Gadget_1_DataBoxSmall, 0, 0, c_GADGET_1_IMG_DataBox_Small
  `  if g_ENGINE_Alpha_Available = 1
  `    set sprite alpha c_SPRITE_RTDisp_Gadget_1_DataBoxSmall, 200
  `  endif
  `hide sprite c_SPRITE_RTDisp_Gadget_1_DataBoxSmall
  
  `Databox Sprites
  `#constant c_SPRITE_RTDisp_Gadget_1_DataBoxBig 81
  `sprite c_SPRITE_RTDisp_Gadget_1_DataBoxBig, 0, 0, c_GADGET_1_IMG_DataBox_Big
  `  if g_ENGINE_Alpha_Available = 1
  `    set sprite alpha c_SPRITE_RTDisp_Gadget_1_DataBoxBig, 200
  `  endif
  `hide sprite c_SPRITE_RTDisp_Gadget_1_DataBoxBig
  
  `Databox Sprites - LOSSES Full Time Breakdown (time breakdown per hour, data for depth, PVTs, losses etc)
  global g_ENGINE_GadgetSprite_ShowFTB_ScreenX as integer
  global g_ENGINE_GadgetSprite_ShowFTB_ScreenY as integer  
  #constant c_SPRITE_RTDisp_Gadget_1_DataBoxFTB 82
  sprite c_SPRITE_RTDisp_Gadget_1_DataBoxFTB, 0, 0, c_GADGET_1_IMG_DataBox_FTB
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_RTDisp_Gadget_1_DataBoxFTB, 230
    endif
  hide sprite c_SPRITE_RTDisp_Gadget_1_DataBoxFTB
  g_ENGINE_GadgetSprite_ShowFTB_ScreenX = g_ENG_Half_Screen_Width - (sprite width(c_SPRITE_RTDisp_Gadget_1_DataBoxFTB)/2)
  g_ENGINE_GadgetSprite_ShowFTB_ScreenY = g_ENG_Half_Screen_Height - (sprite height(c_SPRITE_RTDisp_Gadget_1_DataBoxFTB)/2) - 100

  #constant c_SPRITE_RTDisp_Gadget_1_DataBoxFTB_Big 83
  sprite c_SPRITE_RTDisp_Gadget_1_DataBoxFTB_Big, 0, 0, c_GADGET_1_IMG_DataBox_FTB_Large
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_RTDisp_Gadget_1_DataBoxFTB_Big, 230
    endif
  hide sprite c_SPRITE_RTDisp_Gadget_1_DataBoxFTB_Big
  
  `Number Pad
  #constant c_NUMPAD_SPRITE_BaseSpriteNum 84
  sprite c_NUMPAD_SPRITE_BaseSpriteNum, 0, 0, c_NUMPAD_BaseImgNum
  hide sprite c_NUMPAD_SPRITE_BaseSpriteNum
  
  `Colour Pad
  #constant c_SPRITE_COLOURPAD 85
  sprite c_SPRITE_COLOURPAD, 0, 0, c_COLOURMAP_Imgnum
  hide sprite c_SPRITE_COLOURPAD
  
  `Numpad Button Sprites
  #constant c_NUMPAD_SPRITE_SmallButton_Highlighted 86
  sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, 0, 0, c_NUMPAD_Button_Small_Highlighted
  hide sprite c_NUMPAD_SPRITE_SmallButton_Highlighted
  #constant c_NUMPAD_SPRITE_SmallButton_Selected 87
  sprite c_NUMPAD_SPRITE_SmallButton_Selected, 0, 0, c_NUMPAD_Button_Small_Selected
  hide sprite c_NUMPAD_SPRITE_SmallButton_Selected
  #constant c_NUMPAD_SPRITE_LargeButton_Highlighted 88
  sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, 0, 0, c_NUMPAD_Button_Large_Highlighted
  hide sprite c_NUMPAD_SPRITE_LargeButton_Highlighted
  #constant c_NUMPAD_SPRITE_LargeButton_Selected 89
  sprite c_NUMPAD_SPRITE_LargeButton_Selected, 0, 0, c_NUMPAD_Button_Large_Selected
  hide sprite c_NUMPAD_SPRITE_LargeButton_Selected
  
  `HS Data - Floating Time Box
  #constant c_SPRITE_HS_FloatingTime 90
  sprite c_SPRITE_HS_FloatingTime, 0, 0, c_HS_Data_FloatingTime_Imgnum
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_HS_FloatingTime, 200
    endif
  hide sprite c_SPRITE_HS_FloatingTime
  
  
  #constant c_SPRITE_Gadget_Showworking 92
  global g_ENGINE_GadgetSprite_ShowWorking_ScreenX as integer
  global g_ENGINE_GadgetSprite_ShowWorking_ScreenY as integer
  sprite c_SPRITE_Gadget_Showworking, 0, 0, c_GADGET_IMG_ShowWorking_Background
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_Gadget_Showworking, 220
    endif
  hide sprite c_SPRITE_Gadget_Showworking
  g_ENGINE_GadgetSprite_ShowWorking_ScreenX = g_ENG_Half_Screen_Width - (sprite width(c_SPRITE_Gadget_Showworking)/2)
  g_ENGINE_GadgetSprite_ShowWorking_ScreenY = g_ENG_Half_Screen_Height - (sprite height(c_SPRITE_Gadget_Showworking)/2)

  #constant c_SPRITE_Gadget_ShowWorkButt_UNLIT 93
  sprite c_SPRITE_Gadget_ShowWorkButt_UNLIT, 0, 0, c_GADGET_IMG_ShowWorkingButton_UNLIT
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_Gadget_ShowWorkButt_UNLIT, 200
    endif
  hide sprite c_SPRITE_Gadget_ShowWorkButt_UNLIT  
  #constant c_SPRITE_Gadget_ShowWorkButt_LIT 94
  sprite c_SPRITE_Gadget_ShowWorkButt_LIT, 0, 0, c_GADGET_IMG_ShowWorkingButton_LIT
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_Gadget_ShowWorkButt_LIT, 200
    endif
  hide sprite c_SPRITE_Gadget_ShowWorkButt_LIT
  
  #constant c_SPRITE_Gadget_ShowFTBButt_UNLIT 95
  sprite c_SPRITE_Gadget_ShowFTBButt_UNLIT, 0, 0, c_GADGET_IMG_ShowFTBButton_UNLIT
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_Gadget_ShowFTBButt_UNLIT, 200
    endif
  hide sprite c_SPRITE_Gadget_ShowFTBButt_UNLIT  
  #constant c_SPRITE_Gadget_ShowFTBButt_LIT 96
  sprite c_SPRITE_Gadget_ShowFTBButt_LIT, 0, 0, c_GADGET_IMG_ShowFTBButton_LIT
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_Gadget_ShowFTBButt_LIT, 200
    endif
  hide sprite c_SPRITE_Gadget_ShowFTBButt_LIT
  
  
  `NOTE: Sprites 107, 108 and 109 are the HS Show Data Bar sprites
  `HS Chart Values Sprite
  #constant c_SPRITE_HS_Chart_Values1 115
  #constant c_SPRITE_HS_Chart_Values2 116
  #constant c_SPRITE_HS_Chart_Values3 117
  #constant c_SPRITE_HS_Chart_Values4 118
    sprite c_SPRITE_HS_Chart_Values1, 79, 67, c_HS_Chart_Values1_Imgnum
    sprite c_SPRITE_HS_Chart_Values2, 79, 67, c_HS_Chart_Values2_Imgnum
    sprite c_SPRITE_HS_Chart_Values3, 79, 67, c_HS_Chart_Values3_Imgnum
    sprite c_SPRITE_HS_Chart_Values4, 79, 67, c_HS_Chart_Values4_Imgnum
      if g_ENGINE_Alpha_Available = 1
        set sprite alpha c_SPRITE_HS_Chart_Values1, 200
        set sprite alpha c_SPRITE_HS_Chart_Values2, 200
        set sprite alpha c_SPRITE_HS_Chart_Values3, 200
        set sprite alpha c_SPRITE_HS_Chart_Values4, 200
      endif
    hide sprite c_SPRITE_HS_Chart_Values1
    hide sprite c_SPRITE_HS_Chart_Values2
    hide sprite c_SPRITE_HS_Chart_Values3
    hide sprite c_SPRITE_HS_Chart_Values4

  `Historical Screen TICK Box Sprites - reserved 120-140
  #constant c_HS_SPRITE_TickBoxs_StartNum 120
  for make_sp_lp = c_HS_SPRITE_TickBoxs_StartNum to (c_HS_SPRITE_TickBoxs_StartNum + 20)
    sprite make_sp_lp, 0, 0, c_HS_TickBox_Unticked_Imgnum
    hide sprite make_sp_lp
  next make_sp_lp
  
  `Historical Screen COLOUR Box OVERLAY Sprites - reserved 150-170
  #constant c_HS_SPRITE_COLOURBoxs_StartNum 150
  for make_sp_lp = c_HS_SPRITE_COLOURBoxs_StartNum to (c_HS_SPRITE_COLOURBoxs_StartNum + 20)
    sprite make_sp_lp, 0, 0, c_HS_ColourBox_ImgNum
    hide sprite make_sp_lp
  next make_sp_lp
  
  `Historical Screen COLOUR Box UNDERLAY Sprites - reserved 180-200
  #constant c_HS_SPRITE_COLOURBoxs_Underlay 180
  for make_sp_lp = c_HS_SPRITE_COLOURBoxs_Underlay to (c_HS_SPRITE_COLOURBoxs_Underlay + 20)
    sprite make_sp_lp, 0, 0, c_HS_ColourBox_ImgNum
    hide sprite make_sp_lp
  next make_sp_lp
  
  `#constant c_ENG_INST_SPRITE_MLSPwdFail_Bkgd 160
  
  #constant c_ENG_SPRITE_AdvConlRep_Bkgd 240
  sprite c_ENG_SPRITE_AdvConlRep_Bkgd, 0, 0, c_ENG_AdvConlRep_Bkgd
  hide sprite c_ENG_SPRITE_AdvConlRep_Bkgd
  
  
  `Data List Screen Main Background Sprite  
  #constant c_SPRITE_DLS_Background 241
  global g_ENGINE_DLS_Background_ScreenX as integer
  global g_ENGINE_DLS_Background_ScreenY as integer
  sprite c_SPRITE_DLS_Background, 0, 0, c_DATALISTSCREEN_Background_Img
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_DLS_Background, 240
    endif
  hide sprite c_SPRITE_DLS_Background
  g_ENGINE_DLS_Background_ScreenX = g_ENG_Half_Screen_Width - (sprite width(c_SPRITE_DLS_Background)/2)
  g_ENGINE_DLS_Background_ScreenY = g_ENG_Half_Screen_Height - (sprite height(c_SPRITE_DLS_Background)/2)

  #constant c_SPRITE_DLS_TABImg_Unlit 242
  sprite c_SPRITE_DLS_TABImg_Unlit, 0, 0, c_DATALISTSCREEN_TABImg_Unlit
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_DLS_TABImg_Unlit, 245
    endif
  hide sprite c_SPRITE_DLS_TABImg_Unlit
  
  #constant c_SPRITE_DLS_TABImg_Lit 243
  sprite c_SPRITE_DLS_TABImg_Lit, 0, 0, c_DATALISTSCREEN_TABImg_Lit
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_DLS_TABImg_Lit, 250
    endif
  hide sprite c_SPRITE_DLS_TABImg_Lit
  
  `Command Console Background Sprite
  #constant c_SPRITE_CmndConsol_Bkgd 244
  sprite c_SPRITE_CmndConsol_Bkgd, 0, 0, c_CMNDCONSOL_Imgnum_Background
  hide sprite c_SPRITE_CmndConsol_Bkgd
  
  `Mouse Right Click Context Menu
  #constant c_SPRITE_RGHTCLICKMENU_Bkgd 245
  sprite c_SPRITE_RGHTCLICKMENU_Bkgd, 0, 0, c_RGHTCLICKMENU_L1_ImgBkgd
  hide sprite c_SPRITE_RGHTCLICKMENU_Bkgd
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_RGHTCLICKMENU_Bkgd, 240
    endif

  `Exit Button / Box on RT Screens Text Display Comment 'Do you wish to exit the program?'
  #constant c_SPRITE_CF2_ExitButton_TextQ_Img 246
  sprite c_SPRITE_CF2_ExitButton_TextQ_Img, 0, 0, c_CF2_ExitButton_TextQ_Img
  hide sprite c_SPRITE_CF2_ExitButton_TextQ_Img
  
  `Comment System: Comment Background Image Sprite
  #constant c_SPRITE_CMNTSYS_Comment_Background 247
  sprite c_SPRITE_CMNTSYS_Comment_Background, 0, 0, c_DB_ProgressBar_Img_BkgdBox
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_CMNTSYS_Comment_Background, 200
    endif
  hide sprite c_SPRITE_CMNTSYS_Comment_Background
  
  `WITS QUICK View: Press button to see WITS Incoming Data overlayed over the Realtime Display
  #constant c_SPRITE_WITS_RTQuickView 248
  sprite c_SPRITE_WITS_RTQuickView, 0, 0, c_WITSVIEW_QuickWITS_ImageBkgd
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_WITS_RTQuickView, 200
    endif
  hide sprite c_SPRITE_WITS_RTQuickView
  
  `PORTABLE SPRITES: Note: Shown here to complete this list. Defined Elsewhere.
  `#constant c_SPRITE_PORTABLE_MousePxl 249
  `#constant c_SPRITE_PORTABLE_Button_1 250
  `#constant c_SPRITE_PORTABLE_Button_2 251
  `#constant c_SPRITE_PORTABLE_Button_NewWell 252
  `#constant c_SPRITE_PORTABLE_ToolTip_1 253
  `#constant c_SPRITE_PORTABLE_ToolTip_2 254
  
  `Midnight Backup performed - Background image sprite to let the user know the backup was successful/not
  #constant c_SPRITE_MIDNIGHTBACKUP_Bkgd 255
  sprite c_SPRITE_MIDNIGHTBACKUP_Bkgd, 0, 0, c_MIDNIGHTBACKUP_BkgdImg
  set sprite priority c_SPRITE_MIDNIGHTBACKUP_Bkgd, 1
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_MIDNIGHTBACKUP_Bkgd, 255
    endif
  hide sprite c_SPRITE_MIDNIGHTBACKUP_Bkgd
  
  
  #constant c_SPRITE_HS_Comment_BkgdImg 256
  sprite c_SPRITE_HS_Comment_BkgdImg, 0, 0, c_MIDNIGHTBACKUP_BkgdImg
  set sprite priority c_SPRITE_HS_Comment_BkgdImg, 1
    if g_ENGINE_Alpha_Available = 1
      set sprite alpha c_SPRITE_HS_Comment_BkgdImg, 200
    endif
  hide sprite c_SPRITE_HS_Comment_BkgdImg
  
  `DS Depth Alarm Buttons use 2 sprites for the different alpha states - c_DS_DEPTH_ALARM_Button_Img
    `Black Button
  			#constant c_SPRITE_DS_DepthAlarmBtn_Unlit 257
  			sprite c_SPRITE_DS_DepthAlarmBtn_Unlit, 0, 0, c_DS_DEPTH_ALARM_Button_Img
  			set sprite priority c_SPRITE_DS_DepthAlarmBtn_Unlit, 1
    			if g_ENGINE_Alpha_Available = 1
      			set sprite alpha c_SPRITE_DS_DepthAlarmBtn_Unlit, 60
    			endif
  			hide sprite c_SPRITE_DS_DepthAlarmBtn_Unlit
  			`
  			#constant c_SPRITE_DS_DepthAlarmBtn_Lit 258
  			sprite c_SPRITE_DS_DepthAlarmBtn_Lit, 0, 0, c_DS_DEPTH_ALARM_Button_Img
  			set sprite priority c_SPRITE_DS_DepthAlarmBtn_Lit, 1
    			if g_ENGINE_Alpha_Available = 1
      			set sprite alpha c_SPRITE_DS_DepthAlarmBtn_Lit, 255
    			endif
  			hide sprite c_SPRITE_DS_DepthAlarmBtn_Lit
    `Green Button
  			#constant c_SPRITE_DS_DepthAlarmBtn_Green_Unlit 259
  			sprite c_SPRITE_DS_DepthAlarmBtn_Green_Unlit, 0, 0, c_DS_DEPTH_ALARM_Green_Button_Img
  			set sprite priority c_SPRITE_DS_DepthAlarmBtn_Green_Unlit, 1
    			if g_ENGINE_Alpha_Available = 1
      			set sprite alpha c_SPRITE_DS_DepthAlarmBtn_Green_Unlit, 80
    			endif
  			hide sprite c_SPRITE_DS_DepthAlarmBtn_Green_Unlit
  			`
  			#constant c_SPRITE_DS_DepthAlarmBtn_Green_Lit 260
  			sprite c_SPRITE_DS_DepthAlarmBtn_Green_Lit, 0, 0, c_DS_DEPTH_ALARM_Green_Button_Img
  			set sprite priority c_SPRITE_DS_DepthAlarmBtn_Green_Lit, 1
    			if g_ENGINE_Alpha_Available = 1
      			set sprite alpha c_SPRITE_DS_DepthAlarmBtn_Green_Lit, 255
    			endif
  			hide sprite c_SPRITE_DS_DepthAlarmBtn_Green_Lit
  			
  `Number Pad - for ALARMS ONLY (Adds the 'Add a label' text box at the bottom)
  #constant c_NUMPAD_SPRITE_ALARMS_SpriteNum 261
  sprite c_NUMPAD_SPRITE_ALARMS_SpriteNum, 0, 0, c_NUMPAD_ALARMS_BaseImgNum
  hide sprite c_NUMPAD_SPRITE_ALARMS_SpriteNum
  

endfunction



function __________LOAD_DATA_FILES________________________________tx17e1()
endfunction

function LOAD_CLIENT_TXT_File()

  local l_empty_string$ as string
  local l_LCTF_SpyRLT_Screen$ as string
  local l_file_name$ as string : l_file_name$ = g_autodir_full_directory_path$ + "\Engine Data\CLIENT.txt"

  if file exist(l_file_name$) = 0
    lib_ON_ERROR_Handle("Missing Program file - Client.txt", "The file '\Engine Data\CLIENT.txt' does not exist.", "Please try restarting the program.", -1)
  endif


  open to read 1, l_file_name$
  
    read string 1, l_empty_string$
    read string 1, g_CLIENT_HOSTIP_Address$
    read string 1, g_CLIENT_Server_Port_Num$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_LCTF_SpyRLT_Screen$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, g_CLIENT_WITS_Transmission_Period_Seconds$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, g_CLIENT_Database_Filename$
    
  close file 1
  
  `GET CLIENTSIDE HOST IP FROM FILE IF OBTAIN FROM FILE IS SET, ELSE USE LOOPBACK
  temp$ = ""
  for find_lp = 1 to len(g_CLIENT_HOSTIP_Address$)
    if mid$(g_CLIENT_HOSTIP_Address$, find_lp) = "="
      temp$ = right$(g_CLIENT_HOSTIP_Address$, (len(g_CLIENT_HOSTIP_Address$) - find_lp))
    endif
  next find_lp
  if temp$ <> ""
    g_ClientsideHOST_IP_Address$ = temp$
    g_CONNECTED_To_IP_Address$ = temp$
  endif

  `GET PORT NUMBER FROM FILE
  temp$ = ""
  for find_lp = 1 to len(g_CLIENT_Server_Port_Num$)
    if mid$(g_CLIENT_Server_Port_Num$, find_lp) = "="
      temp$ = right$(g_CLIENT_Server_Port_Num$, (len(g_CLIENT_Server_Port_Num$) - find_lp))
    endif
  next find_lp 
  g_CLIENT_Server_Port_Int = val(temp$)
  g_CONNECTED_To_Port = g_CLIENT_Server_Port_Int
  
  `GET SCREEN RESOLUTION FROM FILE
  temp$ = ""
  for find_lp = 1 to len(l_LCTF_SpyRLT_Screen$)
    if mid$(l_LCTF_SpyRLT_Screen$, find_lp) = "="
      temp$ = right$(l_LCTF_SpyRLT_Screen$, (len(l_LCTF_SpyRLT_Screen$) - find_lp))
    endif
  next find_lp
  g_ENGINE_Screen_Resolution = val(temp$)


  
  `Load the REALTIME DISPLAY Text Screen Coordinates dependant on this clients Widescreen/1024x768
  `startup choice.
  if g_ENGINE_Screen_Resolution = 1
    LOAD_RTDisp_Drilling_Widescreen()
    LOAD_RTDisp_Screen_Units_WideScreen()
    LOAD_RTDisp_Pits_Widescreen()
    `DRILLING SCREEN PLOT POSITIONS
      `Widescreen
      g_N_Chart_Width = 301
      g_N_Block1_MinX = 0
      g_N_Block1_MaxX = 301
      g_N_Block2_MinX = 0
      g_N_Block2_MaxX = 301
      g_N_Block3_MinX = 0
      g_N_Block3_MaxX = 301
      g_N_Block4_MinX = 0
      g_N_Block4_MaxX = 301
    `HISTORICAL SCREEN PLOT CONSTANTS
      g_HS_CHARTBOX_Screen_Left = 75
      g_HS_CHARTBOX_Screen_Right = 1323
      g_HS_CHARTBOX_Screen_Top = 64
      g_HS_CHARTBOX_Screen_Bottom = 504
      
      g_HS_CHARTBOX_Ttl_Height = 442
      g_HS_CHARTBOX_Ttl_Width = 1248

  else
    LOAD_RTDisp_Drilling_1024x768()
    LOAD_RTDisp_Screen_Units_1024x768()
    LOAD_RTDisp_Pits_1024x768()
    `HISTORICAL SCREEN PLOT CONSTANTS
      `1024x768
      g_N_Chart_Width = 193
      g_N_Block1_MinX = 0
      g_N_Block1_MaxX = 193
      g_N_Block2_MinX = 0
      g_N_Block2_MaxX = 193
      g_N_Block3_MinX = 0
      g_N_Block3_MaxX = 193
      g_N_Block4_MinX = 0
      g_N_Block4_MaxX = 193
    `HISTORICAL SCREEN PLOT CONSTANTS
      g_HS_CHARTBOX_Screen_Left = 75
      g_HS_CHARTBOX_Screen_Right = 983
      g_HS_CHARTBOX_Screen_Top = 64
      g_HS_CHARTBOX_Screen_Bottom = 504
      
      g_HS_CHARTBOX_Ttl_Height = 442
      g_HS_CHARTBOX_Ttl_Width = 908
      
  endif
  
  `#constant c_N_HS_CHARTBOX_BMP_Top_Y 0
  `#constant c_N_HS_CHARTBOX_BMP_Bottom_Y 440
  
  
  `GET WITS TRANSMISSION PERIOD FROM FILE
  temp$ = ""
  for find_lp = 1 to len(g_CLIENT_WITS_Transmission_Period_Seconds$)
    if mid$(g_CLIENT_WITS_Transmission_Period_Seconds$, find_lp) = "="
      temp$ = right$(g_CLIENT_WITS_Transmission_Period_Seconds$, (len(g_CLIENT_WITS_Transmission_Period_Seconds$) - find_lp))
    endif
  next find_lp 
  g_WITS_Transmission_Interval_Int = val(temp$)
  
  `GET DATABASE FILENAME FROM FILE
  temp$ = ""
  for find_lp = 1 to len(g_CLIENT_Database_Filename$)
    if mid$(g_CLIENT_Database_Filename$, find_lp) = "="
      temp$ = right$(g_CLIENT_Database_Filename$, (len(g_CLIENT_Database_Filename$) - find_lp))
    endif
  next find_lp
  g_CLIENT_Database_Filename$ = temp$
  g_CLIENT_Database_Full_Path$ = g_autodir_full_directory_path$ + "\Database\" + g_CLIENT_Database_Filename$

   
endfunction

function LOAD_Engine_Setup()

  local l_empty_string$ as string

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\ENGINE_Setup.arr"
  
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ENGINE_MEMDB_Runtime_DAYS = int(g_LGSV_ConvertedString_Output_FLT#)
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ENGINE_CoreFunctionType = int(g_LGSV_ConvertedString_Output_FLT#)
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ENGINE_First_Runtime = int(g_LGSV_ConvertedString_Output_FLT#)
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ENGINE_ProgrammerMODE = int(g_LGSV_ConvertedString_Output_FLT#)
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ENGINE_SwapDayMonthFormat = int(g_LGSV_ConvertedString_Output_FLT#)
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ENGINE_RTIntGadgets = int(g_LGSV_ConvertedString_Output_FLT#)
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ENGINE_UNITS_FT_or_M = int(g_LGSV_ConvertedString_Output_FLT#)
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ROPCALC_ROPCalcDepthInterval# = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_LAGDEPTH_AdjustValue# = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_AUTO_CONNECT_ON = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_AUTO_CONNECT_CountdownPeriod = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ClientSerTransmitDB_Full1OrReduced2 = g_LGSV_ConvertedString_Output_FLT#


  close file 1
  
  `Calculate value to dimensionalise array - DO NOT CHANGE
  g_DATABASE_MaxTotalRecords = g_ENGINE_MEMDB_Runtime_DAYS * 21600
  
  `Units - 1=ft, 2=m
  `if g_ENGINE_UNITS_FT_or_M = 1
  `  g_ROPCALC_ROPCalcDepthInterval# = 1.0
  `else
  `  g_ROPCALC_ROPCalcDepthInterval# = 0.3
  `endif


  g_connection_attempt_interval = g_AUTO_CONNECT_CountdownPeriod



endfunction

function LOAD_Engine_ExternalVariables()

  local l_empty_string$ as string
  local l_tempVAL$ as string

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\ENGINE_ExternalVariables.txt"
     
    read string 1, l_empty_string$ 
    read string 1, l_empty_string$ 
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ENG_EXTVAL_FPSFrameLimiter_Toggle = int(g_LGSV_ConvertedString_Output_FLT#)
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ENG_EXTVAL_FPSFrameLimiter_Value = int(g_LGSV_ConvertedString_Output_FLT#) 
    read string 1, l_empty_string$ 
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ENG_EXTVAL_ProperSleep_OnCycleNum = int(g_LGSV_ConvertedString_Output_FLT#)     
           
  close file 1

endfunction

function LOAD_CHANNEL_ID_Names()

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Names.txt"
      
    for read_lp = 1 to 28
      read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : CHANNEL_ID_ChannelNames$(read_lp) = g_LGSS_ConvertedString_Output_STR$
    next read_lp
    
  close file 1

endfunction

function LOAD_CHANNEL_ID_Names_USER_OVERRIDE()

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Names_Overrides.txt"
      
    for read_lp = 1 to 28
      read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : CHANNEL_ID_ChannelNames_UserOverride$(read_lp) = g_LGSS_ConvertedString_Output_STR$
    next read_lp
    
  close file 1

endfunction

function LOAD_CHANNEL_ID_ChannelIndex()

  `The Index stores which realworld channel (Block/Channel) is linked to which database channel index number

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Index.txt"
    
    for read_lp = 1 to 28
      read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : CHANNEL_ID_ChannelLinkIndex(read_lp) = g_LGSV_ConvertedString_Output_FLT#
      if CHANNEL_ID_ChannelLinkIndex(read_lp) < 0 then CHANNEL_ID_ChannelLinkIndex(read_lp) = -1
      if CHANNEL_ID_ChannelLinkIndex(read_lp) > 28 then CHANNEL_ID_ChannelLinkIndex(read_lp) = -1
    next read_lp
    
    read string 1, l_empty_string$
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_SCREEN_Block1_DisplayFormat = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_SCREEN_Block2_DisplayFormat = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_SCREEN_Block3_DisplayFormat = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_SCREEN_Block1_DisplayFormat = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_SCREEN_Block2_DisplayFormat = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_SCREEN_Block3_DisplayFormat = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_SCREEN_Block4_DisplayFormat = g_LGSV_ConvertedString_Output_FLT#
    
  close file 1
    

endfunction

function LOAD_CHANNEL_ID_Ranges()

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Ranges.txt"
  
    for read_lp = 1 to 56
      read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : CHANNEL_ID_ChannelRanges(read_lp) = int(g_LGSV_ConvertedString_Output_FLT#)
    next read_lp
    
  close file 1

endfunction

function LOAD_OTHER_Variables()

  local l_file_name$ as string
  local l_empty_string$ as string
  local l_tempVAL$ as string
  
  l_file_name$ = g_autodir_full_directory_path$ + "\Engine Data\OTHER_Variables.txt"

  open to read 1, l_file_name$
  
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_STRING(l_tempVAL$) : g_DLS_DATA_CircTimePerPump_GPMThreshold$ = g_LGSS_ConvertedString_Output_STR$

  close file 1
  
  
  
endfunction

function LOAD_ALARMS_TXT_File()

  local l_file_name$ as string
  local l_empty_string$ as string
  local l_tempVAL$ as string
  
  l_file_name$ = g_autodir_full_directory_path$ + "\Engine Data\Alarms.txt"

  open to read 1, l_file_name$
  
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_ALARM_DS_DepthAlarm_Value# = int(g_LGSV_ConvertedString_Output_FLT#)
    read string 1, l_tempVAL$ : lib_Get_String_STRING(l_tempVAL$) : g_ALARM_DS_DepthAlarm_Label$ = g_LGSS_ConvertedString_Output_STR$
    
  close file 1
  
  
endfunction


function LOAD_RTDisp_Screen_UNITS_1024x768()


  local l_empty_string$ as string
  local l_tempVAL$ as string
  local l_FileString$ as string

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\1024x768\DS_Screen_Units.arr"

    read string 1, l_empty_string$
    read string 1, l_empty_string$
    
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block1Line1_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block1Line2_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block1Line3_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_empty_string$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block2Line1_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block2Line2_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block2Line3_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_empty_string$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block3Line1_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block3Line2_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block3Line3_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block1Line1_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block1Line1_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block1Line2_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block1Line2_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block1Line3_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block1Line3_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block2Line1_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block2Line1_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block2Line2_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block2Line2_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block2Line3_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block2Line3_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block3Line1_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block3Line1_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block3Line2_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block3Line2_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block3Line3_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block3Line3_Y = g_LGSV_ConvertedString_Output_FLT#

  close file 1



endfunction

function LOAD_RTDisp_Screen_UNITS_WideScreen()


  local l_empty_string$ as string
  local l_tempVAL$ as string
  local l_FileString$ as string

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\WideScreen\DS_Screen_Units_WideScreen.arr"

    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block1Line1_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block1Line2_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block1Line3_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_empty_string$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block2Line1_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block2Line2_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block2Line3_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_empty_string$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block3Line1_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block3Line2_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_DS_Units_Block3Line3_Name$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block1Line1_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block1Line1_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block1Line2_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block1Line2_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block1Line3_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block1Line3_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block2Line1_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block2Line1_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block2Line2_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block2Line2_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block2Line3_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block2Line3_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block3Line1_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block3Line1_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block3Line2_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block3Line2_Y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block3Line3_X = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DS_Units_Block3Line3_Y = g_LGSV_ConvertedString_Output_FLT#

  close file 1

endfunction

function LOAD_RTDisp_Drilling_1024x768()

  local l_empty_string$ as string
  local l_tempVAL$ as string
  local l_FileString$ as string
  
  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\1024x768\Drilling_Display.arr"
  
    `Drilling Screen - Channel Name Positions
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_empty_string$
    `Drilling Screen - Channel Ranges (Low/High) Positions
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_empty_string$
    `Drilling Screen - Channel Values - Screen Positions
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
      
  close file 1

endfunction

function LOAD_RTDisp_Drilling_Widescreen()

  local l_empty_string$ as string
  local l_tempVAL$ as string
  local l_FileString$ as string

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\WideScreen\Drilling_Display_WideScreen.arr"
  
    `VARIABLES FOR 3 CHANNELS PER CHART
    `Drilling Screen - Channel Name - Screen Positions - 3 Channels per chart
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_empty_string$
    
    `Drilling Screen - Channel Ranges (Low/High) Screen Positions - 3 Channels per chart
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_empty_string$
    
    `Drilling Screen - Channel Values - Screen Positions - 3 Channels per chart
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#

    `-------------
    
    `VARIABLES FOR 4 CHANNELS PER CHART
    `Drilling Screen - Channel Name - Screen Positions - 4 Channels per chart
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel4_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel4_Name_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel4_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel4_Name_y = g_LGSV_ConvertedString_Output_FLT#

    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel4_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel4_Name_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_empty_string$
    
    `Drilling Screen - Channel Ranges (Low/High) Screen Positions - 4 Channels per chart
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel4_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel4_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel4_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel4_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel4_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel4_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel4_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel4_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel4_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel4_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel4_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel4_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_empty_string$
    
    `Drilling Screen - Channel Data - Screen Positions - 4 Channels per chart
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel4_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block1_4_Channel4_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel4_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block2_4_Channel4_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel4_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DRILL_DISPLAY_Block3_4_Channel4_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#

  close file 1
  


endfunction

function LOAD_RTDisp_Pits_1024x768()

  local l_empty_string$ as string
  local l_tempVAL$ as string
  local l_FileString$ as string
  
  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\1024x768\Pits_Display.arr"
  
    `Pit Screen - Channel Name Positions
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
 
    read string 1, l_empty_string$
    `Pit Screen - Channel Ranges (Low/High) Positions
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_empty_string$
    `Pit Screen - Channel Values - Screen Positions
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    
      
  close file 1

endfunction

function LOAD_RTDisp_Pits_Widescreen()

  local l_empty_string$ as string
  local l_tempVAL$ as string
  local l_FileString$ as string

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\WideScreen\Pits_Display_WideScreen.arr"
  
    `VARIABLES FOR 3 CHANNELS PER CHART
    `Pit Screen - Channel Name Screen Positions - 3 CHANNELS PER CHART
    read string 1, l_empty_string$
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
 
    `Pit Screen - Channel Ranges (Low/High) Positions - 3 CHANNELS PER CHART
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    
    `Pit Screen - Channel Values - Screen Positions - 3 CHANNELS PER CHART
    read string 1, l_empty_string$
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
  
    `-------------
    
    `VARIABLES FOR 4 CHANNELS PER CHART
    `PITS Screen - Channel Name - Screen Positions - 4 CHANNELS PER CHART
    
    read string 1, l_empty_string$
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel4_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel4_Name_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel4_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel4_Name_y = g_LGSV_ConvertedString_Output_FLT#

    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel4_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel4_Name_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel1_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel1_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel2_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel2_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel3_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel3_Name_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel4_Name_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel4_Name_y = g_LGSV_ConvertedString_Output_FLT#
    
    
    read string 1, l_empty_string$
    `PITS Screen - Channel Ranges (Low/High) Screen Positions - 4 CHANNELS PER CHART
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel4_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel4_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel4_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel4_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel4_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel4_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel4_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel4_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel4_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel4_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel4_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel4_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel1_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel1_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel1_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel1_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel2_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel2_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel2_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel2_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel3_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel3_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel3_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel3_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel4_LO_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel4_LO_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel4_HIGH_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel4_HIGH_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_empty_string$
    
    `PITS Screen - Channel Data - Screen Positions - 4 CHANNELS PER CHART
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel4_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block1_4_Channel4_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel4_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block2_4_Channel4_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel4_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block3_4_Channel4_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
  
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel1_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel1_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel2_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel2_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel3_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel3_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel4_ValuePos_x = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_PITS_DISPLAY_Block4_4_Channel4_ValuePos_y = g_LGSV_ConvertedString_Output_FLT#
  
  close file 1

endfunction

function LOAD_HS_Channel_ID()

 ` dim HS_Channel_Names$(15) as string
 ` dim HS_Channel_Units$(15) as string


  local l_empty_string$ as string
  local l_tempVAL$ as string
  local l_FileString$ as string

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\HS_Screen_Channel_ID.arr"

    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(1) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(2) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(3) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(4) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(5) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(6) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(7) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(8) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(9) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(10) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(11) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(12) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(13) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(14) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(15) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(16) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(17) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(18) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(19) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Names$(20) = g_LGSS_ConvertedString_Output_STR$
    
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(1) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(2) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(3) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(4) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(5) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(6) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(7) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(8) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(9) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(10) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(11) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(12) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(13) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(14) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(15) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(16) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(17) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(18) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(19) = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : HS_Channel_Units$(20) = g_LGSS_ConvertedString_Output_STR$
    
    read string 1, l_empty_string$
    
    
  close file 1  
    
endfunction

function LOAD_HS_Range_Values()

  local l_empty_string$ as string
  local l_tempVAL$ as string

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\HS_ChannelRanges.arr"

    read string 1, l_empty_string$
    read string 1, l_empty_string$
    `Block 1
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(1) = g_LGSV_ConvertedString_Output_FLT# : `Hole Depth Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(2) = g_LGSV_ConvertedString_Output_FLT# : `Hole Depth Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(3) = g_LGSV_ConvertedString_Output_FLT# : `Bit Depth Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(4) = g_LGSV_ConvertedString_Output_FLT# : `Bit Depth Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(5) = g_LGSV_ConvertedString_Output_FLT# : `ROP Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(6) = g_LGSV_ConvertedString_Output_FLT# : `ROP Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(7) = g_LGSV_ConvertedString_Output_FLT# : `WOB Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(8) = g_LGSV_ConvertedString_Output_FLT# : `WOB Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(9) = g_LGSV_ConvertedString_Output_FLT# : `HKLD Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(10) = g_LGSV_ConvertedString_Output_FLT# : `HKLD Lower
    `Block 2
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(11) = g_LGSV_ConvertedString_Output_FLT# : `RPM Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(12) = g_LGSV_ConvertedString_Output_FLT# : `RPM Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(13) = g_LGSV_ConvertedString_Output_FLT# : `TT Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(14) = g_LGSV_ConvertedString_Output_FLT# : `TT Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(15) = g_LGSV_ConvertedString_Output_FLT# : `BLOCK POS Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(16) = g_LGSV_ConvertedString_Output_FLT# : `BLOCK POS Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(17) = g_LGSV_ConvertedString_Output_FLT# : `PVT Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(18) = g_LGSV_ConvertedString_Output_FLT# : `PVT Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(19) = g_LGSV_ConvertedString_Output_FLT# : `SPP Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(20) = g_LGSV_ConvertedString_Output_FLT# : `SPP Lower
    `Block 3
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(21) = g_LGSV_ConvertedString_Output_FLT# : `FLOW IN Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(22) = g_LGSV_ConvertedString_Output_FLT# : `FLOW IN Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(23) = g_LGSV_ConvertedString_Output_FLT# : `SPM1 Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(24) = g_LGSV_ConvertedString_Output_FLT# : `SPM1 Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(25) = g_LGSV_ConvertedString_Output_FLT# : `SPM2 Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(26) = g_LGSV_ConvertedString_Output_FLT# : `SPM2 Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(27) = g_LGSV_ConvertedString_Output_FLT# : `SPM3 Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(28) = g_LGSV_ConvertedString_Output_FLT# : `SPM3% Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(29) = g_LGSV_ConvertedString_Output_FLT# : `TG Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(30) = g_LGSV_ConvertedString_Output_FLT# : `TG Lower
    `Block 4
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(31) = g_LGSV_ConvertedString_Output_FLT# : `H2S Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(32) = g_LGSV_ConvertedString_Output_FLT# : `H2S Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(33) = g_LGSV_ConvertedString_Output_FLT# : `Temp IN Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(34) = g_LGSV_ConvertedString_Output_FLT# : `Temp IN Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(35) = g_LGSV_ConvertedString_Output_FLT# : `Temp OUT Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(36) = g_LGSV_ConvertedString_Output_FLT# : `Temp OUT Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(37) = g_LGSV_ConvertedString_Output_FLT# : `CSG Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(38) = g_LGSV_ConvertedString_Output_FLT# : `CSG Lower
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(39) = g_LGSV_ConvertedString_Output_FLT# : `Total Strokes Upper
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_Chart_Range_Values#(40) = g_LGSV_ConvertedString_Output_FLT# : `Total Strokes Lower

  close file 1
  

endfunction

function LOAD_HS_Channel_States()

  local l_empty_string$ as string
  local l_tempVAL$ as string

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\HS_ChannelStates.arr"

    read string 1, l_empty_string$
    read string 1, l_empty_string$
    `Block 1
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(1) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(2) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(3) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(4) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(5) = g_LGSV_ConvertedString_Output_FLT#
    `Block 2
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(6) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(7) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(8) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(9) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(10) = g_LGSV_ConvertedString_Output_FLT#
    `Block 3
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(11) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(12) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(13) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(14) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(15) = g_LGSV_ConvertedString_Output_FLT#
    `Block 4
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(16) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(17) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(18) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(19) = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : HS_TickBox_States(20) = g_LGSV_ConvertedString_Output_FLT#


  close file 1

endfunction

function LOAD_HS_Channel_Colours()

  local l_empty_string$ as string

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\HS_ChannelColours.arr"

    read string 1, l_empty_string$
    read string 1, l_empty_string$
    
    for read_lp = 1 to 20
      read string 1, HS_CHART_Line_String$(read_lp)
    next read_lp
    
  close file 1

  ENGINE_HS_Get_Chart_Colours()

endfunction



function LOAD_WITS_CONFIG_File()

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\WITS_CONFIGURATION.txt"
  
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_BitDepth$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_HoleDepth$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_BlockPosition$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_HKLD$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_WOB$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_Torque$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_RPM$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_SPP$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_CSG$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_SPM1$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_SPM2$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_SPM3$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_PVT$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_PIT1$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_PIT2$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_PIT3$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_PIT4$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_PIT5$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_PIT6$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_PIT7$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_PIT8$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_FLOWIN$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_FLOWOUT$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_TG$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_H2S$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_TripTank$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_TempIN$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_TempOUT$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_LagDepth$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_RecordNumber_TtlStrks$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_BitDepth$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_HoleDepth$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_BlockPosition$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_HKLD$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_WOB$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_Torque$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_RPM$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_SPP$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_CSG$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_SPM1$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_SPM2$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_SPM3$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_PVT$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_PIT1$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_PIT2$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_PIT3$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_PIT4$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_PIT5$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_PIT6$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_PIT7$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_PIT8$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_FLOWIN$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_FLOWOUT$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_TG$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_H2S$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_TripTank$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_TempIN$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_TempOUT$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_LagDepth$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENG_WITSCONFIG_ChannelNumber_TtlStrks$ = g_LGSS_ConvertedString_Output_STR$
    
    read string 1, l_empty_string$
  
  close file 1

endfunction

function LOAD_WITS_OVERRIDE_CONFIG_File()

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\WITS_OVERRIDE_CONFIGURATION.txt"
  
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_WITS_OVERRIDE_User_MaxSetRecords = int(g_LGSV_ConvertedString_Output_FLT#)
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(1).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(2).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(3).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(4).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(5).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(6).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(7).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(8).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(9).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(10).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(11).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(12).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(13).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(14).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(15).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(16).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(17).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(18).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(19).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(20).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(21).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(22).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(23).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(24).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(25).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(26).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(27).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(28).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(29).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WITS_OVERRIDE_MEMDBMAP(30).MapTo_COMDATA_ArrPos = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_empty_string$
  
  close file 1

//   g_save_final_name$ = g_autodir_full_directory_path$ + "\Engine Data\WITS_OVERRIDE_CONFIGURATION.txt"
//   
//   if file exist(g_save_final_name$) = 1
//     delete file g_save_final_name$
//   endif
//   
//   open to write 1, g_save_final_name$
// 
//     write string 1, "[WITS OVERRIDE CONFIGURATION - SETTINGS AND MAPPINGS]"
//     write string 1, "*"
//     write string 1, "[SETTINGS]"
//     write string 1, "Bit_Depth=1"
//     write string 1, "*"
//     write string 1, "[MAPPINGS - The OVERRIDE ARRAY Postion to override each channel from. -1 if NULL]"
//     write string 1, "01-Bit_Depth=-1"
//     write string 1, "02-Hole_Depth=-1"
//     write string 1, "03-Block_Position=-1"
//     write string 1, "04-Hookload=-1"
//     write string 1, "05-WOB=-1"
//     write string 1, "06-Torque=-1"
//     write string 1, "07-RPM=-1"
//     write string 1, "08-SPP=-1"
//     write string 1, "09-CSG=-1"
//     write string 1, "10-SPM1=-1"
//     write string 1, "11-SPM2=-1"
//     write string 1, "12-SPM3=-1"
//     write string 1, "13-PVT=--1"
//     write string 1, "14-PIT1=-1"
//     write string 1, "15-PIT2=-1"
//     write string 1, "16-PIT3=-1"
//     write string 1, "17-PIT4=-1"
//     write string 1, "18-PIT5=-1"
//     write string 1, "19-PIT6=-1"
//     write string 1, "20-PIT7=-1"
//     write string 1, "21-PIT8=-1"
//     write string 1, "22-Flow_IN=-1"
//     write string 1, "23-Flow_OUT%=-1"
//     write string 1, "24-TG%=-1"
//     write string 1, "25-H2S=-1"
//     write string 1, "26-TripTank=-1"
//     write string 1, "27-TempIN=-1"
//     write string 1, "28-TempOUT=-1"
//     write string 1, "29-LagDepth=-1"
//     write string 1, "30-TotalStrokes=-1"
//     write string 1, "*"
//     
//   close file 1



endfunction

function LOAD_WELL_DATA_File()

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\Well_Profile.txt"
  
    read string 1, l_empty_string$
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WELLDATA_HoleID# = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WELLDATA_PipeOD# = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WELLDATA_PipeID# = g_LGSV_ConvertedString_Output_FLT#
    read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : WELLDATA_MudMotorFactor_RevsGallon# = g_LGSV_ConvertedString_Output_FLT#

  close file 1
  

endfunction



function LOAD_CF1_Login_Account_File()

  local l_empty_string$ as string
  local l_FileString$ as string

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\Login_Account.txt"
  
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENGINELOGIN_Main_Username$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_ENGINELOGIN_Main_Password$ = g_LGSS_ConvertedString_Output_STR$

  close file 1

  if g_ENGINELOGIN_Main_Username$ = "None"
    g_ENGINELOGIN_Main_Username$ = ""
  endif  
  if g_ENGINELOGIN_Main_Password$ = "None"
    g_ENGINELOGIN_Main_Password$ = ""
  endif
  
  g_ENGINELOGIN_InputUsername$ = g_ENGINELOGIN_Main_Username$
  g_ENGINELOGIN_InputPassword$ = g_ENGINELOGIN_Main_Password$
  g_ENGINELOGIN_InputPasswordSTARS$ = ""
  for star_lp = 1 to len(g_ENGINELOGIN_InputPassword$)
    g_ENGINELOGIN_InputPasswordSTARS$ = g_ENGINELOGIN_InputPasswordSTARS$ + "*"
  next star_lp
  
  `If Login data has been loaded then disable the LOGIN BOX and allow the client to
  `attempt a login using it. If the login fails then the LOGIN BOX will be prompted.
  `if g_ENGINELOGIN_Main_Username$ <> "" and g_ENGINELOGIN_Main_Password$ <> ""
    g_ENGINELOGIN_Show_Login = 1
    g_ENGINELOGIN_IDInFileAtStartUpAffect = -1
  `  `-------
  `  `When the box used to appear and then fade when the program was started this code was run
  `  `g_ENGINELOGIN_Show_Login = -1
  `  `g_connection_attempt_ATTEMPT_NOW = 1
  `  `g_ENGINELOGIN_IDInFileAtStartUpAffect = 1
  `  `g_ENGINELOGIN_IDInFileAtStartUpTimer = timer() + c_ENGINELOGIN_ConnectedBoxFadeTime
  `  `g_ENGINELOGIN_IDInFileAtStartUpALPHA = 255
  `  `-------
  `else
  `  g_ENGINELOGIN_Show_Login = 1
  `  g_ENGINELOGIN_IDInFileAtStartUpAffect = -1
  `endif
  
  g_LOGIN_ID_SavefileState$ = "Up to date"
  
endfunction

function LOAD_CF2_Login_Account_File()

  local l_empty_string$ as string

  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\Server_Login_Accounts.txt"

    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
    read string 1, l_empty_string$
      for read_lp = 1 to c_LOGIN_ID_MaxArr
        read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : LOGIN_ID(read_lp).Username$ = g_LGSS_ConvertedString_Output_STR$
        read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : LOGIN_ID(read_lp).Password$ = g_LGSS_ConvertedString_Output_STR$
      next read_lp
    read string 1, l_empty_string$
      for read_lp = 1 to c_LOGIN_ID_Universal_MaxArr
        read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : LOGIN_ID_Universal(read_lp).Username$ = g_LGSS_ConvertedString_Output_STR$
        read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : LOGIN_ID_Universal(read_lp).Password$ = g_LGSS_ConvertedString_Output_STR$
      next read_lp
      
 close file 1
 
 g_LOGIN_ID_SavefileState$ = "Up to date"

endfunction

function ENGINE_HS_Get_Chart_Colours()

  local l_chart_temp$ as string
  local l_comma_pos_1 as integer
  local l_comma_pos_2 as integer


  ` GET CHART COLOURS and assign to variables
  
  for main_linecolour_lp = 1 to 20 : ` This loop goes over each chart line
  
    l_chart_temp$ = ""
    for find_lp = 1 to len(HS_CHART_Line_String$(main_linecolour_lp))
      if mid$(HS_CHART_Line_String$(main_linecolour_lp), find_lp) = "="
        l_chart_temp$ = right$(HS_CHART_Line_String$(main_linecolour_lp), (len(HS_CHART_Line_String$(main_linecolour_lp)) - find_lp))
      endif
    next find_lp
    HS_CHART_Line_String$(main_linecolour_lp) = l_chart_temp$
    
  
    l_comma_pos_1 = -1
    l_comma_pos_2 = -1
    for find_lp = 1 to len(HS_CHART_Line_String$(main_linecolour_lp))
      if mid$(HS_CHART_Line_String$(main_linecolour_lp), find_lp) = ","
        if l_comma_pos_1 = -1
          l_comma_pos_1 = find_lp
          `GET 1ST COLOUR
          HS_CHART_Line_Colours(main_linecolour_lp, 1) = val(left$(HS_CHART_Line_String$(main_linecolour_lp), l_comma_pos_1 - 1))
        else
        `GET SECOND COLOUR - between the 2 commas
          l_comma_pos_2 = find_lp
          l_chart_temp$ = left$(HS_CHART_Line_String$(main_linecolour_lp), l_comma_pos_2 - 1)
          len_from = len(l_chart_temp$) - l_comma_pos_1
          HS_CHART_Line_Colours(main_linecolour_lp, 2) = val(right$(left$(HS_CHART_Line_String$(main_linecolour_lp), l_comma_pos_2 - 1), len_from))
          `GET THIRD COLOUR between the 2nd comma and the end of line
          len_from = len(HS_CHART_Line_String$(main_linecolour_lp)) - l_comma_pos_2
          HS_CHART_Line_Colours(main_linecolour_lp, 3) = val(right$(HS_CHART_Line_String$(main_linecolour_lp), len_from))
        endif
      endif
    next find_lp
  
  next main_linecolour_lp


  `Assign to variables
  `Block 1
  HS_Channel_Colour(1) = rgb(HS_CHART_Line_Colours(1, 1), HS_CHART_Line_Colours(1, 2), HS_CHART_Line_Colours(1, 3))
  HS_Channel_Colour(2) = rgb(HS_CHART_Line_Colours(2, 1), HS_CHART_Line_Colours(2, 2), HS_CHART_Line_Colours(2, 3))
  HS_Channel_Colour(3) = rgb(HS_CHART_Line_Colours(3, 1), HS_CHART_Line_Colours(3, 2), HS_CHART_Line_Colours(3, 3))
  HS_Channel_Colour(4) = rgb(HS_CHART_Line_Colours(4, 1), HS_CHART_Line_Colours(4, 2), HS_CHART_Line_Colours(4, 3))
  HS_Channel_Colour(5) = rgb(HS_CHART_Line_Colours(5, 1), HS_CHART_Line_Colours(5, 2), HS_CHART_Line_Colours(5, 3))
  `Block 2
  HS_Channel_Colour(6) = rgb(HS_CHART_Line_Colours(6, 1), HS_CHART_Line_Colours(6, 2), HS_CHART_Line_Colours(6, 3))
  HS_Channel_Colour(7) = rgb(HS_CHART_Line_Colours(7, 1), HS_CHART_Line_Colours(7, 2), HS_CHART_Line_Colours(7, 3))
  HS_Channel_Colour(8) = rgb(HS_CHART_Line_Colours(8, 1), HS_CHART_Line_Colours(8, 2), HS_CHART_Line_Colours(8, 3))
  HS_Channel_Colour(9) = rgb(HS_CHART_Line_Colours(9, 1), HS_CHART_Line_Colours(9, 2), HS_CHART_Line_Colours(9, 3))
  HS_Channel_Colour(10) = rgb(HS_CHART_Line_Colours(10, 1), HS_CHART_Line_Colours(10, 2), HS_CHART_Line_Colours(10, 3))
  `Block 3
  HS_Channel_Colour(11) = rgb(HS_CHART_Line_Colours(11, 1), HS_CHART_Line_Colours(11, 2), HS_CHART_Line_Colours(11, 3))
  HS_Channel_Colour(12) = rgb(HS_CHART_Line_Colours(12, 1), HS_CHART_Line_Colours(12, 2), HS_CHART_Line_Colours(12, 3))
  HS_Channel_Colour(13) = rgb(HS_CHART_Line_Colours(13, 1), HS_CHART_Line_Colours(13, 2), HS_CHART_Line_Colours(13, 3))
  HS_Channel_Colour(14) = rgb(HS_CHART_Line_Colours(14, 1), HS_CHART_Line_Colours(14, 2), HS_CHART_Line_Colours(14, 3))
  HS_Channel_Colour(15) = rgb(HS_CHART_Line_Colours(15, 1), HS_CHART_Line_Colours(15, 2), HS_CHART_Line_Colours(15, 3))
  `Block 4
  HS_Channel_Colour(16) = rgb(HS_CHART_Line_Colours(16, 1), HS_CHART_Line_Colours(16, 2), HS_CHART_Line_Colours(16, 3))
  HS_Channel_Colour(17) = rgb(HS_CHART_Line_Colours(17, 1), HS_CHART_Line_Colours(17, 2), HS_CHART_Line_Colours(17, 3))
  HS_Channel_Colour(18) = rgb(HS_CHART_Line_Colours(18, 1), HS_CHART_Line_Colours(18, 2), HS_CHART_Line_Colours(18, 3))
  HS_Channel_Colour(19) = rgb(HS_CHART_Line_Colours(19, 1), HS_CHART_Line_Colours(19, 2), HS_CHART_Line_Colours(19, 3))
  HS_Channel_Colour(20) = rgb(HS_CHART_Line_Colours(20, 1), HS_CHART_Line_Colours(20, 2), HS_CHART_Line_Colours(20, 3))


endfunction

function LOAD_Startup_Date_and_Time()

  `When the program is started it checks the last startup date and time and works out the
  `difference. This is done to automatically offer the option to start a new well if more than
  `a week has elapsed between startups.
  
  local l_load_StartupDateTime_name$ as string
  local l_empty_string$ as string
  local l_tempVAL$ as string
  
  open to read 1, g_autodir_full_directory_path$ + "\Engine Data\Init_Data.arr"

    read string 1, l_empty_string$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_INITFunc_ProgLastRun_Date$ = g_LGSS_ConvertedString_Output_STR$
    read string 1, l_FileString$ : lib_Get_String_STRING(l_FileString$) : g_INITFunc_ProgLastRun_Time$ = g_LGSS_ConvertedString_Output_STR$

  close file 1
  

endfunction

function LOAD_PORTABLE_VIEWER_MODE()

   
  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\GDS_RDS_PORTABLE_Settings.txt"

    read string 1, l_empty_string$

  close file 1
  

endfunction

function __________CREATE_MISSING_DATA_FILES________________________________tx17e1()
endfunction

function CREATE_CLIENT_TXT_File()

  g_save_final_name$ = g_autodir_full_directory_path$ + "\Engine Data\CLIENT.txt"
  
  if file exist(g_save_final_name$) = 1
    delete file g_save_final_name$
  endif
  
  `Set Base Variables
  g_CLIENT_HOSTIP_Address$ = "Server_IP=" + g_CLIENT_InstallInputIP$
  g_CLIENT_Server_Port_Num$ = "Server_Port=" + g_CLIENT_InstallInputPORT$
  l_CLIENT_ScreenType$ = "Screen_Resolution=" + str$(g_CLIENT_InstallInputScreenResolution)
  g_CLIENT_WITS_Transmission_Period_Seconds$ = "WITS_Transmission_Period_Seconds=3"
  g_CLIENT_Database_Filename$ = "Database_Filename=Database.dat"
  
  open to write 1, g_save_final_name$

    write string 1, "[SERVER SETUP]"
    write string 1, g_CLIENT_HOSTIP_Address$
    write string 1, g_CLIENT_Server_Port_Num$
    write string 1, "*"
    write string 1, "[SCREEN DISPLAY RESOLUTION 0=1024x768, 1=1360x768]"
    write string 1, l_CLIENT_ScreenType$
    write string 1, "*"
    write string 1, "[SCREEN TRANSMISSION SETTINGS - Changes how often Realtime data are sent to the Server]"
    write string 1, g_CLIENT_WITS_Transmission_Period_Seconds$
    write string 1, "*"
    write string 1, "[DATABASE SETTINGS]"
    write string 1, g_CLIENT_Database_Filename$
    
  close file 1
  
endfunction

function CREATE_OTHER_Variables()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\OTHER_Variables.txt"
  
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif
  
  
  open to write 1, l_Savename_ARR$

    write string 1, "[OTHER Variables - Not relevant to other files, so kept here]"
    write string 1, "g_DLS_DATA_CircTimePerPump_GPMThreshold$=0"

  close file 1
  
endfunction

function CREATE_ALARMS_TXT_File()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\Alarms.txt"
  
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif
  
  
  open to write 1, l_Savename_ARR$

    write string 1, "[STORED ALARMS - If 'Value' paramter for an alarm is -1 then the alarm is OFF]"
    write string 1, "DS_Depth_Alarm_Value=-1"
    write string 1, "DS_Depth_Alarm_Label="

  close file 1
  
endfunction


function CREATE_WITS_CONFIG_File()

  g_save_final_name$ = g_autodir_full_directory_path$ + "\Engine Data\WITS_CONFIGURATION.txt"
  
  
  if file exist(g_save_final_name$) = 1
    delete file g_save_final_name$
  endif
  
  
  open to write 1, g_save_final_name$

    write string 1, "[WITS CONFIGURATION - MAPPINGS]"
    write string 1, "*"
    write string 1, "[RECORD NUMBER]"
    write string 1, "Bit_Depth=1"
    write string 1, "Hole_Depth=1"
    write string 1, "Block_Position=1"
    write string 1, "Hookload=1"
    write string 1, "WOB=1"
    write string 1, "Torque=1"
    write string 1, "RPM=1"
    write string 1, "SPP=1"
    write string 1, "CSG=1"
    write string 1, "SPM1=1"
    write string 1, "SPM2=1"
    write string 1, "SPM3=1"
    write string 1, "PVT=1"
    write string 1, "PIT1=11"
    write string 1, "PIT2=11"
    write string 1, "PIT3=11"
    write string 1, "PIT4=11"
    write string 1, "PIT5=11"
    write string 1, "PIT6=11"
    write string 1, "PIT7=11"
    write string 1, "PIT8=11"
    write string 1, "Flow_IN=1"
    write string 1, "Flow_OUT%=1"
    write string 1, "TG%=1"
    write string 1, "H2S=1"
    write string 1, "TripTank=11"
    write string 1, "TempIN=1"
    write string 1, "TempOUT=1"
    write string 1, "LagDepth=1"
    write string 1, "TotalStrokes=1"
    write string 1, "*"
    write string 1, "[CHANNEL NUMBER]"
    write string 1, "Bit_Depth=8"
    write string 1, "Hole_Depth=10"
    write string 1, "Block_Position=12"
    write string 1, "Hookload=14"
    write string 1, "WOB=16"
    write string 1, "Torque=18"
    write string 1, "RPM=20"
    write string 1, "SPP=21"
    write string 1, "CSG=22"
    write string 1, "SPM1=23"
    write string 1, "SPM2=24"
    write string 1, "SPM3=25"
    write string 1, "PVT=26"
    write string 1, "PIT1=15"
    write string 1, "PIT2=16"
    write string 1, "PIT3=17"
    write string 1, "PIT4=18"
    write string 1, "PIT5=19"
    write string 1, "PIT6=20"
    write string 1, "PIT7=21"
    write string 1, "PIT8=22"
    write string 1, "Flow_IN=30"
    write string 1, "Flow_OUT%=28"
    write string 1, "TG%=40"
    write string 1, "H2S=41"
    write string 1, "TripTank=23"
    write string 1, "TempIN=34"
    write string 1, "TempOUT=33"
    write string 1, "LagDepth=39"
    write string 1, "TotalStrokes=37"
    write string 1, "*"
    
  close file 1
  
endfunction

function CREATE_WITS_OVERRIDE_CONFIG_File()

  g_save_final_name$ = g_autodir_full_directory_path$ + "\Engine Data\WITS_OVERRIDE_CONFIGURATION.txt"
  
  if file exist(g_save_final_name$) = 1
    delete file g_save_final_name$
  endif
  
  open to write 1, g_save_final_name$

    write string 1, "[WITS OVERRIDE CONFIGURATION - SETTINGS AND MAPPINGS]"
    write string 1, "*"
    write string 1, "[SETTINGS]"
    write string 1, "g_WITS_OVERRIDE_User_MaxSetRecords=1"
    write string 1, "*"
    write string 1, "[MAPPINGS - The OVERRIDE ARRAY Postion to override each channel from. -1 if NULL]"
    write string 1, "01-Bit_Depth=-1"
    write string 1, "02-Hole_Depth=-1"
    write string 1, "03-Block_Position=-1"
    write string 1, "04-Hookload=-1"
    write string 1, "05-WOB=-1"
    write string 1, "06-Torque=-1"
    write string 1, "07-RPM=-1"
    write string 1, "08-SPP=-1"
    write string 1, "09-CSG=-1"
    write string 1, "10-SPM1=-1"
    write string 1, "11-SPM2=-1"
    write string 1, "12-SPM3=-1"
    write string 1, "13-PVT=-1"
    write string 1, "14-PIT1=-1"
    write string 1, "15-PIT2=-1"
    write string 1, "16-PIT3=-1"
    write string 1, "17-PIT4=-1"
    write string 1, "18-PIT5=-1"
    write string 1, "19-PIT6=-1"
    write string 1, "20-PIT7=-1"
    write string 1, "21-PIT8=-1"
    write string 1, "22-Flow_IN=-1"
    write string 1, "23-Flow_OUT%=-1"
    write string 1, "24-TG%=-1"
    write string 1, "25-H2S=-1"
    write string 1, "26-TripTank=-1"
    write string 1, "27-TempIN=-1"
    write string 1, "28-TempOUT=-1"
    write string 1, "29-LagDepth=-1"
    write string 1, "30-TotalStrokes=-1"
    write string 1, "*"
    
  close file 1
  
endfunction

function CREATE_Engine_Setup()

  local l_Build_MEMDB_SizeDAYS$ as string
  local l_Build_Viewer$ as string
  local l_Build_Runtime as string
  local l_Build_ProgrammerTestMode$ as string
  local l_Build_GadgetsON$ as string
  local l_Build_UnitsFtM$ as string
  local l_ROP_DepthInterval$ as string
  local l_LagDepth_AdjustVal$ as string
  local l_AutomaticReConnect$ as string
  local l_AutoReconnectTimerPeriod$ as string
  local l_ClientToSerDataTrans_FullOrReduced$ as string
  local l_GadgetVar as integer
  
  
  l_File_ENGSetup$ = g_autodir_full_directory_path$ + "\Engine Data\ENGINE_Setup.arr"
  if file exist(l_File_ENGSetup$) = 1
    delete file l_File_ENGSetup$
  endif
  
  if g_ENGINE_CoreFunctionType = 2
    l_GadgetVar = 1
  else
    l_GadgetVar = -1
  endif

  l_Build_MEMDB_SizeDAYS$ = "Memory_Allocation_In_Days=" + str$(g_ENGINE_MEMDB_Runtime_DAYS)
  l_Build_Viewer$ = "Client_Software_Run_As_Viewer_Only=" + str$(g_ENGINE_CoreFunctionType)
  l_Build_Runtime = "First_Runtime=" + str$(g_ENGINE_First_Runtime)
  l_Build_ProgrammerTestMode$ = "Programmer_Mode_ON=-1"
  l_Build_SwapDayMonthFormat$ = "SwapDayMonthFormat=1"
  l_Build_GadgetsON$ = "GraphicsINT_Gadgets_ON=" + str$(l_GadgetVar)
  l_Build_UnitsFtM$ = "System_UNITS_FT_or_M=" + str$(g_ENGINE_UNITS_FT_or_M)
  l_ROP_DepthInterval$ = "ROP_Interval=0.3"
  l_LagDepth_AdjustVal$ = "LagDepthAdjustVal=0.0"
  l_AutomaticReConnect$ = "AutomaticReConnect=-1"
  l_AutoReconnectTimerPeriod$ = "AutomaticReConnect_TimePeriod=30"
  l_ClientToSerDataTrans_FullOrReduced$ = "Transmit_FULL_1_Or_REDUCED_2_Data(base)_Records=1"

  open to write 1, g_autodir_full_directory_path$ + "\Engine Data\ENGINE_Setup.arr"

    write string 1, "[DATABASE MEMORY ALLOCATION (In the systems RAM)]"
    write string 1, l_Build_MEMDB_SizeDAYS$
    write string 1, "*"
    write string 1, "[CLIENT CORE FUNCTIONALITY]"
    write string 1, "[1=Viewer Only, 2=Mudlogging System (Recording data over WITS, managing and Syncing with Server)]"
    write string 1, l_Build_Viewer$
    write string 1, "*"
    write string 1, "[ENGINE RUNTIME PARAMETERS]"
    write string 1, l_Build_Runtime
    write string 1, l_Build_ProgrammerTestMode$
    write string 1, l_Build_SwapDayMonthFormat$
    write string 1, l_Build_GadgetsON$
    write string 1, "*"
    write string 1, "[ENGINE UNITS]"
    write string 1, "[1=Feet, 2=Meters]"
    write string 1, l_Build_UnitsFtM$
    write string 1, "*"
    write string 1, "[ROP Depth Interval]"
    write string 1, l_ROP_DepthInterval$
    write string 1, "*"
    write string 1, "[LAG DEPTH Adjust Val]"
    write string 1, l_LagDepth_AdjustVal$
    write string 1, "*"
    write string 1, "[Automatic Re-Connect to Server]"
    write string 1, l_AutomaticReConnect$
    write string 1, l_AutoReconnectTimerPeriod$
    write string 1, "*"
    write string 1, "[CLIENT>SERVER Data Transmission]"
    write string 1, l_ClientToSerDataTrans_FullOrReduced$

  close file 1

endfunction

function CREATE_Engine_ExternalVariables()

  local l_File_ENGExternalVars$ as string
  
  l_File_ENGExternalVars$ = g_autodir_full_directory_path$ + "\Engine Data\ENGINE_ExternalVariables.txt"
  
  if file exist(l_File_ENGExternalVars$) = 1
    delete file l_File_ENGExternalVars$
  endif

  open to write 1, l_File_ENGExternalVars$

    write string 1, "ENGINE VARIABLES - EXTERNAL OVERRIDE"
    write string 1, "[FPS LIMITER]"
    write string 1, "FPS_Control_FrameLimiter_Active=1"
    write string 1, "FPS_Control_FrameLimiter_Value=1"
    write string 1, "[PROPER SLEEP]"
    write string 1, "g_ENG_EXTVAL_ProperSleep_OnCycleNum=5"

  close file 1

endfunction

function CREATE_CHANNEL_ID_ChannelIndex()

  `The Index stores which realworld channel (Block/Channel) is linked to which database channel index number

  local l_Savename_ARR$ as string
  
  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Index.txt"
    
  open to write 1, l_Savename_ARR$
  
    write string 1, "01_ChnIndx_DS_Blck1_Chnl1=3"
    write string 1, "02_ChnIndx_DS_Blck1_Chnl2=4"
    write string 1, "03_ChnIndx_DS_Blck1_Chnl3=5"
    write string 1, "04_ChnIndx_DS_Blck1_Chnl4=-1"
    write string 1, "05_ChnIndx_DS_Blck2_Chnl1=6"
    write string 1, "06_ChnIndx_DS_Blck2_Chnl2=8"
    write string 1, "07_ChnIndx_DS_Blck2_Chnl3=9"
    write string 1, "08_ChnIndx_DS_Blck2_Chnl4=-1"
    write string 1, "09_ChnIndx_DS_Blck3_Chnl1=17"
    write string 1, "10_ChnIndx_DS_Blck3_Chnl2=10"
    write string 1, "11_ChnIndx_DS_Blck3_Chnl3=11"
    write string 1, "12_ChnIndx_DS_Blck3_Chnl4=-1"
    write string 1, "13_ChnIndx_PITS_Blck1_Chnl1=9"
    write string 1, "14_ChnIndx_PITS_Blck1_Chnl2=5"
    write string 1, "15_ChnIndx_PITS_Blck1_Chnl3=4"
    write string 1, "16_ChnIndx_PITS_Blck1_Chnl4=-1"
    write string 1, "17_ChnIndx_PITS_Blck2_Chnl1=18"
    write string 1, "18_ChnIndx_PITS_Blck2_Chnl2=19"
    write string 1, "19_ChnIndx_PITS_Blck2_Chnl3=20"
    write string 1, "20_ChnIndx_PITS_Blck2_Chnl4=-1"
    write string 1, "21_ChnIndx_PITS_Blck3_Chnl1=21"
    write string 1, "22_ChnIndx_PITS_Blck3_Chnl2=-1"
    write string 1, "23_ChnIndx_PITS_Blck3_Chnl3=-1"
    write string 1, "24_ChnIndx_PITS_Blck3_Chnl4=-1"
    write string 1, "25_ChnIndx_PITS_Blck4_Chnl1=11"
    write string 1, "26_ChnIndx_PITS_Blck4_Chnl2=10"
    write string 1, "27_ChnIndx_PITS_Blck4_Chnl3=17"
    write string 1, "28_ChnIndx_PITS_Blck4_Chnl4=-1"
    write string 1, "*"
    write string 1, "01_DS_SCREEN_Blck1_DisplayFormat=3"
    write string 1, "02_DS_SCREEN_Blck2_DisplayFormat=3"
    write string 1, "03_DS_SCREEN_Blck3_DisplayFormat=3"
    write string 1, "04_PITS_SCREEN_Blck1_DisplayFormat=3"
    write string 1, "05_PITS_SCREEN_Blck2_DisplayFormat=3"
    write string 1, "06_PITS_SCREEN_Blck3_DisplayFormat=3"
    write string 1, "07_PITS_SCREEN_Blck4_DisplayFormat=3"
    write string 1, "*"
    write string 1, "KEY"
    write string 1, "ChannelID_01=Hole_Depth"
    write string 1, "ChannelID_02=Bit_Depth"
    write string 1, "ChannelID_03=ROP"
    write string 1, "ChannelID_04=WOB"
    write string 1, "ChannelID_05=Hookload"
    write string 1, "ChannelID_06=RPM"
    write string 1, "ChannelID_07=Torque"
    write string 1, "ChannelID_08=Trip Tank"
    write string 1, "ChannelID_09=Block Pos"
    write string 1, "ChannelID_10=SPP"
    write string 1, "ChannelID_11=Flow In"
    write string 1, "ChannelID_12=SPM1"
    write string 1, "ChannelID_13=SPM2"
    write string 1, "ChannelID_14=SPM3"
    write string 1, "ChannelID_15=TG"
    write string 1, "ChannelID_16=H2S"
    write string 1, "ChannelID_17=Total Vol"
    write string 1, "ChannelID_18=PIT1"
    write string 1, "ChannelID_19=PIT2"
    write string 1, "ChannelID_20=PIT3"
    write string 1, "ChannelID_21=PIT4"
    write string 1, "ChannelID_22=PIT5"
    write string 1, "ChannelID_23=PIT6"
    write string 1, "ChannelID_24=PIT7"
    write string 1, "ChannelID_25=PIT8"
    write string 1, "ChannelID_26=CSG"
    write string 1, "ChannelID_27=Flow Out"
    write string 1, "ChannelID_28=Total Strokes"

  close file 1

endfunction

function CREATE_CHANNEL_ID_Names()

  local l_Savename_ARR$ as string

  `This function creates all the Channel Names indexed by the program
  
  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Names.txt"
    
  open to write 1, l_Savename_ARR$
  
    write string 1, "ChannelID_01=Hole_Depth"
    write string 1, "ChannelID_02=Bit_Depth"
    write string 1, "ChannelID_03=ROP"
    write string 1, "ChannelID_04=WOB"
    write string 1, "ChannelID_05=Hookload"
    write string 1, "ChannelID_06=RPM"
    write string 1, "ChannelID_07=Torque"
    write string 1, "ChannelID_08=Trip Tank"
    write string 1, "ChannelID_09=Block Pos"
    write string 1, "ChannelID_10=SPP"
    write string 1, "ChannelID_11=Flow In"
    write string 1, "ChannelID_12=SPM1"
    write string 1, "ChannelID_13=SPM2"
    write string 1, "ChannelID_14=SPM3"
    write string 1, "ChannelID_15=TG"
    write string 1, "ChannelID_16=H2S"
    write string 1, "ChannelID_17=Total Vol"
    write string 1, "ChannelID_18=PIT1"
    write string 1, "ChannelID_19=PIT2"
    write string 1, "ChannelID_20=PIT3"
    write string 1, "ChannelID_21=PIT4"
    write string 1, "ChannelID_22=PIT5"
    write string 1, "ChannelID_23=PIT6"
    write string 1, "ChannelID_24=PIT7"
    write string 1, "ChannelID_25=PIT8"
    write string 1, "ChannelID_26=CSG"
    write string 1, "ChannelID_27=Flow Out"
    write string 1, "ChannelID_28=TtlStrokes"

  close file 1


endfunction

function CREATE_CHANNEL_ID_Names_USER_OVERRIDE()

  local l_Savename_ARR$ as string

  `This function creates all the Channel Names indexed by the program
  
  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Names_Overrides.txt"
    
  open to write 1, l_Savename_ARR$
  
    write string 1, "ChannelID_01="
    write string 1, "ChannelID_02="
    write string 1, "ChannelID_03="
    write string 1, "ChannelID_04="
    write string 1, "ChannelID_05="
    write string 1, "ChannelID_06="
    write string 1, "ChannelID_07="
    write string 1, "ChannelID_08="
    write string 1, "ChannelID_09="
    write string 1, "ChannelID_10="
    write string 1, "ChannelID_11="
    write string 1, "ChannelID_12="
    write string 1, "ChannelID_13="
    write string 1, "ChannelID_14="
    write string 1, "ChannelID_15="
    write string 1, "ChannelID_16="
    write string 1, "ChannelID_17="
    write string 1, "ChannelID_18="
    write string 1, "ChannelID_19="
    write string 1, "ChannelID_20="
    write string 1, "ChannelID_21="
    write string 1, "ChannelID_22="
    write string 1, "ChannelID_23="
    write string 1, "ChannelID_24="
    write string 1, "ChannelID_25="
    write string 1, "ChannelID_26="
    write string 1, "ChannelID_27="
    write string 1, "ChannelID_28="
    write string 1, "*"
    write string 1, "KEY"
    write string 1, "ChannelID_01=Hole_Depth"
    write string 1, "ChannelID_02=Bit_Depth"
    write string 1, "ChannelID_03=ROP"
    write string 1, "ChannelID_04=WOB"
    write string 1, "ChannelID_05=Hookload"
    write string 1, "ChannelID_06=RPM"
    write string 1, "ChannelID_07=Torque"
    write string 1, "ChannelID_08=Trip Tank"
    write string 1, "ChannelID_09=Block Pos"
    write string 1, "ChannelID_10=SPP"
    write string 1, "ChannelID_11=Flow In"
    write string 1, "ChannelID_12=SPM1"
    write string 1, "ChannelID_13=SPM2"
    write string 1, "ChannelID_14=SPM3"
    write string 1, "ChannelID_15=TG"
    write string 1, "ChannelID_16=H2S"
    write string 1, "ChannelID_17=Total Vol"
    write string 1, "ChannelID_18=PIT1"
    write string 1, "ChannelID_19=PIT2"
    write string 1, "ChannelID_20=PIT3"
    write string 1, "ChannelID_21=PIT4"
    write string 1, "ChannelID_22=PIT5"
    write string 1, "ChannelID_23=PIT6"
    write string 1, "ChannelID_24=PIT7"
    write string 1, "ChannelID_25=PIT8"
    write string 1, "ChannelID_26=CSG"
    write string 1, "ChannelID_27=Flow Out"
    write string 1, "ChannelID_28=Total Strokes"


  close file 1


endfunction

function CREATE_CHANNEL_ID_Ranges()

  local l_Savename_ARR$ as string

  `This function creates all the Channel Lower/Upper Ranges
  
  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Ranges.txt"
    
  open to write 1, l_Savename_ARR$
  
    write string 1, "01_ChannelID_01_Hole_Depth_LOWER_VALUE=0"
    write string 1, "02_ChannelID_01_Hole_Depth_UPPER_VALUE=1000"
    write string 1, "03_ChannelID_02_Bit_Depth_LOWER_VALUE=0"
    write string 1, "04_ChannelID_02_Bit_Depth_UPPER_VALUE=1000"
    write string 1, "05_ChannelID_03_ROP_LOWER_VALUE=0"
    write string 1, "06_ChannelID_03_ROP_UPPER_VALUE=50"
    write string 1, "07_ChannelID_04_WOB_LOWER_VALUE=0"
    write string 1, "08_ChannelID_04_WOB_UPPER_VALUE=25"
    write string 1, "09_ChannelID_05_Hookload_LOWER_VALUE=0"
    write string 1, "10_ChannelID_05_Hookload_UPPER_VALUE=100"
    write string 1, "11_ChannelID_06_RPM_LOWER_VALUE=0"
    write string 1, "12_ChannelID_06_RPM_UPPER_VALUE=200"
    write string 1, "13_ChannelID_07_Torque_LOWER_VALUE=0"
    write string 1, "14_ChannelID_07_Torque_UPPER_VALUE=10000"
    write string 1, "15_ChannelID_08_Trip Tank_LOWER_VALUE=0"
    write string 1, "16_ChannelID_08_Trip Tank_UPPER_VALUE=30"
    write string 1, "17_ChannelID_09_Block Pos_LOWER_VALUE=0"
    write string 1, "18_ChannelID_09_Block Pos_UPPER_VALUE=30"
    write string 1, "19_ChannelID_10_SPP_LOWER_VALUE=0"
    write string 1, "20_ChannelID_10_SPP_UPPER_VALUE=3000"
    write string 1, "21_ChannelID_11_Flow In_LOWER_VALUE=0"
    write string 1, "22_ChannelID_11_Flow In_UPPER_VALUE=1000"
    write string 1, "23_ChannelID_12_SPM1_LOWER_VALUE=0"
    write string 1, "24_ChannelID_12_SPM1_UPPER_VALUE=150"
    write string 1, "25_ChannelID_13_SPM2_LOWER_VALUE=0"
    write string 1, "26_ChannelID_13_SPM2_UPPER_VALUE=150"
    write string 1, "27_ChannelID_14_SPM3_LOWER_VALUE=0"
    write string 1, "28_ChannelID_14_SPM3_UPPER_VALUE=150"
    write string 1, "29_ChannelID_15_TG_LOWER_VALUE=0"
    write string 1, "30_ChannelID_15_TG_UPPER_VALUE=100"
    write string 1, "31_ChannelID_16_H2S_LOWER_VALUE=0"
    write string 1, "32_ChannelID_16_H2S_UPPER_VALUE=50"
    write string 1, "33_ChannelID_17_TotalVol_LOWER_VALUE=0"
    write string 1, "34_ChannelID_17_TotalVol_UPPER_VALUE=500"
    write string 1, "35_ChannelID_18_PIT1_LOWER_VALUE=0"
    write string 1, "36_ChannelID_18_PIT1_UPPER_VALUE=200"
    write string 1, "37_ChannelID_19_PIT2_LOWER_VALUE=0"
    write string 1, "38_ChannelID_19_PIT2_UPPER_VALUE=200"
    write string 1, "39_ChannelID_20_PIT3_LOWER_VALUE=0"
    write string 1, "40_ChannelID_20_PIT3_UPPER_VALUE=200"
    write string 1, "41_ChannelID_21_PIT4_LOWER_VALUE=0"
    write string 1, "42_ChannelID_21_PIT4_UPPER_VALUE=200"
    write string 1, "43_ChannelID_22_PIT5_LOWER_VALUE=0"
    write string 1, "44_ChannelID_22_PIT5_UPPER_VALUE=200"
    write string 1, "45_ChannelID_23_PIT6_LOWER_VALUE=0"
    write string 1, "46_ChannelID_23_PIT6_UPPER_VALUE=200"
    write string 1, "47_ChannelID_24_PIT7_LOWER_VALUE=0"
    write string 1, "48_ChannelID_24_PIT7_UPPER_VALUE=200"
    write string 1, "49_ChannelID_25_PIT8_LOWER_VALUE=0"
    write string 1, "50_ChannelID_25_PIT8_UPPER_VALUE=200"
    write string 1, "51_ChannelID_26_CSG_LOWER_VALUE=0"
    write string 1, "52_ChannelID_26_CSG_UPPER_VALUE=2000"
    write string 1, "53_ChannelID_27_FLOWOUT%_LOWER_VALUE=0"
    write string 1, "54_ChannelID_27_FLOWOUT%_UPPER_VALUE=100"
    write string 1, "55_ChannelID_28_TOTALSTROKES_LOWER_VALUE=0"
    write string 1, "56_ChannelID_28_TOTALSTROKES_UPPER_VALUE=100"
    
  close file 1


endfunction

function CREATE_PLOT_CF1_Local_RangesData()

  open to write 1, g_autodir_full_directory_path$ + "\Engine Data\DS_Chart_Ranges.arr"

    write string 1, "[CHART RANGE VALUES]"
    write string 1, "*"
    write string 1, "[CHART RANGES]"
    write string 1, "g_Block1_Line1_Lower_Value=-1"
    write string 1, "g_Block1_Line1_Upper_Value=-1"
    write string 1, "g_Block1_Line2_Lower_Value=-1"
    write string 1, "g_Block1_Line2_Upper_Value=-1"
    write string 1, "g_Block1_Line3_Lower_Value=-1"
    write string 1, "g_Block1_Line3_Upper_Value=-1"
    write string 1, "*"
    write string 1, "g_Block2_Line1_Lower_Value=-1"
    write string 1, "g_Block2_Line1_Upper_Value=-1"
    write string 1, "g_Block2_Line2_Lower_Value=-1"
    write string 1, "g_Block2_Line2_Upper_Value=-1"
    write string 1, "g_Block2_Line3_Lower_Value=-1"
    write string 1, "g_Block2_Line3_Upper_Value=-1"
    write string 1, "*"
    write string 1, "g_Block3_Line1_Lower_Value=-1"
    write string 1, "g_Block3_Line1_Upper_Value=-1"
    write string 1, "g_Block3_Line2_Lower_Value=-1"
    write string 1, "g_Block3_Line2_Upper_Value=-1"
    write string 1, "g_Block3_Line3_Lower_Value=-1"
    write string 1, "g_Block3_Line3_Upper_Value=-1"
    
  close file 1  

endfunction



function CREATE_RTDisp_Unit_Mappings_1024x768()

  local l_Savename_ARR$ as string

  g_FileCreated_DS_Unit_MappingsARR_1024x768 = 1
  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\1024x768\DS_Screen_Units.arr"
  
  open to write 1, l_Savename_ARR$
    write string 1, "This file stores the Drill Screen channel units and screen print positions"
    write string 1, "[UNIT NAMES]"
    write string 1, "Block1_Line1=ft/hr"
    write string 1, "Block1_Line2=klbs"
    write string 1, "Block1_Line3=klbs"
    write string 1, "*"
    write string 1, "Block2_Line1=rpm"
    write string 1, "Block2_Line2=bbls"
    write string 1, "Block2_Line3=mtrs"
    write string 1, "*"
    write string 1, "Block3_Line1=bbls"
    write string 1, "Block3_Line2=psi"
    write string 1, "Block3_Line3=g/min"
    write string 1, ""
    write string 1, "[PRINT POSITIONS]"
    write string 1, "Block1_Line1_x=155"
    write string 1, "Block1_Line1_y=30"
    write string 1, "Block1_Line2_x=155"
    write string 1, "Block1_Line2_y=90"
    write string 1, "Block1_Line3_x=155"
    write string 1, "Block1_Line3_y=154"
    write string 1, "*"
    write string 1, "Block2_Line1_x=420"
    write string 1, "Block2_Line1_y=30"
    write string 1, "Block2_Line2_x=420"
    write string 1, "Block2_Line2_y=90"
    write string 1, "Block2_Line3_x=420"
    write string 1, "Block2_Line3_y=154"
    write string 1, "*"
    write string 1, "Block3_Line1_x=630"
    write string 1, "Block3_Line1_y=30"
    write string 1, "Block3_Line2_x=630"
    write string 1, "Block3_Line2_y=90"
    write string 1, "Block3_Line3_x=630"
    write string 1, "Block3_Line3_y=154"
  
  close file 1  

endfunction



function CREATE_RTDisp_Unit_Mappings_WideScreen()

  local l_Savename_ARR$ as string

  g_FileCreated_DS_Unit_MappingsARR_WideScreen = 1
  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\WideScreen\DS_Screen_Units_WideScreen.arr"
  
  open to write 1, l_Savename_ARR$
    write string 1, "This file stores the Drill Screen channel units and screen print positions"
    write string 1, "[UNIT NAMES]"
    write string 1, "Block1_Line1=ft/hr"
    write string 1, "Block1_Line2=klbs"
    write string 1, "Block1_Line3=klbs"
    write string 1, "*"
    write string 1, "Block2_Line1=rpm"
    write string 1, "Block2_Line2=bbls"
    write string 1, "Block2_Line3=mtrs"
    write string 1, "*"
    write string 1, "Block3_Line1=bbls"
    write string 1, "Block3_Line2=psi"
    write string 1, "Block3_Line3=g/min"
    write string 1, "*"
    write string 1, "[PRINT POSITIONS - ]"
    write string 1, "Block1_Line1_x=205"
    write string 1, "Block1_Line1_y=30"
    write string 1, "Block1_Line2_x=205"
    write string 1, "Block1_Line2_y=90"
    write string 1, "Block1_Line3_x=205"
    write string 1, "Block1_Line3_y=154"
    write string 1, "*"
    write string 1, "Block2_Line1_x=576"
    write string 1, "Block2_Line1_y=30"
    write string 1, "Block2_Line2_x=576"
    write string 1, "Block2_Line2_y=90"
    write string 1, "Block2_Line3_x=576"
    write string 1, "Block2_Line3_y=154"
    write string 1, "*"
    write string 1, "Block3_Line1_x=899"
    write string 1, "Block3_Line1_y=30"
    write string 1, "Block3_Line2_x=899"
    write string 1, "Block3_Line2_y=90"
    write string 1, "Block3_Line3_x=899"
    write string 1, "Block3_Line3_y=154"
  
  close file 1  

endfunction

function CREATE_RTDisp_Drilling_1024x768()



  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\1024x768\Drilling_Display.arr"
    
  open to write 1, l_Savename_ARR$
  
    write string 1, "This file stores the 1024x768 Drilling Screen Print Coordinates"
    write string 1, "DRILL_DISPLAY_Block1_Channel1_Name_x=107"
    write string 1, "DRILL_DISPLAY_Block1_Channel1_Name_y=9"
    write string 1, "DRILL_DISPLAY_Block1_Channel2_Name_x=107"
    write string 1, "DRILL_DISPLAY_Block1_Channel2_Name_y=71"
    write string 1, "DRILL_DISPLAY_Block1_Channel3_Name_x=107"
    write string 1, "DRILL_DISPLAY_Block1_Channel3_Name_y=133"
    
    write string 1, "DRILL_DISPLAY_Block2_Channel1_Name_x=372"
    write string 1, "DRILL_DISPLAY_Block2_Channel1_Name_y=9"
    write string 1, "DRILL_DISPLAY_Block2_Channel2_Name_x=372"
    write string 1, "DRILL_DISPLAY_Block2_Channel2_Name_y=71"
    write string 1, "DRILL_DISPLAY_Block2_Channel3_Name_x=372"
    write string 1, "DRILL_DISPLAY_Block2_Channel3_Name_y=133"
    
    write string 1, "DRILL_DISPLAY_Block3_Channel1_Name_x=581"
    write string 1, "DRILL_DISPLAY_Block3_Channel1_Name_y=9"
    write string 1, "DRILL_DISPLAY_Block3_Channel2_Name_x=581"
    write string 1, "DRILL_DISPLAY_Block3_Channel2_Name_y=71"
    write string 1, "DRILL_DISPLAY_Block3_Channel3_Name_x=581"
    write string 1, "DRILL_DISPLAY_Block3_Channel3_Name_y=133"

    write string 1, "*"
    write string 1, "DRILL_DISPLAY_Block1_Channel1_LO_x=28"
    write string 1, "DRILL_DISPLAY_Block1_Channel1_LO_y=48"
    write string 1, "DRILL_DISPLAY_Block1_Channel1_HIGH_x=186"
    write string 1, "DRILL_DISPLAY_Block1_Channel1_HIGH_y=48"
    write string 1, "DRILL_DISPLAY_Block1_Channel2_LO_x=28"
    write string 1, "DRILL_DISPLAY_Block1_Channel2_LO_y=110"
    write string 1, "DRILL_DISPLAY_Block1_Channel2_HIGH_x=186"
    write string 1, "DRILL_DISPLAY_Block1_Channel2_HIGH_y=110"
    write string 1, "DRILL_DISPLAY_Block1_Channel3_LO_x=28"
    write string 1, "DRILL_DISPLAY_Block1_Channel3_LO_y=172"
    write string 1, "DRILL_DISPLAY_Block1_Channel3_HIGH_x=186"
    write string 1, "DRILL_DISPLAY_Block1_Channel3_HIGH_y=172"
    
    write string 1, "DRILL_DISPLAY_Block2_Channel1_LO_x=299"
    write string 1, "DRILL_DISPLAY_Block2_Channel1_LO_y=48"
    write string 1, "DRILL_DISPLAY_Block2_Channel1_HIGH_x=451"
    write string 1, "DRILL_DISPLAY_Block2_Channel1_HIGH_y=48"
    write string 1, "DRILL_DISPLAY_Block2_Channel2_LO_x=299"
    write string 1, "DRILL_DISPLAY_Block2_Channel2_LO_y=110"
    write string 1, "DRILL_DISPLAY_Block2_Channel2_HIGH_x=451"
    write string 1, "DRILL_DISPLAY_Block2_Channel2_HIGH_y=110"
    write string 1, "DRILL_DISPLAY_Block2_Channel3_LO_x=299"
    write string 1, "DRILL_DISPLAY_Block2_Channel3_LO_y=172"
    write string 1, "DRILL_DISPLAY_Block2_Channel3_HIGH_x=451"
    write string 1, "DRILL_DISPLAY_Block2_Channel3_HIGH_y=172"
    
    write string 1, "DRILL_DISPLAY_Block3_Channel1_LO_x=504"
    write string 1, "DRILL_DISPLAY_Block3_Channel1_LO_y=48"
    write string 1, "DRILL_DISPLAY_Block3_Channel1_HIGH_x=660"
    write string 1, "DRILL_DISPLAY_Block3_Channel1_HIGH_y=48"
    write string 1, "DRILL_DISPLAY_Block3_Channel2_LO_x=504"
    write string 1, "DRILL_DISPLAY_Block3_Channel2_LO_y=110"
    write string 1, "DRILL_DISPLAY_Block3_Channel2_HIGH_x=660"
    write string 1, "DRILL_DISPLAY_Block3_Channel2_HIGH_y=110"
    write string 1, "DRILL_DISPLAY_Block3_Channel3_LO_x=504"
    write string 1, "DRILL_DISPLAY_Block3_Channel3_LO_y=172"
    write string 1, "DRILL_DISPLAY_Block3_Channel3_HIGH_x=660"
    write string 1, "DRILL_DISPLAY_Block3_Channel3_HIGH_y=172"
    write string 1, "*"
    write string 1, "DRILL_DISPLAY_Block1_Channel1_ValuePos_x=107"
    write string 1, "DRILL_DISPLAY_Block1_Channel1_ValuePos_y=40"
    write string 1, "DRILL_DISPLAY_Block1_Channel2_ValuePos_x=107"
    write string 1, "DRILL_DISPLAY_Block1_Channel2_ValuePos_y=102"
    write string 1, "DRILL_DISPLAY_Block1_Channel3_ValuePos_x=107"
    write string 1, "DRILL_DISPLAY_Block1_Channel3_ValuePos_y=164"
    write string 1, "DRILL_DISPLAY_Block2_Channel1_ValuePos_x=372"
    write string 1, "DRILL_DISPLAY_Block2_Channel1_ValuePos_y=40"
    write string 1, "DRILL_DISPLAY_Block2_Channel2_ValuePos_x=372"
    write string 1, "DRILL_DISPLAY_Block2_Channel2_ValuePos_y=102"
    write string 1, "DRILL_DISPLAY_Block2_Channel3_ValuePos_x=372"
    write string 1, "DRILL_DISPLAY_Block2_Channel3_ValuePos_y=164"
    write string 1, "DRILL_DISPLAY_Block3_Channel1_ValuePos_x=579"
    write string 1, "DRILL_DISPLAY_Block3_Channel1_ValuePos_y=40"
    write string 1, "DRILL_DISPLAY_Block3_Channel2_ValuePos_x=579"
    write string 1, "DRILL_DISPLAY_Block3_Channel2_ValuePos_y=102"
    write string 1, "DRILL_DISPLAY_Block3_Channel3_ValuePos_x=579"
    write string 1, "DRILL_DISPLAY_Block3_Channel3_ValuePos_y=164"
      
    

  close file 1




endfunction

function CREATE_RTDisp_Drilling_Widescreen()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\WideScreen\Drilling_Display_WideScreen.arr"
    
  open to write 1, l_Savename_ARR$
  
    
    `Variables for displaying 3 channels per DS chart (for 4 see below at end of original file).
    
    `***** 3 CHANNELS PER CHART ******  
    `DRILLING Screen - Channel Name - Screen Positions - 3 CHANNELS PER CHART
    write string 1, "This file stores ALL Widescreen Drilling Screen Print Coordinates"
    `Chart 1
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel1_Name_x=158"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel1_Name_y=9"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel2_Name_x=158"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel2_Name_y=71"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel3_Name_x=158"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel3_Name_y=133"
    `Chart 2
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel1_Name_x=528"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel1_Name_y=9"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel2_Name_x=528"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel2_Name_y=71"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel3_Name_x=528"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel3_Name_y=133"
    `Chart 3
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel1_Name_x=851"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel1_Name_y=9"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel2_Name_x=851"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel2_Name_y=71"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel3_Name_x=851"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel3_Name_y=133"
    write string 1, "*"
    `DRILLING Screen - Channel Ranges (Low/High) Screen Positions - 3 CHANNELS PER CHART
    `Chart 1
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel1_LO_x=80"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel1_LO_y=48"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel1_HIGH_x=234"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel1_HIGH_y=48"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel2_LO_x=80"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel2_LO_y=110"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel2_HIGH_x=234"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel2_HIGH_y=110"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel3_LO_x=80"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel3_LO_y=172"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel3_HIGH_x=234"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel3_HIGH_y=172"
    `Chart 2
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel1_LO_x=449"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel1_LO_y=48"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel1_HIGH_x=605"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel1_HIGH_y=48"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel2_LO_x=449"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel2_LO_y=110"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel2_HIGH_x=605"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel2_HIGH_y=110"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel3_LO_x=449"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel3_LO_y=172"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel3_HIGH_x=605"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel3_HIGH_y=172"
    `Chart 3
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel1_LO_x=773"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel1_LO_y=48"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel1_HIGH_x=927"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel1_HIGH_y=48"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel2_LO_x=773"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel2_LO_y=110"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel2_HIGH_x=927"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel2_HIGH_y=110"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel3_LO_x=773"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel3_LO_y=172"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel3_HIGH_x=927"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel3_HIGH_y=172"
    write string 1, "*"
    `DRILLING Screen - Channel Values - Screen Positions - 3 CHANNELS PER CHART
    `Chart 1
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel1_ValuePos_x=158"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel1_ValuePos_y=40"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel2_ValuePos_x=158"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel2_ValuePos_y=102"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel3_ValuePos_x=158"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block1_Channel3_ValuePos_y=164"
    `Chart 2
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel1_ValuePos_x=528"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel1_ValuePos_y=40"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel2_ValuePos_x=528"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel2_ValuePos_y=102"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel3_ValuePos_x=528"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block2_Channel3_ValuePos_y=164"
    `Chart 3
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel1_ValuePos_x=851"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel1_ValuePos_y=40"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel2_ValuePos_x=851"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel2_ValuePos_y=102"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel3_ValuePos_x=851"
    write string 1, "DRILL_DISPLAY_3PerChnl_Block3_Channel3_ValuePos_y=164"
      
    `***** 4 CHANNELS PER CHART ******  
    `Variables for displaying 4 channels per DS chart (for 4 see below at end of original file).
    
    `DRILLING Screen - Channel Name - Screen Positions - 4 CHANNELS PER CHART
    write string 1, "********* Variables for 4 CHANNELS PER CHART *********"
    
    `Chart 1
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel1_Name_x=95"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel1_Name_y=9"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel2_Name_x=95"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel2_Name_y=56"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel3_Name_x=95"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel3_Name_y=103"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel4_Name_x=95"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel4_Name_y=150"
    `Chart 2
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel1_Name_x=464"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel1_Name_y=9"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel2_Name_x=464"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel2_Name_y=56"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel3_Name_x=464"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel3_Name_y=103"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel4_Name_x=464"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel4_Name_y=150"
    `Chart 3
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel1_Name_x=787"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel1_Name_y=9"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel2_Name_x=787"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel2_Name_y=56"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel3_Name_x=787"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel3_Name_y=103"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel4_Name_x=787"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel4_Name_y=150"
    
    write string 1, "*"
    
    `DRILLING Screen - Channel Ranges (Low/High) Screen Positions - 4 CHANNELS PER CHART
    `Chart 1
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel1_LO_x=124"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel1_LO_y=31"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel1_HIGH_x=234"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel1_HIGH_y=31"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel2_LO_x=124"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel2_LO_y=78"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel2_HIGH_x=234"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel2_HIGH_y=78"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel3_LO_x=124"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel3_LO_y=125"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel3_HIGH_x=234"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel3_HIGH_y=125"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel4_LO_x=124"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel4_LO_y=172"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel4_HIGH_x=234"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel4_HIGH_y=172"
    `Chart 2
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel1_LO_x=492"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel1_LO_y=31"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel1_HIGH_x=605"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel1_HIGH_y=31"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel2_LO_x=492"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel2_LO_y=78"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel2_HIGH_x=605"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel2_HIGH_y=78"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel3_LO_x=492"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel3_LO_y=125"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel3_HIGH_x=605"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel3_HIGH_y=125"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel4_LO_x=492"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel4_LO_y=172"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel4_HIGH_x=605"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel4_HIGH_y=172"
    `Chart 3
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel1_LO_x=819"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel1_LO_y=31"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel1_HIGH_x=927"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel1_HIGH_y=31"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel2_LO_x=819"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel2_LO_y=78"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel2_HIGH_x=927"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel2_HIGH_y=78"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel3_LO_x=819"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel3_LO_y=125"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel3_HIGH_x=927"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel3_HIGH_y=125"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel4_LO_x=819"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel4_LO_y=172"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel4_HIGH_x=927"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel4_HIGH_y=172"
    
    write string 1, "*"
    
    `DRILLING Screen - Channel Values - Screen Positions - 4 CHANNELS PER CHART
    `Chart 1
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel1_ValuePos_x=178"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel1_ValuePos_y=9"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel2_ValuePos_x=178"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel2_ValuePos_y=56"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel3_ValuePos_x=178"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel3_ValuePos_y=103"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel4_ValuePos_x=178"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block1_Channel4_ValuePos_y=150"
    `Chart 2
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel1_ValuePos_x=547"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel1_ValuePos_y=9"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel2_ValuePos_x=547"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel2_ValuePos_y=56"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel3_ValuePos_x=547"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel3_ValuePos_y=103"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel4_ValuePos_x=547"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block2_Channel4_ValuePos_y=150"
    `Chart 3
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel1_ValuePos_x=871"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel1_ValuePos_y=9"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel2_ValuePos_x=871"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel2_ValuePos_y=56"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel3_ValuePos_x=871"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel3_ValuePos_y=103"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel4_ValuePos_x=871"
    write string 1, "DRILL_DISPLAY_4PerChnl_Block3_Channel4_ValuePos_y=150"
      
  close file 1

endfunction

function CREATE_RTDisp_Pits_1024x768()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\1024x768\Pits_Display.arr"
    
  open to write 1, l_Savename_ARR$
  
    write string 1, "This file stores the 1024x768 Pits Screen Details"
    write string 1, "PITS_DISPLAY_Block1_Channel1_Name_x=107"
    write string 1, "PITS_DISPLAY_Block1_Channel1_Name_y=9"
    write string 1, "PITS_DISPLAY_Block1_Channel2_Name_x=107"
    write string 1, "PITS_DISPLAY_Block1_Channel2_Name_y=71"
    write string 1, "PITS_DISPLAY_Block1_Channel3_Name_x=107"
    write string 1, "PITS_DISPLAY_Block1_Channel3_Name_y=133"
    
    write string 1, "PITS_DISPLAY_Block2_Channel1_Name_x=372"
    write string 1, "PITS_DISPLAY_Block2_Channel1_Name_y=9"
    write string 1, "PITS_DISPLAY_Block2_Channel2_Name_x=372"
    write string 1, "PITS_DISPLAY_Block2_Channel2_Name_y=71"
    write string 1, "PITS_DISPLAY_Block2_Channel3_Name_x=372"
    write string 1, "PITS_DISPLAY_Block2_Channel3_Name_y=133"
    
    write string 1, "PITS_DISPLAY_Block3_Channel1_Name_x=581"
    write string 1, "PITS_DISPLAY_Block3_Channel1_Name_y=9"
    write string 1, "PITS_DISPLAY_Block3_Channel2_Name_x=581"
    write string 1, "PITS_DISPLAY_Block3_Channel2_Name_y=71"
    write string 1, "PITS_DISPLAY_Block3_Channel3_Name_x=581"
    write string 1, "PITS_DISPLAY_Block3_Channel3_Name_y=133"
    
    write string 1, "PITS_DISPLAY_Block4_Channel1_Name_x=783"
    write string 1, "PITS_DISPLAY_Block4_Channel1_Name_y=9"
    write string 1, "PITS_DISPLAY_Block4_Channel2_Name_x=783"
    write string 1, "PITS_DISPLAY_Block4_Channel2_Name_y=71"
    write string 1, "PITS_DISPLAY_Block4_Channel3_Name_x=783"
    write string 1, "PITS_DISPLAY_Block4_Channel3_Name_y=133"
    
    write string 1, "*"
    
    write string 1, "PITS_DISPLAY_Block1_Channel1_LO_x=28"
    write string 1, "PITS_DISPLAY_Block1_Channel1_LO_y=48"
    write string 1, "PITS_DISPLAY_Block1_Channel1_HIGH_x=186"
    write string 1, "PITS_DISPLAY_Block1_Channel1_HIGH_y=48"
    write string 1, "PITS_DISPLAY_Block1_Channel2_LO_x=28"
    write string 1, "PITS_DISPLAY_Block1_Channel2_LO_y=110"
    write string 1, "PITS_DISPLAY_Block1_Channel2_HIGH_x=186"
    write string 1, "PITS_DISPLAY_Block1_Channel2_HIGH_y=110"
    write string 1, "PITS_DISPLAY_Block1_Channel3_LO_x=28"
    write string 1, "PITS_DISPLAY_Block1_Channel3_LO_y=172"
    write string 1, "PITS_DISPLAY_Block1_Channel3_HIGH_x=186"
    write string 1, "PITS_DISPLAY_Block1_Channel3_HIGH_y=172"
    
    write string 1, "PITS_DISPLAY_Block2_Channel1_LO_x=299"
    write string 1, "PITS_DISPLAY_Block2_Channel1_LO_y=48"
    write string 1, "PITS_DISPLAY_Block2_Channel1_HIGH_x=451"
    write string 1, "PITS_DISPLAY_Block2_Channel1_HIGH_y=48"
    write string 1, "PITS_DISPLAY_Block2_Channel2_LO_x=299"
    write string 1, "PITS_DISPLAY_Block2_Channel2_LO_y=110"
    write string 1, "PITS_DISPLAY_Block2_Channel2_HIGH_x=451"
    write string 1, "PITS_DISPLAY_Block2_Channel2_HIGH_y=110"
    write string 1, "PITS_DISPLAY_Block2_Channel3_LO_x=299"
    write string 1, "PITS_DISPLAY_Block2_Channel3_LO_y=172"
    write string 1, "PITS_DISPLAY_Block2_Channel3_HIGH_x=451"
    write string 1, "PITS_DISPLAY_Block2_Channel3_HIGH_y=172"
    
    write string 1, "PITS_DISPLAY_Block3_Channel1_LO_x=504"
    write string 1, "PITS_DISPLAY_Block3_Channel1_LO_y=48"
    write string 1, "PITS_DISPLAY_Block3_Channel1_HIGH_x=660"
    write string 1, "PITS_DISPLAY_Block3_Channel1_HIGH_y=48"
    write string 1, "PITS_DISPLAY_Block3_Channel2_LO_x=504"
    write string 1, "PITS_DISPLAY_Block3_Channel2_LO_y=110"
    write string 1, "PITS_DISPLAY_Block3_Channel2_HIGH_x=660"
    write string 1, "PITS_DISPLAY_Block3_Channel2_HIGH_y=110"
    write string 1, "PITS_DISPLAY_Block3_Channel3_LO_x=504"
    write string 1, "PITS_DISPLAY_Block3_Channel3_LO_y=172"
    write string 1, "PITS_DISPLAY_Block3_Channel3_HIGH_x=660"
    write string 1, "PITS_DISPLAY_Block3_Channel3_HIGH_y=172"
    
    write string 1, "PITS_DISPLAY_Block4_Channel1_LO_x=710"
    write string 1, "PITS_DISPLAY_Block4_Channel1_LO_y=48"
    write string 1, "PITS_DISPLAY_Block4_Channel1_HIGH_x=862"
    write string 1, "PITS_DISPLAY_Block4_Channel1_HIGH_y=48"
    write string 1, "PITS_DISPLAY_Block4_Channel2_LO_x=710"
    write string 1, "PITS_DISPLAY_Block4_Channel2_LO_y=110"
    write string 1, "PITS_DISPLAY_Block4_Channel2_HIGH_x=862"
    write string 1, "PITS_DISPLAY_Block4_Channel2_HIGH_y=110"
    write string 1, "PITS_DISPLAY_Block4_Channel3_LO_x=710"
    write string 1, "PITS_DISPLAY_Block4_Channel3_LO_y=172"
    write string 1, "PITS_DISPLAY_Block4_Channel3_HIGH_x=862"
    write string 1, "PITS_DISPLAY_Block4_Channel3_HIGH_y=172"
    
    write string 1, "*"
    
    write string 1, "PITS_DISPLAY_Block1_Channel1_ValuePos_x=107"
    write string 1, "PITS_DISPLAY_Block1_Channel1_ValuePos_y=40"
    write string 1, "PITS_DISPLAY_Block1_Channel2_ValuePos_x=107"
    write string 1, "PITS_DISPLAY_Block1_Channel2_ValuePos_y=102"
    write string 1, "PITS_DISPLAY_Block1_Channel3_ValuePos_x=107"
    write string 1, "PITS_DISPLAY_Block1_Channel3_ValuePos_y=164"
    
    write string 1, "PITS_DISPLAY_Block2_Channel1_ValuePos_x=372"
    write string 1, "PITS_DISPLAY_Block2_Channel1_ValuePos_y=40"
    write string 1, "PITS_DISPLAY_Block2_Channel2_ValuePos_x=372"
    write string 1, "PITS_DISPLAY_Block2_Channel2_ValuePos_y=102"
    write string 1, "PITS_DISPLAY_Block2_Channel3_ValuePos_x=372"
    write string 1, "PITS_DISPLAY_Block2_Channel3_ValuePos_y=164"
    
    write string 1, "PITS_DISPLAY_Block3_Channel1_ValuePos_x=581"
    write string 1, "PITS_DISPLAY_Block3_Channel1_ValuePos_y=40"
    write string 1, "PITS_DISPLAY_Block3_Channel2_ValuePos_x=581"
    write string 1, "PITS_DISPLAY_Block3_Channel2_ValuePos_y=102"
    write string 1, "PITS_DISPLAY_Block3_Channel3_ValuePos_x=581"
    write string 1, "PITS_DISPLAY_Block3_Channel3_ValuePos_y=164"
      
    write string 1, "PITS_DISPLAY_Block4_Channel1_ValuePos_x=783"
    write string 1, "PITS_DISPLAY_Block4_Channel1_ValuePos_y=40"
    write string 1, "PITS_DISPLAY_Block4_Channel2_ValuePos_x=783"
    write string 1, "PITS_DISPLAY_Block4_Channel2_ValuePos_y=102"
    write string 1, "PITS_DISPLAY_Block4_Channel3_ValuePos_x=783"
    write string 1, "PITS_DISPLAY_Block4_Channel3_ValuePos_y=164"

  close file 1




endfunction

function CREATE_RTDisp_Pits_Widescreen()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\WideScreen\Pits_Display_WideScreen.arr"
    
  open to write 1, l_Savename_ARR$

    `Variables for displaying 3 channels per DS chart (for 4 see below at end of original file).

    `***** 3 CHANNELS PER CHART ******  
    `PITS Screen - Channel Name - Screen Positions - 3 CHANNELS PER CHART
    write string 1, "This file stores ALL Widescreen Pits Screen Text Coordinates"
    `Chart 1
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel1_Name_x=158"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel1_Name_y=9"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel2_Name_x=158"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel2_Name_y=71"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel3_Name_x=158"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel3_Name_y=133"
    `Chart 2
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel1_Name_x=528"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel1_Name_y=9"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel2_Name_x=528"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel2_Name_y=71"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel3_Name_x=528"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel3_Name_y=133"
    `Chart 3
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel1_Name_x=851"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel1_Name_y=9"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel2_Name_x=851"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel2_Name_y=71"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel3_Name_x=851"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel3_Name_y=133"
    `Chart 4
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel1_Name_x=1166"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel1_Name_y=9"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel2_Name_x=1166"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel2_Name_y=71"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel3_Name_x=1166"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel3_Name_y=133"
    
    write string 1, "*"
    
    `PITS Screen - Channel Ranges (Low/High) Screen Positions - 3 CHANNELS PER CHART
    `Chart 1
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel1_LO_x=80"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel1_LO_y=48"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel1_HIGH_x=234"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel1_HIGH_y=48"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel2_LO_x=80"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel2_LO_y=110"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel2_HIGH_x=234"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel2_HIGH_y=110"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel3_LO_x=80"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel3_LO_y=172"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel3_HIGH_x=234"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel3_HIGH_y=172"
    `Chart 2
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel1_LO_x=449"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel1_LO_y=48"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel1_HIGH_x=605"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel1_HIGH_y=48"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel2_LO_x=449"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel2_LO_y=110"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel2_HIGH_x=605"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel2_HIGH_y=110"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel3_LO_x=449"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel3_LO_y=172"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel3_HIGH_x=605"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel3_HIGH_y=172"
    `Chart 3
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel1_LO_x=773"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel1_LO_y=48"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel1_HIGH_x=927"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel1_HIGH_y=48"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel2_LO_x=773"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel2_LO_y=110"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel2_HIGH_x=927"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel2_HIGH_y=110"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel3_LO_x=773"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel3_LO_y=172"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel3_HIGH_x=927"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel3_HIGH_y=172"
    `Chart 4
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel1_LO_x=1087"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel1_LO_y=48"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel1_HIGH_x=1242"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel1_HIGH_y=48"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel2_LO_x=1087"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel2_LO_y=110"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel2_HIGH_x=1242"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel2_HIGH_y=110"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel3_LO_x=1087"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel3_LO_y=172"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel3_HIGH_x=1242"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel3_HIGH_y=172"
    
    write string 1, "*"
    
    `PITS Screen - Channel Values - Screen Positions - 3 CHANNELS PER CHART
    `Chart 1
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel1_ValuePos_x=158"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel1_ValuePos_y=40"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel2_ValuePos_x=158"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel2_ValuePos_y=102"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel3_ValuePos_x=158"
    write string 1, "PITS_DISPLAY_3PerChnl_Block1_Channel3_ValuePos_y=164"
    `Chart 2
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel1_ValuePos_x=528"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel1_ValuePos_y=40"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel2_ValuePos_x=528"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel2_ValuePos_y=102"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel3_ValuePos_x=528"
    write string 1, "PITS_DISPLAY_3PerChnl_Block2_Channel3_ValuePos_y=164"
    `Chart 3
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel1_ValuePos_x=851"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel1_ValuePos_y=40"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel2_ValuePos_x=851"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel2_ValuePos_y=102"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel3_ValuePos_x=851"
    write string 1, "PITS_DISPLAY_3PerChnl_Block3_Channel3_ValuePos_y=164"
    `Chart 4
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel1_ValuePos_x=1166"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel1_ValuePos_y=40"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel2_ValuePos_x=1166"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel2_ValuePos_y=102"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel3_ValuePos_x=1166"
    write string 1, "PITS_DISPLAY_3PerChnl_Block4_Channel3_ValuePos_y=164"
    
    `***** 4 CHANNELS PER CHART ******  
    `Variables for displaying 4 channels per DS chart (for 4 see below at end of original file).
    
    `DRILLING Screen - Channel Name - Screen Positions - 4 CHANNELS PER CHART
    write string 1, "********* Variables for 4 CHANNELS PER CHART *********"
    
    `Chart 1
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel1_Name_x=95"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel1_Name_y=9"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel2_Name_x=95"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel2_Name_y=56"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel3_Name_x=95"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel3_Name_y=103"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel4_Name_x=95"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel4_Name_y=150"
    `Chart 2
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel1_Name_x=464"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel1_Name_y=9"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel2_Name_x=464"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel2_Name_y=56"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel3_Name_x=464"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel3_Name_y=103"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel4_Name_x=464"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel4_Name_y=150"
    `Chart 3
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel1_Name_x=787"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel1_Name_y=9"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel2_Name_x=787"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel2_Name_y=56"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel3_Name_x=787"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel3_Name_y=103"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel4_Name_x=787"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel4_Name_y=150"
    `Chart 4
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel1_Name_x=1100"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel1_Name_y=9"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel2_Name_x=1100"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel2_Name_y=56"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel3_Name_x=1100"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel3_Name_y=103"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel4_Name_x=1100"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel4_Name_y=150"
    
    write string 1, "*"
    
    `PITS Screen - Channel Ranges (Low/High) Screen Positions - 4 CHANNELS PER CHART
    `Chart 1
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel1_LO_x=124"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel1_LO_y=31"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel1_HIGH_x=234"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel1_HIGH_y=31"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel2_LO_x=124"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel2_LO_y=78"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel2_HIGH_x=234"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel2_HIGH_y=78"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel3_LO_x=124"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel3_LO_y=125"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel3_HIGH_x=234"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel3_HIGH_y=125"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel4_LO_x=124"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel4_LO_y=172"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel4_HIGH_x=234"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel4_HIGH_y=172"
    `Chart 2
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel1_LO_x=492"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel1_LO_y=31"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel1_HIGH_x=605"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel1_HIGH_y=31"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel2_LO_x=492"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel2_LO_y=78"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel2_HIGH_x=605"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel2_HIGH_y=78"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel3_LO_x=492"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel3_LO_y=125"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel3_HIGH_x=605"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel3_HIGH_y=125"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel4_LO_x=492"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel4_LO_y=172"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel4_HIGH_x=605"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel4_HIGH_y=172"
    `Chart 3
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel1_LO_x=819"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel1_LO_y=31"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel1_HIGH_x=927"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel1_HIGH_y=31"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel2_LO_x=819"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel2_LO_y=78"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel2_HIGH_x=927"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel2_HIGH_y=78"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel3_LO_x=819"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel3_LO_y=125"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel3_HIGH_x=927"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel3_HIGH_y=125"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel4_LO_x=819"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel4_LO_y=172"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel4_HIGH_x=927"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel4_HIGH_y=172"
    `Chart 4
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel1_LO_x=1135"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel1_LO_y=31"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel1_HIGH_x=1242"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel1_HIGH_y=31"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel2_LO_x=1135"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel2_LO_y=78"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel2_HIGH_x=1242"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel2_HIGH_y=78"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel3_LO_x=1135"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel3_LO_y=125"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel3_HIGH_x=1242"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel3_HIGH_y=125"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel4_LO_x=1135"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel4_LO_y=172"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel4_HIGH_x=1242"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel4_HIGH_y=172"
    
    write string 1, "*"
    
    `PITS Screen - Channel Values - Screen Positions - 4 CHANNELS PER CHART
    `Chart 1
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel1_ValuePos_x=178"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel1_ValuePos_y=9"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel2_ValuePos_x=178"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel2_ValuePos_y=56"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel3_ValuePos_x=178"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel3_ValuePos_y=103"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel4_ValuePos_x=178"
    write string 1, "PITS_DISPLAY_4PerChnl_Block1_Channel4_ValuePos_y=150"
    `Chart 2
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel1_ValuePos_x=547"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel1_ValuePos_y=9"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel2_ValuePos_x=547"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel2_ValuePos_y=56"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel3_ValuePos_x=547"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel3_ValuePos_y=103"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel4_ValuePos_x=547"
    write string 1, "PITS_DISPLAY_4PerChnl_Block2_Channel4_ValuePos_y=150"
    `Chart 3
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel1_ValuePos_x=871"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel1_ValuePos_y=9"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel2_ValuePos_x=871"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel2_ValuePos_y=56"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel3_ValuePos_x=871"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel3_ValuePos_y=103"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel4_ValuePos_x=871"
    write string 1, "PITS_DISPLAY_4PerChnl_Block3_Channel4_ValuePos_y=150"
    `Chart 4
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel1_ValuePos_x=1186"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel1_ValuePos_y=9"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel2_ValuePos_x=1186"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel2_ValuePos_y=56"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel3_ValuePos_x=1186"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel3_ValuePos_y=103"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel4_ValuePos_x=1186"
    write string 1, "PITS_DISPLAY_4PerChnl_Block4_Channel4_ValuePos_y=150"
    
    
    
  close file 1

endfunction

function CREATE_HS_Channel_ID()

  local l_Savename_ARR$ as string

  g_FileCreated_HS_Unit_MappingsARR = 1
  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\HS_Screen_Channel_ID.arr"
  
  open to write 1, l_Savename_ARR$
  
    write string 1, "This file stores the Historical Screen channel units names"
    write string 1, "[CHANNEL NAMES]"
    `Block 1
    write string 1, "Channel_01=Hole Depth"
    write string 1, "Channel_02=Bit Depth"
    write string 1, "Channel_03=ROP"
    write string 1, "Channel_04=WOB"
    write string 1, "Channel_05=Hookload"
    `Block 2
    write string 1, "Channel_06=RPM"
    write string 1, "Channel_07=Triptank"
    write string 1, "Channel_08=Block Height"
    write string 1, "Channel_09=Active Volume"
    write string 1, "Channel_10=SPP"
    `Block 3
    write string 1, "Channel_11=Flow In"
    write string 1, "Channel_12=SPM 1"
    write string 1, "Channel_13=SPM 2"
    write string 1, "Channel_14=SPM 3"
    write string 1, "Channel_15=TG"
    `Block 4
    write string 1, "Channel_16=H2S"
    write string 1, "Channel_17=Temp IN"
    write string 1, "Channel_18=Temp OUT"
    write string 1, "Channel_19=CSG"
    write string 1, "Channel_20=Total Strokes"
    `
    write string 1, "*"
    write string 1, "[CHANNEL UNITS]"
    `Block 1
    write string 1, "Channel_01=ft"
    write string 1, "Channel_02=ft"
    write string 1, "Channel_03=ft/hr"
    write string 1, "Channel_04=klbs"
    write string 1, "Channel_05=klbs"
    `Block 2
    write string 1, "Channel_06=rpm"
    write string 1, "Channel_07=bbls"
    write string 1, "Channel_08=m"
    write string 1, "Channel_09=bbls"
    write string 1, "Channel_10=psi"
    `Block 3
    write string 1, "Channel_11=g/min"
    write string 1, "Channel_12=spm"
    write string 1, "Channel_13=spm"
    write string 1, "Channel_14=spm"
    write string 1, "Channel_15=%"
    `Block 4
    write string 1, "Channel_16=ppm"
    write string 1, "Channel_17=deg C"
    write string 1, "Channel_18=deg C"
    write string 1, "Channel_19=psi"
    write string 1, "Channel_20=count"
    write string 1, "*"
    
  close file 1
  
//     SPM1 as word 12
//     SPM2 as word 13
//     SPM3 as word 14
//     TotalGas# as float 15

//     H2S# as float 16
//     TempIN# as float 17
//     TempOUT# as float 18
//     CSG as word 19
//     Total_Strokes as integer 20

endfunction

function CREATE_HS_Ranges_Data()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\HS_ChannelRanges.arr"
  g_FileCreated_ChartChannelMappingsARR = 1

  open to write 1, l_Savename_ARR$

    write string 1, "This file stores the Upper and Lower Range values"
    write string 1, "for the Historical data plots"
    `Block 1
    write string 1, "UpperRange_Hole_Depth=12000"
    write string 1, "LowerRange_Hole_Depth=0"
    write string 1, "UpperRange_Bit_Depth=12000"
    write string 1, "LowerRange_Bit_Depth=0"
    write string 1, "UpperRange_ROP=50"
    write string 1, "LowerRange_ROP=0"
    write string 1, "UpperRange_WOB=25"
    write string 1, "LowerRange_WOB=0"
    write string 1, "UpperRange_Hookload=400"
    write string 1, "LowerRange_Hookload=0"
    `Block 2
    write string 1, "UpperRange_RPM=200"
    write string 1, "LowerRange_RPM=0"
    write string 1, "UpperRange_TripTank=100"
    write string 1, "LowerRange_TripTank=0"
    write string 1, "UpperRange_Block_Height=50"
    write string 1, "LowerRange_Block_Height=0"
    write string 1, "UpperRange_PVT=800"
    write string 1, "LowerRange_PVT=0"
    write string 1, "UpperRange_SPP=4000"
    write string 1, "LowerRange_SPP=0"
    `Block 3
    write string 1, "UpperRange_FlowIn=500"
    write string 1, "LowerRange_FlowIn=0"
    write string 1, "UpperRange_SPM1=300"
    write string 1, "LowerRange_SPM1=0"
    write string 1, "UpperRange_SPM2=300"
    write string 1, "LowerRange_SPM2=0"
    write string 1, "UpperRange_SPM3=300"
    write string 1, "LowerRange_SPM3=0"
    write string 1, "UpperRange_Total_Gas%=100"
    write string 1, "LowerRange_Total_Gas%=0"
    `Block 4
    write string 1, "UpperRange_H2S=50"
    write string 1, "LowerRange_H2S=0"
    write string 1, "UpperRange_TempIN=150"
    write string 1, "LowerRange_TempIN=0"
    write string 1, "UpperRange_TempOUT=150"
    write string 1, "LowerRange_TempOUT=0"
    write string 1, "UpperRange_CSG=4000"
    write string 1, "LowerRange_CSG=0"
    write string 1, "UpperRange_TotalStrokes=5000"
    write string 1, "LowerRange_TotalStrokes=0"
    
  close file 1  

endfunction

function CREATE_HS_ChannelStates()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\HS_ChannelStates.arr"
  g_FileCreated_ChartChannelMappingsARR = 1

  open to write 1, l_Savename_ARR$

    write string 1, "This file stores which channels are being displayed"
    write string 1, "on the Historical Plot. ON=1, OFF=-1"
    `BLock 1
    write string 1, "Hole Depth=1"
    write string 1, "Bit Depth=-1"
    write string 1, "ROP=-1"
    write string 1, "WOB=-1"
    write string 1, "Hookload=1"
    `Block 2
    write string 1, "RPM=-1"
    write string 1, "TripTank=-1"
    write string 1, "Block_Height=-1"
    write string 1, "PVT=1"
    write string 1, "SPP=1"
    `BLock 3
    write string 1, "FlowIn=1"
    write string 1, "SPM1=-1"
    write string 1, "SPM2=-1"
    write string 1, "SPM3=-1"
    write string 1, "Total Gas%=-1"
    `Block 4
    write string 1, "H2S=-1"
    write string 1, "TempIN=-1"
    write string 1, "TempOUT=-1"
    write string 1, "CSG=-1"
    write string 1, "TotalStrokes=-1"
  
  close file 1 

endfunction

function CREATE_HS_Channel_Colours()

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\HS_ChannelColours.arr"

  open to write 1, l_Savename_ARR$

    write string 1, "This file stores the colour values in RGB format for all historical"
    write string 1, "channels. [Red,Green,Blue] - use only commas and NO spaces"
    `Block 1
    write string 1, "Hole_Depth=0,0,0"
    write string 1, "Bit_Depth=80,65,148"
    write string 1, "ROP=0,88,60"
    write string 1, "WOB=0,0,255"
    write string 1, "Hookload=240,100,100"
    `Block 2
    write string 1, "RPM=128,255,255"
    write string 1, "TripTank=128,128,128"
    write string 1, "Block_Height=255,128,255"
    write string 1, "PVT=0,0,255"
    write string 1, "SPP=255,0,0"
    `Block 3
    write string 1, "FlowIn=0,255,0"
    write string 1, "SPM1=255,255,64"
    write string 1, "SPM2=128,128,0"
    write string 1, "Total Gas%=255,125,0"
    write string 1, "H2S=140,0,180"
    `Block 4
    write string 1, "XXXX=0,255,0"
    write string 1, "XXXX=255,255,64"
    write string 1, "XXXX=128,128,0"
    write string 1, "XXXX=255,125,0"
    write string 1, "XXXX=140,0,180"
  
  close file 1

endfunction

function CREATE_WELL_DATA_File()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\Well_Profile.txt"
    
  open to write 1, l_Savename_ARR$
  
    write string 1, "This file stores the Well Profile"
    write string 1, "WellProfile_Hole_ID=5.000"
    write string 1, "WellProfile_Pipe_OD=4.625"
    write string 1, "WellProfile_Pipe_ID=4.062"
    write string 1, "MudMotorFactor=1.55"

  close file 1

endfunction



function CREATE_CF1_Login_Account_File()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\Login_Account.txt"
  
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif  
  
  open to write 1, l_Savename_ARR$

    write string 1, "This file stores the Login Account Details used to connect"
    write string 1, "to the server."
    write string 1, "[LOGIN ACCOUNT]"
    write string 1, "Account_Username=None"
    write string 1, "Account_Password=None"

  close file 1

endfunction

function CREATE_CF2_Login_Accounts_File()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\Server_Login_Accounts.txt"

  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif  
  
  open to write 1, l_Savename_ARR$

    write string 1, "This file stores the Login Account Details retrieved by the Server to"
    write string 1, "authenticate people logging in (Other than the mudlogging unit)."
    write string 1, "This file should only be changed from within the program, otherwise"
    write string 1, "changes will not be transmitted to the Server."
    write string 1, "[USER ID's - Standard]"
      for write_lp = 1 to c_LOGIN_ID_MaxArr
        write string 1, "ID_UN" + str$(write_lp) + "=" + LOGIN_ID(write_lp).Username$
        write string 1, "ID_PW" + str$(write_lp) + "=" + LOGIN_ID(write_lp).Password$
      next write_lp
    write string 1, "[USER ID's - Universal]"
      for write_lp = 1 to c_LOGIN_ID_Universal_MaxArr
        write string 1, "ID_UN" + str$(write_lp) + "=" + LOGIN_ID_Universal(write_lp).Username$
        write string 1, "ID_PW" + str$(write_lp) + "=" + LOGIN_ID_Universal(write_lp).Password$
      next write_lp

  close file 1
  
  g_LOGIN_ID_SavefileState$ = "Up to date"

endfunction

function CREATE_PORTABLE_VIEWER_MODE()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\GDS_RDS_PORTABLE_Settings.txt"

  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif  
  
  open to write 1, l_Savename_ARR$

    write string 1, "This file stores all GDS RDS config settings while running as PORTABLE VIWER MODE"

  close file 1
  

endfunction

function __________SAVE_DATA_FILES________________________________tx17e1()
endfunction

function SAVE_Engine_Setup()

  local l_Build_MEMDB_SizeDAYS$ as string
  local l_Build_Viewer$ as string
  local l_Build_Runtime as string
  local l_Build_ProgrammerTestMode$ as string
  local l_Build_GadgetsON$ as string
  local l_Build_UnitsFtM$ as string
  local l_ROP_DepthInterval$ as string
  local l_GadgetVar as integer
  local l_Build_SwapDayMonthFormat$ as string
  local l_LagDepth_AdjustVal$ as string
  local l_AutomaticReConnect$ as string
  local l_AutoReconnectTimerPeriod$ as string
  local l_ClientToSerDataTrans_FullOrReduced$ as string
  
  l_File_ENGSetup$ = g_autodir_full_directory_path$ + "\Engine Data\ENGINE_Setup.arr"
  if file exist(l_File_ENGSetup$) = 1
    delete file l_File_ENGSetup$
  endif
  
  if g_ENGINE_CoreFunctionType = 2
    l_GadgetVar = 1
  else
    l_GadgetVar = -1
  endif

  l_Build_MEMDB_SizeDAYS$ = "Memory_Allocation_In_Days=" + str$(g_ENGINE_MEMDB_Runtime_DAYS)
  l_Build_Viewer$ = "Client_Software_Run_As_Viewer_Only=" + str$(g_ENGINE_CoreFunctionType)
  l_Build_Runtime = "First_Runtime=" + str$(g_ENGINE_First_Runtime)
  l_Build_ProgrammerTestMode$ = "Programmer_Mode_ON=-1"
  l_Build_SwapDayMonthFormat$ = "SwapDayMonthFormat=1"
  l_Build_GadgetsON$ = "GraphicsINT_Gadgets_ON=" + str$(l_GadgetVar)
  l_Build_UnitsFtM$ = "System_UNITS_FT_or_M=" + str$(g_ENGINE_UNITS_FT_or_M)
  l_ROP_DepthInterval$ = "ROP_Interval=" + str$(g_ROPCALC_ROPCalcDepthInterval#, 1)
  l_LagDepth_AdjustVal$ = "LagDepthAdjustVal=" + str$(g_LAGDEPTH_AdjustValue#, 3)
  l_AutomaticReConnect$ = "AutomaticReConnect=" + str$(g_AUTO_CONNECT_ON)
  l_AutoReconnectTimerPeriod$ = "AutomaticReConnect_TimePeriod="+ str$(g_AUTO_CONNECT_CountdownPeriod)
  l_ClientToSerDataTrans_FullOrReduced$ = "Transmit_FULL_1_Or_REDUCED_2_Data(base)_Records=" + str$(g_ClientSerTransmitDB_Full1OrReduced2)
  

  open to write 1, g_autodir_full_directory_path$ + "\Engine Data\ENGINE_Setup.arr"

    write string 1, "[DATABASE MEMORY ALLOCATION (In the systems RAM)]"
    write string 1, l_Build_MEMDB_SizeDAYS$
    write string 1, "*"
    write string 1, "[CLIENT CORE FUNCTIONALITY]"
    write string 1, "[1=Viewer Only, 2=Mudlogging System (Recording data over WITS, managing and Syncing with Server)]"
    write string 1, l_Build_Viewer$
    write string 1, "*"
    write string 1, "[ENGINE RUNTIME PARAMETERS]"
    write string 1, l_Build_Runtime
    write string 1, l_Build_ProgrammerTestMode$
    write string 1, l_Build_SwapDayMonthFormat$
    write string 1, l_Build_GadgetsON$
    write string 1, "*"
    write string 1, "[ENGINE UNITS]"
    write string 1, "[1=Feet, 2=Meters]"
    write string 1, l_Build_UnitsFtM$
    write string 1, "*"
    write string 1, "[ROP Depth Interval]"
    write string 1, l_ROP_DepthInterval$
    write string 1, "*"
    write string 1, "[LAG DEPTH Adjust Val]"
    write string 1, l_LagDepth_AdjustVal$
    write string 1, "*"
    write string 1, "[Automatic Re-Connect to Server]"
    write string 1, l_AutomaticReConnect$
    write string 1, l_AutoReconnectTimerPeriod$
    
  close file 1

endfunction

function SAVE_WITS_CONFIG_File()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\WITS_CONFIGURATION.txt"
  
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif
  
  
  open to write 1, l_Savename_ARR$

    write string 1, "[WITS CONFIGURATION - MAPPINGS]"
    write string 1, "*"
    write string 1, "[RECORD NUMBER]"
    write string 1, "Bit_Depth=" + g_ENG_WITSCONFIG_RecordNumber_BitDepth$
    write string 1, "Hole_Depth=" + g_ENG_WITSCONFIG_RecordNumber_HoleDepth$
    write string 1, "Block_Position=" + g_ENG_WITSCONFIG_RecordNumber_BlockPosition$
    write string 1, "Hookload=" + g_ENG_WITSCONFIG_RecordNumber_HKLD$
    write string 1, "WOB=" + g_ENG_WITSCONFIG_RecordNumber_WOB$
    write string 1, "Torque=" + g_ENG_WITSCONFIG_RecordNumber_Torque$
    write string 1, "RPM=" + g_ENG_WITSCONFIG_RecordNumber_RPM$
    write string 1, "SPP=" + g_ENG_WITSCONFIG_RecordNumber_SPP$
    write string 1, "CSG=" + g_ENG_WITSCONFIG_RecordNumber_CSG$
    write string 1, "SPM1=" + g_ENG_WITSCONFIG_RecordNumber_SPM1$
    write string 1, "SPM2=" + g_ENG_WITSCONFIG_RecordNumber_SPM2$
    write string 1, "SPM3=" + g_ENG_WITSCONFIG_RecordNumber_SPM3$
    write string 1, "PVT=" + g_ENG_WITSCONFIG_RecordNumber_PVT$
    write string 1, "PIT1=" + g_ENG_WITSCONFIG_RecordNumber_PIT1$
    write string 1, "PIT2=" + g_ENG_WITSCONFIG_RecordNumber_PIT2$
    write string 1, "PIT3=" + g_ENG_WITSCONFIG_RecordNumber_PIT3$
    write string 1, "PIT4=" + g_ENG_WITSCONFIG_RecordNumber_PIT4$
    write string 1, "PIT5=" + g_ENG_WITSCONFIG_RecordNumber_PIT5$
    write string 1, "PIT6=" + g_ENG_WITSCONFIG_RecordNumber_PIT6$
    write string 1, "PIT7=" + g_ENG_WITSCONFIG_RecordNumber_PIT7$
    write string 1, "PIT8=" + g_ENG_WITSCONFIG_RecordNumber_PIT8$
    write string 1, "Flow_IN=" + g_ENG_WITSCONFIG_RecordNumber_FLOWIN$
    write string 1, "Flow_OUT%" + g_ENG_WITSCONFIG_RecordNumber_FLOWOUT$
    write string 1, "TG%=" + g_ENG_WITSCONFIG_RecordNumber_TG$
    write string 1, "H2S=" + g_ENG_WITSCONFIG_RecordNumber_H2S$
    write string 1, "TripTank=" + g_ENG_WITSCONFIG_RecordNumber_TripTank$
    write string 1, "TempIN=" + g_ENG_WITSCONFIG_RecordNumber_TempIN$
    write string 1, "TempOUT=" + g_ENG_WITSCONFIG_RecordNumber_TempOUT$
    write string 1, "LagDepth=" + g_ENG_WITSCONFIG_RecordNumber_LagDepth$
    write string 1, "TotalStrokes=" + g_ENG_WITSCONFIG_RecordNumber_TtlStrks$
    write string 1, "*"
    write string 1, "[CHANNEL NUMBER]"
    write string 1, "Bit_Depth=" + g_ENG_WITSCONFIG_ChannelNumber_BitDepth$
    write string 1, "Hole_Depth=" + g_ENG_WITSCONFIG_ChannelNumber_HoleDepth$
    write string 1, "Block_Position=" + g_ENG_WITSCONFIG_ChannelNumber_BlockPosition$
    write string 1, "Hookload=" + g_ENG_WITSCONFIG_ChannelNumber_HKLD$
    write string 1, "WOB=" + g_ENG_WITSCONFIG_ChannelNumber_WOB$
    write string 1, "Torque=" + g_ENG_WITSCONFIG_ChannelNumber_Torque$
    write string 1, "RPM=" + g_ENG_WITSCONFIG_ChannelNumber_RPM$
    write string 1, "SPP=" + g_ENG_WITSCONFIG_ChannelNumber_SPP$
    write string 1, "CSG=" + g_ENG_WITSCONFIG_ChannelNumber_CSG$
    write string 1, "SPM1=" + g_ENG_WITSCONFIG_ChannelNumber_SPM1$
    write string 1, "SPM2=" + g_ENG_WITSCONFIG_ChannelNumber_SPM2$
    write string 1, "SPM3=" + g_ENG_WITSCONFIG_ChannelNumber_SPM3$
    write string 1, "PVT=" + g_ENG_WITSCONFIG_ChannelNumber_PVT$
    write string 1, "PIT1=" + g_ENG_WITSCONFIG_ChannelNumber_PIT1$
    write string 1, "PIT2=" + g_ENG_WITSCONFIG_ChannelNumber_PIT2$
    write string 1, "PIT3=" + g_ENG_WITSCONFIG_ChannelNumber_PIT3$
    write string 1, "PIT4=" + g_ENG_WITSCONFIG_ChannelNumber_PIT4$
    write string 1, "PIT5=" + g_ENG_WITSCONFIG_ChannelNumber_PIT5$
    write string 1, "PIT6=" + g_ENG_WITSCONFIG_ChannelNumber_PIT6$
    write string 1, "PIT7=" + g_ENG_WITSCONFIG_ChannelNumber_PIT7$
    write string 1, "PIT8=" + g_ENG_WITSCONFIG_ChannelNumber_PIT8$
    write string 1, "Flow_IN=" + g_ENG_WITSCONFIG_ChannelNumber_FLOWIN$
    write string 1, "Flow_OUT%=" + g_ENG_WITSCONFIG_ChannelNumber_FLOWOUT$
    write string 1, "TG%=" + g_ENG_WITSCONFIG_ChannelNumber_TG$
    write string 1, "H2S=" + g_ENG_WITSCONFIG_ChannelNumber_H2S$
    write string 1, "TripTank=" + g_ENG_WITSCONFIG_ChannelNumber_TripTank$
    write string 1, "TempIN=" + g_ENG_WITSCONFIG_ChannelNumber_TempIN$
    write string 1, "TempOUT=" + g_ENG_WITSCONFIG_ChannelNumber_TempOUT$
    write string 1, "LagDepth=" + g_ENG_WITSCONFIG_ChannelNumber_LagDepth$
    write string 1, "TotalStrokes=" + g_ENG_WITSCONFIG_ChannelNumber_TtlStrks$
    write string 1, "*"
    
  close file 1
    
  
endfunction

function SAVE_WITS_OVERRIDE_CONFIG_File()

  g_save_final_name$ = g_autodir_full_directory_path$ + "\Engine Data\WITS_OVERRIDE_CONFIGURATION.txt"
  
  if file exist(g_save_final_name$) = 1
    delete file g_save_final_name$
  endif
  
  open to write 1, g_save_final_name$

  
    write string 1, "[WITS OVERRIDE CONFIGURATION - SETTINGS AND MAPPINGS]"
    write string 1, "*"
    write string 1, "[SETTINGS]"
    write string 1, "g_WITS_OVERRIDE_User_MaxSetRecords=" + str$(g_WITS_OVERRIDE_User_MaxSetRecords)
    write string 1, "*"
    write string 1, "[MAPPINGS - The OVERRIDE ARRAY Postion to override each channel from. -1 if NULL]"
    write string 1, "01-Bit_Depth=" + str$(WITS_OVERRIDE_MEMDBMAP(1).MapTo_COMDATA_ArrPos)
    write string 1, "02-Hole_Depth=" + str$(WITS_OVERRIDE_MEMDBMAP(2).MapTo_COMDATA_ArrPos)
    write string 1, "03-Block_Position=" + str$(WITS_OVERRIDE_MEMDBMAP(3).MapTo_COMDATA_ArrPos)
    write string 1, "04-Hookload=" + str$(WITS_OVERRIDE_MEMDBMAP(4).MapTo_COMDATA_ArrPos)
    write string 1, "05-WOB=" + str$(WITS_OVERRIDE_MEMDBMAP(5).MapTo_COMDATA_ArrPos)
    write string 1, "06-Torque=" + str$(WITS_OVERRIDE_MEMDBMAP(6).MapTo_COMDATA_ArrPos)
    write string 1, "07-RPM=" + str$(WITS_OVERRIDE_MEMDBMAP(7).MapTo_COMDATA_ArrPos)
    write string 1, "08-SPP=" + str$(WITS_OVERRIDE_MEMDBMAP(8).MapTo_COMDATA_ArrPos)
    write string 1, "09-CSG=" + str$(WITS_OVERRIDE_MEMDBMAP(9).MapTo_COMDATA_ArrPos)
    write string 1, "10-SPM1=" + str$(WITS_OVERRIDE_MEMDBMAP(10).MapTo_COMDATA_ArrPos)
    write string 1, "11-SPM2=" + str$(WITS_OVERRIDE_MEMDBMAP(11).MapTo_COMDATA_ArrPos)
    write string 1, "12-SPM3=" + str$(WITS_OVERRIDE_MEMDBMAP(12).MapTo_COMDATA_ArrPos)
    write string 1, "13-PVT=" + str$(WITS_OVERRIDE_MEMDBMAP(13).MapTo_COMDATA_ArrPos)
    write string 1, "14-PIT1=" + str$(WITS_OVERRIDE_MEMDBMAP(14).MapTo_COMDATA_ArrPos)
    write string 1, "15-PIT2=" + str$(WITS_OVERRIDE_MEMDBMAP(15).MapTo_COMDATA_ArrPos)
    write string 1, "16-PIT3=" + str$(WITS_OVERRIDE_MEMDBMAP(16).MapTo_COMDATA_ArrPos)
    write string 1, "17-PIT4=" + str$(WITS_OVERRIDE_MEMDBMAP(17).MapTo_COMDATA_ArrPos)
    write string 1, "18-PIT5=" + str$(WITS_OVERRIDE_MEMDBMAP(18).MapTo_COMDATA_ArrPos)
    write string 1, "19-PIT6=" + str$(WITS_OVERRIDE_MEMDBMAP(19).MapTo_COMDATA_ArrPos)
    write string 1, "20-PIT7=" + str$(WITS_OVERRIDE_MEMDBMAP(20).MapTo_COMDATA_ArrPos)
    write string 1, "21-PIT8=" + str$(WITS_OVERRIDE_MEMDBMAP(21).MapTo_COMDATA_ArrPos)
    write string 1, "22-Flow_IN=" + str$(WITS_OVERRIDE_MEMDBMAP(22).MapTo_COMDATA_ArrPos)
    write string 1, "23-Flow_OUT%=" + str$(WITS_OVERRIDE_MEMDBMAP(23).MapTo_COMDATA_ArrPos)
    write string 1, "24-TG%=" + str$(WITS_OVERRIDE_MEMDBMAP(24).MapTo_COMDATA_ArrPos)
    write string 1, "25-H2S=" + str$(WITS_OVERRIDE_MEMDBMAP(25).MapTo_COMDATA_ArrPos)
    write string 1, "26-TripTank=" + str$(WITS_OVERRIDE_MEMDBMAP(26).MapTo_COMDATA_ArrPos)
    write string 1, "27-TempIN=" + str$(WITS_OVERRIDE_MEMDBMAP(27).MapTo_COMDATA_ArrPos)
    write string 1, "28-TempOUT=" + str$(WITS_OVERRIDE_MEMDBMAP(28).MapTo_COMDATA_ArrPos)
    write string 1, "29-LagDepth=" + str$(WITS_OVERRIDE_MEMDBMAP(29).MapTo_COMDATA_ArrPos)
    write string 1, "30-TotalStrokes=" + str$(WITS_OVERRIDE_MEMDBMAP(30).MapTo_COMDATA_ArrPos)
    write string 1, "*"
    
    
    
    
  close file 1
  
  
endfunction

function SAVE_CLIENT_TXT_File()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\CLIENT.txt"
  
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif
  
  open to write 1, l_Savename_ARR$

    write string 1, "[SERVER SETUP]"
    write string 1, "Server_IP=" + g_ClientsideHOST_IP_Address$
    write string 1, "Server_Port=" + str$(g_CLIENT_Server_Port_Int)
    write string 1, "*"
    write string 1, "[SCREEN DISPLAY RESOLUTION 1=1360x768 2=1024x768]"
    write string 1, "Screen_Resolution=" + str$(g_CLIENT_InstallInputScreenResolution)
    write string 1, "*"
    write string 1, "[SCREEN TRANSMISSION SETTINGS - Changes how often Realtime data are sent to the Server]"
    write string 1, "WITS_Transmission_Period_Seconds=" + str$(g_WITS_Transmission_Interval_Int)
    write string 1, "*"
    write string 1, "[DATABASE SETTINGS]"
    write string 1, "Database_Filename=" + g_CLIENT_Database_Filename$
    
  close file 1
  
  
endfunction

function SAVE_WELL_DATA_File()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\Well_Profile.txt"
  
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif
    
  open to write 1, l_Savename_ARR$

    write string 1, "This file stores the Well Profile"
    write string 1, "WellProfile_Hole_ID=" + str$(WELLDATA_HoleID#)
    write string 1, "WellProfile_Pipe_OD=" + str$(WELLDATA_PipeOD#)
    write string 1, "WellProfile_Pipe_ID=" + str$(WELLDATA_PipeID#)
    write string 1, "MudMotorFactor=" + str$(WELLDATA_MudMotorFactor_RevsGallon#)

  close file 1
  
endfunction

function SAVE_OTHER_Variables()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\OTHER_Variables.txt"
  
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif
  
  
  open to write 1, l_Savename_ARR$

    write string 1, "[OTHER Variables - Not relevant to other files, so kept here]"
    write string 1, "g_DLS_DATA_CircTimePerPump_GPMThreshold$=" + g_DLS_DATA_CircTimePerPump_GPMThreshold$

  close file 1
  
endfunction

function SAVE_ALARMS_TXT_File()

  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\Alarms.txt"
  
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif
  
  
  open to write 1, l_Savename_ARR$

    write string 1, "[STORED ALARMS - If 'Value' paramter for an alarm is -1 then the alarm is OFF]"
    write string 1, "DS_Depth_Alarm_Value=" + str$(g_ALARM_DS_DepthAlarm_Value#)
    write string 1, "DS_Depth_Alarm_Label=" + g_ALARM_DS_DepthAlarm_Label$

  close file 1
  
endfunction

function SAVE_CHANNEL_ID_ChannelIndex()

  `The Index stores which realworld channel (Block/Channel) is linked to which database channel index number

  local l_Savename_ARR$ as string
  
  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Index.txt"
  
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif
    
  open to write 1, l_Savename_ARR$
  
    write string 1, "01_ChnIndx_DS_Blck1_Chnl1=" + str$(CHANNEL_ID_ChannelLinkIndex(1))
    write string 1, "02_ChnIndx_DS_Blck1_Chnl2=" + str$(CHANNEL_ID_ChannelLinkIndex(2))
    write string 1, "03_ChnIndx_DS_Blck1_Chnl3=" + str$(CHANNEL_ID_ChannelLinkIndex(3))
    write string 1, "04_ChnIndx_DS_Blck1_Chnl4=" + str$(CHANNEL_ID_ChannelLinkIndex(4))
    write string 1, "05_ChnIndx_DS_Blck2_Chnl1=" + str$(CHANNEL_ID_ChannelLinkIndex(5))
    write string 1, "06_ChnIndx_DS_Blck2_Chnl2=" + str$(CHANNEL_ID_ChannelLinkIndex(6))
    write string 1, "07_ChnIndx_DS_Blck2_Chnl3=" + str$(CHANNEL_ID_ChannelLinkIndex(7))
    write string 1, "08_ChnIndx_DS_Blck2_Chnl4=" + str$(CHANNEL_ID_ChannelLinkIndex(8))
    write string 1, "09_ChnIndx_DS_Blck3_Chnl1=" + str$(CHANNEL_ID_ChannelLinkIndex(9))
    write string 1, "10_ChnIndx_DS_Blck3_Chnl2=" + str$(CHANNEL_ID_ChannelLinkIndex(10))
    write string 1, "11_ChnIndx_DS_Blck3_Chnl3=" + str$(CHANNEL_ID_ChannelLinkIndex(11))
    write string 1, "12_ChnIndx_DS_Blck3_Chnl4=" + str$(CHANNEL_ID_ChannelLinkIndex(12))
    write string 1, "13_ChnIndx_PITS_Blck1_Chnl1=" + str$(CHANNEL_ID_ChannelLinkIndex(13))
    write string 1, "14_ChnIndx_PITS_Blck1_Chnl2=" + str$(CHANNEL_ID_ChannelLinkIndex(14))
    write string 1, "15_ChnIndx_PITS_Blck1_Chnl3=" + str$(CHANNEL_ID_ChannelLinkIndex(15))
    write string 1, "16_ChnIndx_PITS_Blck1_Chnl4=" + str$(CHANNEL_ID_ChannelLinkIndex(16))
    write string 1, "17_ChnIndx_PITS_Blck2_Chnl1=" + str$(CHANNEL_ID_ChannelLinkIndex(17))
    write string 1, "18_ChnIndx_PITS_Blck2_Chnl2=" + str$(CHANNEL_ID_ChannelLinkIndex(18))
    write string 1, "19_ChnIndx_PITS_Blck2_Chnl3=" + str$(CHANNEL_ID_ChannelLinkIndex(19))
    write string 1, "20_ChnIndx_PITS_Blck2_Chnl4=" + str$(CHANNEL_ID_ChannelLinkIndex(20))
    write string 1, "21_ChnIndx_PITS_Blck3_Chnl1=" + str$(CHANNEL_ID_ChannelLinkIndex(21))
    write string 1, "22_ChnIndx_PITS_Blck3_Chnl2=" + str$(CHANNEL_ID_ChannelLinkIndex(22))
    write string 1, "23_ChnIndx_PITS_Blck3_Chnl3=" + str$(CHANNEL_ID_ChannelLinkIndex(23))
    write string 1, "24_ChnIndx_PITS_Blck3_Chnl4=" + str$(CHANNEL_ID_ChannelLinkIndex(24))
    write string 1, "25_ChnIndx_PITS_Blck4_Chnl1=" + str$(CHANNEL_ID_ChannelLinkIndex(25))
    write string 1, "26_ChnIndx_PITS_Blck4_Chnl2=" + str$(CHANNEL_ID_ChannelLinkIndex(26))
    write string 1, "27_ChnIndx_PITS_Blck4_Chnl3=" + str$(CHANNEL_ID_ChannelLinkIndex(27))
    write string 1, "28_ChnIndx_PITS_Blck4_Chnl4=" + str$(CHANNEL_ID_ChannelLinkIndex(28))
    write string 1, "*"
    write string 1, "01_DS_SCREEN_Blck1_DisplayFormat=" + str$(g_DS_SCREEN_Block1_DisplayFormat)
    write string 1, "02_DS_SCREEN_Blck2_DisplayFormat=" + str$(g_DS_SCREEN_Block2_DisplayFormat)
    write string 1, "03_DS_SCREEN_Blck3_DisplayFormat=" + str$(g_DS_SCREEN_Block3_DisplayFormat)
    write string 1, "04_PITS_SCREEN_Blck1_DisplayFormat=" + str$(g_PITS_SCREEN_Block1_DisplayFormat)
    write string 1, "05_PITS_SCREEN_Blck2_DisplayFormat=" + str$(g_PITS_SCREEN_Block2_DisplayFormat)
    write string 1, "06_PITS_SCREEN_Blck3_DisplayFormat=" + str$(g_PITS_SCREEN_Block3_DisplayFormat)
    write string 1, "07_PITS_SCREEN_Blck4_DisplayFormat=" + str$(g_PITS_SCREEN_Block4_DisplayFormat)
    write string 1, "*"
    write string 1, "KEY"
    write string 1, "ChannelID_01=Hole_Depth"
    write string 1, "ChannelID_02=Bit_Depth"
    write string 1, "ChannelID_03=ROP"
    write string 1, "ChannelID_04=WOB"
    write string 1, "ChannelID_05=Hookload"
    write string 1, "ChannelID_06=RPM"
    write string 1, "ChannelID_07=Torque"
    write string 1, "ChannelID_08=Trip Tank"
    write string 1, "ChannelID_09=Block Pos"
    write string 1, "ChannelID_10=SPP"
    write string 1, "ChannelID_11=Flow In"
    write string 1, "ChannelID_12=SPM1"
    write string 1, "ChannelID_13=SPM2"
    write string 1, "ChannelID_14=SPM3"
    write string 1, "ChannelID_15=TG"
    write string 1, "ChannelID_16=H2S"
    write string 1, "ChannelID_17=Total Vol"
    write string 1, "ChannelID_18=PIT1"
    write string 1, "ChannelID_19=PIT2"
    write string 1, "ChannelID_20=PIT3"
    write string 1, "ChannelID_21=PIT4"
    write string 1, "ChannelID_22=PIT5"
    write string 1, "ChannelID_23=PIT6"
    write string 1, "ChannelID_24=PIT7"
    write string 1, "ChannelID_25=PIT8"
    write string 1, "ChannelID_26=CSG"
    write string 1, "ChannelID_27=Flow Out"
    write string 1, "ChannelID_28=Total Strokes"

  close file 1

endfunction

function SAVE_CHANNEL_ID_Ranges()

  local l_Savename_ARR$ as string

  `This function creates all the Channel Lower/Upper Ranges
  
  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Ranges.txt"
   
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif  
    
  open to write 1, l_Savename_ARR$
  
    write string 1, "01_ChannelID_01_Hole_Depth_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(1))
    write string 1, "02_ChannelID_01_Hole_Depth_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(2))
    write string 1, "03_ChannelID_02_Bit_Depth_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(3))
    write string 1, "04_ChannelID_02_Bit_Depth_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(4))
    write string 1, "05_ChannelID_03_ROP_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(5))
    write string 1, "06_ChannelID_03_ROP_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(6))
    write string 1, "07_ChannelID_04_WOB_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(7))
    write string 1, "08_ChannelID_04_WOB_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(8))
    write string 1, "09_ChannelID_05_Hookload_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(9))
    write string 1, "10_ChannelID_05_Hookload_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(10))
    write string 1, "11_ChannelID_06_RPM_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(11))
    write string 1, "12_ChannelID_06_RPM_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(12))
    write string 1, "13_ChannelID_07_Torque_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(13))
    write string 1, "14_ChannelID_07_Torque_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(14))
    write string 1, "15_ChannelID_08_Trip Tank_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(15))
    write string 1, "16_ChannelID_08_Trip Tank_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(16))
    write string 1, "17_ChannelID_09_Block Pos_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(17))
    write string 1, "18_ChannelID_09_Block Pos_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(18))
    write string 1, "19_ChannelID_10_SPP_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(19))
    write string 1, "20_ChannelID_10_SPP_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(20))
    write string 1, "21_ChannelID_11_Flow In_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(21))
    write string 1, "22_ChannelID_11_Flow In_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(22))
    write string 1, "23_ChannelID_12_SPM1_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(23))
    write string 1, "24_ChannelID_12_SPM1_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(24))
    write string 1, "25_ChannelID_13_SPM2_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(25))
    write string 1, "26_ChannelID_13_SPM2_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(26))
    write string 1, "27_ChannelID_14_SPM3_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(27))
    write string 1, "28_ChannelID_14_SPM3_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(28))
    write string 1, "29_ChannelID_15_TG_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(29))
    write string 1, "30_ChannelID_15_TG_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(30))
    write string 1, "31_ChannelID_16_H2S_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(31))
    write string 1, "32_ChannelID_16_H2S_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(32))
    write string 1, "33_ChannelID_17_TotalVol_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(33))
    write string 1, "34_ChannelID_17_TotalVol_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(34))
    write string 1, "35_ChannelID_18_PIT1_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(35))
    write string 1, "36_ChannelID_18_PIT1_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(36))
    write string 1, "37_ChannelID_19_PIT2_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(37))
    write string 1, "38_ChannelID_19_PIT2_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(38))
    write string 1, "39_ChannelID_20_PIT3_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(39))
    write string 1, "40_ChannelID_20_PIT3_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(40))
    write string 1, "41_ChannelID_21_PIT4_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(41))
    write string 1, "42_ChannelID_21_PIT4_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(42))
    write string 1, "43_ChannelID_22_PIT5_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(43))
    write string 1, "44_ChannelID_22_PIT5_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(44))
    write string 1, "45_ChannelID_23_PIT6_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(45))
    write string 1, "46_ChannelID_23_PIT6_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(46))
    write string 1, "47_ChannelID_24_PIT7_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(47))
    write string 1, "48_ChannelID_24_PIT7_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(48))
    write string 1, "49_ChannelID_25_PIT8_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(49))
    write string 1, "50_ChannelID_25_PIT8_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(50))
    write string 1, "51_ChannelID_26_CSG_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(51))
    write string 1, "52_ChannelID_26_CSG_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(52))
    write string 1, "53_ChannelID_27_FLOW_OUT_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(53))
    write string 1, "54_ChannelID_27_FLOW_OUT_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(54))
    write string 1, "55_ChannelID_28_TOTALSTROKES_LOWER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(55))
    write string 1, "56_ChannelID_27_TOTALSTROKES_UPPER_VALUE=" + str$(CHANNEL_ID_ChannelRanges(56))
    
  close file 1


endfunction

function SAVE_CHANNEL_ID_Names_USER_OVERRIDE()

  local l_Savename_ARR$ as string

  `This function creates all the Channel Names indexed by the program
    
  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\ChannelID_Data\Channel_Names_Overrides.txt"
    
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif
    
    
  open to write 1, l_Savename_ARR$
  
    write string 1, "ChannelID_01=" + CHANNEL_ID_ChannelNames_UserOverride$(1)
    write string 1, "ChannelID_02=" + CHANNEL_ID_ChannelNames_UserOverride$(2)
    write string 1, "ChannelID_03=" + CHANNEL_ID_ChannelNames_UserOverride$(3)
    write string 1, "ChannelID_04=" + CHANNEL_ID_ChannelNames_UserOverride$(4)
    write string 1, "ChannelID_05=" + CHANNEL_ID_ChannelNames_UserOverride$(5)
    write string 1, "ChannelID_06=" + CHANNEL_ID_ChannelNames_UserOverride$(6)
    write string 1, "ChannelID_07=" + CHANNEL_ID_ChannelNames_UserOverride$(7)
    write string 1, "ChannelID_08=" + CHANNEL_ID_ChannelNames_UserOverride$(8)
    write string 1, "ChannelID_09=" + CHANNEL_ID_ChannelNames_UserOverride$(9)
    write string 1, "ChannelID_10=" + CHANNEL_ID_ChannelNames_UserOverride$(10)
    write string 1, "ChannelID_11=" + CHANNEL_ID_ChannelNames_UserOverride$(11)
    write string 1, "ChannelID_12=" + CHANNEL_ID_ChannelNames_UserOverride$(12)
    write string 1, "ChannelID_13=" + CHANNEL_ID_ChannelNames_UserOverride$(13)
    write string 1, "ChannelID_14=" + CHANNEL_ID_ChannelNames_UserOverride$(14)
    write string 1, "ChannelID_15=" + CHANNEL_ID_ChannelNames_UserOverride$(15)
    write string 1, "ChannelID_16=" + CHANNEL_ID_ChannelNames_UserOverride$(16)
    write string 1, "ChannelID_17=" + CHANNEL_ID_ChannelNames_UserOverride$(17)
    write string 1, "ChannelID_18=" + CHANNEL_ID_ChannelNames_UserOverride$(18)
    write string 1, "ChannelID_19=" + CHANNEL_ID_ChannelNames_UserOverride$(19)
    write string 1, "ChannelID_20=" + CHANNEL_ID_ChannelNames_UserOverride$(20)
    write string 1, "ChannelID_21=" + CHANNEL_ID_ChannelNames_UserOverride$(21)
    write string 1, "ChannelID_22=" + CHANNEL_ID_ChannelNames_UserOverride$(22)
    write string 1, "ChannelID_23=" + CHANNEL_ID_ChannelNames_UserOverride$(23)
    write string 1, "ChannelID_24=" + CHANNEL_ID_ChannelNames_UserOverride$(24)
    write string 1, "ChannelID_25=" + CHANNEL_ID_ChannelNames_UserOverride$(25)
    write string 1, "ChannelID_26=" + CHANNEL_ID_ChannelNames_UserOverride$(26)
    write string 1, "ChannelID_27=" + CHANNEL_ID_ChannelNames_UserOverride$(27)
    write string 1, "ChannelID_28=" + CHANNEL_ID_ChannelNames_UserOverride$(28)

  close file 1


endfunction

function SAVE_CF1_LOGIN_ACCOUNT_File(r_UN$, r_UP$)

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\Login_Account.txt"
  
  
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif
    
  open to write 1, l_Savename_ARR$
  
    write string 1, "This file stores the Login Account Details used to connect"
    write string 1, "to the server."
    write string 1, "[LOGIN ACCOUNT]"
    write string 1, "Account_Username=" + r_UN$
    write string 1, "Account_Password=" + r_UP$

  close file 1  

endfunction



function SAVE_HS_ChannelStates()

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\HS_ChannelStates.arr"
  
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif  

  open to write 1, l_Savename_ARR$

    write string 1, "This file stores which channels are being displayed"
    write string 1, "on the Historical Plot. ON=1, OFF=-1"
    `Block 1
    write string 1, "Hole Depth=" + str$(HS_TickBox_States(1))
    write string 1, "Bit Depth=" + str$(HS_TickBox_States(2))
    write string 1, "ROP=" + str$(HS_TickBox_States(3))
    write string 1, "WOB=" + str$(HS_TickBox_States(4))
    write string 1, "Hookload=" + str$(HS_TickBox_States(5))
    `Block 2
    write string 1, "RPM=" + str$(HS_TickBox_States(6))
    write string 1, "TripTank=" + str$(HS_TickBox_States(7))
    write string 1, "Block_Height=" + str$(HS_TickBox_States(8))
    write string 1, "PVT=" + str$(HS_TickBox_States(9))
    write string 1, "SPP=" + str$(HS_TickBox_States(10))
    `Block 3
    write string 1, "FlowIn=" + str$(HS_TickBox_States(11))
    write string 1, "SPM1=" + str$(HS_TickBox_States(12))
    write string 1, "SPM2=" + str$(HS_TickBox_States(13))
    write string 1, "Total Gas%=" + str$(HS_TickBox_States(14))
    write string 1, "H2S=" + str$(HS_TickBox_States(15))
    `Block 4
    write string 1, "XXXX=" + str$(HS_TickBox_States(16))
    write string 1, "XXXX=" + str$(HS_TickBox_States(17))
    write string 1, "XXXX=" + str$(HS_TickBox_States(18))
    write string 1, "XXXX=" + str$(HS_TickBox_States(19))
    write string 1, "XXXX=" + str$(HS_TickBox_States(20))
  
  close file 1 

endfunction

function SAVE_HS_Channel_Colours()

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\HS_ChannelColours.arr"

  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif 

  open to write 1, l_Savename_ARR$
    write string 1, "This file stores the colour values in RGB format for all historical"
    write string 1, "channels. [Red,Green,Blue] - use only commas and NO spaces"
    `Block 1
    write string 1, "Hole_Depth=" + str$(HS_CHART_Line_Colours(1, 1)) + "," + str$(HS_CHART_Line_Colours(1, 2)) + "," + str$(HS_CHART_Line_Colours(1, 3))
    write string 1, "Bit_Depth=" + str$(HS_CHART_Line_Colours(2, 1)) + "," + str$(HS_CHART_Line_Colours(2, 2)) + "," + str$(HS_CHART_Line_Colours(2, 3))
    write string 1, "ROP=" + str$(HS_CHART_Line_Colours(3, 1)) + "," + str$(HS_CHART_Line_Colours(3, 2)) + "," + str$(HS_CHART_Line_Colours(3, 3))
    write string 1, "WOB=" + str$(HS_CHART_Line_Colours(4, 1)) + "," + str$(HS_CHART_Line_Colours(4, 2)) + "," + str$(HS_CHART_Line_Colours(4, 3))
    write string 1, "Hookload=" + str$(HS_CHART_Line_Colours(5, 1)) + "," + str$(HS_CHART_Line_Colours(5, 2)) + "," + str$(HS_CHART_Line_Colours(5, 3))
    `Block 2
    write string 1, "RPM=" + str$(HS_CHART_Line_Colours(6, 1)) + "," + str$(HS_CHART_Line_Colours(6, 2)) + "," + str$(HS_CHART_Line_Colours(6, 3))
    write string 1, "TripTank=" + str$(HS_CHART_Line_Colours(7, 1)) + "," + str$(HS_CHART_Line_Colours(7, 2)) + "," + str$(HS_CHART_Line_Colours(7, 3))
    write string 1, "Block_Height=" + str$(HS_CHART_Line_Colours(8, 1)) + "," + str$(HS_CHART_Line_Colours(8, 2)) + "," + str$(HS_CHART_Line_Colours(8, 3))
    write string 1, "PVT=" + str$(HS_CHART_Line_Colours(9, 1)) + "," + str$(HS_CHART_Line_Colours(9, 2)) + "," + str$(HS_CHART_Line_Colours(9, 3))
    write string 1, "SPP=" + str$(HS_CHART_Line_Colours(10, 1)) + "," + str$(HS_CHART_Line_Colours(10, 2)) + "," + str$(HS_CHART_Line_Colours(10, 3))
    `Block 3
    write string 1, "FlowIn=" + str$(HS_CHART_Line_Colours(11, 1)) + "," + str$(HS_CHART_Line_Colours(11, 2)) + "," + str$(HS_CHART_Line_Colours(11, 3))
    write string 1, "SPM1=" + str$(HS_CHART_Line_Colours(12, 1)) + "," + str$(HS_CHART_Line_Colours(12, 2)) + "," + str$(HS_CHART_Line_Colours(12, 3))
    write string 1, "SPM2=" + str$(HS_CHART_Line_Colours(13, 1)) + "," + str$(HS_CHART_Line_Colours(13, 2)) + "," + str$(HS_CHART_Line_Colours(13, 3))
    write string 1, "Total Gas%=" + str$(HS_CHART_Line_Colours(14, 1)) + "," + str$(HS_CHART_Line_Colours(14, 2)) + "," + str$(HS_CHART_Line_Colours(14, 3))
    write string 1, "H2S=" + str$(HS_CHART_Line_Colours(15, 1)) + "," + str$(HS_CHART_Line_Colours(15, 2)) + "," + str$(HS_CHART_Line_Colours(15, 3))
    `Block 4
    write string 1, "XXXX=" + str$(HS_CHART_Line_Colours(16, 1)) + "," + str$(HS_CHART_Line_Colours(16, 2)) + "," + str$(HS_CHART_Line_Colours(16, 3))
    write string 1, "XXXX=" + str$(HS_CHART_Line_Colours(17, 1)) + "," + str$(HS_CHART_Line_Colours(17, 2)) + "," + str$(HS_CHART_Line_Colours(17, 3))
    write string 1, "XXXX=" + str$(HS_CHART_Line_Colours(18, 1)) + "," + str$(HS_CHART_Line_Colours(18, 2)) + "," + str$(HS_CHART_Line_Colours(18, 3))
    write string 1, "XXXX=" + str$(HS_CHART_Line_Colours(19, 1)) + "," + str$(HS_CHART_Line_Colours(19, 2)) + "," + str$(HS_CHART_Line_Colours(19, 3))
    write string 1, "XXXX=" + str$(HS_CHART_Line_Colours(20, 1)) + "," + str$(HS_CHART_Line_Colours(20, 2)) + "," + str$(HS_CHART_Line_Colours(20, 3))
 
  close file 1 

endfunction

function SAVE_HS_CHART_Ranges_Data()

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\HS_ChannelRanges.arr"

  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif  

  open to write 1, l_Savename_ARR$

    write string 1, "This file stores the Upper and Lower Range values"
    write string 1, "for the Historical data plots"
    `Block 1
    write string 1, "UpperRange_Hole_Depth=" + str$(HS_Chart_Range_Values#(1))
    write string 1, "LowerRange_Hole_Depth=" + str$(HS_Chart_Range_Values#(2))
    write string 1, "UpperRange_Bit_Depth=" + str$(HS_Chart_Range_Values#(3))
    write string 1, "LowerRange_Bit_Depth=" + str$(HS_Chart_Range_Values#(4))
    write string 1, "UpperRange_ROP=" + str$(HS_Chart_Range_Values#(5))
    write string 1, "LowerRange_ROP=" + str$(HS_Chart_Range_Values#(6))
    write string 1, "UpperRange_WOB=" + str$(HS_Chart_Range_Values#(7))
    write string 1, "LowerRange_WOB=" + str$(HS_Chart_Range_Values#(8))
    write string 1, "UpperRange_Hookload=" + str$(HS_Chart_Range_Values#(9))
    write string 1, "LowerRange_Hookload=" + str$(HS_Chart_Range_Values#(10))
    `Block 2
    write string 1, "UpperRange_RPM=" + str$(HS_Chart_Range_Values#(11))
    write string 1, "LowerRange_RPM=" + str$(HS_Chart_Range_Values#(12))
    write string 1, "UpperRange_TripTank=" + str$(HS_Chart_Range_Values#(13))
    write string 1, "LowerRange_TripTank=" + str$(HS_Chart_Range_Values#(14))
    write string 1, "UpperRange_Block_Height=" + str$(HS_Chart_Range_Values#(15))
    write string 1, "LowerRange_Block_Height=" + str$(HS_Chart_Range_Values#(16))
    write string 1, "UpperRange_PVT=" + str$(HS_Chart_Range_Values#(17))
    write string 1, "LowerRange_PVT=" + str$(HS_Chart_Range_Values#(18))
    write string 1, "UpperRange_SPP=" + str$(HS_Chart_Range_Values#(19))
    write string 1, "LowerRange_SPP=" + str$(HS_Chart_Range_Values#(20))
    `Block 3
    write string 1, "UpperRange_FlowIn=" + str$(HS_Chart_Range_Values#(21))
    write string 1, "LowerRange_FlowIn=" + str$(HS_Chart_Range_Values#(22))
    write string 1, "UpperRange_SPM1=" + str$(HS_Chart_Range_Values#(23))
    write string 1, "LowerRange_SPM1=" + str$(HS_Chart_Range_Values#(24))
    write string 1, "UpperRange_SPM2=" + str$(HS_Chart_Range_Values#(25))
    write string 1, "LowerRange_SPM2=" + str$(HS_Chart_Range_Values#(26))
    write string 1, "UpperRange_SPM3=" + str$(HS_Chart_Range_Values#(27))
    write string 1, "LowerRange_SPM3=" + str$(HS_Chart_Range_Values#(28))
    write string 1, "UpperRange_Total_Gas%=" + str$(HS_Chart_Range_Values#(29))
    write string 1, "LowerRange_Total_Gas%=" + str$(HS_Chart_Range_Values#(30))
    `Block 4
    write string 1, "UpperRange_H2S=" + str$(HS_Chart_Range_Values#(31))
    write string 1, "LowerRange_H2S=" + str$(HS_Chart_Range_Values#(32))
    write string 1, "UpperRange_TempIN=" + str$(HS_Chart_Range_Values#(33))
    write string 1, "LowerRange_TempIN=" + str$(HS_Chart_Range_Values#(34))
    write string 1, "UpperRange_TempOUT=" + str$(HS_Chart_Range_Values#(35))
    write string 1, "LowerRange_TempOUT=" + str$(HS_Chart_Range_Values#(36))
    write string 1, "UpperRange_CSG=" + str$(HS_Chart_Range_Values#(37))
    write string 1, "LowerRange_CSG=" + str$(HS_Chart_Range_Values#(38))
    write string 1, "UpperRange_TotalStrokes=" + str$(HS_Chart_Range_Values#(39))
    write string 1, "LowerRange_TotalStrokes=" + str$(HS_Chart_Range_Values#(40))
    
  close file 1  

endfunction




function SAVE_PLOT_Local_RangesData_OldDelete()

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\Engine Data\DS_Chart_Ranges.arr"

  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif  

  open to write 1, l_Savename_ARR$

    write string 1, "[CHART RANGE VALUES]"
    write string 1, "*"
    write string 1, "[CHART RANGES]"
    write string 1, "g_Block1_Line1_Lower_Value=" + str$(g_Block1_Line1_Lower_Value)
    write string 1, "g_Block1_Line1_Upper_Value=" + str$(g_Block1_Line1_Upper_Value)
    write string 1, "g_Block1_Line2_Lower_Value=" + str$(g_Block1_Line2_Lower_Value)
    write string 1, "g_Block1_Line2_Upper_Value=" + str$(g_Block1_Line2_Upper_Value)
    write string 1, "g_Block1_Line3_Lower_Value=" + str$(g_Block1_Line3_Lower_Value)
    write string 1, "g_Block1_Line3_Upper_Value=" + str$(g_Block1_Line3_Upper_Value)
    write string 1, "*"
    write string 1, "g_Block2_Line1_Lower_Value=" + str$(g_Block2_Line1_Lower_Value)
    write string 1, "g_Block2_Line1_Upper_Value=" + str$(g_Block2_Line1_Upper_Value)
    write string 1, "g_Block2_Line2_Lower_Value=" + str$(g_Block2_Line2_Lower_Value)
    write string 1, "g_Block2_Line2_Upper_Value=" + str$(g_Block2_Line2_Upper_Value)
    write string 1, "g_Block2_Line3_Lower_Value=" + str$(g_Block2_Line3_Lower_Value)
    write string 1, "g_Block2_Line3_Upper_Value=" + str$(g_Block2_Line3_Upper_Value)
    write string 1, "*"
    write string 1, "g_Block3_Line1_Lower_Value=" + str$(g_Block3_Line1_Lower_Value)
    write string 1, "g_Block3_Line1_Upper_Value=" + str$(g_Block3_Line1_Upper_Value)
    write string 1, "g_Block3_Line2_Lower_Value=" + str$(g_Block3_Line2_Lower_Value)
    write string 1, "g_Block3_Line2_Upper_Value=" + str$(g_Block3_Line2_Upper_Value)
    write string 1, "g_Block3_Line3_Lower_Value=" + str$(g_Block3_Line3_Lower_Value)
    write string 1, "g_Block3_Line3_Upper_Value=" + str$(g_Block3_Line3_Upper_Value)
    
  close file 1
  
endfunction

function SAVE_Startup_Date_and_Time()

  `When the program is started it checks the last startup date and time and works out the
  `difference. This is done to automatically offer the option to start a new well if more than
  `a week has elapsed between startups.
  
  local l_save_StartupDateTime_name$ as string

  l_save_StartupDateTime_name$ = g_autodir_full_directory_path$ + "\Engine Data\Init_Data.arr"
  
  if file exist(l_save_StartupDateTime_name$) = 1
    delete file l_save_StartupDateTime_name$
  endif
  
  open to write 1, l_save_StartupDateTime_name$

    write string 1, "[STARTUP DATA]"
    if g_UK_or_USA_Settings = 1
      write string 1, "Last_StartUp_Date=" + lib_CONVERT_DATE_US_to_UK_Format(get date$())
    else
      write string 1, "Last_StartUp_Date=" + get date$()
    endif  
    write string 1, "Last_StartUp_Time=" + get time$()
    
  close file 1

endfunction


function SAVE_PORTABLE_VIEWER_MODE()
  
  local l_Savename_ARR$ as string

  l_Savename_ARR$ = g_autodir_full_directory_path$ + "\GDS_RDS_PORTABLE_Settings.txt"
  
  if file exist(l_Savename_ARR$) = 1
    delete file l_Savename_ARR$
  endif
  
  open to write 1, l_Savename_ARR$

    write string 1, "This file stores all GDS RDS config settings while running as PORTABLE VIWER MODE"

  close file 1

endfunction


function __________________________________________________________________t9486kbsef()
endfunction

function SERVER_Connect()

  local l_multisync_file$ as string
  local l_connect_time$ as string
  
  `1st Indicate to the User on any graphical realtime screen that the connection attempt is being made now.
    if g_ENGINE_CoreFunctionType = 2
      if g_MAIN_SCREEN_TYPE = 1000
      	if g_ENGINE_Screen_Resolution = 1
      	  if g_ENGINE_HIST_DRILL_Screen_Routing = 1
      	    paste image c_ENG_RT_ConnectingToServer_IMG, 1044, 630, 1
      	    sync
      	  endif
      	  if g_ENGINE_HIST_DRILL_Screen_Routing = 3
      	    paste image c_ENG_RT_ConnectingToServer_IMG, 1172, 199, 1
      	    sync
      	  endif  
      	else
      	  if g_ENGINE_HIST_DRILL_Screen_Routing = 1
      	    paste image c_ENG_RT_ConnectingToServer_IMG, 704, 630, 1
      	    sync
      	  endif
      	  if g_ENGINE_HIST_DRILL_Screen_Routing = 3
      	    paste image c_ENG_RT_ConnectingToServer_IMG, 737, 199, 1
      	    sync
      	  endif
      	endif
      endif
    endif



  ` The function attempts to connect to the server, if it succeeds then [g_server_connected] is set to 1

    g_connection_attempt_timer = g_TIMER_1
    g_server_connected = 0
    g_Relationship_Request_Timer = timer()
    g_server_relationship_data_received = -1
    g_connection_attempt_total_time = timer()
    g_Establish_Relationship_Timer = timer()
    
    g_SERVERConnect_Time$ = "Time:ERR"
    g_SERVERConnect_Date$ = "Date:ERR"
    
    g_SYNC_Engine_Active = -1

    if g_ClientsideHOST_IP_Address$ <> "127.0.0.1"
      if g_ClientsideHOST_IP_Address$ <> ""
        net set port g_CLIENT_Server_Port_Int
        g_CONNECTED_To_Port = g_CLIENT_Server_Port_Int
        g_server_connected = net connect(g_ClientsideHOST_IP_Address$)
        g_CONNECTED_To_IP_Address$ = g_ClientsideHOST_IP_Address$
      endif
    endif
    
    if g_ClientsideHOST_IP_Address$ = "127.0.0.1"
      net set port 2332
      g_CONNECTED_To_Port = 2332
      g_server_connected = net connect("127.0.0.1")
      g_CONNECTED_To_IP_Address$ = "127.0.0.1"
    endif
    
    g_ENG_DataTransfer_Rate_Next_Calc = g_TIMER_1 + c_DataTCalcInt
    g_ENG_DataTransfer_Total = 0
    
    g_connection_attempt_ATTEMPT_NOW = -1
    g_connection_attempt_total_time = timer() - g_connection_attempt_total_time
    g_connection_attempt_counter = g_connection_attempt_interval
    
    INST_MSG_LocalInput$ = ""
    
  `If the connection was established update the Server (and maybe the Authorised Client's) menu settings
  if g_server_connected = 1
  
    g_SERVERConnect_Time$ = get time$()
    g_SERVERConnect_Date$ = lib_CONVERT_DATE_US_to_UK_Format(get date$())
  
    MENUS_Update_SERVER_AUClient_CrntSettings()
    g_ENGINELOGIN_ConnectionInfoText$ = ""
    `This should fade the login box if the connection was established
    if g_ENGINELOGIN_Show_Login = 1
      g_ENGINELOGIN_Show_Login = -1
      g_ENGINELOGIN_IDInFileAtStartUpAffect = 1
      g_ENGINELOGIN_IDInFileAtStartUpTimer = timer() + c_ENGINELOGIN_ConnectedBoxFadeTime
      g_ENGINELOGIN_IDInFileAtStartUpALPHA = 255
    endif
  else
    l_connect_time$ = left$(get time$(), len(get time$())-3)
    g_ENGINELOGIN_ConnectionInfoText$ = "Connection attempt failed at " + l_connect_time$
  endif

  `Delete the multisync log file/advert
  l_multisync_file$ = g_autodir_full_directory_path$ + "\clientlog.txt"
  if file exist(l_multisync_file$) = 1
    delete file l_multisync_file$
  endif

endfunction


function MAIN_Program()

  grab focus

  local l_TempBackup$ as string
  

  `set window title "GDS Remote Data Service - Client"
  `  if g_ENGINE_CoreFunctionType = 1
  `    set window title "GDS Remote Data Service - Client (Viewer Mode)"
  `  endif
  `  if g_ENGINE_CoreFunctionType = 2
  `    set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Setup: MAIN_Program)"
  `  endif
  
  `g_ENG_T1k = hitimer() + 1000
  `g_ENG_THs = hitimer() + 500
   
  `if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Setup: lib_SET_DISPLAY_MODE)"
  `  lib_SET_DISPLAY_MODE()
  `if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Setup: lib_SetScreen_Windowed_FullScreen_p1or2)"  
  `  lib_SetScreen_Windowed_FullScreen_p1or2(2)

  `Force the program to startup in fullscreen
  `lib_FULLSCREEN_Force_Fullscreen_Mode()
  
  RC4_Password_Table_GENERATE()
  
  `If Programmer Mode is ON then disable unrequired functions
  if g_ENGINE_ProgrammerMODE = 1
    lib_Programmer_Mode_ON()
  endif
  
  `Setup Program Variables depending on selected CORE FUNCTIONALITY
  if g_ENGINE_CoreFunctionType = 1
    lib_STARTUP_CoreFunctionType1_ViewerOnly()
    `Immediately display the Realtime Graphics Screen
    `NOTE: The PUSH TABLE relationship is requested in DISP_RT_ENGINE_Main() which is run
    `      g_MAIN_SCREEN_TYPE is set to 1000.
      g_MAIN_SCREEN_TYPE = 1000
      g_COMMANDCONSOLE_Active = 0
      lib_Login_CF1_CF2_Graphics_Setup()
      lib_CMND_CNSL_Deactivate()
      lib_Disp_RT_STARTUP()
      lib_Login_CF1_STARTUP()
  endif
  
  if g_ENGINE_CoreFunctionType = 2
    set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Setup: lib_Login_CF1_CF2_Graphics_Setup)"
      lib_Login_CF1_CF2_Graphics_Setup()
    set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Setup: lib_STARTUP_CoreFunctionType2_Mudlogging)"
      lib_STARTUP_CoreFunctionType2_Mudlogging()
    set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Setup: lib_Login_CF2_STARTUP)"
      lib_Login_CF2_STARTUP()
    set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Setup: ENGINE_DS_CHART_IMAGE_Creation)"
      ENGINE_DS_CHART_IMAGE_Creation()
  endif
  
  if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Setup: lib_RESOLUTION_TEST)"  
    lib_RESOLUTION_TEST()
   
  if g_ENGINE_CoreFunctionType = 2
    set window title "GDS Remote Data Service - Client (Full Mudlogging Suite)"
    `Populate startup data for the RT Data Lists Screen
    lib_DLS_STARTUP_Populate_From_LastMemDB(g_DATABASE_MEM_Total_Num_Records)
  endif
  
  `Populate startup data for the RT Data Lists Screen
  `lib_DLS_STARTUP_Populate_From_LastMemDB(g_DATABASE_MEM_Total_Num_Records)
  
  `If Startup in RT Screen Boot Toggle is set then startup the program straight onto the Realtime Graphics Screen
  if g_BOOTUP_StartupOnRTScreen = 1
    lib_Activate_RTGraphicsDisplay()
  endif  
  
  `---------------------------------------------------------------------------------------------
  


  
  do
  
    `Handle the AUTOMATIC MIDNIGHT DATABASE BACKUP
    if get date$() <> g_AUTO_MIDNIGHTBACKUP_Date$
      g_AUTO_MIDNIGHTBACKUP_Date$ = get date$()
      l_TempBackup$ = lib_RCMCode_BackupDatabase("Midnight Backup Code")
      g_AUTO_MIDNIGHTBACKUP_DispInfoImg = 1
      g_AUTO_MIDNIGHTBACKUP_InfoImg_Timer = timer() + 7000
    endif
    
    if timer() > g_GENERAL_1SEC_ON_OFF_TIMER
      g_GENERAL_1SEC_ON_OFF_TIMER = timer() + 1000
      if g_GENERAL_1SEC_ON_OFF_TOGGLE = -1
        g_GENERAL_1SEC_ON_OFF_TOGGLE = 1
      else
        g_GENERAL_1SEC_ON_OFF_TOGGLE = -1
      endif
    endif      
    
    if timer() > g_GENERAL_1SEC_ON_HalfSecOFF_TIMER
      if g_GENERAL_1SEC_ON_HalfSecOFF_TOGGLE = -1
        g_GENERAL_1SEC_ON_HalfSecOFF_TOGGLE = 1
        g_GENERAL_1SEC_ON_HalfSecOFF_TIMER = timer() + 1500
      else
        g_GENERAL_1SEC_ON_HalfSecOFF_TOGGLE = -1
        g_GENERAL_1SEC_ON_HalfSecOFF_TIMER = timer() + 300
      endif
    endif  
    
    

    `Handle the main program/system 1 second timer
    if hitimer() > g_ENG_T1k
      g_ENG_T1k = hitimer() + 1000
      inc g_TIMER_1, 1
    endif
    if hitimer() > g_ENG_THs
      g_ENG_THs = hitimer() + 500
      inc g_TIMER_H, 1
    endif
    
    `Set the mouse click arrays if no mouse buttons are clicked
    if mouseclick() = 0
      for set_lp = 1 to 4
        mouse_click(set_lp) = -1
      next set_lp
    endif
    
    `Monitor whether the user has commanded (through the command console) for a new well to be created
    if g_CMNDCONSL_ForceSTART_NEW_WELL <> -1
      lib_CMNDCONSL_Option_CREATE_NEW_WELL()
    endif
    `Handle the Create New Well option Lock
    if g_CMNDCONSL_ForceSTART_Unlock = 2
      if timer() > g_CMNDCONSL_ForceSTART_UnlockTimer
        g_CMNDCONSL_ForceSTART_Unlock = 1
      endif
    endif
    `Handle Flashing the LOCK Message
    if g_CMNDCONSL_ForceSTART_NEW_WELL = -99
      if timer() > g_CMNDCONSL_ForceSTART_UnlockMSGFlash
        g_CMNDCONSL_ForceSTART_NEW_WELL = -1
      endif
    endif
  
    `Check for the Mouse DOT Sprite, if it does not exist then windows must
    `have cleared the DX Memory Buffer
    if sprite exist(c_ENGINE_SPRITE_MouseDOT) = 0
      INITIALISE_GRAPHICS_SYSTEM()
    endif
    
    `Mouse DOT Sprite
    sprite c_ENGINE_SPRITE_MouseDOT, mousex(), mousey(), c_ENGINE_Mouse_DOT_Imgnum
    
    g_Already_Transmitted_To_Server_This_Program_Loop = -1

    `If the program was not run for 7 days then an option was presented at startup to create a new well
    `if the user selected Y then the order was given for the server to also backup and create a new well.
    if g_INITFunc_ProgLastRun_ForceServerNewDatabase = 1
      if g_server_connected = 1
        if timer() > g_INITFunc_ProgLastRun_ForceServerTimer
          g_INITFunc_ProgLastRun_ForceServerTimer = timer() + 1000
          dec g_INITFunc_ProgLastRun_ForceServerCounter, 1
          if g_INITFunc_ProgLastRun_ForceServerCounter < 1
              `Send request code to server
              net send 0
              net put long 557
              net put long 16728
              net send all
              inc g_ENG_DataTransfer_Total, 2048
            inc g_INITFunc_ProgLastRun_ForceServerTtlReqMade, 1
            g_INITFunc_ProgLastRun_ForceServerCounter = c_INITFunc_ProgLastRun_ForceServerInitTme
          endif
        endif
      endif 
    endif
    

    
    `HANDLE_Server_Connection used to be called here - moved to end of function else F8 key needs
    `                         to paste image on the RT screen. Calling here syncs screen while still blank
    `Do not attempt to connect to the server until a username and password has
    `been entered if the LOGIN BOX is being displayed
    `HANDLE_Server_Connection()
    
    `Allow Simulation of Serial Port data for testing
    if g_ENGINE_FAKE_WITS_DATA = 1
      if timer() > g_ENGINE_FAKE_WITS_DATA_Timer
        g_ENGINE_FAKE_WITS_DATA_Timer = timer() + 1000
        `SIMULATE_Serial_Port_RND()
        SIMULATE_Serial_Port_SlowINC()
      endif  
    endif
    
    `If running in Mudlogging Mode then check the serial port.
    if g_ENGINE_CoreFunctionType = 2
      Kernel32_SERIAL_PORT_ENGINE()
    endif
   

    COMMUNICATIONS_Listen_to_SERVER()
    COMMUNICATIONS_Transmit_to_SERVER()

    
    `Only calc ROP, LOG DATA and SYNC if in CF2
    if g_ENGINE_CoreFunctionType = 2
      `---------ROP CALCULATIONS---------
      ROP_CALCULATIONS()
      `----------------------------------
      
      `---------DATA LOGGING ENGINE------
      if g_ENG_Logging_Active = 1
        DATABASE_MEM_ENGINE()
      endif
      `----------------------------------
      
      
      `---------SIMPLE SERVER SYNC DATABASE------------
      
      SIMPLE_SERVER_SYNC_ENGINE()
      
      `------------------------------------------------
      
      
//       `---------SYNC DATABASE------------ OLD SYNC CODE FOR THE FULL / COMPLEX OLD SYNC SYSTEM FOR THE GDS RDS SERVER PROGRAM, NOT CURRENTLY USED
`                                            ****** DO NOT DELETE ******
//       if g_SYNC_ReSyncALL_CL_SER_Toggle = 1
//         ` If g_SYNC_ReSyncALL_CL_SER_Toggle = 1 then Re-SYNC with the Server and do a FULL RESET
//         ` of the Clients MEM_MAIN_DATABASE(xxxx).Record_Syncd fields.
//         ` ELSE run the Sync Engine as per normal i.e. g_SYNC_ReSyncALL_CL_SER_Toggle = -1
//         ` so setting g_SYNC_ReSyncALL_CL_SER_Toggle = 1 disables the SYNC ENGINE here
//         lib_RESYNC_ClientServer_RecSyncFields()
//       else
//       	if g_SPYMODE_ACTIVE = -1 and g_server_relationship_code = 1001
//         	if g_server_connected = 1
//           	if g_SYNC_Engine_Active = 1
//           	
//             	if g_SYNC_Force = 1
//               	if hitimer() > g_SYNC_Force_Timer : `Note: Timer delay here prob just to give code some runtime rather than hang the program
//                 	g_SYNC_Force = -1
//             	  	`- Transmit ALL Fields to the Server (Whole DB Record, not just front screen data; inc pits etc)
//             	  	`  Done this way only 15 records can fit in each packet.
//                 	if g_ClientSerTransmitDB_Full1OrReduced2 = 1
//                 	  SYNC_ENGINE__FULL_15()
//                 	endif
//                 	`- Transmit just the fields displayed on the front screen (how it was originally programmed)
//                   `  Done this way 44 records can fit in each packet.
//                 	if g_ClientSerTransmitDB_Full1OrReduced2 = 2
//                 	  SYNC_ENGINE__REDUCED_44()
//                 	endif
//               	endif
//             	endif
//             	
//             	`Force a Re-Sync check 1 time at a new connection
//             	if g_SYNC_NewF8Conn_ForceCode702 = 1
//             	  if timer() > g_SYNC_NewF8Conn_ForceCode702_Timer
//             	    `Start the Re-Sync on a new connection.
//       						`lib_ARS_Start_New_Report("Re-SYNC Client/Server SYNC DB", 1)
//       						`lib_Activate_CMNDCON_CmndInfo("Re-SYNC Client/Server SYNC DB> Run")
//       						`g_Last_Msg_From_Server$ = "No reply from the Server"
//       						net send 0
//       						net put long 702
//       						net put long 81542
//       						net send all
//       						`lib_ARS_RequestSentMsg("Re-SYNC Client/Server SYNC DB")
//       						inc g_ENG_DataTransfer_Total, 2048
//       						`Re-sync has been triggered. Turn off.
//             	    g_SYNC_NewF8Conn_ForceCode702 = -1
//             	  endif
//             	endif
//             	   	
//             	
//             	`Run the SYNC ENGINE ever Time Period (g_SYNC_ARR_ENGINE_Timer)
//             	if g_TIMER_1 > g_SYNC_ARR_ENGINE_Timer
//             	  `- Transmit ALL Fields to the Server (Whole DB Record, not just front screen data; inc pits etc)
//             	  `  Done this way only 15 records can fit in each packet.
//                 if g_ClientSerTransmitDB_Full1OrReduced2 = 1
//                 	SYNC_ENGINE__FULL_15()
//                 endif
//                 `- Transmit just the fields displayed on the front screen (how it was originally programmed)
//                 `  Done this way 44 records can fit in each packet.
//                 if g_ClientSerTransmitDB_Full1OrReduced2 = 2
//                 	SYNC_ENGINE__REDUCED_44()
//                 endif
//             	endif
//             	
//           	endif
//         	endif
//       	endif
//       	`Save the SYNC DB every 900 records transfered, ie every 1 hour
//       	if g_ENGINE_Save_SYNC_DB_RecordCounter > g_ENGINE_Save_SYNCDB_Rate
//         	g_ENGINE_Save_SYNC_DB_RecordCounter = 0
//         	lib_SAVE_SYNCData_File()
//       	endif
//       endif
//       `----------------------------------
    endif


    
    `Disable the universal keyboard if the LOGIN BOX is active
    `if g_ENGINELOGIN_Show_Login = -1
      INPUT_UNIVERSAL_Keyboard()
    `endif
    
    if g_COMMANDCONSOLE_Active = 0 and g_MAIN_SCREEN_TYPE <> 1000 : `1000=Spymode Realtime Graphics Display
      INPUT_FRONTSCREEN_Keyboard()
    endif
    
    `PUSH TABLE REQUEST ENGINE
    if g_DISP_RT_DB_PUSHTABLE_State = 1
      `If the state is 1 then request the PUSH relationship from the server every time interval
      if g_server_connected = 1
        if timer() > g_DISP_RT_DB_PUSHTABLE_Timer + g_DISP_RT_PUSHTABLE_Interval
          g_DISP_RT_DB_PUSHTABLE_Timer = timer() + g_DISP_RT_PUSHTABLE_Interval
          lib_DRT_Request_PUSH_TABLE_Relationship()
        endif
      endif
    endif
    `Realtime Display - (PUSH Table based) Database Engine - If entry in the server push table is confirmed
    `    by the server (by receiving Push data from it) then start data logging
    if g_DISP_RT_DB_PUSHTABLE_State = 2
      DISP_RT_CF1_DATABASE_ENGINE()
    endif

    `Handle the program minimisation/maximisation - stop running non-required functions when minimised
    `Only SYNC the screen if g_SYSTRAY_Prog_Minimised = -1
    
      `MAXIMISED
      if g_SYSTRAY_Prog_Minimised = -1
        HANDLE_Screens()
        HANDLE_Server_Connection()

        `Refresh Screen 
        if g_ENG_EXTVAL_FPSFrameLimiter_Toggle = -1
          fastsync
          lib_ProperSleep(1)
        else
          if timer() > g_ENGINE_ScreenRefreshLimit_Timer
            g_ENGINE_ScreenRefreshLimit_Timer = timer() + g_ENG_EXTVAL_FPSFrameLimiter_Value
            fastsync
          endif
          lib_ProperSleep(1)
        endif  
        `
        If lib_Get_ICONIC_STATUS() <> 0
          if g_ENGINE_CoreFunctionType = 2
            hide window
          endif
          g_SYSTRAY_Prog_Minimised = 1
        EndIf
      endif
      
      `MINIMISED
      if g_SYSTRAY_Prog_Minimised = 1
        lib_ProperSleep(1)
        HANDLE_Server_Connection()
        lib_SYSTEMTRAY_CheckFor_Messages()
        If lib_Get_ICONIC_STATUS() = 0
          show window
          g_SYSTRAY_Prog_Minimised = -1
            `Make sure that Data View on each screen is turned off when the prog maximises.
            lib_TurnOFF_AllInfoBox_Forms()
        EndIf
      endif
      
      
    `Do not attempt to connect to the server until a username and password has
    `been entered if the LOGIN BOX is being displayed
    `HANDLE_Server_Connection()
      
    
    `If this is the first time the program has been run then set the flag to indicate the program has run
    if g_ENGINE_First_Runtime = 1
      g_ENGINE_First_Runtime = -1
      CREATE_Engine_Setup()
    endif
    
    `Handle the Advanced Reporting System; for displaying report messages.
    if g_ENG_ARS_Toggle_ON = 1
      if sprite visible(c_ENG_SPRITE_AdvConlRep_Bkgd) = 0
        show sprite c_ENG_SPRITE_AdvConlRep_Bkgd
      endif
      
      sprite c_ENG_SPRITE_AdvConlRep_Bkgd, g_ENG_ARS_BkgdPosX, g_ENG_ARS_BkgdPosY, c_ENG_AdvConlRep_Bkgd
      
      `if timer() > g_TEMP_Timer
      `  g_TEMP_Timer = timer() + 1000
      `  tempdat$ = str$(rnd(1000))
      `  ARS_LOCAL_Add_Report(tempdat$)
      `endif
      
      `Close the ARS Box after Completion Message Recieved and timeout
      if g_ENG_ARS_Completion_State = 1    
        if timer() > g_ENG_ARS_Timer
          if g_ENG_ARS_CntDn_Secs > 0
            g_ENG_ARS_Timer = timer() + 1000
            dec g_ENG_ARS_CntDn_Secs, 1
            lib_ARS_Create_Image()
          else
            lib_ARS_CloseBox()
          endif
        endif
      endif
      `Close Box by mouse clicking it
      if mousex() > g_ENG_ARS_BkgdPosX and mousey() < g_ENG_ARS_BkgdPosX + c_ENG_ARS_Bkgd_Width
        if mousey() > g_ENG_ARS_BkgdPosY and mousey() < g_ENG_ARS_BkgdPosY + c_ENG_ARS_Bkgd_Height
          if mouseclick() = 1 and mouse_click(1) = -1
            lib_ARS_CloseBox()
          endif
        endif
      endif
    
    endif
    
    Release_LOCKOUT_Variables()

  loop



endfunction

function HANDLE_Server_Connection()

  local l_net_connected_test as integer

    l_net_connected_test = net connected()
    
    `If the server has lost connection then restart the countdown timer
    if l_net_connected_test = 0 and g_server_connected = 1
      g_server_connected = 0
      g_SIMPLE_SERVER_SYNC_ARR_Transmit_Toggle = -1
        `If there was a prior Push Table relationship then set to request again, else set to Null.
        	if g_DISP_RT_DB_PUSHTABLE_State = 2
          	g_DISP_RT_DB_PUSHTABLE_State = 1
        	else  
          	g_DISP_RT_DB_PUSHTABLE_State = -1
        	endif
        `If it was connected to the Simple Server then reset the SYNC array/relationship
    			for set_lp_A = 1 to 900
      			SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A).MEM_DB_ArrPos = -1
      			SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A).Record_Syncd = -1
    			next set_lp_A
         `
      g_server_authorised_wits_transmission = -1
      g_connection_attempt_timer = g_TIMER_1
      g_connection_attempt_counter = g_connection_attempt_interval
      g_connection_attempt_ATTEMPT_NOW = -1
    endif
    
    if l_net_connected_test = 0
    
      if g_TIMER_1 > g_connection_attempt_timer
        g_connection_attempt_timer = g_TIMER_1
        `If the command console is inactive then countdown, else pause the countdown
        if g_AUTO_CONNECT_ON = 1
          if g_COMMANDCONSOLE_Active = 0
            dec g_connection_attempt_counter, 1
          endif
        endif
      endif
      
      `ATTEMPT TO CONNECT!
      if g_connection_attempt_ATTEMPT_NOW = 1
        SERVER_Connect()
      endif
      
      `Set to attempt a connection at next code pass so that print variables can tell user it is going to happen
      if g_connection_attempt_counter = 0
        g_connection_attempt_ATTEMPT_NOW = 1
      endif
      
      `SPACEBAR REMOVED SO THAT IT CAN BE USED ELSEWHERE (LOGIN PROMPT)
      `[SPACEBAR] - Manual Connection Attempt - if command console is inactive
      `if g_COMMANDCONSOLE_Active = 0
      `  if keystate(57)= 1 and key_state(57,0)= 0
      `    g_connection_attempt_ATTEMPT_NOW = 1
      `    g_connection_attempt_counter = 0
      `    key_state(57,0)=1
      `  endif
      `endif
      `if keystate(57)=0 and key_state(57,0)=1 then key_state(57,0)=0
      
      
      
    endif

endfunction








function ROP_CALCULATIONS()

  local l_time_interval_minutes# as float
  local l_depth_interval_cut# as float
  
  
  `Set ROP Depth Interval if it is still set to its NULL state: Units - 1=ft, 2=m
  if g_ROPCALC_ROPCalcDepthInterval# = -999.9
    if g_ENGINE_UNITS_FT_or_M = 1
      g_ROPCALC_ROPCalcDepthInterval# = 1.0
    else
      g_ROPCALC_ROPCalcDepthInterval# = 0.3
    endif
  endif
  
  `The ROP calculation is based on both depth and time. It updates the g_ROPCALC_ROP_Value# value
  `either every 1ft drilled, or if more than c_ROPCALC_TimeInterval milliseconds performs a time
  `based calculation.
  
  `The calculation is performed if the hole depth = the bit depth, else the value is not updated and the
  `old value stays on the screen. A timer then starts and after 10 minutes the values is changed to zero.
  
  `If hole depth = bit depth - if we are drilling
  if g_COMMPORT_Receive_HoleDepth# > 0.0
    if g_COMMPORT_Receive_BitDepth# > (g_COMMPORT_Receive_HoleDepth# - 0.5) : `Then we are on bottom
   
      `If the bit has only just touched the bottom then start all the depth and time timers
      if g_ROPCALC_OnBottom_Toggle = -1
        g_ROPCALC_OnBottom_Toggle = 1
        g_ROPCALC_Timer_at_last_calculation = g_TIMER_1
        g_ROPCALC_HoleDepth_at_last_calculation# = g_COMMPORT_Receive_HoleDepth#
      endif
      
      `TIME BASED ROP CALC
      `If the system timer g_TIMER_1 is > g_ROPCALC_Timer_at_last_calculation then the time limit for a
      `new ROP calculation as elapsed and it is time to calculate the ROP over interval c_ROPCALC_TimeInterval
      if g_TIMER_1 > g_ROPCALC_Timer_at_last_calculation + c_ROPCALC_TimeInterval
        l_time_interval_minutes# = (c_ROPCALC_TimeInterval + 1.0) / 60 : `+1.0 Converts to float & corrects for timer > as well!
        l_depth_interval_cut# = g_COMMPORT_Receive_HoleDepth# - g_ROPCALC_HoleDepth_at_last_calculation#
        g_ROPCALC_ROP_Value# = (60.0 / l_time_interval_minutes#) * l_depth_interval_cut#
        `Reset the time and depth counters
        g_ROPCALC_Timer_at_last_calculation = g_TIMER_1
        g_ROPCALC_HoleDepth_at_last_calculation# = g_COMMPORT_Receive_HoleDepth#
      endif
      
      `DEPTH BASED ROP CALC (Based on +1 depth units)     
      if g_COMMPORT_Receive_HoleDepth# > (g_ROPCALC_HoleDepth_at_last_calculation# + g_ROPCALC_ROPCalcDepthInterval#)
        l_time_interval_minutes# = (g_TIMER_1 - g_ROPCALC_Timer_at_last_calculation + 1.0 - 1.0) / 60
        l_depth_interval_cut# = g_COMMPORT_Receive_HoleDepth# - g_ROPCALC_HoleDepth_at_last_calculation#
        g_ROPCALC_ROP_Value# = (60.0 / l_time_interval_minutes#) * l_depth_interval_cut#
        `Reset the time and depth counters
        g_ROPCALC_Timer_at_last_calculation = g_TIMER_1
        g_ROPCALC_HoleDepth_at_last_calculation# = g_COMMPORT_Receive_HoleDepth#
      endif
      
    else
      `Off bottom code
      if g_ROPCALC_OnBottom_Toggle = 1
        g_ROPCALC_OnBottom_Toggle = -1
        g_ROPCALC_LastOnBottom_Timer = g_TIMER_1
      else
        `After c_ROPCALC_OffBottomDisplayTime milliseconds off bottom set the ROP to zero
        if g_TIMER_1 > g_ROPCALC_LastOnBottom_Timer + c_ROPCALC_OffBottomDisplayTime
          g_ROPCALC_ROP_Value# = 0.0
          g_ROPCALC_LastOnBottom_Timer = g_TIMER_1
        endif
      endif
    endif
       
  endif
  
endfunction

function INPUT_UNIVERSAL_Keyboard()

  `[`] - [Key below ESC/Double Tap] - Toggle Full Screen Mode
  if keystate(41)= 1 and key_state(41,0)= 0
    lib_FULLSCREEN_DoubleTap_Toggle()
    key_state(41,0)=1
  endif
  if keystate(41)=0 and key_state(41,0)=1 then key_state(41,0)=0
  
  
  `[F8] - Connect to server if option available
  if keystate(66)= 1 and key_state(66,0)= 0
    if g_server_connected = 0
      g_connection_attempt_ATTEMPT_NOW = 1
      g_connection_attempt_counter = 0
    endif
    key_state(66,0)=1
  endif
  if keystate(66)=0 and key_state(66,0)=1 then key_state(66,0)=0
  
  
  `[F9] - Toggle the Realtime Graphics Display/Realtime Graphics Variables Screen
  `       NOTE: This is context sensitive depending on whether the user has already started the
  `             Realtime Graphics Display
  if KEYSTATE(67)= 1 and key_state(67,0)= 0
    lib_Activate_RTGraphicsDisplay()
    key_state(67,0)=1
  endif
  if KEYSTATE(67)=0 and key_state(67,0)=1 then key_state(67,0)=0
  

  
  `C+D+T DS/HS/Pits Chart Draw Time Full Breakdown Details
  `[C]
  if keystate(46)= 1 and key_state(46,0)= 0
    key_state(46,0)=1
  endif
  if keystate(46)=0 and key_state(46,0)=1 then key_state(46,0)=0
  `[D]
  if KEYSTATE(32)= 1 and key_state(32,0)= 0
    key_state(32,0)=1
  endif
  if keystate(32)=0 and key_state(32,0)=1 then key_state(32,0)=0
  `[T]
  if keystate(20)= 1 and key_state(20,0)= 0
    key_state(20,0)=1
  endif
  if keystate(20)=0 and key_state(20,0)=1 then key_state(20,0)=0
  if key_state(46,0)=1 and key_state(32,0)=1 and key_state(20,0)=1
    key_state(46,0)= -999
    if g_DEBUG_ChartDrawTimerBreakdown_Toggle = -1
      g_DEBUG_ChartDrawTimerBreakdown_Toggle = 1
    else
      g_DEBUG_ChartDrawTimerBreakdown_Toggle = -1
    endif    
  endif
  if keystate(46)=0 and key_state(46,0)=-999 then key_state(46,0)=0
  
  `F+P+S Toggle the screen FPS in DS and HS modes
  `[F]
  if keystate(33)= 1 and key_state(33,0)= 0
    key_state(33,0)=1
  endif
  if keystate(33)=0 and key_state(33,0)=1 then key_state(33,0)=0
  `[P]
  if KEYSTATE(25)= 1 and key_state(25,0)= 0
    key_state(25,0)=1
  endif
  if keystate(25)=0 and key_state(25,0)=1 then key_state(25,0)=0
  `[S]
  if keystate(31)= 1 and key_state(31,0)= 0
    key_state(31,0)=1
  endif
  if keystate(31)=0 and key_state(31,0)=1 then key_state(31,0)=0
  if key_state(33,0)=1 and key_state(25,0)=1 and key_state(31,0)=1
    key_state(33,0)= -999
    if g_ENGINE_Display_FPS = -1
      g_ENGINE_Display_FPS = 1
    else
      g_ENGINE_Display_FPS = -1
    endif
  endif
  if keystate(33)=0 and key_state(33,0)=-999 then key_state(33,0)=0
  
  `F+W+D Toggle - Fake WITS Data - MLS Mode ONLY...
  if g_ENGINE_CoreFunctionType = 2
    `[F]
    if keystate(33)= 1 and key_state(33,0)= 0
      key_state(33,0)=1
    endif
    if keystate(33)=0 and key_state(33,0)=1 then key_state(33,0)=0
    `[W]
    if KEYSTATE(17)= 1 and key_state(17,0)= 0
      key_state(17,0)=1
    endif
    if keystate(17)=0 and key_state(17,0)=1 then key_state(17,0)=0
    `[D]
    if keystate(32)= 1 and key_state(32,0)= 0
      key_state(32,0)=1
    endif
    if keystate(32)=0 and key_state(32,0)=1 then key_state(32,0)=0
    if key_state(33,0)=1 and key_state(17,0)=1 and key_state(32,0)=1
      key_state(33,0)= -999
      if g_ENGINE_FAKE_WITS_DATA = -1
        g_ENGINE_FAKE_WITS_DATA = 1
        g_ENGINE_FAKE_WITS_DATA_Timer = timer()
      else
        g_ENGINE_FAKE_WITS_DATA = -1
      endif
    endif
    if keystate(33)=0 and key_state(33,0)=-999 then key_state(33,0)=0  
  endif
  
endfunction


function INPUT_FRONTSCREEN_Keyboard()


  `[BACKSPACE] - ReInitialise D3D DLL Functionality
  if keystate(14)= 1 and key_state(14,0)= 0
    INITIALISE_GRAPHICS_SYSTEM()
    key_state(14,0)=1
  endif
  if keystate(14)=0 and key_state(14,0)=1 then key_state(14,0)=0

  `[ESC] - EXITS THE CLIENT PROGRAM
  if g_EXIT_Client_Toggle = -1 and g_MEM_DB_EditBDMode_EDIT_LOCK = -1
    if keystate(1)= 1 and key_state(1,0)= 0
      key_state(1,0)=1
      
      if g_COMMANDCONSOLE_Active = 0
        if g_MAIN_SCREEN_TYPE = 1
          `ESC Pressed on Frontscreen. Switch back to the RT Disp
          `g_EXIT_Client_Toggle = 1
          lib_Activate_RTGraphicsDisplay()
        else
          if g_WITS_OVERRIDE_Proc_Enter_Pressed = 1
            g_WITS_OVERRIDE_Proc_Enter_Pressed = -1
          else  
          g_MAIN_SCREEN_TYPE = 1
          endif
        endif
      endif
      
      if g_COMMANDCONSOLE_Active = 1
        `Turn the command console off
        g_COMMANDCONSOLE_Active = 0
        `Reset all command console variables
        lib_CMND_CNSL_Deactivate()
      endif
    
    endif
    if keystate(1)=0 and key_state(1,0)=1 then key_state(1,0)=0
  endif
  
  `[`] - [Key below ESC] - Toggle Full Screen Mode
  if keystate(41)= 1 and key_state(41,0)= 0
    lib_FULLSCREEN_DoubleTap_Toggle()
    key_state(41,0)=1
  endif
  if keystate(41)=0 and key_state(41,0)=1 then key_state(41,0)=0
  
  `Activate Command Console
    `[F12] - Toggle Command Console
    if keystate(88)= 1 and key_state(88,0)= 0
      if g_COMMANDCONSOLE_Active = 1
        `Turn the command console off
        g_COMMANDCONSOLE_Active = 0
        `Reset all command console variables
        lib_CMND_CNSL_Deactivate()
      else
        g_COMMANDCONSOLE_Toggle = 1
        g_CMND_CONSL_ServerSettings_Received = -1
        g_CMNDCONSL_ServerRange_Stage = 1
        g_CMNDCONSL_ServerRange_UpperLower_Type = 1
      endif
      key_state(88,0)=1
    endif
    if keystate(88)=0 and key_state(88,0)=1
      key_state(88,0)=0
      g_COMMANDCONSOLE_Toggle = 0
    endif
    
    if g_COMMANDCONSOLE_Toggle = 1
      if g_COMMANDCONSOLE_Active <> 1
        g_COMMANDCONSOLE_Active = 1
        MENUS_Update_SERVER_AUClient_CrntSettings()
        clear entry buffer
      endif
    endif
    
    `[F1] - Screen Type 1 - Front Screen - Connection State etc
    if keystate(59)= 1 and key_state(59,0)= 0
      g_MAIN_SCREEN_TYPE = 1
      key_state(59,0)=1
    endif
    if keystate(59)=0 and key_state(59,0)=1 then key_state(59,0)=0
    
    `[F2] - Screen Type 2 - DATABASE SCREEN Memory / HD
    if keystate(60)= 1 and key_state(60,0)= 0
      if g_ENGINE_CoreFunctionType = 2
        g_MAIN_SCREEN_TYPE = 2
        g_BDMEM_Screen_MouseZ = mousez()
        g_BDHD_Screen_MouseZ = mousez()
      endif
      key_state(60,0)=1
    endif
    if keystate(60)=0 and key_state(60,0)=1 then key_state(60,0)=0
    
    `[F3] - Screen Type 3 - SERIAL PORT DETAILS
    if keystate(61)= 1 and key_state(61,0)= 0
      g_MAIN_SCREEN_TYPE = 3
      key_state(61,0)=1
    endif
    if keystate(61)=0 and key_state(61,0)=1 then key_state(61,0)=0
    
    `[F4] - Screen Type 4 - ROP CALCULATIONS
    if keystate(62)= 1 and key_state(62,0)= 0
      g_MAIN_SCREEN_TYPE = 4
      key_state(62,0)=1
    endif
    if keystate(62)=0 and key_state(62,0)=1 then key_state(62,0)=0
    
    `[F8] - Connect to server if option available
    if keystate(66)= 1 and key_state(66,0)= 0
      if g_server_connected = 0
        g_connection_attempt_ATTEMPT_NOW = 1
        g_connection_attempt_counter = 0
      endif
      key_state(66,0)=1
    endif
    if keystate(66)=0 and key_state(66,0)=1 then key_state(66,0)=0
    
  	`[F10] - Screen Type 10 - USER ID Screen
  	if keystate(68)= 1 and key_state(68,0)= 0
    	if g_ENGINE_CoreFunctionType = 2
      	lib_Login_CF2_Reset_Server_ReturnLT_Arrs()
      	lib_Login_CF2_RequestServerLoginTable()
      	g_MAIN_SCREEN_TYPE = 10
      	key_state(68,0)=1
    	endif
  	endif
  	if keystate(68)=0 and key_state(68,0)=1 then key_state(68,0)=0
    
    `[F11] - Screen Type 11 - INSTANT MESSAGING SCREEN
    if keystate(87)= 1 and key_state(87,0)= 0
      g_MAIN_SCREEN_TYPE = 11
      INST_MSG_LocalInput$ = ""
      key_state(87,0)=1
    endif
    if keystate(87)=0 and key_state(87,0)=1 then key_state(87,0)=0

endfunction


function lib_DEBUG_ServerConnectionsVars()


  local l_X as integer : l_X = screen width() - 340
  local l_Y as integer : l_Y = 180
  
  `NOTE: Do NOT call this from with a D3D_TEXT statement as it has its own.

  `This function when run displays the Server Connection Variables on the Front Screen
  `so you can see WTF is going on with some of them.
  
    d3d_starttext

    	`wdth_prnt = screen width() * 0.05 : sp = 0
    	wdth_prnt = l_INPUTBOX_PosX + 67 : sp = l_INPUTBOX_PosY
    	
    	inc l_Y,20 : d3d_text 2, l_X, l_Y, 0, "DEBUG Server Connection Vars"
      inc l_Y,20
      inc l_Y,20 : d3d_text 1, l_X, l_Y, 0, "g_TIMER_1: " + str$(g_TIMER_1)
      inc l_Y,20 : d3d_text 1, l_X, l_Y, 0, "g_connection_attempt_timer: " + str$(g_connection_attempt_timer)
      inc l_Y,20 : d3d_text 1, l_X, l_Y, 0, "g_connection_attempt_interval: " + str$(g_connection_attempt_interval)
      inc l_Y,20 : d3d_text 1, l_X, l_Y, 0, "g_connection_attempt_counter: " + str$(g_connection_attempt_counter)
      inc l_Y,20 : d3d_text 1, l_X, l_Y, 0, "g_server_connected: " + str$(g_server_connected)
      inc l_Y,20 : d3d_text 1, l_X, l_Y, 0, "g_Relationship_Request_Timer: " + str$(g_Relationship_Request_Timer)
      inc l_Y,20 : d3d_text 1, l_X, l_Y, 0, "g_server_relationship_data_received: " + str$(g_server_relationship_data_received)
      inc l_Y,20 : d3d_text 1, l_X, l_Y, 0, "g_connection_attempt_total_time: " + str$(g_connection_attempt_total_time)
      inc l_Y,20 : d3d_text 1, l_X, l_Y, 0, "g_Establish_Relationship_Timer: " + str$(g_Establish_Relationship_Timer)
      inc l_Y,20 : d3d_text 1, l_X, l_Y, 0, "g_connection_attempt_ATTEMPT_NOW: " + str$(g_connection_attempt_ATTEMPT_NOW)
      inc l_Y,20 : d3d_text 1, l_X, l_Y, 0, "g_SYNC_Engine_Active: " + str$(g_SYNC_Engine_Active)

    
    d3d_endtext  



endfunction

function __________RC4_ENCRYPTION_______________________________________dj73dh()
endfunction

function RC4_Password_Table_GENERATE()

  local l_PWD_Part1$ as string
  local l_PWD_Part2$ as string
  local l_PWD_Part3$ as string
  local l_PWD_Part4$ as string
  local l_PWD_Part5$ as string

  `This function pads the password arrays with pre-defined variables that will be used
  `to build the password string at runtime. NOTE: Test method. Update to fully random.
  
  `Generation Table not uploaded to GIT.

    
  g_RC4_Password_Built_From_Table$ = ""
  
  
    dim PWD_SEQ_DivisonPositions(10) as integer
    dim PWD_SEQ_ExtractedValues$(10) as string
    dim PWD_SEQ_ExtractedVal_AsVal(10) as integer
  
  
    `Need code here to take the sequence and pase it to work out the correct password

    l_Counter = 0
    for Gen_PWD_lp = 1 to len(g_RC4_FinalBuiltPassword_Seq$)
      if mid$(g_RC4_FinalBuiltPassword_Seq$, Gen_PWD_lp) = "_"
        inc l_Counter, 1
        PWD_SEQ_DivisonPositions(l_Counter) = Gen_PWD_lp
      endif
    next Gen_PWD_lp
    
    l_Counter = 0
    l_Temp$ = "" 
    for ExtractVals_lp = 1 to 10
      inc l_Counter, 1
      l_Temp$ = left$(g_RC4_FinalBuiltPassword_Seq$, (PWD_SEQ_DivisonPositions(ExtractVals_lp) - 1))
      l_SeqValDiff = PWD_SEQ_DivisonPositions(l_Counter) - PWD_SEQ_DivisonPositions(l_Counter - 1)
      PWD_SEQ_ExtractedValues$(l_Counter) = right$(l_Temp$, l_SeqValDiff)
    next ExtractVals_lp
      `The value strings > arry pos 1 have a "_" at the start - correct this
        for correct_lp = 2 to 10
          length = len(PWD_SEQ_ExtractedValues$(correct_lp)) - 1
          PWD_SEQ_ExtractedValues$(correct_lp) = right$(PWD_SEQ_ExtractedValues$(correct_lp), length)
        next correct_lp

    for GetAsVal_lp = 1 to 10
      PWD_SEQ_ExtractedVal_AsVal(GetAsVal_lp) = val(PWD_SEQ_ExtractedValues$(GetAsVal_lp))
    next

    `NOTE: The correct RC4 Password Table Positions are now in PWD_SEQ_ExtractedValues$(1 - 10)
    
    `Get the Password from the Tables
      l_PWD_Part1$ = RC4_PasswordTable$(PWD_SEQ_ExtractedVal_AsVal(1), PWD_SEQ_ExtractedVal_AsVal(2))
      l_PWD_Part2$ = RC4_PasswordTable$(PWD_SEQ_ExtractedVal_AsVal(3), PWD_SEQ_ExtractedVal_AsVal(4))
      l_PWD_Part3$ = RC4_PasswordTable$(PWD_SEQ_ExtractedVal_AsVal(5), PWD_SEQ_ExtractedVal_AsVal(6))
      l_PWD_Part4$ = RC4_PasswordTable$(PWD_SEQ_ExtractedVal_AsVal(7), PWD_SEQ_ExtractedVal_AsVal(8))
      l_PWD_Part5$ = RC4_PasswordTable$(PWD_SEQ_ExtractedVal_AsVal(9), PWD_SEQ_ExtractedVal_AsVal(10))
    
      g_RC4_Password_Built_From_Table$ = l_PWD_Part1$ + l_PWD_Part2$ + l_PWD_Part3$ + l_PWD_Part4$ + l_PWD_Part5$
  
  
    undim PWD_SEQ_DivisonPositions(10)
    undim PWD_SEQ_ExtractedValues$(10)
    undim PWD_SEQ_ExtractedVal_AsVal(10)



endfunction

 
function RC4_StrEnDeCrypt(r_EnDeCrypt_This$ as string, r_UseThisPassword$ as string)

  local p_OUTPUT$ as string
  local l_Cipher$ as string
 
  ` This routine does it. Call it, both, to Encrypt
  ` and to Decrypt your data.

    l_Cipher$ = ""
    l_i = 0
    l_j = 0
 
    RC4_Init(r_UseThisPassword$)
 
    For a1_lp = 1 To Len(r_EnDeCrypt_This$)
      l_i = (l_i + 1) Mod 0x100
         l_j = (l_j + sbox(l_i)) Mod 0x100
            l_temp = sbox(l_i)
         sbox(l_i) = sbox(l_j)
      sbox(l_j) = l_temp
 
      l_zoobian = sbox((sbox(l_i) + sbox(l_j)) Mod 0x100)
 
      l_cipherby = Asc(Mid$(r_EnDeCrypt_This$, a1_lp)) ~~ l_zoobian
      l_Cipher$ = l_Cipher$ + Chr$(l_cipherby)
    Next a1_lp
 
    p_OUTPUT$ = l_Cipher$
    `g_RC4_OUTPUT_Final_EnDeCrypt$ = l_Cipher$
    

endfunction p_OUTPUT$
 
 
Function RC4_Init(r_Init_Password$ as string)
 
  local a1 As Dword
  local a2 as dword 
 
  `Initializes the sbox and the key array
 
   IntLength = Len(r_Init_Password$)
   For a1 = 0 To 255
     l_c = (a1 mod IntLength)+1
     key(a1) = Asc(Mid$(r_Init_Password$, l_c))
     sbox(a1) = a1
   Next a1
 
   l_b = 0
   For a2 = 0 To 255
     l_b = (l_b + sbox(a2) + key(a2)) Mod 0x100
     tempSwap = sbox(a2)
     sbox(a2) = sbox(l_b)
     sbox(l_b) = tempSwap
   Next
   
endfunction

function __________SERVER_CLIENT_COMMS___________________________tx1ddmf83ksbf1()
endfunction


function COMMUNICATIONS_Listen_to_SERVER()


  local l_message_type_code as integer
  local l_PWD_Seq_In_RC4_Using_CNSTPWD$ as string

  while net get message()

    g_ENG_LastServerMSG_Date$ = get date$()
    g_ENG_LastServerMSG_Time$ = get time$()

    ` 1. Receive the Transmission Code (TC)
      l_message_type_code = net get long()
      
      `Client receives it's CLIENT ID from the SERVER
      if l_message_type_code = 68611001
    		g_ENG_CLIENT_ID = net get long()
    		inc g_ENG_DataTransfer_Total, 2048
      endif

      `Server Requests CLIENT sends it's NAME
      if l_message_type_code = 68611002
    		net send 0
    		net put long 68611003
    		net put long g_ENG_CLIENT_ID
    		net put string "GDS Logging Unit"
    		net send
    		inc g_ENG_DataTransfer_Total, 2048
      endif
      
      
      `Client Receives the current RC4 Encryption sequence string from the Server
      if l_message_type_code = 68614000
      
        l_PWD_Seq_In_RC4_Using_CNSTPWD$ = net get string()
        
        g_RC4_FinalBuiltPassword_Seq$ = RC4_StrEnDeCrypt(l_PWD_Seq_In_RC4_Using_CNSTPWD$, "MxBzQm=Zg+57K8Wrd%smNj43X*F^?3")

        `Client responds that it has received the current RC4 Encryption Sequence
    			net send 0
    			net put long 68614001
    			net send
    			inc g_ENG_DataTransfer_Total, 2048
    			
    		`Now use the current g_RC4_FinalBuiltPassword_Seq$ to Generate the correct RC4 Password	
    		  RC4_Password_Table_GENERATE()	
    		
      endif
      
      
      `Client Receives the Newly Generated Midnight RC4 Encryption Sequence from the Server
      if l_message_type_code = 68614010
      
        l_PWD_Seq_In_RC4_Using_CNSTPWD$ = net get string()
        
        g_RC4_FinalBuiltPassword_Seq$ = RC4_StrEnDeCrypt(l_PWD_Seq_In_RC4_Using_CNSTPWD$, "jTi#6p9ibSn9Qm9^3Oo^tafL30dR&*")

        `Client responds that it has received the current RC4 Encryption Sequence
    			net send 0
    			net put long 68614001
    			net send
    			inc g_ENG_DataTransfer_Total, 2048
    			
    		`Now use the current g_RC4_FinalBuiltPassword_Seq$ to Generate the correct RC4 Password	
    		  RC4_Password_Table_GENERATE()	
    		
      endif
      
      
      
      `NOTE: If we have just sent the client name to the server (above) then it means this is a new
      `sync relationship with the server / a fresh connection. We can then sort out the simple
      `server sync table to start sending mem database data to the server. Doing it this way,
      `with each new connection to the server, means less errors.
      if l_message_type_code = 68611002
      
        `Toggle Sync Engine ON
        g_SIMPLE_SERVER_SYNC_ARR_Transmit_Toggle = 1
        
        `Clear/Reset the local SYNC array to NULL
    		for set_lp_A = 1 to 900
      		SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A).MEM_DB_ArrPos = 0
      		SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A).Record_Syncd = -1
    		next set_lp_A
    		
    		`Pad SYNC array with the last 1hr of data (900 records)
    		l_StartSyncArrPos = g_DATABASE_MEM_Total_Num_Records - 900
    		for add_lp = 1 to 900
    		  l_ArrPos = l_StartSyncArrPos + add_lp
    		  if l_ArrPos < 0 then l_ArrPos = 0
    		  SIMPLE_SERVER_SYNC_ARRAY(1, add_lp).MEM_DB_ArrPos = l_ArrPos
    		next add_lp
      
      endif
      
      `Client receives confirmation that the Server has shifted its DB. The client can
      `continue syncing records normally.
      if l_message_type_code = 68611008
        g_SIMPLE_SERVER_SYNC_TransmitTimer = timer() + c_SIMPLE_SERVER_SYNC_CheckInterval
      endif

  endwhile


endfunction


function COMMUNICATIONS_Transmit_to_SERVER()


  `Send REALTIME DATA to the SIMPLE SERVER every 2 SECONDS
  if g_server_connected = 1
    if timer() > g_ENG_Send_RTData_To_SimpleServer_Timer
    
    	g_ENG_Send_RTData_To_SimpleServer_Timer = timer() + 2000
    	
    	net send 0
    	net put long 68611004
    	
    	`net put float g_COMMPORT_Receive_HoleDepth#
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_HoleDepth#), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_BitDepth#), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_CALCULATED_Received_ROP#), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_WOB#), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_Hookload), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_RPM), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_TripTank#), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_BlockPosition#), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_PVT#), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_SPP), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_CSG), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_FlowIN), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_SPM1), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_SPM2), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_SPM3), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_TotalGas#), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_H2S#), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_TempIN#), g_RC4_Password_Built_From_Table$)
    	net put string RC4_StrEnDeCrypt(str$(g_COMMPORT_Receive_TempOUT#), g_RC4_Password_Built_From_Table$)

    	
    	net send
    	inc g_ENG_DataTransfer_Total, 2048
    	
    endif
  endif

//   global g_SIMPLE_SERVER_SYNC_ARR_Transmit_Toggle as integer : g_SIMPLE_SERVER_SYNC_ARR_Transmit_Toggle = -1
//   global g_SIMPLE_SERVER_SYNC_TransmitTimer as integer : g_SIMPLE_SERVER_SYNC_TransmitTimer = timer()
// 
//   type SIMPLE_SERVER_SYNC_ARRAY_Type
//     MEM_DB_ArrPos as integer
//     Record_Syncd as integer
//   endtype
//   dim SIMPLE_SERVER_SYNC_ARRAY(1, 900) as SIMPLE_SERVER_SYNC_ARRAY_Type
//     for set_lp_A = 1 to 900
//       SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A).MEM_DB_ArrPos = -1
//       SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A).Record_Syncd = -1
//     next set_lp_A



endfunction



function UNUSED_COMMUNICATIONS_Listen_to_SERVER()

  `NOTE: UNUSED: This system is the LARGE COMPLICATED server/client relationship for the main
  `      large Server program. It was disused when the SIMPLE SERVER & CLIENTS that only display
  `      the screen were created.

  local l_message_type_code as integer
  local l_SendingClientID as integer
  local l_ReturnSuccess as integer
  local l_CommsTmp1$ as string
  local l_CommsTmp2$ as string
  local l_CommsTmp3$ as string
  local l_ServerStartRecNum as integer
  local l_Auth_Code as integer

  while net get message()

    g_ENG_LastServerMSG_Date$ = get date$()
    g_ENG_LastServerMSG_Time$ = get time$()
  
    ` 1. Receive the Transmission Code (TC)
    l_message_type_code = net get long()
    
    `Advanced Reporting System
      `Recieve a report string
        if l_message_type_code = 80
          l_Auth_Code = net get long()
          if l_Auth_Code = 13442
            l_CommsTmp1$ = net get string()
            ARS_LOCAL_Add_Report(l_CommsTmp1$, 1)
          endif
        endif
      `Complete the ARS process
        if l_message_type_code = 81
          l_Auth_Code = net get long()
          if l_Auth_Code = 16552
            l_CommsTmp1$ = net get string()
            lib_ARS_Initiate_Completion()
            ARS_LOCAL_Add_Report(l_CommsTmp1$, 1)
          endif
        endif
      `Report and Complete the ARS process
        if l_message_type_code = 82
          l_Auth_Code = net get long()
          if l_Auth_Code = 18553
            l_CommsTmp1$ = net get string()
            l_CommsTmp2$ = net get string()
            lib_ARS_Initiate_Completion()
            ARS_LOCAL_Add_Report(l_CommsTmp1$, 1)
            ARS_LOCAL_Add_Report(l_CommsTmp2$, 1)
          endif
        endif
    
    `Handle Message from the SYNC Authorised Client to another Client relayed through the Server
    if l_message_type_code = 213
      l_Auth_Code = net get long()
      if l_Auth_Code = 63791
        g_Last_Msg_From_AUClient$ = net get string()        
      endif
    endif
    
    `ADV SYNC - Server sends client a list of the received record headers that have been updated in its MEM and HD DB's
    `client updates SYNC fields in its database and sets timer so it immediately checks for more records to send
    if l_message_type_code = 553
      `
      `Calc Time taken and add to end of array
      g_SYNC_TtlTime = hitimer() - g_SYNC_Send_Timer
      g_SYNC_Ttl_Server_Records = net get int()
      l_NumRec_lp = net get int()
      `
      for get_lp = 1 to l_NumRec_lp
        l_array_ptr = net get int()
        MEM_MAIN_DATABASE(l_array_ptr).Record_Syncd = 1
        g_SYNC_Last_Sync_RecNum = l_array_ptr
      next get_lp
      `
      g_SYNC_Force = 1
      g_SYNC_Force_Timer = hitimer() + 30 : `Note: Add 30ms here prob just to give code some runtime rather than hang the program
      `
    endif
    
    `Server responds to Client with info regarding the request to backup then create a new database
    `from the startup check for whether the time difference between last startup and now is > 7 days
    if l_message_type_code = 558
      l_Auth_Code = net get long()
      if l_Auth_Code = 16287
        l_ReturnSuccess = net get long()
        if l_ReturnSuccess = 1
          g_INITFunc_ProgLastRun_ForceServerNewDatabase = -1
        endif
      endif
    endif
    
    `Receive DEPTH UNITS (FT or M) from the Server.
    if l_message_type_code = 611
      l_Auth_Code = net get long()
      if l_Auth_Code = 12861
        g_ENGINE_UNITS_FT_or_M = net get long()
        CREATE_Engine_Setup()
      endif
    endif    
    
    `Instant Message Broadcast from the Server
    if l_message_type_code = 612
      `Sort Local Messaging Array
      for sort_lp = 50 to 1 step -1
        INSTANT_MESSAGING$(sort_lp) = INSTANT_MESSAGING$(sort_lp - 1)
      next sort_lp
      INSTANT_MESSAGING$(0) = net get string()
    endif
    
    `Receive Create New Well option response
    if l_message_type_code = 631
      l_Auth_Code = net get long()
      if l_Auth_Code = 15662
        g_CMNDCONSL_ForceSTART_NEW_WELL = 5
        g_CMNDCONSL_ForceSTART_NEW_WELL_State$ = net get string()
      endif
    endif  
    `Receive Create New Well option response
    if l_message_type_code = 632
      l_Auth_Code = net get long()
      if l_Auth_Code = 13662
        g_CMNDCONSL_ForceSTART_NEW_WELL = 6
        g_CMNDCONSL_ForceSTART_NW_ResetTimer = timer() + 15000
        g_CMNDCONSL_ForceSTART_NEW_WELL_State$ = net get string()
      endif
    endif
    
    `SYNC data is being ignored at the server pending a turnaround code. Send Turnaround at start of next program loop
    if l_message_type_code = 700
      l_Auth_Code = net get long()
      if l_Auth_Code = 13928
        if g_ENG_ServerSyncOFF_Restart = -1
          g_ENG_ServerSyncOFF_Restart = 1
        endif
      endif
    endif
    
    `RE-SYNC Full Client/Server DB Record Sync Status
    if l_message_type_code = 703
      l_Auth_Code = net get long()
      l_ServerStartRecNum = net get int()
      if l_Auth_Code = 46843
        `Before running the RE_SYNC Code the MEM SYNC Fields are Re-Set here to
        `ensure that this can only happen once.
          `MEM DB
            `This works backwards. The majority of Client records are presumed to exist at the Server.
            `So the Server instead transmits all record IDs it doesn't have. I.e. it doesn't go through all
            `records transmitting what it does have - it skips those and transmits the array positions of
            `all the records it doesn't have, up to its g_DATABASE_MEM_Total_Num_Records
            `
            `Whole Procedure is as follows:
            ` 1. Start process by Client receiving code 703/46843 (Done here)
            ` 2. Client sets all records Record_Syncd = 1 (below), Server to send its state: Record_Syncd = 0's
            ` 3. Client sets toggle (below) to run the Re-SYNC Function : lib_RESYNC_ClientServer_RecSyncFields()
            ` 4. Client sends Code 704/51654 to the Server to begin transmitting its list of records needing
            `    syncing. This is sent at the start of lib_RESYNC_ClientServer_RecSyncFields()
            ` 5. Server beging throwing over its Record State using Code 705
            
            `SET START VARIABLES HERE
              `CLIENT
                g_SYNC_Code705View_C_DBFieldReset = -1
                g_SYNC_Code705View_C_MEMDBRecStart = g_DATABASE_MEM_Total_Num_Records : `Client MEM BD Total
                g_SYNC_Code705View_C_RecordsUnpacked = 0 : `Number of records received by Client from Server that the Client has labelled as Unsynced.
                g_SYNC_Engine_Active = 1 : `We turn on the SYNC Engine too. F8 Connect turns it on when a client is given permission to sync. This is just a double check to make sure it all runs OK with as little user intervention as possible.
              `SERVER
                g_SYNC_Code705View_S_RecStart = l_ServerStartRecNum : `Server Start MEM DB Total
            
            `RESET DB FIELDS - Set all local DB Record SYNC STATES to YES (1)
            `                  Server sends NULL state for any records it does NOT have Synced (instead of sending all the ones it does, which is presumed to be the larger number)
            for set_lp = 0 to g_DATABASE_MEM_Total_Num_Records
              MEM_MAIN_DATABASE(set_lp).Record_Syncd = 1
              MEM_MAIN_DATABASE(set_lp).Record_Sync_Saved = 0
            next set_lp
            g_SYNC_Code705View_C_DBFieldReset = 1
            
          `HD DB - Best to ingore this for now and just re-write the file when completed.
        `Now set the flag to run the Re-Sync Code on the Client
          g_SYNC_ReSyncALL_CL_SER_Toggle = 1
          g_SYNC_ReSyncALL_CL_SER_State = 1
          
      endif
    endif
    
    `Receive the array position of records that exist at the Server & mark them as sync'd here at the Client
    if l_message_type_code = 705
      l_SYNC_Num_Of_Recs = net get int()
      `Auth Code not used, but would have been: 81641
      for get_lp = 1 to l_SYNC_Num_Of_Recs
        l_SYNC_ArrPos = net get int()
        MEM_MAIN_DATABASE(l_SYNC_ArrPos).Record_Syncd = 0
        inc g_SYNC_Code705View_C_RecordsUnpacked, 1
          `Add to Debug Array
            SYNC_DEBUG_Packet_ArrayList(get_lp) = l_SYNC_ArrPos
      next get_lp
      
      `Debug/Test
      `lib_DEBUG_View_Incoming_Code705(l_SYNC_Num_Of_Recs)
      
      `Packet Received, so prolong the State 2 (g_SYNC_ReSyncALL_CL_SER_State = 2) Stop Function Timer
      g_SYNC_ReSyncALL_CL_SER_State_Timer = timer() + c_SYNC_S2TimerAmnt
      
    endif
    
    
    `Things to do tonight
    `put a screen lib_function from this to see the data coming in from the Server
    `make it so the timer system works from here to disable the sync for say 20 secs every time a 705 arrives
    `figure out the wits override that was doing whatever this morning with total strokes
    
    
    
    `SYNC - Full Client/Server DB Record Sync Status - Receive Code to State job finished
    if l_message_type_code = 706
      l_Auth_Code = net get long()
      if l_Auth_Code = 71643
        g_SYNC_ReSyncALL_CL_SER_Toggle = -1
        g_SYNC_ReSyncALL_CL_SER_State = -1
      endif
    endif
    
    
    `SYNC - Receive SYNC Update Variables from the Server on its current SYNC Update Process Status
    if l_message_type_code = 707
      g_SYNC_Code705View_S_RecUpdated = net get int()
      g_SYNC_Code705View_S_ProcessedXNum = net get int()
      `
      `Packet Received, so prolong the State 2 (g_SYNC_ReSyncALL_CL_SER_State = 2) Stop Function Timer
      g_SYNC_ReSyncALL_CL_SER_State_Timer = timer() + c_SYNC_S2TimerAmnt
    endif
    
    
    `Last GENERAL MESSAGE received from Host/Server
    if l_message_type_code = 801
      g_Last_Msg_From_Server$ = ""
      l_CommsTmp1$ = net get string()
      if g_UK_or_USA_Settings = 1
        g_Last_Msg_From_Server$ = "(" + lib_CONVERT_DATE_US_to_UK_Format(get date$()) + "-" + get time$() + ") " + l_CommsTmp1$
      else
        g_Last_Msg_From_Server$ = "(" + get date$() + "-" + get time$() + ") " + l_CommsTmp1$
      endif
      `Reset the command console info prompt display timer and alpha (incase it is fading)
      g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer
      g_COMMANDCONSOLE_Report_Alpha = 255
    endif
    

    `Server current settings for display with the command console
    if l_message_type_code = 851
      g_CMND_CONSL_ServerSettings_Received = 1
      g_CMNDCONSL_Received_ServerVal_DS_LineThickness = net get long()
      g_CMNDCONSL_Received_ServerVal_HS_LineThickness = net get long()
      g_CMNDCONSL_Received_ServerVal_Display_DS_or_HS = net get long()
      g_CMNDCONSL_Received_ServerVal_Display_MainScreen_Or_CMNDCONSL  = net get long()
    endif
    
    `RESYNC COMMAND
    `Client receives confirmaiton from the server that it has deleted and recreated it's HD database ready for re-sync
    if l_message_type_code = 852
      l_Auth_Code = net get long()
      if l_Auth_Code = 56342
        `Delete the sync database file
        l_SYNC_Filename$ = g_autodir_full_directory_path$ + "\Database\SyncData.dat"
        if file exist(l_SYNC_Filename$) = 0
          open datafile to write 1, l_SYNC_Filename$
          close datafile 1
        else
          if file exist(l_SYNC_Filename$) = 1
            delete file l_SYNC_Filename$
            ARS_LOCAL_Add_Report("LOCAL: Sync Database Deleted", 1)
          endif
        endif
        `Reset the sync data in the MEM Database
        for reset_lp = 0 to g_DATABASE_MaxTotalRecords
          MEM_MAIN_DATABASE(reset_lp).Record_Syncd = 0
          MEM_MAIN_DATABASE(reset_lp).Record_Sync_Saved = 0
        next reset_lp
        g_SYNC_Last_Sync_RecNum = 0
        ARS_LOCAL_Add_Report("LOCAL: Sync Database Reset", 1)
      endif
    endif
    
    `Receive SERVER STATUS INFORMATION
    if l_message_type_code = 1200
      l_Auth_Code = net get long()
      if l_Auth_Code = 23416
        lib_MENUS_Receive_SERVER_Data()
      endif
    endif
    
    `Receive request for AUTHORISED CLIENT to transmit spymode status variables
    `back to the server
    if l_message_type_code = 1201
      l_Auth_Code = net get long()
      if l_Auth_Code = 78351
        lib_MENUS_Auth_Client_Send_Variables()
      endif
    endif
    
    `Original requesting spymode client receives relayed Auth Client Stats from server
    if l_message_type_code = 1202
      l_Auth_Code = net get long()
      if l_Auth_Code = 27491
        lib_MENUS_Receive_Relayed_AuthClient()
      endif
    endif
    
    `Spymode requested Authorised Client Data, but no client is authorised
    `this is the server response to inform spymode that there is no Auth Client
    if l_message_type_code = 1204
      l_Auth_Code = net get long()
      if l_Auth_Code = 38194
        g_SPYM_M_Menu_Wits$ = "No Client Authorised"
        g_SPYM_M_Menu_AConnect$ = "No Client Authorised"
        g_SPYM_M_Menu_SYNC$ = "No Client Authorised"
        g_SPYM_M_Menu_LOGGING$ = "No Client Authorised"
      endif
    endif
    
    
    if l_message_type_code = 2001
      `2. Receive the string identifying the server/client relationship
        g_initial_test_message$ = net get string()
      `3. Receive the Client ID as Identified by the server
        g_server_assigned_client_ID = net get long()
      `4. Receive the SYNC authorisation or denial - note only codes 1001 and 2001 result in the client not requesting the relationship again
        g_server_relationship_data_received = -1
        l_rWITS_Code = net get long()
        if l_rWITS_Code = 1001
          g_server_authorised_wits_transmission = 1
          g_server_relationship_code = l_rWITS_Code
          g_server_relationship_data_received = 1
          `                          If you want SYNC to activate on connection turn it on below.
          g_SYNC_Engine_Active = 1 : `Activate Sync Engine here set to 1
          g_SYNC_NewF8Conn_ForceCode702 = 1 : `Force a server/client DB check at a new connection (new authorised sync connection). NOTE: Uses a timer to start
          g_SYNC_NewF8Conn_ForceCode702_Timer = timer() + 5500 : `=5 seconds, plus a little bit, then forces re-sync check on new connection
          `if client has been given authorisation to SYNC and DIAGNOSTICS MODE is active then 
          `refuse the permission
          `OR if client is in VIEWER MODE and has been authorised to SYNC then refuse the permission
          if g_SPYMODE_ACTIVE = 1 or g_ENGINE_CoreFunctionType = 1
            g_Already_Transmitted_To_Server_This_Program_Loop = 1
            g_server_authorised_wits_transmission = -1
            g_server_relationship_code = -1
            g_server_relationship_data_received = -1
            g_SYNC_Engine_Active = -1
            net send 0
            net put long 2005
            net put string g_ENGINELOGIN_Main_Username$
            net put string g_ENGINELOGIN_Main_Password$
            net send
            inc g_ENG_DataTransfer_Total, 2048
          endif
        endif
        if l_rWITS_Code = 2001
          g_server_authorised_wits_transmission = -1
          g_server_relationship_code = l_rWITS_Code
          g_server_relationship_data_received = 1
          g_SYNC_Engine_Active = -500
        endif
    endif
    
    `Reply from server - Client has refused SYNC privilage
    if l_message_type_code = 2006
      g_initial_test_message$ = net get string()
      g_server_assigned_client_ID = net get long()
      l_rWITS_Code = net get long()
      g_server_authorised_wits_transmission = -1
      g_server_relationship_code = l_rWITS_Code
      g_server_relationship_data_received = 1
    endif
    
    `Receive Realtime Display Channel Settings from the Server (Plot Ranges, Colours)
    if l_message_type_code = 2999
      l_Auth_Code = net get long()
      if l_Auth_Code = 34729
        lib_DRT_Receive_Channel_Settings()  
      endif
    endif
    
    `Receive Realtime Display Channel Settings from the Server (Plot Ranges, Colours)
    if l_message_type_code = 3100
      l_Auth_Code = net get long()
      if l_Auth_Code = 54637
        lib_DRT_Receive_PUSH_Data()
      endif
    endif


    
    `Spymode Client Toggles Auto-Reconnect
    if l_message_type_code = 4001
      l_Auth_Code = net get long()
      if l_Auth_Code = 23485
        l_MSGClientID = net get int()
        if g_AUTO_CONNECT_ON = 1
          g_AUTO_CONNECT_ON = -1
          lib_MESSAGE_AUClient_Relay_To_ClientID(l_MSGClientID, "SYNC Client> AUTO-CONNECT ENGINE: OFF")
        else
          g_AUTO_CONNECT_ON = 1
          lib_MESSAGE_AUClient_Relay_To_ClientID(l_MSGClientID, "SYNC Client> AUTO-CONNECT ENGINE: ON")
        endif
        net send 0 : net put long 4002 : net put long 73859 : net send    
      endif
    endif
    `Spymode Client Toggles SYNC
    if l_message_type_code = 4004
      l_Auth_Code = net get long()
      if l_Auth_Code = 69342
        l_MSGClientID = net get int()
        if g_SYNC_Engine_Active = 1
          g_SYNC_Engine_Active = -1
          lib_MESSAGE_AUClient_Relay_To_ClientID(l_MSGClientID, "SYNC Client> SYNC ENGINE: OFF")
        else
          g_SYNC_Engine_Active = 1
          lib_MESSAGE_AUClient_Relay_To_ClientID(l_MSGClientID, "SYNC Client> SYNC ENGINE: ON")
        endif
        net send 0 : net put long 4005 : net put long 82435 : net send    
      endif
    endif
    `Spymode Client Toggles LOGGING
    if l_message_type_code = 4007
      l_Auth_Code = net get long()
      if l_Auth_Code = 48923
        l_MSGClientID = net get int()
        if g_ENG_Logging_Active = 1
          g_ENG_Logging_Active = -1
          lib_MESSAGE_AUClient_Relay_To_ClientID(l_MSGClientID, "SYNC Client> LOGGING ENGINE: OFF")
        else
          g_ENG_Logging_Active = 1
          lib_MESSAGE_AUClient_Relay_To_ClientID(l_MSGClientID, "SYNC Client> LOGGING ENGINE: ON")
        endif
        net send 0 : net put long 4008 : net put long 85462 : net send    
      endif
    endif
    
    `Authorised Client perform a HD Database Backup at the request of the Spymode Client
    if l_message_type_code = 4010
      l_Auth_Code = net get long()
      if l_Auth_Code = 16946
        l_SendingClientID = net get int()
        lib_AUClient_BACKUP_HDDatabase(l_SendingClientID)
      endif
    endif

    `Authorised Client Re-Initialises the Serial Port at the request of the Spymode Client
    if l_message_type_code = 4012
      l_Auth_Code = net get long()
      if l_Auth_Code = 29746
        l_SendingClientID = net get int()
        lib_AUClient_REINIT_SERIAL_PORT(l_SendingClientID)
      endif
    endif
    
    `Authorised Client Re-Creates HD Database from local MEM database 
    if l_message_type_code = 4014
      l_Auth_Code = net get long()
      if l_Auth_Code = 35261
        l_SendingClientID = net get int()
        lib_AUClient_RECREATE_HD_Database(l_SendingClientID)
      endif
    endif
    
    `Server responds to the Spymode Client with its current LOGIN Table
    if l_message_type_code = 4101
      l_Auth_Code = net get long()
      if l_Auth_Code = 28716
        lib_SPYMODE_LOGIN_ReceiveServerLoginTable()
      endif
    endif
    
    `Server requests the Authorised Client transmit its Login Table for relay back to a Spymode Client
    if l_message_type_code = 4103
      l_Auth_Code = net get long()
      l_SpymodeClient_ID = net get long()
      if l_Auth_Code = 24152
        lib_SPYMODE_LOGIN_AUClientSendLoginTable(l_SpymodeClient_ID)
      endif
    endif
    
    `Spymode Client receives the Authorised Client Login Table relayed by the Server
    if l_message_type_code = 4105
      l_Auth_Code = net get long()
      if l_Auth_Code = 24162
        lib_SPYMODE_LOGIN_AUClientReceive_LTable()
      endif
    endif
    
    `Authorised Client receives a new Login Table from a Spymode client (relayed from the Server)
    if l_message_type_code = 4107
      l_Auth_Code = net get long()
      if l_Auth_Code = 12774
        lib_SPYMODE_LOGIN_RecieveNewAUClient_LTab()
      endif
    endif
    
    `Spymode Client receives relayed command from the Authorised Client to update its network Login Table
    `data for display
    if l_message_type_code = 4109
      l_Auth_Code = net get long()
      if l_Auth_Code = 18918
        lib_SPYMODE_LOGIN_Reset_ViewingArrays("Requested")
        `Issue command to Server to transmit its current Login Table
        lib_SPYMODE_LOGIN_RequestServerLoginTable()
        `Issue command to Server to get and relay the current Authorised Client Login Table
        lib_SPYMODE_LOGIN_Get_AUClientLoginTable()
      endif
    endif

    `Authorised Client relays message to Client ARS console via the Server
    `Send Report
    if l_message_type_code = 4201
      l_Auth_Code = net get long()
      if l_Auth_Code = 16812
        l_CommsTmp1$ = net get string()
        ARS_LOCAL_Add_Report(l_CommsTmp1$, -1)
      endif
    endif
    `Send Report and Complete Client ARS
    if l_message_type_code = 4211
      l_Auth_Code = net get long()
      if l_Auth_Code = 12771
        l_CommsTmp1$ = net get string()
        ARS_LOCAL_Add_Report_and_Complete(l_CommsTmp1$, -1)
      endif
    endif
    
    `LOGIN - Client transmits the Client Login Table to the Server
    if l_message_type_code = 5001
      l_Auth_Code = net get long()
      if l_Auth_Code = 12345
        lib_Login_CF2_TransmitToServer()
      endif
    endif
    
    `LOGIN - Server transmits its Login Table to the Client for display
    if l_message_type_code = 5003
      l_Auth_Code = net get long()
      if l_Auth_Code = 25334
        lib_Login_CF2_Receive_Server_LoginTable()
      endif
    endif
    
    `LOGIN FAILED - Rejected by the server
    if l_message_type_code = 9999
      l_Auth_Code = net get long()
      l_Msg$ = net get string()
      if l_Auth_Code = 34627
        `g_ENGINELOGIN_LoginScreenPersistentMessage$ = l_Msg$
        g_ENGINELOGIN_ConnectionInfoText$ = l_Msg$
        lib_EXIT_DISCONNECT_Server()
        g_ENGINELOGIN_Show_Login = 1
        g_ENGINELOGIN_IDInFileAtStartUpAffect = -1
        g_ENGINELOGIN_InputBoxActive = 1
        `g_ENGINELOGIN_InputUsername$ = ""
        `g_ENGINELOGIN_InputPassword$ = ""
        `g_ENGINELOGIN_InputPasswordSTARS$ = ""
      endif
    endif


  endwhile

endfunction

function UNUSED_COMMUNICATIONS_Transmit_to_SERVER()


  `NOTE: UNUSED: This system is the LARGE COMPLICATED server/client relationship for the main
  `      large Server program. It was disused when the SIMPLE SERVER & CLIENTS that only display
  `      the screen were created.


  `Clear the message queue
  `net send 0
  
  `If the Server is ignoring SYNC data then send code to turn SYNC back on at the Server
  if g_ENG_ServerSyncOFF_Restart = 1
    g_ENG_ServerSyncOFF_Restart = -1
    net send 0
    net put long 701
    net put long 27166
    net send
    inc g_ENG_DataTransfer_Total, 2048
  endif
  
  `If connected to the server, but no server settings for the command console
  if g_server_connected = 1 and g_CMND_CONSL_ServerSettings_Received = -1
    g_Already_Transmitted_To_Server_This_Program_Loop = 1
    net send 0
    net put long 850
    net send
    inc g_ENG_DataTransfer_Total, 2048
  endif

  `If connected to the server, but no relationship (i.e SYNC Authorised etc) then request the relationship
  if g_server_relationship_data_received = -1 and g_server_connected = 1
    if g_Already_Transmitted_To_Server_This_Program_Loop = -1
      if timer() > g_Relationship_Request_Timer
        g_Relationship_Request_Timer = timer() + 1000
        g_Already_Transmitted_To_Server_This_Program_Loop = 1
        net send 0
        net put long 2000
        net put string g_ENGINELOGIN_Main_Username$
        net put string g_ENGINELOGIN_Main_Password$
        net send
        inc g_ENG_DataTransfer_Total, 2048
      endif
    endif
  endif


  `If connected and authorised to do so then transmit the WITS screen data for the screen.
  `Note that this is just the data appearing on the screen at the server end
  `database sync is handled serperately.
  `TIME and DATE are not transmitted with the screen data, but are in the full database to ensure
  `that all data has the exact time drilled, not the recieve time at the server.
  if g_SPYMODE_ACTIVE = -1 and g_server_relationship_code = 1001
    if g_server_authorised_wits_transmission = 1 and g_server_relationship_data_received = 1 and g_Already_Transmitted_To_Server_This_Program_Loop = -1
    `if g_server_connected <> 0 and g_Already_Transmitted_To_Server_This_Program_Loop = -1
      if g_TIMER_1 > g_TRANSMIT_WITS_Timer + g_WITS_Transmission_Interval_Int - 1
        g_Already_Transmitted_To_Server_This_Program_Loop = 1
        g_TRANSMIT_WITS_Timer = g_TIMER_1
        net send 0
        
        net put long 210
        
        net put float g_COMMPORT_Receive_HoleDepth#
        net put float g_COMMPORT_Receive_BitDepth#
        net put float g_CALCULATED_Received_ROP#
        net put float g_COMMPORT_Receive_WOB#
        net put word g_COMMPORT_Receive_Hookload
        net put word g_COMMPORT_Receive_RPM
        net put float g_COMMPORT_Receive_TripTank#
        net put float g_COMMPORT_Receive_BlockPosition#
        net put float g_COMMPORT_Receive_PVT#
        net put word g_COMMPORT_Receive_SPP
        net put word g_COMMPORT_Receive_FlowIN
        net put word g_COMMPORT_Receive_SPM1
        net put word g_COMMPORT_Receive_SPM2
        net put float g_COMMPORT_Receive_TotalGas#
        net put float g_COMMPORT_Receive_H2S#
        
        net send
        
        inc g_ENG_DataTransfer_Total, 2048
      endif
    endif
  endif

endfunction



function __________SERIAL_PORT_and_WITS_____________________________tx1dnj4dsfhr71()
endfunction



function Kernel32_SERIAL_PORT_ENGINE()

  local l_AutoPort_SetRes as integer
  
  

  `Check that ports are available
  if g_SERIALPORT_NotSeen = -1
    g_SERIALPORT_OS_Available_Ports$ = SPM_GetMachinePortNames()
  endif
  
  `Give the user the option to select a port if none has been previously selected
  if g_SERIALPORT_OS_Available_Ports$ <> "" and g_SERIALPORT_Port_Name$ = ""
    `Caution - calling this function will pause the rest of the program (it will only happen when the serial port is added)
    lib_Serial_Port_Selection_Check()
  endif
  `lib_Serial_Port_Selection_Check()
  
  `Shut the port down if the cable is removed after the port is active
  `if g_SERIALPORT_OS_Available_Ports$ = "" and g_SERIALPORT_Port_Name$ <> ""
  `  g_SERIALPORT_Port_Name$ = ""
  `  g_SERIALPORT_ACTIVE = -1
  `  g_SERIALPORT_ACTIVE_ID$ = ""
  `  l_ClosePort_Result = lib_Close_Serial_Port(g_hPort)
  `endif

  `Check whether the serial port is mounted, if not then identify it and mount it
  if g_SERIALPORT_ACTIVE = -1 and g_SERIALPORT_AUTO_RESTART = -1
      `Note: g_hPort is the (l_comm_handle) handle returned by the "CreateFile" call to Kernel32.dll
      g_hPort = Kernel32_PORT_Setup(g_SERIALPORT_Port_Name$)
  else
    `If the port is active then check the port for new information
    if g_SERIALPORT_ACTIVE = 1
      `Read off a number of characters from the buffer per program loop
      for read_port_lp = 1 to 20
        Kernel32_PORT_Read(g_hPort)
      next read_port_lp
    endif
  endif
  
  `Check and update WITS Status
  if g_SERIALPORT_Started = 2
    if g_TIMER_1 > g_SERIALPORT_Timer_Last_Data_Timer + c_WITS_DataTimeout
    
      g_SERIALPORT_Timer_Last_Data_Timer = g_TIMER_1
      g_SERIALPORT_DataStatus$ = "CONNECTION FAILED!"
      
      `Clear the build string in the hope that a failed string is jamming the system
      g_SERIALPORT_Port_Output_String$ = ""
      inc g_SERIALPORT_TimeOuts_Counter, 1
      
      `Update the system tray information
      g_SYSTRAY_Update_Data$ = "GDS Client: ERROR: WITS FAILURE - attempting restart"
      
      `Attempt to restart the serial port.
      if g_SERIALPORT_AUTO_RESTART = -1
        g_SERIALPORT_ACTIVE = -1
      endif
      g_SERIALPORT_AutoReconnect_Timer = g_TIMER_1
      g_SERIALPORT_AUTO_RESTART = 1
    
    endif
  endif
  `Attempt to automatically restart the serial port if the timeout has been reached.
  if g_SERIALPORT_AUTO_RESTART = 1
    
    if g_hPort <> -1
      l_AutoPort_CRes = lib_Close_Serial_Port(g_hPort)
    endif
      
    l_AutoPort_SetRes = -1  
    if g_TIMER_1 > g_SERIALPORT_AutoReconnect_Timer
      l_AutoPort_SetRes = Kernel32_PORT_Setup(g_SERIALPORT_Port_Name$)
    endif
    if l_AutoPort_SetRes = -1
      g_SERIALPORT_DataStatus$ = "CONNECTION FAILED! Attempting restart on [" + g_SERIALPORT_Port_Name$ + "])"
    else
      inc g_SERIALPORT_Successful_Restarts, 1
      g_SERIALPORT_AUTO_RESTART = -1
      g_SERIALPORT_DataStatus$ = "Auto Restart"
      g_hPort = l_AutoPort_SetRes
    endif

  endif

endfunction

function Kernel32_PORT_Setup(r_CommPort$)

  local l_comm_handle as dword : l_comm_handle = 0

  `2. Open the Port
  g_ENGINE_ERROR_DWORD_Code = 0
  l_comm_handle = call dll(c_Kernel32DLL, "CreateFileA", r_CommPort$, 0x80000000, 0, 0, 3, 0x80, 0)

  `If an error occurs then set the last error code value
  if l_comm_handle = -1
    g_ENGINE_ERROR_DWORD_Code = call dll(c_Kernel32DLL, "GetLastError")
  endif  

  `A Serial Port was found and assigned a handle (note error = -1, not 0 like other windows functions)
  if l_comm_handle <> -1
    
    `Build the DCB Structure for the port
    l_mem_DCB_Buffer = alloc zeroed(80)
    l_BuildDCBA_result = call dll(c_Kernel32DLL,"BuildCommDCBA","baud=9600 parity=M data=8 stop=1", l_mem_DCB_Buffer)
    free l_mem_DCB_Buffer
    
    lib_GetCommState(l_comm_handle)
    
    DCB.BaudRate = 9600
    DCB.ByteSize = 8
    DCB.Parity = 0
    DCB.StopBits = 1
    
    lib_SetCommState(l_comm_handle)
    
    if l_BuildDCBA_result <> 0
      g_SERIALPORT_ACTIVE = 1
      g_SERIALPORT_ACTIVE_ID$ = r_CommPort$
    
      `Set com port timeouts. See: http://msdn.microsoft.com/en-us/library/aa363190%28v=VS.85%29.aspx
      l_mem_TimeOut_Buffer=alloc zeroed(20)                  `Allocate memory to create Timeout structure & fill standard values
      poke dword l_mem_TimeOut_Buffer + 0, 4294967295        `ReadIntervalTimeout (Set to maxdword so returns immediately)
      poke dword l_mem_TimeOut_Buffer + 4, 0                 `ReadTotalTimeoutMultiplier (Set to 0 - return immediate)
      poke dword l_mem_TimeOut_Buffer + 8, 0                 `ReadTotalTimeOutConstant (Set to 0 - return immediate)
      poke dword l_mem_TimeOut_Buffer + 12, 0                `WriteTotalTimeoutMultiplier
      poke dword l_mem_TimeOut_Buffer + 16, 1000             `WriteTotalTimeoutConstant
      l_timeout_result=call dll(c_Kernel32DLL,"SetCommTimeouts", l_comm_handle, l_mem_TimeOut_Buffer)       `Apply new settings from timeouts structure
      free l_mem_TimeOut_Buffer                               `Free buffer memory back to system
    endif
  endif

endfunction l_comm_handle

function Kernel32_PORT_Read(r_hPort)

  local l_ReadPort$ as string

   get_char_buffer = alloc zeroed(1 + 4)
   char_result = call dll(c_Kernel32DLL, "ReadFile", r_hPort, get_char_buffer + 4, 1, get_char_buffer, 0)
   
   `Clear the port if there has been no change on it for 333ms
   

   
   
   if char_result <> 0
     g_ENG_WITS_PurgePort_LastDataAtTimer = timer()
     g_ENG_WITS_PurgePort_PortCleared = -1
     l_ReadPort$ = ""
     l_ReadPort$ = peek string(get_char_buffer+4, peek dword(get_char_buffer))  `then add them to the serial chunk data
     
     if l_ReadPort$ <> ""
       g_SERIALPORT_Port_Output_String$ = g_SERIALPORT_Port_Output_String$ + l_ReadPort$
     endif
     
     if fast right$(g_SERIALPORT_Port_Output_String$, 2) = "!!"
       trim_left$ = trimleft$(g_SERIALPORT_Port_Output_String$)
       trim_right$ = trimright$(trim_left$)
       g_SERIALPORT_Port_Output_String$ = trim_right$
       g_SERIALPORT_Time_Last_Data_Received$ = get time$()
       
       `If the code identified the two end separators !! then thats a good first step, but the &&
       `separator might be incomplete 
        
       if fast left$(g_SERIALPORT_Port_Output_String$, 2) = "&&" and fast right$(g_SERIALPORT_Port_Output_String$, 2) = "!!"
         
         if g_SERIALPORT_DataStatus$ = "NOT STARTED"
           g_SERIALPORT_DataStatus$ = "WITS: RUNNING OK"
           g_SERIALPORT_Started = 2
         endif 
         if g_SERIALPORT_DataStatus$ = "Auto Restart"
           g_SERIALPORT_DataStatus$ = "WITS: RUNNING OK"
           g_SERIALPORT_Started = 2
         endif
         
         inc g_WITS_RECEIVE_String_StructureTest_Passed, 1
         g_SERIALPORT_Timer_Last_Data_Timer = g_TIMER_1
         

         `Process the string into record, channel and data fields etc
         Kernel32_WITS_String_HANDLE()
         
       else
         inc g_WITS_RECEIVE_String_StructureTest_Failed, 1
         `Write Debug WITS port data datafile each loop if switch is on in define programmer variables function
         if g_PROGSWITCH_Debug_WriteWITS_PortFile = 1
           DEBUG_Wits_WritePortDatafile(g_SERIALPORT_Port_Output_String$)
         endif
       endif
       
       `Clear the build string ready for the next reception at the serial port.
       g_SERIALPORT_Previous_Port_Output_String$ = g_SERIALPORT_Port_Output_String$
       g_SERIALPORT_Port_Output_String$ = ""

     endif
     
   endif
   
   `Purge the port if no new data has been received for 500ms
   if char_result = 0
     if timer() > (g_ENG_WITS_PurgePort_LastDataAtTimer + 500)
       if g_ENG_WITS_PurgePort_PortCleared = -1
         g_ENG_WITS_PurgePort_PortCleared = 1
         g_ENG_WITS_PurgePort_LastDataAtTimer = timer()
         clear_result = call dll(c_Kernel32DLL, "PurgeComm", r_hPort, 0x0008)
       endif
     endif
   endif
   
   
   free get_char_buffer
   
endfunction


function Kernel32_WITS_String_HANDLE()

  `Arrive here IF :
  `if fast left$(g_SERIALPORT_Port_Output_String$, 2) = "&&" AND
  `   fast right$(g_SERIALPORT_Port_Output_String$, 2) = "!!"


  local l_SEP_Pnt as integer
  local l_OR_ResetSeq_RecordNum as integer
  
  local l_LowestSeqRecNum as integer

  `Read the WITS String and sort into relevant arrays
  l_SEP_Pnt = 0
  g_WITS_RECEIVE_String_Breakdown_Ttl_Num = -1
  for check_lp = 1 to len(g_SERIALPORT_Port_Output_String$)
    `Check for Line Feeds (asc=10)
    if asc(mid$(g_SERIALPORT_Port_Output_String$, check_lp)) = 10
      inc g_WITS_RECEIVE_String_Breakdown_Ttl_Num, 1
      WITS_Return_Positions(g_WITS_RECEIVE_String_Breakdown_Ttl_Num) = check_lp
      WITS_RECEIVE_String_Breakdown$(g_WITS_RECEIVE_String_Breakdown_Ttl_Num) = right$(left$(g_SERIALPORT_Port_Output_String$, check_lp), (check_lp - l_SEP_Pnt+1))
      l_SEP_Pnt = check_lp + 1
    endif
  next check_lp
  
  `3. Get the Record Number, Channel Number and Value from the string
  for get_lp = 0 to g_WITS_RECEIVE_String_Breakdown_Ttl_Num
  
    `0: Contains the Record Number
    WITS_RECEIVE_String_Breakdown_Values#(get_lp, 0) = val(left$(WITS_RECEIVE_String_Breakdown$(get_lp), 2))
    `1: Contains the Channel Number
    WITS_RECEIVE_String_Breakdown_Values#(get_lp, 1) = val(right$(left$(WITS_RECEIVE_String_Breakdown$(get_lp), 4), 2))
    `2: Contains the Data
    WITS_RECEIVE_String_Breakdown_Values#(get_lp, 2) = val(right$(WITS_RECEIVE_String_Breakdown$(get_lp), len(WITS_RECEIVE_String_Breakdown$(get_lp)) - 4))
  
  
  
  
  
  
  
  
  
  
  
  
  
    `WITS OVERRIDE - Clear array for debugging and use.
    if g_WITS_OVERRIDE_GlobalItemCounter = 0
    	for clear_lp = 1 to 250
      	WITS_OVERRIDE_COMDATA(clear_lp).WITS_Item_BOHROUT_RAWDATA$ = ""
    	next clear_lp
    endif
    `WITS OVERRIDE - If the record number is >= user set max record number value then restart
    `                NOTE: This is the code that resets the array back to the beginning.
    if g_WITS_OVERRIDE_RecordCounter => g_WITS_OVERRIDE_User_MaxSetRecords
      `Note: This code here [3d2fk4s5] is the original main code. It is copied below at [9g23s4lh] and the input
      `      key [I] - Reset Sequence [hf2u46l2w9]
      g_WITS_OVERRIDE_RecordCounter = 0
      g_WITS_OVERRIDE_GlobalItemCounter = 0
    endif
    `WITS OVERRIDE - ADD ITEMS TO OVERRIDE ARRAY - Fill the WITS OVERRIDE ARRAY
      g_SYNC_DEBUG_PacketArrSize = g_WITS_RECEIVE_String_Breakdown_Ttl_Num
      inc g_WITS_OVERRIDE_GlobalItemCounter, 1
      if g_WITS_OVERRIDE_GlobalItemCounter > -1 and g_WITS_OVERRIDE_GlobalItemCounter < 251
        WITS_OVERRIDE_COMDATA(g_WITS_OVERRIDE_GlobalItemCounter).WITS_Item_BOHROUT_RAWDATA$ = WITS_RECEIVE_String_Breakdown$(get_lp)
        WITS_OVERRIDE_COMDATA(g_WITS_OVERRIDE_GlobalItemCounter).WITS_Item_BOHROUT_RecordNum# = WITS_RECEIVE_String_Breakdown_Values#(get_lp, 0)
        WITS_OVERRIDE_COMDATA(g_WITS_OVERRIDE_GlobalItemCounter).WITS_Item_BOHROUT_ChannelNum# = WITS_RECEIVE_String_Breakdown_Values#(get_lp, 1)
        WITS_OVERRIDE_COMDATA(g_WITS_OVERRIDE_GlobalItemCounter).WITS_Item_BOHROUT_Data# = WITS_RECEIVE_String_Breakdown_Values#(get_lp, 2)
      endif
  
  next get_lp
  
  `WITS OVERRIDE - Add a !! record and the number of records in the packet to the array so
  `                we can see where the packet ends/terminates in the array and how big it is.
    inc g_WITS_OVERRIDE_GlobalItemCounter, 1
    if g_WITS_OVERRIDE_GlobalItemCounter > -1 and g_WITS_OVERRIDE_GlobalItemCounter < 251
     WITS_OVERRIDE_COMDATA(g_WITS_OVERRIDE_GlobalItemCounter).WITS_Item_BOHROUT_RAWDATA$ = "!! REC END (RecSize:" + str$(g_SYNC_DEBUG_PacketArrSize) + ") (Rec#" + str$(g_WITS_OVERRIDE_RecordCounter) + ")"
     WITS_OVERRIDE_COMDATA(g_WITS_OVERRIDE_GlobalItemCounter).WITS_Item_BOHROUT_RecordNum# = 0
     WITS_OVERRIDE_COMDATA(g_WITS_OVERRIDE_GlobalItemCounter).WITS_Item_BOHROUT_ChannelNum# = 0
     WITS_OVERRIDE_COMDATA(g_WITS_OVERRIDE_GlobalItemCounter).WITS_Item_BOHROUT_Data# = 0
    endif
   
  `WITS OVERRIDE - Lastly (Nearly), we are at the end of the record so increase the record number so the program
  `                can tell how many records have been processed and reset back at the start if
  `                we have processed the user set limit - i.e. how many are being WITsed over.
    inc g_WITS_OVERRIDE_RecordCounter, 1
   
  `WITS OVERRIDE (SPECIAL) (*SORT* RECORD ORDER) (ENSURE FIRST RECORD IS ALWAYS FIRST) 
  `              - To ensure WITS Channel stability, that selected and saved WITS Channels are always
  `                mapped to the save array number / incoming sequence, and do not point to the
  `                wrong array positions if the WITS data records shift in the sequence they are
  `                being received in (Rec 01/11 can easily come in as Rec 11/01 depending on fractions
  `                of a second, program pauses (saves, restarts etc).. >
  `                We need to ensure that the first WITS record is at the start of the sequence.
  `              - To do this we will look at the WITS records and find the lowest record number. This record
  `                is the only one that can be accepted into the first position at the start of the next
  `                round.

    `GET SEQUENCE AND SET SEQUENCE
    	`1. Find lowest record number in the data
      	l_LowestSeqRecNum = 10000
      	for check_lp = 1 to g_WITS_OVERRIDE_GlobalItemCounter
        	if WITS_OVERRIDE_COMDATA(check_lp).WITS_Item_BOHROUT_RecordNum# <> 0
          	if WITS_OVERRIDE_COMDATA(check_lp).WITS_Item_BOHROUT_RecordNum# < l_LowestSeqRecNum
            	l_LowestSeqRecNum = WITS_OVERRIDE_COMDATA(check_lp).WITS_Item_BOHROUT_RecordNum#
          	endif
        	endif
      	next check_lp
      `2. Whatever the lowest number from this WITS data cycle was, it needs to be the first in the next
        if l_LowestSeqRecNum < g_WITS_OVERRIDE_SetSeq_LowestRecNum
         `This is set if it is lower than the main variable. It then forms the start of the sequence at the start of the next loop
         g_WITS_OVERRIDE_SetSeq_LowestRecNum = l_LowestSeqRecNum
        endif  


       `3. Check the array. If the first data in it is not the lowest record number known then erase the array
       `   to start again. One of the next records will ultimately become the lowest record number.
         if WITS_OVERRIDE_COMDATA(2).WITS_Item_BOHROUT_RecordNum# <> g_WITS_OVERRIDE_SetSeq_LowestRecNum
         	`Reset code here [9g23s4lh] is copied from the original main code at [3d2fk4s5]. It resets the
          	  `counter & record numbers back to zero.
          	  `Note: This reset code also exists at the key INPUT: [I] - Reset Sequence [hf2u46l2w9]. 
          	  `      Changes here MUST be put there too.
          	  g_WITS_OVERRIDE_RecordCounter = 0
              g_WITS_OVERRIDE_GlobalItemCounter = 0
              inc g_WITS_OVERRIDE_DeBug_NumOfSeqResets, 1
         endif








     ` ------ THIS DIDN'T WORK PROB BECAUSE TO REST AT THE END ONLY DOES THE SAME AS RESTARTING NORMALLY ANYWAY
    ``Note: At this point an entire record has been added to the Override Array.
    `l_OR_ResetSeq_RecordNum = -1
    `for check_lp = 1 to g_WITS_OVERRIDE_GlobalItemCounter
    `  if WITS_OVERRIDE_COMDATA(check_lp).WITS_Item_BOHROUT_RecordNum# <> 0
    `    `l_OR_ResetSeq_RecordNum can only increase, going from null/-1 to 1, 2, 10 etc
    `    `if it ever decreases then records are out of sequence and the override array can be reset
    `    `to capture from the start, whenever it happens.
    `    `Allow l_OR_ResetSeq_RecordNum to increase if a record number is higher than the last
    `    	if WITS_OVERRIDE_COMDATA(check_lp).WITS_Item_BOHROUT_RecordNum# > l_OR_ResetSeq_MaxNumSoFar
    `      	l_OR_ResetSeq_RecordNum = WITS_OVERRIDE_COMDATA(check_lp).WITS_Item_BOHROUT_RecordNum#
    `    	endif
    `    `If a record number decreases then we can dump the entire array as we only want it in sequence 
    `    	if WITS_OVERRIDE_COMDATA(check_lp).WITS_Item_BOHROUT_RecordNum# < l_OR_ResetSeq_MaxNumSoFar
    `      	`Reset code here [9g23s4lh] is copied from the original main code at [3d2fk4s5]. It resets the
    `      	  `counter & record numbers back to zero.
    `      	  `Note: This reset code also exists at the key INPUT: [I] - Reset Sequence [hf2u46l2w9]. 
    `      	  `      Changes here MUST be put there too.
    `      	  g_WITS_OVERRIDE_RecordCounter = 0
    `          g_WITS_OVERRIDE_GlobalItemCounter = 0
    `          inc g_WITS_OVERRIDE_DeBug_NumOfSeqResets, 1
    `    	endif
    `  endif
    `next check_lp
    `---------------------


  
  `13 - ROP SPECIAL CASE - Excluded from the loop below because it doesn't need doing every loop
  `Use the CALCULATED ROP - g_CALCULATED_Received_ROP# as float
  if g_ROPCALC_ROP_Value# < 0.0
    g_CALCULATED_Received_ROP# = 0.0
  else  
    g_CALCULATED_Received_ROP# = g_ROPCALC_ROP_Value#
  endif
  
  `4. Sort the data into the correct temp arrays.
  for sort_lp = 0 to g_WITS_RECEIVE_String_Breakdown_Ttl_Num
  
    `Bit Depth (Measured) - g_COMMPORT_Receive_BitDepth# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_BitDepth$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_BitDepth$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_BitDepth# = 0.0
        else
          g_COMMPORT_Receive_BitDepth# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    `Hole Depth (Measured) - g_COMMPORT_Receive_HoleDepth# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_HoleDepth$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_HoleDepth$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_HoleDepth# = 0.0
        else
          g_COMMPORT_Receive_HoleDepth# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    `Block Position - g_COMMPORT_Receive_BlockPosition# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_BlockPosition$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_BlockPosition$)
        g_COMMPORT_Receive_BlockPosition# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
      endif
    endif
    
    `HKLD (Average) - g_COMMPORT_Receive_Hookload as word
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_HKLD$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_HKLD$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_Hookload = 0
        else  
          g_COMMPORT_Receive_Hookload = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
          if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) > g_COMMPORT_Receive_StoreToMEMDB_Hookload
            g_COMMPORT_Receive_StoreToMEMDB_Hookload = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
          endif
        endif
      endif
    endif
   
    `Bit Weight (Average) (WOB) - g_COMMPORT_Receive_WOB# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_WOB$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_WOB$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_WOB# = 0.0
        else
          g_COMMPORT_Receive_WOB# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif  
      endif
    endif
      
    `Torque - g_COMMPORT_Receive_Torque as word
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_Torque$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_Torque$)
        g_COMMPORT_Receive_Torque# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
      endif
    endif
   
    `Rotation Speed (RPM) - g_COMMPORT_Receive_RPM as word
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_RPM$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_RPM$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_RPM = 0
        else
          g_COMMPORT_Receive_RPM = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif 
      endif
    endif
   
    `SPP - g_COMMPORT_Receive_SPP as word
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_SPP$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_SPP$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_SPP = 0
        else
          g_COMMPORT_Receive_SPP = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
          if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) > g_COMMPORT_Receive_StoreToMEMDB_SPP
            g_COMMPORT_Receive_StoreToMEMDB_SPP = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
          endif
        endif
      endif
    endif
   
    `CSG - g_COMMPORT_Receive_CSG as word
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_CSG$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_CSG$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_CSG = 0
        else
          g_COMMPORT_Receive_CSG = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
   
    `SPM1 - g_COMMPORT_Receive_SPM1 as word
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_SPM1$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_SPM1$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_SPM1 = 0
        else
          `Round Values Up
          l_TmpFlt# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
          g_COMMPORT_Receive_SPM1 = lib_Round_Float_Up(l_TmpFlt#)
        endif
      endif
    endif
   
    `SPM2 - g_COMMPORT_Receive_SPM2 as word
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_SPM2$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_SPM2$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_SPM2 = 0
        else
          l_TmpFlt# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
          g_COMMPORT_Receive_SPM2 = lib_Round_Float_Up(l_TmpFlt#) 
        endif
      endif
    endif  
   
    `SPM3 - g_COMMPORT_Receive_SPM3 as word
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_SPM3$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_SPM3$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_SPM3 = 0
        else
          l_TmpFlt# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
          g_COMMPORT_Receive_SPM3 = lib_Round_Float_Up(l_TmpFlt#) 
        endif
      endif
    endif
    
    `Total Active Volume (PVT) - g_COMMPORT_Receive_PVT# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_PVT$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_PVT$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_PVT# = 0
        else
          g_COMMPORT_Receive_PVT# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    `Total Active Volume (PIT1) - g_COMMPORT_Receive_PIT1# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_PIT1$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_PIT1$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_PIT1# = 0
        else
          g_COMMPORT_Receive_PIT1# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    `Total Active Volume (PIT2) - g_COMMPORT_Receive_PIT2# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_PIT2$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_PIT2$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_PIT2# = 0
        else
          g_COMMPORT_Receive_PIT2# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    `Total Active Volume (PIT3) - g_COMMPORT_Receive_PIT3# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_PIT3$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_PIT3$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_PIT3# = 0
        else
          g_COMMPORT_Receive_PIT3# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    `Total Active Volume (PIT4) - g_COMMPORT_Receive_PIT4# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_PIT4$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_PIT4$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_PIT4# = 0
        else
          g_COMMPORT_Receive_PIT4# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    `Total Active Volume (PIT5) - g_COMMPORT_Receive_PIT5# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_PIT5$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_PIT5$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_PIT5# = 0
        else
          g_COMMPORT_Receive_PIT5# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    `Total Active Volume (PIT6) - g_COMMPORT_Receive_PIT6# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_PIT6$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_PIT6$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_PIT6# = 0
        else
          g_COMMPORT_Receive_PIT6# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    `Total Active Volume (PIT7) - g_COMMPORT_Receive_PIT7# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_PIT7$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_PIT7$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_PIT7# = 0
        else
          g_COMMPORT_Receive_PIT7# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    `Total Active Volume (PIT8) - g_COMMPORT_Receive_PIT8# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_PIT8$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_PIT8$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_PIT8# = 0
        else
          g_COMMPORT_Receive_PIT8# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
        
    `Flow In - g_COMMPORT_Receive_FlowIN as word
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_FLOWIN$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_FLOWIN$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_FlowIN = 0
        else
          g_COMMPORT_Receive_FlowIN = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
          
    `Flow OUT - g_COMMPORT_Receive_FlowOUT# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_FLOWOUT$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_FLOWOUT$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_FlowOUT# = 0
        else
          g_COMMPORT_Receive_FlowOUT# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
         
    `Total Gas % (TG%) - g_COMMPORT_Receive_TotalGas# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_TG$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_TG$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_TotalGas# = 0
        else
          g_COMMPORT_Receive_TotalGas# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    `H2S - g_COMMPORT_Receive_H2S# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_H2S$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_H2S$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_H2S# = 0
        else
          g_COMMPORT_Receive_H2S# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
     
    `Triptank - g_COMMPORT_Receive_TripTank# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_TripTank$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_TripTank$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_TripTank# = 0
        else
          g_COMMPORT_Receive_TripTank# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif


    `TEMP IN - g_COMMPORT_Receive_TempIN# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_TempIN$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_TempIN$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_TempIN# = 0
        else
          g_COMMPORT_Receive_TempIN# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    
    `TEMP OUT - g_COMMPORT_Receive_TempOUT# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_TempOUT$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_TempOUT$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_TempOUT# = 0
        else
          g_COMMPORT_Receive_TempOUT# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif
    
    `Lag Depth - g_COMMPORT_Receive_LagDepth# as float
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_LagDepth$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_Lagdepth$)
        g_COMMPORT_Receive_LagDepth# = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
      endif
    endif
    
    `TOTAL STROKES - g_COMMPORT_Receive_TotalStrokes as Integer
    if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 0) = val(g_ENG_WITSCONFIG_RecordNumber_TtlStrks$)
      if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 1) = val(g_ENG_WITSCONFIG_ChannelNumber_TtlStrks$)
        if WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2) < 0
          g_COMMPORT_Receive_TotalStrokes = 0
        else
          g_COMMPORT_Receive_TotalStrokes = WITS_RECEIVE_String_Breakdown_Values#(sort_lp, 2)
        endif
      endif
    endif

 
  next sort_lp
  
  `Call the WITS OVERRIDE function and overwrite any received WITS data with the OVERRIDE data if set
    ENGINE_WITS_OVERRIDE()
  
endfunction



function lib_Serial_Port_Selection_Check()

  `CAUTION: Calling this function pauses the rest of the program while the selection is made.

  local l_exit_condition as integer
  local l_max_ports as integer : l_max_ports = 0
  local l_Previous_Comma_Pos as integer
  local l_result$ as string
  local l_INPUTBOX_PosX as integer
  local l_INPUTBOX_PosY as integer


  l_INPUTBOX_PosX = g_ENG_Half_Screen_Width - (image width(c_COMPORT_Selection_Bkgd_Image) / 2)
  l_INPUTBOX_PosY = g_ENG_Half_Screen_Height - (image height(c_COMPORT_Selection_Bkgd_Image) / 2)

  g_SERIALPORT_SELECT_full$ = ""
  l_result$ = SPM_GetMachinePortNames()
  g_SERIALPORT_SELECT_full$ = l_result$ + ","
  
  `Max number of items = number of commas + 1
  if g_SERIALPORT_SELECT_full$ <> ""
    g_SERIALPORT_SELECT_Ttl_Ports = 0
    for count_lp = 1 to len(g_SERIALPORT_SELECT_full$)
      if mid$(g_SERIALPORT_SELECT_full$, count_lp) = ","
        inc g_SERIALPORT_SELECT_Ttl_Ports, 1
      endif
    next count_lp
  endif

  `Display Details
  l_exit_condition = -1
  repeat
  
    lib_AtStartUp_PasteDSScreenElmnts_AsBkgd()
    paste image c_COMPORT_Selection_Bkgd_Image, l_INPUTBOX_PosX, l_INPUTBOX_PosY, 1
  
    d3d_starttext

    `wdth_prnt = screen width() * 0.05 : sp = 0
    wdth_prnt = l_INPUTBOX_PosX + 67 : sp = l_INPUTBOX_PosY
    
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "SERIAL PORT SELECTION"

    
    if g_SERIALPORT_SELECT_full$ = ""
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "No serial ports found"
    else
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "Serial Ports found!"
      inc sp,19
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "Available Ports : " + str$(g_SERIALPORT_SELECT_Ttl_Ports) + "   (" + left$(g_SERIALPORT_SELECT_full$, len(g_SERIALPORT_SELECT_full$) - 1) + ")"
      
      `LEFT
      if keystate(203) = 1 and g_SERIALPORT_SELECT_KeyPress = -1
        g_SERIALPORT_SELECT_KeyPress = 1
        if g_SERIALPORT_SELECT_ArrItem > 1
          dec g_SERIALPORT_SELECT_ArrItem, 1
        endif
      endif
      `RIGHT
      if keystate(205) = 1 and g_SERIALPORT_SELECT_KeyPress = -1
        g_SERIALPORT_SELECT_KeyPress = 1
        if g_SERIALPORT_SELECT_ArrItem < g_SERIALPORT_SELECT_Ttl_Ports
          inc g_SERIALPORT_SELECT_ArrItem, 1
        endif  
      endif
      if scancode() = 0 and g_SERIALPORT_SELECT_KeyPress = 1 then g_SERIALPORT_SELECT_KeyPress = -1
      
      `Capture the COMM port text from within the string using just g_SERIALPORT_SELECT_ArrItem
      comma_count = 1
      l_Previous_Comma_Pos = 0
      for find_lp = 1 to len(g_SERIALPORT_SELECT_full$)
        if mid$(g_SERIALPORT_SELECT_full$, find_lp) = ","
          l_Previous_Comma_Pos = find_lp
          inc comma_count, 1
        endif
        `Get right side of string
        if comma_count = g_SERIALPORT_SELECT_ArrItem
          g_SERIALPORT_SELECT_final$ = left$(g_SERIALPORT_SELECT_full$, find_lp)
          `Get left side of string
          l_temp_selection$ = right$(g_SERIALPORT_SELECT_final$, len(g_SERIALPORT_SELECT_final$) - (l_Previous_Comma_Pos))
          g_SERIALPORT_SELECT_final$ = l_temp_selection$
          g_SERIALPORT_NotSeen = 1
        endif
      next find_lp
      

      inc sp,19
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "Please use left and right cursor keys to select a port ( <- | -> )"
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "Press ENTER to confirm selection"
      inc sp,19
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "   - Currently selected port (" + str$(g_SERIALPORT_SELECT_ArrItem) + ") : "
      d3d_text 2, wdth_prnt + 180, sp, 0, g_SERIALPORT_SELECT_final$
    
    endif
    
    d3d_endtext
    
    if lib_Enter_Pressed(5964) = 1
      g_SERIALPORT_Port_Name$ = lib_Serial_Port_Selection_PortNumConvert()
      l_exit_condition = 1
      clear entry buffer
    endif
    
    `ESC
    if keystate(1)= 1 and key_state(1,0) = 0 and g_CHANNEL_ID_ChngChnl_Toggle = -1
      lib_EXIT_Program(1, -1)
      key_state(1,0)=1
    endif
    if keystate(1)=0 and key_state(1,0)=1 then key_state(1,0)=0
    
    sync
    
  until l_exit_condition = 1
  
endfunction

function lib_Serial_Port_Selection_PortNumConvert()

  `NOTE: The the COMM port has a number greater than 9 then it needs converting to \\.\COM, i.e "\\.\COM10"

  local l_buildnumber$ as string : l_buildnumber$ = ""
  
  for num_lp = 1 to len(g_SERIALPORT_SELECT_final$)
    if asc(mid$(g_SERIALPORT_SELECT_final$, num_lp)) > 47 and asc(mid$(g_SERIALPORT_SELECT_final$, num_lp)) < 58
      l_buildnumber$ = l_buildnumber$ + mid$(g_SERIALPORT_SELECT_final$, num_lp)
    endif
  next num_lp
  
  if val(l_buildnumber$) > 9
    l_output$ = "\\.\COM" + l_buildnumber$
  else
    l_output$ = g_SERIALPORT_SELECT_final$
  endif

endfunction l_output$

function lib_GetCommState(r_PortID as dword)

  l_GetStateResult = call dll (c_Kernel32DLL, "GetCommState", r_PortID, get memblock ptr(c_Memblock_DCB))

   DCB.DCBlength  = memblock dword(c_Memblock_DCB,0)
   DCB.BaudRate  = memblock dword(c_Memblock_DCB,4)
   DCB.fBinary  = memblock dword(c_Memblock_DCB,8)
   DCB.fParity  = memblock dword(c_Memblock_DCB,12)
   DCB.fOutxCtsFlow  = memblock dword(c_Memblock_DCB,16)
   DCB.fOutcDsrFlow  = memblock dword(c_Memblock_DCB,20)
   DCB.fDtrControl  = memblock dword(c_Memblock_DCB,24)
   DCB.fDsrSensitivity  = memblock dword(c_Memblock_DCB,28)
   DCB.fTXContinueONXoff  = memblock dword(c_Memblock_DCB,32)
   DCB.fOutX  = memblock dword(c_Memblock_DCB,36)
   DCB.fInX  = memblock dword(c_Memblock_DCB,40)
   DCB.fErrorChar  = memblock dword(c_Memblock_DCB,44)
   DCB.fNull  = memblock dword(c_Memblock_DCB,48)
   DCB.fRtsControl  = memblock dword(c_Memblock_DCB,52)
   DCB.fAbortOnError  = memblock dword(c_Memblock_DCB,56)
   DCB.fDummy  = memblock dword(c_Memblock_DCB,60)
   DCB.XonLim  = memblock word(c_Memblock_DCB,64)
   DCB.XoffLim  = memblock word(c_Memblock_DCB,66)
   DCB.ByteSize  = memblock byte(c_Memblock_DCB,68)
   DCB.Parity  = memblock byte(c_Memblock_DCB,69)
   DCB.StopBits  = memblock byte(c_Memblock_DCB,70)
   DCB.XonChar  = memblock byte(c_Memblock_DCB,71)
   DCB.XoffChar  = memblock byte(c_Memblock_DCB,72)
   DCB.ErrorChar  = memblock byte(c_Memblock_DCB,73)
   DCB.EofChar  = memblock byte(c_Memblock_DCB,74)
   DCB.EvtChar  = memblock byte(c_Memblock_DCB,75)
   DCB.wReservedl  = memblock word(c_Memblock_DCB,76)
   
endfunction l_GetStateResult

function lib_SetCommState(r_PortID as dword)

  local l_SetStateResult as integer

   Write memblock dword c_Memblock_DCB,0,DCB.DCBlength
   Write memblock dword c_Memblock_DCB,4,DCB.BaudRate
   Write memblock dword c_Memblock_DCB,8,DCB.fBinary
   Write memblock dword c_Memblock_DCB,12,DCB.fParity
   Write memblock dword c_Memblock_DCB,16,DCB.fOutxCtsFlow
   Write memblock dword c_Memblock_DCB,20,DCB.fOutcDsrFlow
   Write memblock dword c_Memblock_DCB,24,DCB.fDtrControl
   Write memblock dword c_Memblock_DCB,28,DCB.fDsrSensitivity
   Write memblock dword c_Memblock_DCB,32,DCB.fTXContinueONXoff
   Write memblock dword c_Memblock_DCB,36,DCB.fOutX
   Write memblock dword c_Memblock_DCB,40,DCB.fInX
   Write memblock dword c_Memblock_DCB,44,DCB.fErrorChar
   Write memblock dword c_Memblock_DCB,48,DCB.fNull
   Write memblock dword c_Memblock_DCB,52,DCB.fRtsControl
   Write memblock dword c_Memblock_DCB,56,DCB.fAbortOnError
   Write memblock dword c_Memblock_DCB,60,DCB.fDummy
   Write memblock word c_Memblock_DCB,64,DCB.XonLim
   Write memblock word c_Memblock_DCB,66,DCB.XoffLim
   Write memblock byte c_Memblock_DCB,68,DCB.ByteSize
   Write memblock byte c_Memblock_DCB,69,DCB.Parity
   Write memblock byte c_Memblock_DCB,70,DCB.StopBits
   Write memblock byte c_Memblock_DCB,71,DCB.XonChar
   Write memblock byte c_Memblock_DCB,72,DCB.XoffChar
   Write memblock byte c_Memblock_DCB,73,DCB.ErrorChar
   Write memblock byte c_Memblock_DCB,74,DCB.EofChar
   Write memblock byte c_Memblock_DCB,75,DCB.EvtChar
   Write memblock word c_Memblock_DCB,76,DCB.wReservedl
   
  l_SetStateResult = call dll (c_Kernel32DLL, "SetCommState", r_PortID, get memblock ptr(c_Memblock_DCB))

endfunction l_SetStateResult

function lib_Close_Serial_Port(r_ClosePortID as dword)

  local l_CloseHandleRes as integer

  l_CloseHandleRes = call dll(c_Kernel32DLL, "CloseHandle", r_ClosePortID)
  
  if l_CloseHandleRes <> 0
    g_hPort = -1
  endif  

endfunction l_CloseHandleRes

function SIMULATE_Serial_Port_RND()

   g_COMMPORT_Receive_HoleDepth# = rnd(100)
   g_COMMPORT_Receive_BitDepth# = rnd(100)
   g_CALCULATED_Received_ROP# = rnd(100)
   g_COMMPORT_Receive_WOB# = rnd(100)
   g_COMMPORT_Receive_Hookload = rnd(100)
   g_COMMPORT_Receive_RPM = rnd(100)
   g_COMMPORT_Receive_Torque# = rnd(100)
   g_COMMPORT_Receive_TripTank# = rnd(100)
   g_COMMPORT_Receive_BlockPosition# = rnd(100)
   g_COMMPORT_Receive_PVT# = rnd(100)
   g_COMMPORT_Receive_PIT1# = rnd(100)
   g_COMMPORT_Receive_PIT2# = rnd(100)
   g_COMMPORT_Receive_PIT3# = rnd(100)
   g_COMMPORT_Receive_PIT4# = rnd(100)
   g_COMMPORT_Receive_PIT5# = rnd(100)
   g_COMMPORT_Receive_PIT6# = rnd(100)
   g_COMMPORT_Receive_PIT7# = rnd(100)
   g_COMMPORT_Receive_PIT8# = rnd(100)
   g_COMMPORT_Receive_SPP = rnd(100)
   g_COMMPORT_Receive_CSG = rnd(100)
   g_COMMPORT_Receive_FlowIN = rnd(100)
   g_COMMPORT_Receive_FlowOUT# = rnd(100)
   g_COMMPORT_Receive_SPM1 = rnd(100)
   g_COMMPORT_Receive_SPM2 = rnd(100)
   g_COMMPORT_Receive_SPM3 = rnd(100)
   g_COMMPORT_Receive_TotalGas# = rnd(100)
   g_COMMPORT_Receive_H2S# = rnd(100)
   g_COMMPORT_Receive_TempIN# = rnd(100)
   g_COMMPORT_Receive_TempOUT# = rnd(100)
   g_COMMPORT_Receive_LagDepth# = rnd(100)
   g_COMMPORT_Receive_TotalStrokes = rnd(100)

endfunction

function SIMULATE_Serial_Port_SlowINC()

  `This function slowly increments the FLOATS, but keeps none floats as straight lines.

   g_COMMPORT_Receive_HoleDepth# = g_COMMPORT_Receive_HoleDepth# + 0.01
   g_COMMPORT_Receive_BitDepth# = g_COMMPORT_Receive_BitDepth# + 0.02
   g_CALCULATED_Received_ROP# = g_CALCULATED_Received_ROP# + 0.015
   g_COMMPORT_Receive_WOB# = g_COMMPORT_Receive_WOB# + 0.01
   g_COMMPORT_Receive_Hookload = 20
   g_COMMPORT_Receive_RPM = 30
   g_COMMPORT_Receive_Torque# = g_COMMPORT_Receive_Torque# + 0.01
   g_COMMPORT_Receive_TripTank# = g_COMMPORT_Receive_TripTank# + 0.02
   g_COMMPORT_Receive_BlockPosition# = g_COMMPORT_Receive_BlockPosition# + 0.01
   g_COMMPORT_Receive_PVT# = 10
   g_COMMPORT_Receive_PIT1# = 11
   g_COMMPORT_Receive_PIT2# = 12
   g_COMMPORT_Receive_PIT3# = 13
   g_COMMPORT_Receive_PIT4# = 14
   g_COMMPORT_Receive_PIT5# = 15
   g_COMMPORT_Receive_PIT6# = 16
   g_COMMPORT_Receive_PIT7# = 17
   g_COMMPORT_Receive_PIT8# = 18
   g_COMMPORT_Receive_SPP = 30
   g_COMMPORT_Receive_CSG = 40
   g_COMMPORT_Receive_FlowIN = 125
   g_COMMPORT_Receive_FlowOUT# = g_COMMPORT_Receive_FlowOUT# + 0.01
   g_COMMPORT_Receive_SPM1 = 60
   g_COMMPORT_Receive_SPM2 = 65
   g_COMMPORT_Receive_SPM3 = 70
   g_COMMPORT_Receive_TotalGas# = g_COMMPORT_Receive_TotalGas# + 0.02
   g_COMMPORT_Receive_H2S# = 0.01
   g_COMMPORT_Receive_TempIN# = 35
   g_COMMPORT_Receive_TempOUT# = 55
   g_COMMPORT_Receive_LagDepth# = 11205
   g_COMMPORT_Receive_TotalStrokes = 22000

endfunction

function __________MOUNT_HARDDISK_DATABASE_________________________________tx17e1()
endfunction


function MOUNT_ELSE_CREATE_DATABASE()

  local l_DbaseFileExist as integer
  local l_key_state as integer
  local l_calc_pcent# as float
  local l_mouse_state as integer
  
  grab focus
  
  
  `NOTE: At this point, just before loading the Database.dat file if the user is running the program
  `      in the PORTABLE Viewer mode then we override the g_CLIENT_Database_Full_Path$ variable with
  `      the g_PORTABLE_ENG_WindowsBox_OpenFileName$ variable. This makes sure we load the one the
  `      user wants and it isn't reverted at any other point.
  
      if g_PORTABLE_ENG_RunAs_VIEWER = 1 and g_PORTABLE_ENG_WindowsBox_OpenFileName$ <> ""
        g_CLIENT_Database_Full_Path$ = g_PORTABLE_ENG_WindowsBox_OpenFileName$
      endif
  
  
 
  l_key_state = 1
  l_mouse_state = 1
  l_exit_condition = -1
  
  l_DbaseFileExist = file exist(g_CLIENT_Database_Full_Path$)
  if l_DbaseFileExist = 1
    
    `Mount the HD database file and copy it into the system memory database 
    open datafile to read 1, g_CLIENT_Database_Full_Path$
      l_DataFileSize = datafile size(1)
    close datafile 1
    if l_DataFileSize > 0
      `Because the MainDB array is not dimensionalised unless the Client software is in the full
      `mudlogging mode DATABASE_Load_HD_To_MEM_Full_ENGINE() cannot be called in any other mode.
      if g_ENGINE_CoreFunctionType = 2
        DATABASE_Load_HD_To_MEM_Full_ENGINE()
      endif
    endif
    `Load the sync database if it exists
    l_SYNC_Filename$ = g_autodir_full_directory_path$ + "\Database\SyncData.dat"
    if file exist(l_SYNC_Filename$) = 1
      open datafile to read 1, l_SYNC_Filename$
        for read_lp = 1 to g_DATABASE_MEM_Total_Num_Records
          set datafile position 1, read_lp
          if datafile byte(1) = 123
            MEM_MAIN_DATABASE(read_lp).Record_Syncd = 1
            MEM_MAIN_DATABASE(read_lp).Record_Sync_Saved = 1
          endif  
        next read_lp
      close datafile 1
    endif
  else
    `Create the Database file and tell the user
      `[Crash Possible Here] If the Client.txt file is not read properly resulting in an empty
      `g_CLIENT_Database_Filename$ then g_CLIENT_Database_Full_Path$ is false and the program crashes with
      `the error [Runtime Error - File Number 1 is not open at line XXXX - where XXXX is open datafile to write]
      `The Error is handled below.
      if g_CLIENT_Database_Filename$ = ""
        l_ERR_Info1$ = "No Database filename was loaded from Client.txt"
        l_ERR_Fix1$ = "Try closing the program and deleting [Engine Data\Client.txt]"
        lib_ON_ERROR_Handle(l_ERR_Info1$, l_ERR_Fix1$, "", -1)
      endif
    
    g_DATABASE_HD_Total_Num_Records = 0
    g_DATABASE_MEM_Total_Num_Records = 0
    open datafile to write 1, g_CLIENT_Database_Full_Path$
    close datafile 1
    
    l_SYNC_Filename$ = g_autodir_full_directory_path$ + "\Database\SyncData.dat"
    if file exist(l_SYNC_Filename$) = 1
      delete file l_SYNC_Filename$
    endif
    
    repeat
      cls
      d3d_starttext
        wdth_prnt = screen width() * 0.05 : sp = 0
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
        inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  DATABASE FILE CHECK"
        inc sp,19
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Database not found, at path:"
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    " + g_CLIENT_Database_Full_Path$
        inc sp,19
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    - Creating Database file"
        `Confirm that the file was created OK
        if file exist(g_CLIENT_Database_Full_Path$) = 1
          inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    - File check confirmed - Database file found."
        else
          inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    - File check failed, unable to create file."
        endif
        inc sp,19
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Press any key to continue"
        
        `Exit Conditions
        if scancode() = 0 and l_key_state = 1
          l_key_state = -1
        endif
        if mouseclick() = 0 and l_mouse_state = 1
          l_mouse_state = -1
        endif
        if mouseclick() <> 0 and l_mouse_state = -1
          l_exit_condition = 1
        endif
        if scancode() <> 0 and l_key_state = -1
           l_exit_condition = 1
        endif
        if g_CLIENT_InstallInputCoreFunctionType = 1 and file exist(g_CLIENT_Database_Full_Path$) = 1
          l_exit_condition = 1
        endif
        
      d3d_endtext
      sync
    until l_exit_condition = 1
  endif
   
endfunction


function DATABASE_Load_HD_To_MEM_Full_ENGINE()

  local l_Display_Timer as integer : l_Display_Timer = timer() - 20000

  local l_Database_Load_Complete as integer : l_Database_Load_Complete = -1
  local l_load_record_number# as float : l_load_record_number# = -1.0
  local l_LOAD_Rec_Num_INT as integer : l_LOAD_Rec_Num_INT = -1
  local l_calc_pcent# as float
  local l_temp_int1 as integer
  local l_data_position as integer
  local l_PercentFill# as float
  
  local l_ProgBarBox_XPos as integer
  local l_ProgBarBox_YPos as integer
  
  local l_Record_Load_Timer as integer : l_Record_Load_Timer = timer()
  local l_Records_Count_At_Last_Interval as integer
  local l_Avg_Rec_Load_Per_Sec as integer
  
  `Re-enable the escape key just while the database loads so you can quit if you don't want to load the whole thing (i.e. for program testing)
  enable escapekey
  
  open datafile to read 1, g_CLIENT_Database_Full_Path$
  g_DATABASE_HD_Total_Num_Records = (datafile size(1) / c_DATABASE_Bytes_Per_Record)
  
  l_ProgBarBox_XPos = g_ENG_Half_Screen_Width - (image width(c_DB_ProgressBar_Img_BkgdBox) / 2)
  l_ProgBarBox_YPos = g_ENG_Half_Screen_Height - (image height(c_DB_ProgressBar_Img_BkgdBox) / 2)
    
    
    g_DATABASE_MEM_Total_Num_Records = -1
    
    for Load_lp = 0 to g_DATABASE_HD_Total_Num_Records

      `Increase load to system memory counter
      inc l_load_record_number#, 1.0
      inc l_LOAD_Rec_Num_INT, 1

      `Load a database item
      `l_data_position = int(l_load_record_number# * c_DATABASE_Bytes_Per_Record)
      l_data_position = l_LOAD_Rec_Num_INT * c_DATABASE_Bytes_Per_Record
      lib_DATABASE_Read_HD_to_MEM(l_data_position)

      `Calculate Time Remaining
      `if timer() > l_Record_Load_Timer + 1000
      `  l_Records_Load_In_Interval = l_load_record_number# - l_Records_Count_At_Last_Interval
      `  l_Records_Count_At_Last_Interval = l_load_record_number#
      `  l_Record_Load_Timer = timer()
      `endif
    
      `Only update the screen once per time interval to increase loading speed
      if timer() > l_Display_Timer + 200

        l_Display_Timer = timer()

        lib_AtStartUp_PasteDSScreenElmnts_AsBkgd()
        
        paste image c_DB_ProgressBar_Img_BkgdBox, l_ProgBarBox_XPos, l_ProgBarBox_YPos, 1
        
        if g_PORTABLE_ENG_RunAs_VIEWER = -1
          paste image c_DB_ProgressBar_Img_ProgBarMSG, l_ProgBarBox_XPos + 208, l_ProgBarBox_YPos + 30, 1
        endif  
        
        l_PercentFill# = ((Load_lp + 0.0) / (g_DATABASE_HD_Total_Num_Records + 0.0)) * 100
        d3d_progress_bar l_ProgBarBox_XPos + 80, l_ProgBarBox_YPos + 71, 580, 61, 0, 100, l_PercentFill#, c_DB_ProgressBar_Img_ProgBarText
       
      	d3d_starttext
      	
        	d3d_text 4, l_ProgBarBox_XPos + 371, l_ProgBarBox_YPos + 89, 1, str$(l_PercentFill#, 3) + "%", g_ENGINE_COLOUR_White
      	
      	  if g_PORTABLE_ENG_RunAs_VIEWER = 1
      	    d3d_text 4, l_ProgBarBox_XPos + 373, l_ProgBarBox_YPos + 35, 1, "Loading: " + g_PORTABLE_ENG_DispClientDBName$ + ", Please Wait...", g_ENGINE_COLOUR_White
      	  endif
      	
      	d3d_endtext
        
        sync
      
      endif
      
      
      
      `ESC - End Program
	    if lib_INPUT_Keypress(1) = 1 then lib_Exit_Program(-1, 1)
    
    next Load_lp
     
  
  close datafile 1
  
  disable escapekey
  
endfunction



function lib_DATABASE_Read_HD_to_MEM(r_id as integer)

  local l_TempByte1 as byte
  local l_TempByte2 as byte
  local l_TempByte3 as byte
  local l_RecordParityOK as integer : l_RecordParityOK = -1
  local l_Loaded_Arr_Pntr as integer

  set datafile position 1, r_id
  
  l_TempByte1 = datafile byte(1)
  l_TempByte2 = datafile byte(1)
  l_TempByte3 = datafile byte(1)
  
  if l_TempByte1 = 66 and l_TempByte2 = 69 and l_TempByte3 = 78
    l_RecordParityOK = 1
  endif 
  
  l_Loaded_Arr_Pntr = datafile integer(1)
  
  
  if l_Loaded_Arr_Pntr >= 0 and l_Loaded_Arr_Pntr <= g_DATABASE_MaxTotalRecords
  
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).Time$ = datafile string$(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).Date$ = datafile string$(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).Hole_Depth# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).Bit_Depth# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).ROP# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).WOB# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).Hookload = datafile word(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).RPM = datafile word(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).Torque# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).TripTank# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).BlockPosition# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).PVT# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).PIT1# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).PIT2# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).PIT3# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).PIT4# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).PIT5# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).PIT6# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).PIT7# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).PIT8# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).SPP = datafile word(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).FlowIn = datafile word(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).SPM1 = datafile word(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).SPM2 = datafile word(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).SPM3 = datafile word(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).TotalGas# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).H2S# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).TempIN# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).TempOUT# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).Comment$ = datafile string$(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).CSG = datafile word(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).FlowOUT# = datafile float(1)
    MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).Total_Strokes = datafile integer(1)
    
    `Only increase g_DATABASE_MEM_Total_Num_Records if the record has not been loaded before
    `since with non-linear sync records may now be stored on the harddisk multiple times. Records
    `simply use an index - the database does not perform a search or sort every time it receieves a 
    `record from the client. Though it will be rare, indcidencies such as the client being restarted
    `will re-sync small amounts of data already stored in the harddisk database at the server. This
    `check is needed to make sure that loading them twice does not result in the Memory Database (the
    `main database plotted on the screen etc) from thinking it has more records than it does and hence
    `plotting empty records to the screen. 
    if MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).Record_Used = 0
    `and l_RecordParityOK = 1
        MEM_MAIN_DATABASE(l_Loaded_Arr_Pntr).Record_Used = 1
        inc g_DATABASE_MEM_Total_Num_Records, 1
                
    endif
  
  endif
  
endfunction

function lib_CMNDCONSL_Option_CREATE_NEW_WELL()

  if g_CMNDCONSL_ForceSTART_NEW_WELL = 6
    `This is the end state. We enter this state once the Server responds confirming that it has created a 
    `new DB.
    `We wait for 15 seconds in this state so the user can see the completion message. Then we reset
    `all states to the start.
    if timer() > g_CMNDCONSL_ForceSTART_NW_ResetTimer
      g_CMNDCONSL_ForceSTART_NEW_WELL = -1
      g_CMNDCONSL_ForceSTART_NEW_WELL_State$ = ""
    endif
  endif


  if g_CMNDCONSL_ForceSTART_NEW_WELL = 5
    `In step 5 everything has been done locally - we are waiting for the next message from the Server
    `to confirm it has finished on its end and created a new DB at the Server.
  endif
  
  if g_CMNDCONSL_ForceSTART_NEW_WELL = 4
    `Client is connected to the Server, so the request to the Server can be sent.
    if timer() > g_CMNDCONSL_ForceSTART_NEW_WELL_Timer
      g_CMNDCONSL_ForceSTART_NEW_WELL_Timer = timer() + 1000
      lib_AUClient_Server_CreateNewDB()
    endif
  endif

  if g_CMNDCONSL_ForceSTART_NEW_WELL = 3
    `Delete Local Database HD DB
    `--------------------------
    if file exist(g_CLIENT_Database_Full_Path$) = 1
      delete file g_CLIENT_Database_Full_Path$
      if file exist(g_CLIENT_Database_Full_Path$) = 0
        ARS_LOCAL_Add_Report("LOCAL: Harddisk and Memory Databases Deleted", -1)
        g_DATABASE_HD_Total_Num_Records = 0
        g_DATABASE_MEM_Total_Num_Records = 0
      else
        ARS_LOCAL_Add_Report("ERROR: Unable to delete local Harddisk Database", -1)  
      endif
      `
      open datafile to write 1, g_CLIENT_Database_Full_Path$
      close datafile 1
      if file exist(g_CLIENT_Database_Full_Path$) = 1
        ARS_LOCAL_Add_Report("LOCAL: New Harddisk Database Created", -1)
      else
        ARS_LOCAL_Add_Report("ERROR: Unable to create new local Harddisk Database", -1)
      endif
      `
      l_SYNC_Filename$ = g_autodir_full_directory_path$ + "\Database\SyncData.dat"
      if file exist(l_SYNC_Filename$) = 1
        delete file l_SYNC_Filename$
      endif  
        if file exist(l_SYNC_Filename$) = 0
          ARS_LOCAL_Add_Report("LOCAL: SYNC Database Deleted", -1)
          g_ENGINE_Save_SYNC_DB_RecordCounter = 0
          `Reset the sync data in the MEM Database
          for reset_lp = 0 to g_DATABASE_MaxTotalRecords
            MEM_MAIN_DATABASE(reset_lp).Record_Syncd = 0
            MEM_MAIN_DATABASE(reset_lp).Record_Sync_Saved = 0
          next reset_lp
          g_SYNC_Last_Sync_RecNum = 0
        else
          ARS_LOCAL_Add_Report("ERROR: Unable to delete local SYNC Database", -1) 
        endif
      
        
      `Clear a portion of the MEM DB for testing
      lib_Clear_Database_Section()
      g_CMNDCONSL_ForceSTART_NEW_WELL = 4
      `--------------------------  
      if g_server_connected = 1  
        g_CMNDCONSL_ForceSTART_NEW_WELL_State$ = "(New Local Well Created, Contacting Server... Please Wait)"
        ARS_LOCAL_Add_Report("Contacting Server... Please Wait", -1)
        g_CMNDCONSL_ForceSTART_NEW_WELL_Timer = timer() + 500
      else
        g_CMNDCONSL_ForceSTART_NEW_WELL_State$ = "(New Local Well Created, Contacting Server... NO CONNECTION)"
        ARS_LOCAL_Add_Report("ERROR: Unable to Contact Server... NO CONNECTION", -1)
      endif
    else
      g_CMNDCONSL_ForceSTART_NEW_WELL_State$ = "(ERROR: Local Harddisk Database file not found)"
      ARS_LOCAL_Add_Report("ERROR: Local Harddisk Database file not found", -1)
    endif  
  endif

  if g_CMNDCONSL_ForceSTART_NEW_WELL = 2
    `Delete Local Database
    g_CMNDCONSL_ForceSTART_NEW_WELL_State$ = "(Deleting Local Well)"
    g_CMNDCONSL_ForceSTART_NEW_WELL = 3
    ARS_LOCAL_Add_Report("LOCAL: Deleting Local Well", -1)
  endif

  `Set text to delete local DB to show it in the next screen update, then delete in :=2
  if g_CMNDCONSL_ForceSTART_NEW_WELL = 1
    g_CMNDCONSL_ForceSTART_NEW_WELL_State$ = "(Deleting Local Well)"
    g_CMNDCONSL_ForceSTART_NEW_WELL = 2
    `Relock the Unlocked Option
    g_CMNDCONSL_ForceSTART_Unlock = 1
      `Start the ARS (Advanced Report System - Report)
      lib_ARS_Start_New_Report("Start New Well", -1)
      ARS_LOCAL_Add_Report("Start New Well Command > Running", -1)
  endif


endfunction

function lib_Clear_Database_Section()

  `This function is used in conjunction with the deletion of the local HD Database.  It
  `wipes a section of the MEM DB for testing purposes.
  for clear_lp = 0 to 500
    MEM_MAIN_DATABASE(clear_lp).Time$ = ""
    MEM_MAIN_DATABASE(clear_lp).Date$ = ""
    MEM_MAIN_DATABASE(clear_lp).Hole_Depth# = 0
    MEM_MAIN_DATABASE(clear_lp).Bit_Depth# = 0
    MEM_MAIN_DATABASE(clear_lp).ROP# = 0
    MEM_MAIN_DATABASE(clear_lp).WOB# = 0
    MEM_MAIN_DATABASE(clear_lp).Hookload = 0
    MEM_MAIN_DATABASE(clear_lp).RPM = 0
    MEM_MAIN_DATABASE(clear_lp).TripTank# = 0
    MEM_MAIN_DATABASE(clear_lp).BlockPosition# = 0
    MEM_MAIN_DATABASE(clear_lp).PVT# = 0
    MEM_MAIN_DATABASE(clear_lp).PIT1# = 0
    MEM_MAIN_DATABASE(clear_lp).PIT2# = 0
    MEM_MAIN_DATABASE(clear_lp).PIT3# = 0
    MEM_MAIN_DATABASE(clear_lp).PIT4# = 0
    MEM_MAIN_DATABASE(clear_lp).PIT5# = 0
    MEM_MAIN_DATABASE(clear_lp).PIT6# = 0
    MEM_MAIN_DATABASE(clear_lp).PIT7# = 0
    MEM_MAIN_DATABASE(clear_lp).PIT8# = 0
    MEM_MAIN_DATABASE(clear_lp).SPP = 0
    MEM_MAIN_DATABASE(clear_lp).FlowIn = 0
    MEM_MAIN_DATABASE(clear_lp).SPM1 = 0
    MEM_MAIN_DATABASE(clear_lp).SPM2 = 0
    MEM_MAIN_DATABASE(clear_lp).SPM3 = 0
    MEM_MAIN_DATABASE(clear_lp).TotalGas# = 0
    MEM_MAIN_DATABASE(clear_lp).H2S# = 0
    MEM_MAIN_DATABASE(clear_lp).TempIN# = 0.0
    MEM_MAIN_DATABASE(clear_lp).TempOUT# = 0.0
    MEM_MAIN_DATABASE(clear_lp).Comment$ = "00||||||||||||||||||||||||||||"
    MEM_MAIN_DATABASE(clear_lp).CSG = 0
    MEM_MAIN_DATABASE(clear_lp).FlowOUT# = 0.0
    MEM_MAIN_DATABASE(clear_lp).Total_Strokes = 0.0
  next clear_lp
  


endfunction

function lib_AtStartUp_PasteDSScreenElmnts_AsBkgd()

  paste image c_DRILLING_SCREEN_Imgnum_Background, 0, 0
  paste image c_Timebuttons_Strip_Img, 326, 10, 1

endfunction

function __________HARDDISK_DATABASE_________________________________tx17e1()
endfunction


function DATABASE_HD_Add_A_Record(r_Write_MEMDB_Address)

  `r_Write_MEMDB_Address - We need to write the latest MEM DB Rec to the HD. NOT use the total num of
  `                        HD DB records, which is what the prog did originally when MEMDB Recs = HDDB Recs

  `---------------------------------------------------
  
  

  open datafile to update 1, g_CLIENT_Database_Full_Path$
  
    set datafile position 1, (datafile size(1))
  
    `Write Start of record indicator bytes
    write datafile byte 1, 66
    write datafile byte 1, 69
    write datafile byte 1, 78
  
    write datafile integer 1, r_Write_MEMDB_Address
    
    if len(MEM_MAIN_DATABASE(r_Write_MEMDB_Address).Time$) = 8
      write datafile string 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).Time$
    else
      write datafile string 1, "00:00:00"
    endif
    if len(MEM_MAIN_DATABASE(r_Write_MEMDB_Address).Date$) = 8
      write datafile string 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).Date$
    else
      write datafile string 1, "01/01/99"
    endif
    
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).Hole_Depth#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).Bit_Depth#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).ROP#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).WOB#
    write datafile word 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).Hookload
    write datafile word 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).RPM
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).Torque#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).TripTank#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).BlockPosition#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).PVT#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).PIT1#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).PIT2#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).PIT3#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).PIT4#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).PIT5#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).PIT6#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).PIT7#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).PIT8#
    write datafile word 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).SPP
    write datafile word 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).FlowIn
    write datafile word 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).SPM1
    write datafile word 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).SPM2
    write datafile word 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).SPM3
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).TotalGas#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).H2S#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).TempIN#
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).TempOUT#
    
    if len(MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Comment$) = 30
      write datafile string 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).Comment$
    else
      write datafile string 1, "00||||||||||||||||||||||||||||"
    endif
    
    write datafile word 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).CSG
    `Flow OUT added Jan 2019
    write datafile float 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).FlowOUT#
    `Total Strokes added 24/01/19
    write datafile integer 1, MEM_MAIN_DATABASE(r_Write_MEMDB_Address).Total_Strokes
    
    `Total Num HD Recs should be calculated, not just additional like it used to be.
    g_DATABASE_HD_Total_Num_Records = (datafile size(1) / c_DATABASE_Bytes_Per_Record)
    
  close datafile 1
  
endfunction

function DATABASE_HD_Add_A_Record_OLD_DELETE()



  inc g_DATABASE_HD_Total_Num_Records, 1

  open datafile to update 1, g_CLIENT_Database_Full_Path$
  
    set datafile position 1, (datafile size(1))
  
    `Write Start of record indicator bytes
    write datafile byte 1, 66
    write datafile byte 1, 69
    write datafile byte 1, 78
  
    write datafile integer 1, g_DATABASE_HD_Total_Num_Records
    
    if len(MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Time$) = 8
      write datafile string 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Time$
    else
      write datafile string 1, "00:00:00"
    endif
    if len(MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Date$) = 8
      write datafile string 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Date$
    else
      write datafile string 1, "01/01/99"
    endif
    
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Hole_Depth#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Bit_Depth#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).ROP#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).WOB#
    write datafile word 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Hookload
    write datafile word 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).RPM
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Torque#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).TripTank#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).BlockPosition#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).PVT#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).PIT1#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).PIT2#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).PIT3#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).PIT4#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).PIT5#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).PIT6#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).PIT7#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).PIT8#
    write datafile word 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).SPP
    write datafile word 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).FlowIn
    write datafile word 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).SPM1
    write datafile word 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).SPM2
    write datafile word 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).SPM3
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).TotalGas#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).H2S#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).TempIN#
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).TempOUT#
    
    if len(MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Comment$) = 30
      write datafile string 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Comment$
    else
      write datafile string 1, "00||||||||||||||||||||||||||||"
    endif
    
    write datafile word 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).CSG
    `Flow OUT added Jan 2019
    write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).FlowOUT#
    `Total Strokes added 24/01/19
    write datafile integer 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Total_Strokes
    
  close datafile 1
  
endfunction

function lib_AUClient_ToggleNetworkUnits()

  `Toggle Network Units.
  `  This works by changing the local units and, if connected, asking the server to change its units.
  `  The server will then send its new, swapped over, units back, which will overwrite the 
  `  local units. This means that the client and the server will be synced, but means the
  `  local units can still be changed.

  `Units - 1=ft, 2=m
  if g_ENGINE_UNITS_FT_or_M = 1
    g_ENGINE_UNITS_FT_or_M = 2
  else
    g_ENGINE_UNITS_FT_or_M = 1
  endif
  
  `CREATE_Engine_Setup()
  SAVE_Engine_Setup()

  if g_server_connected = 1
    net send 0
      net put long 610
      net put long 13766
    net send
  endif
  

endfunction

function lib_AUClient_Server_CreateNewDB()

  net send 0
    net put long 630
    net put long 27181
  net send

endfunction

function lib_AUClient_RECREATE_HD_Database(r_RDB_ClientID)

  local l_TempDataBase$ as string
  local l_Check_Integrity as integer
  l_TempDataBase$ = g_autodir_full_directory_path$ + "\Database\TempDB.tmp"

  `1) If the temporary database exists then delete it.
    if file exist(l_TempDataBase$) = 1
      delete file l_TempDataBase$
    endif
      if file exist(l_TempDataBase$) = 0
        if r_RDB_ClientID <> -9999
          lib_ARS_RelayToClientID_SendReport("AU CLIENT: HD Database file deleted", r_RDB_ClientID)
        else
          ARS_LOCAL_Add_Report("LOCAL: HD Database file deleted", -1)
        endif
      else
        if r_RDB_ClientID <> -9999
          lib_ARS_RelayToClientID_SendReport("AU CLIENT> ERROR: Unable to delete HD Database file", r_RDB_ClientID)
        else
          ARS_LOCAL_Add_Report("LOCAL> ERROR: Unable to delete HD Database file", -1)
        endif
      endif
    
    `NEEDS TO HANDLE THE SYNC DATA FILE AS WELL!!!! DELETE?????

  `2) Create the New Database File
    open datafile to write 1, l_TempDataBase$
    close datafile 1
    if file exist(l_TempDataBase$) = 1
      if r_RDB_ClientID <> -9999
        lib_ARS_RelayToClientID_SendReport("LOCAL: New HD Datbase file created", r_RDB_ClientID)
        lib_MESSAGE_AUClient_Relay_To_ClientID(r_RDB_ClientID, "AU CLIENT: New HD Database file created")
      else  
        ARS_LOCAL_Add_Report("LOCAL: New HD Database file created", -1)
      endif
    endif


    `g_DATABASE_HD_Total_Num_Records = 0
    
    l_Check_Integrity = -1
    open datafile to update 1, l_TempDataBase$
      for write_lp = 1 to g_DATABASE_MEM_Total_Num_Records
      
        set datafile position 1, (datafile size(1))
        
    		write datafile byte 1, 66
    		write datafile byte 1, 69
    		write datafile byte 1, 78
      
        write datafile integer 1, write_lp
        
        if len(MEM_MAIN_DATABASE(write_lp).Time$) = 8
          write datafile string 1, MEM_MAIN_DATABASE(write_lp).Time$
        else
          write datafile string 1, "00:00:00"
        endif
        if len(MEM_MAIN_DATABASE(write_lp).Date$) = 8
          write datafile string 1, MEM_MAIN_DATABASE(write_lp).Date$
        else
          write datafile string 1, "01/01/99"
        endif
        
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).Hole_Depth#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).Bit_Depth#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).ROP#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).WOB#
        write datafile word 1, MEM_MAIN_DATABASE(write_lp).Hookload
        write datafile word 1, MEM_MAIN_DATABASE(write_lp).RPM
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).Torque#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).TripTank#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).BlockPosition#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).PVT#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).PIT1#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).PIT2#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).PIT3#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).PIT4#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).PIT5#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).PIT6#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).PIT7#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).PIT8#
        write datafile word 1, MEM_MAIN_DATABASE(write_lp).SPP
        write datafile word 1, MEM_MAIN_DATABASE(write_lp).FlowIn
        write datafile word 1, MEM_MAIN_DATABASE(write_lp).SPM1
        write datafile word 1, MEM_MAIN_DATABASE(write_lp).SPM2
        write datafile word 1, MEM_MAIN_DATABASE(write_lp).SPM3
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).TotalGas#
        write datafile float 1, MEM_MAIN_DATABASE(write_lp).H2S#
    		write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).H2S#
    		write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).TempIN#
    		write datafile float 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).TempOUT#
    		
    		if len(MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Comment$) = 30
      		write datafile string 1, MEM_MAIN_DATABASE(g_DATABASE_HD_Total_Num_Records).Comment$
    		else
      		write datafile string 1, "00||||||||||||||||||||||||||||"
    		endif
    		
    		write datafile word 1, MEM_MAIN_DATABASE(write_lp).CSG
    		`Flow OUT Added Jan 2019
    		write datafile float 1, MEM_MAIN_DATABASE(write_lp).FlowOUT#
       `Total Strokes added 24/01/19
        write datafile integer 1, MEM_MAIN_DATABASE(write_lp).Total_Strokes
    		
      next write_lp
           
           
      `Check the file integrity vs g_DATABASE_MEM_Total_Num_Records
      if (datafile size(1) / c_DATABASE_Bytes_Per_Record) = g_DATABASE_MEM_Total_Num_Records
        l_Check_Integrity = 1
        g_DATABASE_HD_Total_Num_Records = g_DATABASE_MEM_Total_Num_Records
      else
        l_CheckFailData_NumMEMRecs = g_DATABASE_MEM_Total_Num_Records
        l_CheckFailData_DataFileSize = datafile size(1)
        l_CheckFailData_CalcNumRecsInNewFile# = (datafile size(1) / c_DATABASE_Bytes_Per_Record)

      endif
      
    close datafile 1
    
    `If the file integrity was confirmed then delete the old Local HD DB, and align the new temp one
    if l_Check_Integrity = 1
      `Double check that both the Main HD Database file and the replacement TempDB.tmp exist
      if file exist(l_TempDataBase$) = 1
        if file exist(g_CLIENT_Database_Full_Path$) = 1
          `Delete the main HD Database file
          delete file g_CLIENT_Database_Full_Path$
          `Rename the TempDB.tmp file as the main Local HD Database file
          rename file l_TempDataBase$, g_CLIENT_Database_Full_Path$
            if r_RDB_ClientID <> -9999
              `Send failure message back to client via the server
              l_BuildStr$ = "Format AUTH CLIENT HD Database: Complete."
              lib_MESSAGE_AUClient_Relay_To_ClientID(r_RDB_ClientID, l_BuildStr$)
              lib_ARS_RelayToClientID_ReportandComplete("AU CLIENT: HD Database recreated. Integrity check - OK", r_RDB_ClientID)
            else
              `Report to the user
              lib_Activate_CMNDCON_CmndInfo("LOCAL HD Database recreated: Complete")
              ARS_LOCAL_Add_Report_and_Complete("LOCAL: HD Database recreated. Integrity check - OK", -1)
            endif
        endif
      endif
    else
      `Integrity Check Failed
      if r_RDB_ClientID <> -9999
        `Send failure message back to client via the server
        l_BuildStr$ = "Format AUTH CLIENT HD Database: ERROR: New DB File File-Check Failed."
        lib_MESSAGE_AUClient_Relay_To_ClientID(r_RDB_ClientID, l_BuildStr$)
        lib_ARS_RelayToClientID_ReportandComplete("AU CLIENT: ERROR: New HD DB Integrity Check - Failed", r_RDB_ClientID)
      else
        `Report to the user that the operation failed
        lib_Activate_CMNDCON_CmndInfo("Format LOCAL HD Database: ERROR: New DB Filecheck Failed")
        ARS_LOCAL_Add_Report_and_Complete("Format LOCAL HD Database: ERROR: New DB Filecheck Failed", -1) 
        l_ErrorData_1$ = "ERR DAT> Num MEM Records: " + str$(l_CheckFailData_NumMEMRecs)
        l_ErrorData_2$ = "ERR DAT> Datafile Size: " + str$(l_CheckFailData_DataFileSize)
        l_ErrorData_3$ = "ERR DAT> Calc Num Records in file: " + str$(l_CheckFailData_CalcNumRecsInNewFile#)
        ARS_LOCAL_Add_Report_and_Complete(l_ErrorData_1$, -1)
        ARS_LOCAL_Add_Report_and_Complete(l_ErrorData_2$, -1)
        ARS_LOCAL_Add_Report_and_Complete(l_ErrorData_3$, -1)
      endif
    endif

endfunction

function lib_LOG_FILE_Backup_Information(r_WriteStr$)

  local l_LOGFILE_Filename$ as string

  `This function handles the BACKUP INFORMATION LOG file.
  
  l_LOGFILE_Filename$ = g_autodir_full_directory_path$ + "\Database\Backup_Log.txt"  
  
  `1. Ensure file exists
  	if file exist(l_LOGFILE_Filename$) = 0
    	open datafile to write 1, l_LOGFILE_Filename$
    	close datafile 1
  	endif

  `2. Add to file  
    
    open datafile to append 1, l_LOGFILE_Filename$
    
    	if r_WriteStr$ <> ""
      	write datafile string 1, r_WriteStr$
    	else
      	write datafile string 1, "ERR: Function received no data to write"
    	endif
    	
    close datafile 1 	

endfunction


function __________MEMORY_DATABASE________________________________tx17e1()
endfunction

function DATABASE_MEM_ENGINE()

  local l_Add_MEMDB_Address_To_HD as integer

  `Create new record ever 4 seconds.
  if g_TIMER_1 > g_DATABASE_MEM_Make_New_Record_Timer + c_DATABASE_MEM_CreateRecordInterval
    g_DATABASE_MEM_Make_New_Record_Timer = g_TIMER_1
    
    `1. Create a new MEM DB record
      DATABASE_MEM_Add_A_Record()
    `2. Add the new MEM DB Record to the end of the HD DB file  
      l_Add_MEMDB_Address_To_HD = g_DATABASE_MEM_Total_Num_Records
      DATABASE_HD_Add_A_Record(l_Add_MEMDB_Address_To_HD) : `Write latest MEM DB Rec to the HD DB
      
    `If a record has been added and the user is watching the Graphical Display then
    `the graphical display Chart Plot images will need updating
    if g_MAIN_SCREEN_TYPE = 1000
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1
        ENGINE_DS_CHART_IMAGE_Creation()
        lib_INFOBOX_HighlightArea_Update(1)
      endif
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3
        ENGINE_PITS_CHART_IMAGE_Creation()
        lib_INFOBOX_HighlightArea_Update(2)
      endif
    endif
  endif

endfunction

function DATABASE_MEM_Add_A_Record()

    g_MEMDB_LastRecord_Time$ = get time$()

    inc g_DATABASE_MEM_Total_Num_Records, 1 : `here 2 delete comment

    `NOTE: These are the old variables, which worked fine for year, from before the code update to
    `      only save the maximum WITS value received per 4 second interval. I.e. from before the
    `      RT DISPLAY VALUES g_COMMPORT_Receive_ were separated from the MEM DB store variables of
    `      g_COMMPORT_Receive_StoreToMEMDB_
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Time$ = get time$()
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Date$ = get date$()
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Hole_Depth# = g_COMMPORT_Receive_HoleDepth#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Bit_Depth# = g_COMMPORT_Receive_BitDepth#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).ROP# = g_CALCULATED_Received_ROP#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).WOB# = g_COMMPORT_Receive_WOB#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Hookload = g_COMMPORT_Receive_Hookload
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).RPM = g_COMMPORT_Receive_RPM
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Torque# = g_COMMPORT_Receive_Torque#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).TripTank# = g_COMMPORT_Receive_TripTank#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).BlockPosition# = g_COMMPORT_Receive_BlockPosition#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PVT# = g_COMMPORT_Receive_PVT#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT1# = g_COMMPORT_Receive_PIT1#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT2# = g_COMMPORT_Receive_PIT2#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT3# = g_COMMPORT_Receive_PIT3#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT4# = g_COMMPORT_Receive_PIT4#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT5# = g_COMMPORT_Receive_PIT5#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT6# = g_COMMPORT_Receive_PIT6#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT7# = g_COMMPORT_Receive_PIT7#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT8# = g_COMMPORT_Receive_PIT8#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).SPP = g_COMMPORT_Receive_SPP
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).FlowIn = g_COMMPORT_Receive_FlowIN
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).SPM1 = g_COMMPORT_Receive_SPM1
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).SPM2 = g_COMMPORT_Receive_SPM2
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).SPM3 = g_COMMPORT_Receive_SPM3
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).TotalGas# = g_COMMPORT_Receive_TotalGas#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).H2S# = g_COMMPORT_Receive_H2S#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).TotalGas# = g_COMMPORT_Receive_TotalGas#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).H2S# = g_COMMPORT_Receive_H2S#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).TempIN# = g_COMMPORT_Receive_TempIN#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).TempOUT# = g_COMMPORT_Receive_TempOUT#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Comment$ = "00||||||||||||||||||||||||||||"
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).CSG = g_COMMPORT_Receive_CSG
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).FlowOUT# = g_COMMPORT_Receive_FlowOUT#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Total_Strokes = g_COMMPORT_Receive_TotalStrokes

    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Time$ = get time$()
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Date$ = get date$()
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Hole_Depth# = g_COMMPORT_Receive_HoleDepth#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Bit_Depth# = g_COMMPORT_Receive_BitDepth#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).ROP# = g_CALCULATED_Received_ROP#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).WOB# = g_COMMPORT_Receive_WOB#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Hookload = g_COMMPORT_Receive_StoreToMEMDB_Hookload
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).RPM = g_COMMPORT_Receive_RPM
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Torque# = g_COMMPORT_Receive_Torque#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).TripTank# = g_COMMPORT_Receive_TripTank#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).BlockPosition# = g_COMMPORT_Receive_BlockPosition#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PVT# = g_COMMPORT_Receive_PVT#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT1# = g_COMMPORT_Receive_PIT1#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT2# = g_COMMPORT_Receive_PIT2#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT3# = g_COMMPORT_Receive_PIT3#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT4# = g_COMMPORT_Receive_PIT4#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT5# = g_COMMPORT_Receive_PIT5#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT6# = g_COMMPORT_Receive_PIT6#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT7# = g_COMMPORT_Receive_PIT7#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).PIT8# = g_COMMPORT_Receive_PIT8#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).SPP = g_COMMPORT_Receive_StoreToMEMDB_SPP
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).FlowIn = g_COMMPORT_Receive_FlowIN
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).SPM1 = g_COMMPORT_Receive_SPM1
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).SPM2 = g_COMMPORT_Receive_SPM2
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).SPM3 = g_COMMPORT_Receive_SPM3
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).TotalGas# = g_COMMPORT_Receive_TotalGas#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).H2S# = g_COMMPORT_Receive_H2S#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).TotalGas# = g_COMMPORT_Receive_TotalGas#
    `MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).H2S# = g_COMMPORT_Receive_H2S#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).TempIN# = g_COMMPORT_Receive_TempIN#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).TempOUT# = g_COMMPORT_Receive_TempOUT#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Comment$ = "00||||||||||||||||||||||||||||"
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).CSG = g_COMMPORT_Receive_CSG
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).FlowOUT# = g_COMMPORT_Receive_FlowOUT#
    MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Total_Strokes = g_COMMPORT_Receive_TotalStrokes

    `Note: A new record is created in memory every 4 seconds. Need to ensure this uses the maximum
    `      value received in that 4 second interval. To do this an 'Only IF >' logic is used in
    `      the Kernel32_WITS_String_HANDLE() function g_COMMPORT_Receive_StoreToMEMDB_ receieve variables.
    `      Therefore when the new MEM DB record is created we set the variables to a extreme low/NULL
    `      value so any WITS value received after is larger and the latest max WITS value is stored
    `      for the next MEM DB record creation.
    `      We had to use a new variable g_COMMPORT_Receive_StoreToMEMDB_ instead of the normal
    `      processed g_COMMPORT_Receive_ WITS variable as otherwise you see the low/NULL values
    `      displayed on the screen and the screen values end up flashing the low/NULL value.
   		`g_COMMPORT_Receive_StoreToMEMDB_HoleDepth# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_BitDepth# = -999999.99
   		`g_CALCULATED_Received_ROP# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_WOB# = -999999.99
   		g_COMMPORT_Receive_StoreToMEMDB_Hookload = 0
   		`g_COMMPORT_Receive_StoreToMEMDB_RPM = 0
   		`g_COMMPORT_Receive_StoreToMEMDB_Torque# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_TripTank# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_BlockPosition# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_PVT# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_Pit1# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_Pit2# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_Pit3# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_Pit4# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_Pit5# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_Pit6# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_Pit7# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_Pit8# = -999999.99
   		g_COMMPORT_Receive_StoreToMEMDB_SPP = 0
   		`g_COMMPORT_Receive_StoreToMEMDB_CSG = 0
   		`g_COMMPORT_Receive_StoreToMEMDB_FlowIN = 0
   		`g_COMMPORT_Receive_StoreToMEMDB_FlowOUT# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_SPM1 = 0
   		`g_COMMPORT_Receive_StoreToMEMDB_SPM2 = 0
   		`g_COMMPORT_Receive_StoreToMEMDB_SPM3 = 0
   		`g_COMMPORT_Receive_StoreToMEMDB_TotalGas# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_H2S# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_TempIN# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_TempOUT# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_LagDepth# = -999999.99
   		`g_COMMPORT_Receive_StoreToMEMDB_TotalStrokes = -999999
   		
   		
   `HANDLE CLIENT > SERVER additon of a new record.
     `1. The new record is added above to the Client MEM BD
     `   Now this CLIENT and the SERVER are out of sync
     
     `2. SHIFT the Client SYNC DB and clear the last record (900)
       for shift_SYNC_DB_lp = 1 to 899
         SIMPLE_SERVER_SYNC_ARRAY(1, shift_SYNC_DB_lp).MEM_DB_ArrPos = SIMPLE_SERVER_SYNC_ARRAY(1, shift_SYNC_DB_lp + 1).MEM_DB_ArrPos
         SIMPLE_SERVER_SYNC_ARRAY(1, shift_SYNC_DB_lp).Record_Syncd = SIMPLE_SERVER_SYNC_ARRAY(1, shift_SYNC_DB_lp + 1).Record_Syncd
       next shift_SYNC_DB_lp
         SIMPLE_SERVER_SYNC_ARRAY(1, 900).MEM_DB_ArrPos = g_DATABASE_MEM_Total_Num_Records
         SIMPLE_SERVER_SYNC_ARRAY(1, 900).Record_Syncd = -1
         
      `3. Command the Server to SHIFT its database too, so this CLIENT and the SERVER database
      `   array positions are in sync with each other.
    		net send 0
    		net put long 68611007
    		net send
    		inc g_ENG_DataTransfer_Total, 2048

      `4. Stop syncing with the SERVER until a reply (68611008) has been received confirming that it has shifted
      `   its database in the same way, or the timer runs out (when things continue, but will be out of sync)
        g_SIMPLE_SERVER_SYNC_TransmitTimer = timer() + c_SIMPLE_SERVER_SYNC_Timeout


   		 
   		
   `Simple Server SYNC Database
   `This code adds the new MEM Record to SYNC with the Server.
//   	if g_server_connected = 1
//   	
//     		for set_lp_A = 1 to 899
//       		SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A).MEM_DB_ArrPos = SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A + 1).MEM_DB_ArrPos
//       		SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A).Record_Syncd = SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A + 1).Record_Syncd
//     		next set_lp_A
// 
//     		net send 0
//     		net put long 68611007
//     		net put byte 101
//     		net send
//     		inc g_ENG_DataTransfer_Total, 2048
// 
//   	endif
   		

endfunction


function lib_Database_MEM_WriteHDBackup(r_FunctionCalledFrom$)

  `BACKUP From: RCM RT Menu - Write MEM DB Write

  `This function is used from the RCM RT Menu to create a brand new backup file directly
  `from the MEM DB.
  `The prog originally just backed up the DB using 'copy' of database.dat
  `This was a bad idea as database.dat could contain errors, so this creates a second backup
  `file of the MEM DB just in case and because its a good idea to give a simple option to do
  `this from the RCM menus.
  
  local l_day$ as string : local l_month$ as string : local l_year$ as string
  local l_hours$ as string : local l_minutes$ as string : local l_date$ as string
  local l_time$ as string

  local l_TempDataBase$ as string

  local l_ProgBarBox_XPos as integer  
  local l_ProgBarBox_YPos as integer
  local l_Display_Timer as integer : l_Display_Timer = timer() - 20000
  local l_PercentFill# as float
  
  local l_filename$ as string
  local l_dest$ as string
  
  local l_Check_Integrity as integer
  
  local l_ProgBarBox_XPos as integer
  local l_ProgBarBox_YPos as integer
  
  local l_TempDataBase$ as string
  
  local l_LogFileBuildStr$ as string
  local l_MEMDB_WriteFile_FileSize as integer
  local l_MEMDB_WriteFile_TotalRecords as integer
  
  local l_TIMER_WriteFunction_Start as integer
  local l_TIMER_WriteFunction_End as integer
  local l_TIMER_WriteFunction_TTL as integer
  local l_TIMER_WriteFunction_TTL_Secs# as float
  
   
  
  l_ProgBarBox_XPos = g_ENG_Half_Screen_Width - (image width(c_DB_ProgressBar_Img_BkgdBox) / 2)
  l_ProgBarBox_YPos = g_ENG_Half_Screen_Height - (image height(c_DB_ProgressBar_Img_BkgdBox) / 2)
  

  `----------------------------------------------------------------------------------------

  lib_LOG_FILE_Backup_Information("  > ** NEW MEM DB WRITE (Full Write of the MEM DB) **")
  lib_LOG_FILE_Backup_Information("  > " + r_FunctionCalledFrom$)
  l_LogFileBuildStr$ = "  > Main Loop from 1 to " + str$(g_DATABASE_MEM_Total_Num_Records)
  lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
  l_LogFileBuildStr$ = "  > Variable: g_DATABASE_MEM_Total_Num_Records: " + str$(g_DATABASE_MEM_Total_Num_Records)
  lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)

  `1) Generate Filename
    l_day$ = right$(left$(get date$(), 5), 2)
    l_month$ = left$(get date$(), 2)
    l_year$ =  right$(get date$(), 2)
    l_hours$ = left$(get time$(), 2)
    l_minutes$ = right$(left$(get time$(), 5), 2)
    l_date$  = l_day$ + l_month$ + l_year$
    l_time$ = l_hours$ + l_minutes$
    
    l_filename$ = "BackupDB_" + l_date$ + "_" + l_time$ + "_From_MEMDB" + ".dat"
    `OLD: Delete: l_dest$ = g_autodir_full_directory_path$ + "\Database\" + l_filename$
    l_dest$ = g_autodir_full_directory_path$ + "\Database\DB Backups\" + l_filename$
    
    `g_RCM_G1_MSGBOX_BkUpPath_FilenamePart$ = f_filenamePart$
    `g_RCM_G1_MSGBOX_BkUpFilename$ = l_filename$
    `g_RCM_G1_MSGBOX_BkUpPath$ = g_autodir_full_directory_path$ + "\Database\"
    `g_RCM_G1_MSGBOX_BkUpPath_Filename$ = l_dest$
    
    
    `Files used to be stored in the main/root DB Folder
      `l_TempDataBase$ = g_autodir_full_directory_path$ + "\Database\" + l_filename$
    `Now they are stored in a separate DB folder in the main/root DB Folder
      l_TempDataBase$ = g_autodir_full_directory_path$ + "\Database\DB Backups\" + l_filename$
  

  `2) If the temporary database exists then delete it.
    if file exist(l_TempDataBase$) = 1
      delete file l_TempDataBase$
    endif

  `3) Create the New Database File
    open datafile to write 1, l_TempDataBase$
    close datafile 1

  l_TIMER_WriteFunction_Start = timer()    

  l_Check_Integrity = -1
  open datafile to update 1, l_TempDataBase$

    for Save_lp = 1 to g_DATABASE_MEM_Total_Num_Records

        set datafile position 1, (datafile size(1))
        
        `Write Start of record indicator bytes
    		write datafile byte 1, 66
    		write datafile byte 1, 69
    		write datafile byte 1, 78
      
        write datafile integer 1, Save_lp
        
        if len(MEM_MAIN_DATABASE(Save_lp).Time$) = 8
          write datafile string 1, MEM_MAIN_DATABASE(Save_lp).Time$
        else
          write datafile string 1, "00:00:00"
        endif
        if len(MEM_MAIN_DATABASE(Save_lp).Date$) = 8
          write datafile string 1, MEM_MAIN_DATABASE(Save_lp).Date$
        else
          write datafile string 1, "01/01/99"
        endif
        
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).Hole_Depth#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).Bit_Depth#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).ROP#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).WOB#
        write datafile word 1, MEM_MAIN_DATABASE(Save_lp).Hookload
        write datafile word 1, MEM_MAIN_DATABASE(Save_lp).RPM
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).Torque#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).TripTank#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).BlockPosition#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).PVT#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).PIT1#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).PIT2#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).PIT3#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).PIT4#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).PIT5#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).PIT6#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).PIT7#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).PIT8#
        write datafile word 1, MEM_MAIN_DATABASE(Save_lp).SPP
        write datafile word 1, MEM_MAIN_DATABASE(Save_lp).FlowIn
        write datafile word 1, MEM_MAIN_DATABASE(Save_lp).SPM1
        write datafile word 1, MEM_MAIN_DATABASE(Save_lp).SPM2
        write datafile word 1, MEM_MAIN_DATABASE(Save_lp).SPM3
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).TotalGas#
        write datafile float 1, MEM_MAIN_DATABASE(Save_lp).H2S#
    		write datafile float 1, MEM_MAIN_DATABASE(Save_lp).TempIN#
    		write datafile float 1, MEM_MAIN_DATABASE(Save_lp).TempOUT#
    		
    		if len(MEM_MAIN_DATABASE(Save_lp).Comment$) = 30
      		write datafile string 1, MEM_MAIN_DATABASE(Save_lp).Comment$
    		else
      		write datafile string 1, "00||||||||||||||||||||||||||||"
    		endif
    		
    		write datafile word 1, MEM_MAIN_DATABASE(Save_lp).CSG
    		`Flow OUT Added Jan 2019
    		write datafile float 1, MEM_MAIN_DATABASE(Save_lp).FlowOUT#
       `Total Strokes added 24/01/19
        write datafile integer 1, MEM_MAIN_DATABASE(Save_lp).Total_Strokes
    		



      `Only update the screen once per time interval to increase loading speed
      if timer() > l_Display_Timer + 333

        l_Display_Timer = timer()

        
        `Update the Screen graphics so that the screen isn't missing half its graphics when the save box runs/displays
        lib_DB_MEM_WriteHDBkup_UpdateRTGraphics()
        
        
        paste image c_DB_ProgressBar_Img_BkgdBox, l_ProgBarBox_XPos, l_ProgBarBox_YPos, 1
               
        l_PercentFill# = ((Save_lp + 0.0) / (g_DATABASE_MEM_Total_Num_Records + 0.0)) * 100
        d3d_progress_bar l_ProgBarBox_XPos + 80, l_ProgBarBox_YPos + 71, 580, 61, 0, 100, l_PercentFill#, c_DB_ProgressBar_Img_ProgBarText
       
      	d3d_starttext
      	
        	d3d_text 7, l_ProgBarBox_XPos + 371, l_ProgBarBox_YPos + 89, 1, str$(l_PercentFill#, 3) + "%", g_ENGINE_COLOUR_White
      	
      	  d3d_text 7, l_ProgBarBox_XPos + 373, l_ProgBarBox_YPos + 35, 1, "Saving Files. Please Wait...", g_ENGINE_COLOUR_White
      	
      	d3d_endtext
        

        
        sync : `Note: This sync needs to be here, else the save graphic won't display.
      
      endif
       
    next Save_lp

  close datafile 1
  
  l_TIMER_WriteFunction_End = timer()
  
  l_TIMER_WriteFunction_TTL = l_TIMER_WriteFunction_End - l_TIMER_WriteFunction_Start
  l_TIMER_WriteFunction_TTL_Secs# = (l_TIMER_WriteFunction_TTL / 1000.0) + 0.0
 
  
  l_LogFileBuildStr$ = "  > Filename: " + l_filename$
  lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
  
  l_MEMDB_WriteFile_FileSize = file size(l_TempDataBase$)
  l_LogFileBuildStr$ = "  > File Size: " + str$(l_MEMDB_WriteFile_FileSize) + "KB"
  lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
  
  l_MEMDB_WriteFile_TotalRecords = l_MEMDB_WriteFile_FileSize / c_DATABASE_Bytes_Per_Record
  l_LogFileBuildStr$ = "  > Total Records: " + str$(l_MEMDB_WriteFile_TotalRecords)
  lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)

  l_LogFileBuildStr$ = "  > Total Time To Write MEM DB to the HD: " + str$(l_TIMER_WriteFunction_TTL_Secs#, 2) + " seconds (" + str$(l_TIMER_WriteFunction_TTL) + "ms)"
  lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
  
  lib_LOG_FILE_Backup_Information("*")
  
  `Integrity check and message
  if file exist(l_TempDataBase$) = 1
    g_MSE_RGHTCLICKMENU_MSGBOX_Message2$ = "> Successful (MEM DB WRITE to File: Created)"
  else
    g_MSE_RGHTCLICKMENU_MSGBOX_Message2$ = "> ERROR: MEM DB > Database Backup Failed"
  endif
  

  `----------------------------------------------------------------------------------------


endfunction


function lib_DB_MEM_WriteHDBkup_UpdateRTGraphics()

  `Note: This is a special graphics function used by the Backup: Write MEM DB function above
  `      to add the graphical elements to the screen that otherwise disappear during the Backup
  `      save/progress box display.
  
  
  `STILL NEED CHARTS, COMMENTS, EVERYTHING IN THE BOTTOM BIT
  
  
  `Display the CHART BLOCK 3 OR 4 CHANNELS IN BLOCK Background Image
    `Widescreen DS Screen
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1
        paste image c_DRILLING_SCREEN_Imgnum_Background, 0, 0
        
    		if image exist(c_CHT_PLOT_Img_Block1) = 1
      		paste image c_CHT_PLOT_Img_Block1, 10, 197
    		endif
    		if image exist(c_CHT_PLOT_Img_Block2) = 1
      		paste image c_CHT_PLOT_Img_Block2, 384, 197
    		endif
    		if image exist(c_CHT_PLOT_Img_Block3) = 1
      		paste image c_CHT_PLOT_Img_Block3, 699, 197
    		endif   
        
        lib_CHANNEL_ID_PrintChannel_NAMES(1)
        `Block 1
          if g_DS_SCREEN_Block1_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 52, 4
          if g_DS_SCREEN_Block1_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 52, 4
        `Block 2
          if g_DS_SCREEN_Block2_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 422, 4
          if g_DS_SCREEN_Block2_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 422, 4
        `Block 3
          if g_DS_SCREEN_Block3_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 745, 4
          if g_DS_SCREEN_Block3_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 745, 4
          
        lib_CHANNEL_ID_PrintChannel_NAMES(1)
        lib_CHANNEL_ID_PrintChannel_RTValues(1)
        lib_CHANNEL_ID_PrintChannel_RANGES(1)
        lib_Disp_RT_DS_TimePeriod_Buttons()
        
        
    		if g_ENGINE_Screen_Resolution = 1
      		lib_CHANNEL_ID_PrintChannel_ChartDivs(1, 1) :`(r_ScreenResolution as integer, r_ScreenType as integer)
    		else
      		lib_CHANNEL_ID_PrintChannel_ChartDivs(2, 1)
    		endif
          
      endif
    `Widescreen PITS Screen
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3
        paste image c_PITS_SCREEN_Imgnum_Background, 0, 0
        
    		if image exist(c_CHT_PLOT_Img_Block1) = 1
      		paste image c_CHT_PLOT_Img_Block1, 10, 197
    		endif
    		if image exist(c_CHT_PLOT_Img_Block2) = 1
      		paste image c_CHT_PLOT_Img_Block2, 384, 197
    		endif
    		if image exist(c_CHT_PLOT_Img_Block3) = 1
      		paste image c_CHT_PLOT_Img_Block3, 699, 197
    		endif
    		if image exist(c_CHT_PLOT_Img_Block4) = 1
      		paste image c_CHT_PLOT_Img_Block4, 1014, 197
    		endif
        
        
        `Block 1
          if g_PITS_SCREEN_Block1_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 52, 4
          if g_PITS_SCREEN_Block1_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 52, 4
        `Block 2
          if g_PITS_SCREEN_Block2_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 422, 4
          if g_PITS_SCREEN_Block2_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 422, 4
        `Block 3
          if g_PITS_SCREEN_Block3_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 745, 4
          if g_PITS_SCREEN_Block3_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 745, 4
        `Block 4
          if g_PITS_SCREEN_Block4_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 1060, 4
          if g_PITS_SCREEN_Block4_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 1060, 4
          
        lib_CHANNEL_ID_PrintChannel_NAMES(2)
        lib_CHANNEL_ID_PrintChannel_RTValues(2)
        lib_CHANNEL_ID_PrintChannel_RANGES(2)
        lib_Disp_RT_PITS_TimePeriod_Buttons()
          
    		if g_ENGINE_Screen_Resolution = 1
      		lib_CHANNEL_ID_PrintChannel_ChartDivs(1, 2) :`(r_ScreenResolution as integer, r_ScreenType as integer)
    		else
      		lib_CHANNEL_ID_PrintChannel_ChartDivs(2, 2)
    		endif
          
      endif
  
  
    lib_Disp_RT_CF2_PLOT_TIME()
  

    d3d_starttext
    	`Display the hole depth
    	d3d_text 5, g_DISPLAY_HOLE_DEPTH_x, g_DISPLAY_HOLE_DEPTH_y, 1, str$(g_COMMPORT_Receive_HoleDepth#, 1), g_ENGINE_COLOUR_Green
    d3d_endtext

  

  


endfunction


function __________SYNC_COMMANDS______________________________________tx17589F1()
endfunction

function SIMPLE_SERVER_SYNC_ENGINE()


  if g_SIMPLE_SERVER_SYNC_ARR_Transmit_Toggle = 1
  
    if timer() > g_SIMPLE_SERVER_SYNC_TransmitTimer
      g_SIMPLE_SERVER_SYNC_TransmitTimer = timer() + c_SIMPLE_SERVER_SYNC_CheckInterval
      lib_SimpSer_TRANSMIT_PACKET__FULL_15()
    endif
  
  endif


endfunction


function lib_SimpSer_TRANSMIT_PACKET__FULL_15()

  local l_Exit_lp as integer
  local l_ArrPos as integer

  `NOTE: Edited version of original full packet transmission for the original complex / full client to host
  `      server software. This function is now just for the 'Simple' Server to just display 1hr of data.
 

  `NOTE: Each transmitted packet contains 15 records
  `      `TOTAL BYTES = 2019 (9 + 2010) ie ( 9 + (15*134))
  
  
  g_SYNC_ARR_Size = 0
  g_SYNC_ARR_TTL_Items_Req_SYNC = 0
  l_Exit_lp = -1
  l_ArrPos = 0 : `ArrPos is the main loop, going from 1 to 900
  
  

  `1. Build a list of the records queued to be sent to fill a packet 
  		repeat
  		
    		inc l_ArrPos, 1
		
    		if SIMPLE_SERVER_SYNC_ARRAY(1, l_ArrPos).Record_Syncd = -1
      		
      		
      			inc g_SYNC_ARR_TTL_Items_Req_SYNC, 1
      			
      			if g_SYNC_ARR_Size < 14
      		  	inc g_SYNC_ARR_Size, 1
      		  	SimpSER_SYNC_RecordsArrPosToSend(g_SYNC_ARR_Size) = l_ArrPos
      			endif
      			

      		
    		endif
    		
    		if g_SYNC_ARR_Size => 13
    		  l_Exit_lp = 1
    		endif
    		
//     		if g_SYNC_ARR_Size > 14
//     		  l_Exit_lp = 1
//     		endif
    		
    		if l_ArrPos = 900
  		    l_Exit_lp = 1
    		endif
    		
  		until l_Exit_lp = 1
  		
//     `This code creates a file containing the SYNC record numbers, showing it works OK.
//   	l_Filename$ = g_autodir_full_directory_path$ + "\Engine Data\DEBUG_SimpleServer_SYNCData.txt"
//   	if file exist(l_Filename$) = 1
//     	delete file l_Filename$
//   	endif
//   	open to write 1, l_Filename$
//   	
//   	  write string 1, "g_SYNC_ARR_Size: " + str$(g_SYNC_ARR_Size)
//   	  
//   	  write string 1, "*"
//   	  write string 1, "SimpSER_SYNC_RecordsArrPosToSend(write_lp)"
//     	for write_lp = 0 to 50
//     	  write string 1, str$(write_lp) + ": " + str$(SimpSER_SYNC_RecordsArrPosToSend(write_lp))
//     	next write_lp
//     	
//   	  write string 1, "*"
//   	  write string 1, "SIMPLE_SERVER_SYNC_ARRAY(1, SimpSER_SYNC_RecordsArrPosToSend(write_lp)).MEM_DB_ArrPos"
//     	for write_lp = 0 to 50
//     	  write string 1, str$(write_lp) + ": " + str$(SIMPLE_SERVER_SYNC_ARRAY(1, SimpSER_SYNC_RecordsArrPosToSend(write_lp)).MEM_DB_ArrPos)
//     	next write_lp
//     	
//   	close file 1  		
//   	end
  		
  `2. Transmit the Data		
     
    if g_SYNC_ARR_Size > 0
     
      `CLEAR SEND ARRAY
      net send 0
      
      `ADD CODE
      net put long 68611006 : `4
      
      `1) Total number of records transmitted this batch
        `net put byte g_SYNC_ARR_Size : `1
        net put string RC4_StrEnDeCrypt(str$(g_SYNC_ARR_Size), g_RC4_Password_Built_From_Table$)
     
      for add_lp = 1 to g_SYNC_ARR_Size
      
      
        `2) Array Pointer
        `l_Array_Pntr = SimpSER_SYNC_RecordsArrPosToSend(add_lp)
        l_SYNC_Array_Pntr = SimpSER_SYNC_RecordsArrPosToSend(add_lp)
        l_DATA_Array_Pntr = SIMPLE_SERVER_SYNC_ARRAY(1, SimpSER_SYNC_RecordsArrPosToSend(add_lp)).MEM_DB_ArrPos
        
        `net put int l_SYNC_Array_Pntr : `4
        net put string RC4_StrEnDeCrypt(str$(l_SYNC_Array_Pntr), g_RC4_Password_Built_From_Table$)
        
        SIMPLE_SERVER_SYNC_ARRAY(1, l_SYNC_Array_Pntr).Record_Syncd = 1
        
//         do
//         cls
//         print l_SYNC_Array_Pntr 1
//         print l_DATA_Array_Pntr -889
//         sync
//         loop
        
				`
        `3. Put Time
        `net put string MEM_MAIN_DATABASE(l_Array_Pntr).Time$
        if MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Time$ <> ""
        	l_MinutesVal = val(fast right$(fast left$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Time$, 5), 2))
        	l_HoursVal = val(fast left$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Time$, 2))
        	l_SecondsVal =  val(fast right$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Time$, 2))
        else
          l_HoursVal = 0
          l_MinutesVal = 0
          l_SecondsVal = 0
        endif
        `net put byte l_HoursVal : `1
        `net put byte l_MinutesVal : `1
        `net put byte l_SecondsVal : `1
        net put string RC4_StrEnDeCrypt(str$(l_HoursVal), g_RC4_Password_Built_From_Table$)
        net put string RC4_StrEnDeCrypt(str$(l_MinutesVal), g_RC4_Password_Built_From_Table$)
        net put string RC4_StrEnDeCrypt(str$(l_SecondsVal), g_RC4_Password_Built_From_Table$)
        `
        `4. Put Date
        l_DayVal = val(fast right$(fast left$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Date$, 5), 2))
        l_MonthVal = val(fast left$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Date$, 2))
        l_YearVal =  val(fast right$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Date$, 2))
        `net put byte l_DayVal : `1
        `net put byte l_MonthVal : `1
        `net put byte l_YearVal : `1
        net put string RC4_StrEnDeCrypt(str$(l_DayVal), g_RC4_Password_Built_From_Table$)
        net put string RC4_StrEnDeCrypt(str$(l_MonthVal), g_RC4_Password_Built_From_Table$)
        net put string RC4_StrEnDeCrypt(str$(l_YearVal), g_RC4_Password_Built_From_Table$)
        `
        `5. Put Hole Depth
          `net put float MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Hole_Depth# : `4
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Hole_Depth#), g_RC4_Password_Built_From_Table$)
        `6. Put Bit Depth
          `net put float MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Bit_Depth# : `4
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Bit_Depth#), g_RC4_Password_Built_From_Table$)
        `7. Put ROP
          `Times ROP x10 and transmit as word
          l_TWord = MEM_MAIN_DATABASE(l_DATA_Array_Pntr).ROP# * 10.0
          `net put word l_TWord : `2
          net put string RC4_StrEnDeCrypt(str$(l_TWord), g_RC4_Password_Built_From_Table$)
        `8. Put WOB
          l_TWord = MEM_MAIN_DATABASE(l_DATA_Array_Pntr).WOB# * 10.0
          `net put word l_TWord : `2
          net put string RC4_StrEnDeCrypt(str$(l_TWord), g_RC4_Password_Built_From_Table$)
        `9. Put Hookload
          `net put word MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Hookload : `2
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Hookload), g_RC4_Password_Built_From_Table$)
        `10. Put RPM
          `net put word MEM_MAIN_DATABASE(l_DATA_Array_Pntr).RPM : `2
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).RPM), g_RC4_Password_Built_From_Table$)
        `11. Put Torque
          `net put float MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Torque# : `4
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Torque#), g_RC4_Password_Built_From_Table$)
        `12. Put Triptank
          l_TWord = MEM_MAIN_DATABASE(l_DATA_Array_Pntr).TripTank# * 10.0
          `net put word l_TWord : `2
          net put string RC4_StrEnDeCrypt(str$(l_TWord), g_RC4_Password_Built_From_Table$)
        `13. Put Block Position
          l_TWord = MEM_MAIN_DATABASE(l_DATA_Array_Pntr).BlockPosition# * 10.0
          `net put word l_TWord : `2 (34 Total)
          net put string RC4_StrEnDeCrypt(str$(l_TWord), g_RC4_Password_Built_From_Table$)
        `14. Put PVT
          `net put float MEM_MAIN_DATABASE(l_DATA_Array_Pntr).PVT# : `4
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).PVT#), g_RC4_Password_Built_From_Table$)
        `15. Put SPP
          `net put word MEM_MAIN_DATABASE(l_DATA_Array_Pntr).SPP : `2
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).SPP), g_RC4_Password_Built_From_Table$)
        `16. Put Flow IN
          `net put word MEM_MAIN_DATABASE(l_DATA_Array_Pntr).FlowIn : `2
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).FlowIn), g_RC4_Password_Built_From_Table$)
        `17. Put SPM1
          `net put word MEM_MAIN_DATABASE(l_DATA_Array_Pntr).SPM1 : `2
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).SPM1), g_RC4_Password_Built_From_Table$)
        `18. Put SPM2
          `net put word MEM_MAIN_DATABASE(l_DATA_Array_Pntr).SPM2 : `2
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).SPM2), g_RC4_Password_Built_From_Table$)
        `19. Put SPM3
          `net put word MEM_MAIN_DATABASE(l_DATA_Array_Pntr).SPM3 : `2
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).SPM3), g_RC4_Password_Built_From_Table$)
        `20. Put Total Gas
          l_TWord = MEM_MAIN_DATABASE(l_DATA_Array_Pntr).TotalGas# * 10.0
          `net put word l_TWord : `2
          net put string RC4_StrEnDeCrypt(str$(l_TWord), g_RC4_Password_Built_From_Table$)
          
          
        `21. Put H2S
          l_TWord = MEM_MAIN_DATABASE(l_DATA_Array_Pntr).H2S# * 10.0
          `net put word l_TWord : `2
          net put string RC4_StrEnDeCrypt(str$(l_TWord), g_RC4_Password_Built_From_Table$)
        `22. Put Temp IN
          `net put float MEM_MAIN_DATABASE(l_DATA_Array_Pntr).TempIN# : `4
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).TempIN#), g_RC4_Password_Built_From_Table$)
        `23. Put Temp OUT  
          `net put float MEM_MAIN_DATABASE(l_DATA_Array_Pntr).TempOUT# : `4
          net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).TempOUT#), g_RC4_Password_Built_From_Table$)
        `24. Put Casing Pressure
				  `net put word MEM_MAIN_DATABASE(l_DATA_Array_Pntr).CSG : `2
				  net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).CSG), g_RC4_Password_Built_From_Table$)
				`25. Put Flow OUT
				  `net put float MEM_MAIN_DATABASE(l_DATA_Array_Pntr).FlowOUT# : `4
				  net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).FlowOUT#), g_RC4_Password_Built_From_Table$)
				`26. Put Total Strokes
 				  `net put int MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Total_Strokes : `4
 				  net put string RC4_StrEnDeCrypt(str$(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Total_Strokes), g_RC4_Password_Built_From_Table$)
//  				  
      
      next add_lp
      
      
      net send
     
     
    endif
  

endfunction




function ___Old_Sync_Commands_Complex_System__________()
endfunction

function SYNC_ENGINE__FULL_15()

  `NOTE: Each transmitted packet contains 15 records
  `      `TOTAL BYTES = 2019 (9 + 2010) ie ( 9 + (15*134))

  `g_ClientSerTransmitDB_Full1OrReduced2

  local l_Total_RecNum_To_Transmit as byte
  local l_counter as integer
  
  g_SYNC_ARR_ENGINE_Timer = g_TIMER_1 + 2 : `Set time until Client does the next SYNC Check
  
  `-------------------------- DECIDE IF ANY RECORDS NEED SYNC'ING TO THE SERVER -----------------------------
  
  `Records can be transmitted in packets of up to 44 records (given record size and packet size of 2048bytes)
  g_SYNC_ARR_Size = 0
  g_SYNC_ARR_TTL_Items_Req_SYNC = 0
  l_exit = -1
  l_counter = g_SYNC_Last_Sync_RecNum - 25
  if l_counter < 0
    l_counter = 0
  endif 
  `
  repeat
    `Only add the record to the transmition queue if the record number is < g_DATABASE_MEM_Total_Num_Records
    if l_counter <= g_DATABASE_MEM_Total_Num_Records and g_DATABASE_MEM_Total_Num_Records > 0
      if MEM_MAIN_DATABASE(l_counter).Record_Syncd = 0
        inc g_SYNC_ARR_TTL_Items_Req_SYNC, 1
        if g_SYNC_ARR_Size < 15
          inc g_SYNC_ARR_Size, 1
          SYNC_DB_Data(g_SYNC_ARR_Size).Record_Pntr = l_counter
        endif
      endif
    endif
    inc l_counter, 1
    `
    if g_SYNC_ARR_Size > 14
      l_exit = 1
    endif  
    if l_counter > g_DATABASE_MEM_Total_Num_Records
      l_exit = 1
    endif  
  until l_exit = 1
  
  `----------------------------------------------------------------------------------------------------------
  
  `NOTE: if the server responds it results in immediate rechecking, if there are no more records to send then
  `      it is all up to date and rechecking continues every 2 seconds
  
   
  `This is where records are sent to the server - this is the NORMAL SYNC CODE (1687634)
  `  not the RAPID SYNC CODE, which is at (6642564)
  if g_SYNC_ARR_TTL_Items_Req_SYNC > 0
  
    `Calculate number of fields to be transmitted this burst
    `(Max 44 records per transmission = 44x46 bytes per loop=2024 bytes - so 24 left for the header, which is 9 bytes)
    if g_SYNC_ARR_Size > 15
      l_Total_RecNum_To_Transmit = 15
    else
      l_Total_RecNum_To_Transmit = g_SYNC_ARR_Size
    endif
    
    g_SYNCDATA_PacketType$ = "15"
    
      `CLEAR SEND ARRAY
      net send 0
      `ADD CODE
      net put long 554 : `4
      `net put long 26374
      `1) Total number of records at client
      net put int g_DATABASE_MEM_Total_Num_Records : `4
      `2) Total number of records transmitted this batch
      net put byte l_Total_RecNum_To_Transmit : `1
      `
      `The above header is 9 Bytes
      `
      for add_lp = 1 to l_Total_RecNum_To_Transmit
        inc g_ENGINE_Save_SYNC_DB_RecordCounter, 1
        `3) Array Pointer
        l_Array_Pntr = SYNC_DB_Data(add_lp).Record_Pntr
        net put int l_Array_Pntr : `4
				`
        `Put Time
        `net put string MEM_MAIN_DATABASE(l_Array_Pntr).Time$
        l_MinutesVal = val(fast right$(fast left$(MEM_MAIN_DATABASE(l_Array_Pntr).Time$, 5), 2))
        l_HoursVal = val(fast left$(MEM_MAIN_DATABASE(l_Array_Pntr).Time$, 2))
        l_SecondsVal =  val(fast right$(MEM_MAIN_DATABASE(l_Array_Pntr).Time$, 2))
        net put byte l_HoursVal : `1
        net put byte l_MinutesVal : `1
        net put byte l_SecondsVal : `1
        `
        `Put Date
        l_DayVal = val(fast right$(fast left$(MEM_MAIN_DATABASE(l_Array_Pntr).Date$, 5), 2))
        l_MonthVal = val(fast left$(MEM_MAIN_DATABASE(l_Array_Pntr).Date$, 2))
        l_YearVal =  val(fast right$(MEM_MAIN_DATABASE(l_Array_Pntr).Date$, 2))
        net put byte l_DayVal : `1
        net put byte l_MonthVal : `1
        net put byte l_YearVal : `1
        `
        `Put Hole Depth
        net put float MEM_MAIN_DATABASE(l_Array_Pntr).Hole_Depth# : `4
        `Put Bit Depth
        net put float MEM_MAIN_DATABASE(l_Array_Pntr).Bit_Depth# : `4
        `Put ROP
          `Times ROP x10 and transmit as word
          l_TWord = MEM_MAIN_DATABASE(l_Array_Pntr).ROP# * 10.0
          net put word l_TWord : `2
        `Put WOB
          l_TWord = MEM_MAIN_DATABASE(l_Array_Pntr).WOB# * 10.0
          net put word l_TWord : `2
        `Put Hookload
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).Hookload : `2
        `Put RPM
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).RPM : `2
        `Put Torque
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).Torque# : `4
        `Put Triptank
          l_TWord = MEM_MAIN_DATABASE(l_Array_Pntr).TripTank# * 10.0
          net put word l_TWord : `2
        `Put Block Position
          l_TWord = MEM_MAIN_DATABASE(l_Array_Pntr).BlockPosition# * 10.0
          net put word l_TWord : `2
        `Put PVT
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).PVT# : `4
        `Put PIT 1  
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).PIT1# : `4
        `Put PIT 2 
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).PIT2# : `4
        `Put PIT 3
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).PIT3# : `4
        `Put PIT 4
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).PIT4# : `4
        `Put PIT 5
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).PIT5# : `4
        `Put PIT 6
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).PIT6# : `4
        `Put PIT 7
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).PIT7# : `4
        `Put PIT 8
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).PIT8# : `4
        `Put SPP
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).SPP : `2
        `Put Flow IN
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).FlowIn : `2
        `Put SPM1
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).SPM1 : `2
        `Put SPM2
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).SPM2 : `2
        `Put SPM3
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).SPM3 : `2 
        `Put Total Gas
          l_TWord = MEM_MAIN_DATABASE(l_Array_Pntr).TotalGas# * 10.0
          net put word l_TWord : `2
        `Put H2S
          l_TWord = MEM_MAIN_DATABASE(l_Array_Pntr).H2S# * 10.0
          net put word l_TWord : `2
        `Put Temp IN
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).TempIN# : `4
        `Put Temp OUT  
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).TempOUT# : `4
				`Put Comment String
				  net put string MEM_MAIN_DATABASE(l_Array_Pntr).Comment$ : `32
				`Put Casing Pressure
				  net put word MEM_MAIN_DATABASE(l_Array_Pntr).CSG : `2
				`Put Flow OUT
				  net put float MEM_MAIN_DATABASE(l_Array_Pntr).FlowOUT# : `4
				`Put Total Strokes
 				  net put int MEM_MAIN_DATABASE(l_Array_Pntr).Total_Strokes : `4
 				  

          `Bytes in Loop per Record = 134
          
      next add_lp
      
      `TOTAL BYTES = 2019 (9 + 2010) ie ( 9 + (15*134))

    net send
    
    g_SYNC_Send_Timer = hitimer()
    inc g_ENG_DataTransfer_Total, 2048
    g_Already_Transmitted_To_Server_This_Program_Loop = 1
    
  endif
  
  
  `--------------------------------------------------------------------------------------
  

  
  `Exact Record Format (This table is also present in - lib_CMNTS_WRITE_COMMENT_To_HD_DB )
      `01-RecStart Indicator Byte1   - 1
      `02-RecStart Indicator Byte2   - 1
      `03-RecStart Indicator Byte3   - 1
      `04-Database Arr Pos as float  - 4
      `05-Time$ as string            -   2 + (8 Characters) = 10 bytes
      `06-Date$ as string            -   2 + (8 Characters) = 10 bytes
      `07-Hole_Depth# as float       - 4
      `08-Bit_Depth# as float        - 4
      `09-ROP# as float              - 4
      `10-WOB# as float              - 4
      `11-Hookload as word           -   2
      `12-RPM as word                -   2
      `13-Torque# as float           - 4
      `14-TripTank# as float         - 4
      `15-BlockPosition# as float    - 4
      `16-PVT# as float              - 4
      `17-Pit1# as float             - 4
      `18-Pit2# as float             - 4
      `19-Pit3# as float             - 4
      `20-Pit4# as float             - 4
      `21-Pit5# as float             - 4
      `22-Pit6# as float             - 4
      `23-Pit7# as float             - 4
      `24-Pit8# as float             - 4
      `25-SPP as word                -   2
      `26-FlowIn as word             -   2
      `27-SPM1 as word               -   2
      `28-SPM2 as word               -   2
      `29-SPM3 as word               -   2
      `30-TotalGas# as float         - 4
      `31-H2S# as float              - 4
      `32-TempIN# as float           - 4
      `33-TempOUT# as float          - 4
      `34-Comments are MAXIMUM OF 30 CHARACTERS : 2 + (30 Characters) = 32 bytes
      `35-CGS as word                - 2
      `36-Flow OUT as float          - 4
      `37-Total Strokes as integer   - 4
    
  `INDEX
  `Record Start Indicator Bytes  = 3
  `3  Strings                    = 52
  `22 Floats                     = 88
  `8  Words                      = 16
  `1  Integer                    = 4
  
  `TOTAL BYTES                   = 163  
  
  

endfunction

function SYNC_ENGINE__REDUCED_44()

  `NOTE: This function transmits just the fields for the front screen display. This was the original
  `      code before the Server was built to display all the data the Client can display. So this function
  `      is only transmitting the data for the front screen, not the pits etc.
  `      Each transmitted packet contains 44 records at this size.

  `g_ClientSerTransmitDB_Full1OrReduced2

  local l_Total_RecNum_To_Transmit as byte
  local l_counter as integer
  
  g_SYNC_ARR_ENGINE_Timer = g_TIMER_1 + 2 : `Set time until Client does the next SYNC Check
  
  `-------------------------- DECIDE IF ANY RECORDS NEED SYNC'ING TO THE SERVER -----------------------------
  
  `Records can be transmitted in packets of up to 44 records (given record size and packet size of 2048bytes)
  g_SYNC_ARR_Size = 0
  g_SYNC_ARR_TTL_Items_Req_SYNC = 0
  l_exit = -1
  l_counter = g_SYNC_Last_Sync_RecNum - 25
  if l_counter < 0
    l_counter = 0
  endif 
  `
  repeat
    `Only add the record to the transmition queue if the record number is < g_DATABASE_MEM_Total_Num_Records
    if l_counter <= g_DATABASE_MEM_Total_Num_Records and g_DATABASE_MEM_Total_Num_Records > 0
      if MEM_MAIN_DATABASE(l_counter).Record_Syncd = 0
        inc g_SYNC_ARR_TTL_Items_Req_SYNC, 1
        if g_SYNC_ARR_Size < 44
          inc g_SYNC_ARR_Size, 1
          SYNC_DB_Data(g_SYNC_ARR_Size).Record_Pntr = l_counter
        endif
      endif
    endif
    inc l_counter, 1
    `
    if g_SYNC_ARR_Size > 43
      l_exit = 1
    endif  
    if l_counter > g_DATABASE_MEM_Total_Num_Records
      l_exit = 1
    endif  
  until l_exit = 1
  
  `----------------------------------------------------------------------------------------------------------
  
  `NOTE: if the server responds it results in immediate rechecking, if there are no more records to send then
  `      it is all up to date and rechecking continues every 2 seconds
  
   
  `This is where records are sent to the server - this is the NORMAL SYNC CODE (1687634)
  `  not the RAPID SYNC CODE, which is at (6642564)
  if g_SYNC_ARR_TTL_Items_Req_SYNC > 0
  
    `Calculate number of fields to be transmitted this burst
    `(Max 44 records per transmission = 44x46 bytes per loop=2024 bytes - so 24 left for the header, which is 9 bytes)
    if g_SYNC_ARR_Size > 44
      l_Total_RecNum_To_Transmit = 44
    else
      l_Total_RecNum_To_Transmit = g_SYNC_ARR_Size
    endif
    
    g_SYNCDATA_PacketType$ = "44"
    
      `CLEAR SEND ARRAY
      net send 0
      `ADD CODE
      net put long 552 : `4
      `net put long 26374
      `1) Total number of records at client
      net put int g_DATABASE_MEM_Total_Num_Records : `4
      `2) Total number of records transmitted this batch
      net put byte l_Total_RecNum_To_Transmit : `1
      `
      `The above header is 9 Bytes
      `
      for add_lp = 1 to l_Total_RecNum_To_Transmit
        inc g_ENGINE_Save_SYNC_DB_RecordCounter, 1
        `3) Array Pointer
        l_Array_Pntr = SYNC_DB_Data(add_lp).Record_Pntr
        net put int l_Array_Pntr : `4
				`
        `Put Time
        `net put string MEM_MAIN_DATABASE(l_Array_Pntr).Time$
        l_MinutesVal = val(fast right$(fast left$(MEM_MAIN_DATABASE(l_Array_Pntr).Time$, 5), 2))
        l_HoursVal = val(fast left$(MEM_MAIN_DATABASE(l_Array_Pntr).Time$, 2))
        l_SecondsVal =  val(fast right$(MEM_MAIN_DATABASE(l_Array_Pntr).Time$, 2))
        net put byte l_HoursVal : `1
        net put byte l_MinutesVal : `1
        net put byte l_SecondsVal : `1
        `
        `Put Date
        l_DayVal = val(fast right$(fast left$(MEM_MAIN_DATABASE(l_Array_Pntr).Date$, 5), 2))
        l_MonthVal = val(fast left$(MEM_MAIN_DATABASE(l_Array_Pntr).Date$, 2))
        l_YearVal =  val(fast right$(MEM_MAIN_DATABASE(l_Array_Pntr).Date$, 2))
        net put byte l_DayVal : `1
        net put byte l_MonthVal : `1
        net put byte l_YearVal : `1
        `
        `Put Hole Depth
        net put float MEM_MAIN_DATABASE(l_Array_Pntr).Hole_Depth# : `4
        `Put Bit Depth
        net put float MEM_MAIN_DATABASE(l_Array_Pntr).Bit_Depth# : `4
        `Put ROP
          `Times ROP x10 and transmit as word
          l_TWord = MEM_MAIN_DATABASE(l_Array_Pntr).ROP# * 10.0
          net put word l_TWord : `2
        `Put WOB
          l_TWord = MEM_MAIN_DATABASE(l_Array_Pntr).WOB# * 10.0
          net put word l_TWord : `2
        `Put Hookload
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).Hookload : `2
        `Put RPM
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).RPM : `2
        `Put Triptank
          l_TWord = MEM_MAIN_DATABASE(l_Array_Pntr).TripTank# * 10.0
          net put word l_TWord : `2
        `Put Block Position
          l_TWord = MEM_MAIN_DATABASE(l_Array_Pntr).BlockPosition# * 10.0
          net put word l_TWord : `2
        `Put PVT
          net put float MEM_MAIN_DATABASE(l_Array_Pntr).PVT# : `4
        `Put SPP
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).SPP : `2
        `Put Flow IN
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).FlowIn : `2
        `Put SPM1
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).SPM1 : `2
        `Put SPM2
          net put word MEM_MAIN_DATABASE(l_Array_Pntr).SPM2 : `2
        `Put Total Gas
          l_TWord = MEM_MAIN_DATABASE(l_Array_Pntr).TotalGas# * 10.0
          net put word l_TWord : `2
        `Put H2S
          l_TWord = MEM_MAIN_DATABASE(l_Array_Pntr).H2S# * 10.0
          net put word l_TWord : `2
          
          `Bytes in Loop per Record = 46
          
      next add_lp
      
      `TOTAL BYTES = 2033 (9 + 2024) ie ( 9 + (44*46))

    net send
    
    g_SYNC_Send_Timer = hitimer()
    inc g_ENG_DataTransfer_Total, 2048
    g_Already_Transmitted_To_Server_This_Program_Loop = 1
    
  endif
  
  
  
  `Exact Record Format (This table is also present in - lib_CMNTS_WRITE_COMMENT_To_HD_DB )
      `01-RecStart Indicator Byte1   - 1
      `02-RecStart Indicator Byte2   - 1
      `03-RecStart Indicator Byte3   - 1
      `04-Database Arr Pos as float  - 4
      `05-Time$ as string            -   2 + (8 Characters) = 10 bytes
      `06-Date$ as string            -   2 + (8 Characters) = 10 bytes
      `07-Hole_Depth# as float       - 4
      `08-Bit_Depth# as float        - 4
      `09-ROP# as float              - 4
      `10-WOB# as float              - 4
      `11-Hookload as word           -   2
      `12-RPM as word                -   2
      `13-Torque# as float           - 4
      `14-TripTank# as float         - 4
      `15-BlockPosition# as float    - 4
      `16-PVT# as float              - 4
      `17-Pit1# as float             - 4
      `18-Pit2# as float             - 4
      `19-Pit3# as float             - 4
      `20-Pit4# as float             - 4
      `21-Pit5# as float             - 4
      `22-Pit6# as float             - 4
      `23-Pit7# as float             - 4
      `24-Pit8# as float             - 4
      `25-SPP as word                -   2
      `26-FlowIn as word             -   2
      `27-SPM1 as word               -   2
      `28-SPM2 as word               -   2
      `29-SPM3 as word               -   2
      `30-TotalGas# as float         - 4
      `31-H2S# as float              - 4
      `32-TempIN# as float           - 4
      `33-TempOUT# as float          - 4
      `34-Comments are MAXIMUM OF 30 CHARACTERS : 2 + (30 Characters) = 32 bytes
      `35-CGS as word                - 2
      `36-Flow OUT as float          - 4
      `37-Total Strokes as integer   - 4
    
  `INDEX
  `Record Start Indicator Bytes  = 3
  `3  Strings                    = 52
  `22 Floats                     = 88
  `8  Words                      = 16
  `1  Integer                    = 4
  
  `TOTAL BYTES                   = 163  
  
  

endfunction




function lib_SAVE_SYNCData_File()

  local l_SYNC_Filename$ as string

  l_SYNC_Filename$ = g_autodir_full_directory_path$ + "\Database\SyncData.dat"

  if file exist(l_SYNC_Filename$) = 0
    open datafile to write 1, l_SYNC_Filename$
    close datafile 1
  endif

  open datafile to update 1, l_SYNC_Filename$
  for save_lp = 1 to g_DATABASE_MEM_Total_Num_Records
    
    if MEM_MAIN_DATABASE(save_lp).Record_Sync_Saved = 0
      if MEM_MAIN_DATABASE(save_lp).Record_Syncd = 1
        MEM_MAIN_DATABASE(save_lp).Record_Sync_Saved = 1
        set datafile position 1, save_lp
        write datafile byte 1, 123
      else
        set datafile position 1, save_lp
        write datafile byte 1, 68
      endif
    endif
    
  next save_lp
  close datafile 1



endfunction


function lib_RESYNC_ClientServer_RecSyncFields()

  local l_SYNC_Filename$ as string

  `This function Re-Syncs the entire MEM DB - MEM_MAIN_DATABASE(xxxx).Record_Syncd record fields

  `NOTE: By the time this function is being called (each prog cycle) the MEM DB sync fields have been set to NULL

  if g_SYNC_ReSyncALL_CL_SER_State = 1
    `Now that the MEM DB sync fields have been set to NULL request that the Server begin transmitting
    `its sync'd record list so this Client can update while records exist at the Server. Note that
    `while this function is running the SYNC_ENGINE (Full or Reduced) is being bypassed so no new
    `records are being sync'd to the Server
    net send 0
    net put long 704
    net put long 51654
    net put int g_DATABASE_MEM_Total_Num_Records
    net send all
    g_SYNC_ReSyncALL_CL_SER_State = 2
    g_SYNC_ReSyncALL_CL_SER_State_Timer = timer() + c_SYNC_S2TimerAmnt
    g_SYNC_Last_Sync_RecNum = 0 : `Set to check sync from start of DB at end so the Client sends any records not at the Server in the entire DB
  
    `Also, delete the SYNC DB File so it starts from fresh
    l_SYNC_Filename$ = g_autodir_full_directory_path$ + "\Database\SyncData.dat"
    if file exist(l_SYNC_Filename$) = 1
      delete file l_SYNC_Filename$
    endif
  
  endif



  if g_SYNC_ReSyncALL_CL_SER_State = 2
    `Note: State 2 is an empty state. The code stays in this, disabling the SYNC_ENGINE (Full or Reduced)
    `      It comes out of state 2 only when the 10 seconds have elapsed with not sync Code 705 packet
    `      from the Server
  
    if timer() > g_SYNC_ReSyncALL_CL_SER_State_Timer
      g_SYNC_ReSyncALL_CL_SER_Toggle = -1
      g_SYNC_ReSyncALL_CL_SER_State = -1
    endif
  
  endif






  `g_SYNC_ReSyncALL_CL_SER_Toggle
  `g_SYNC_ReSyncALL_CL_SER_State


endfunction





function lib_DispRTGraphic_For_Code705()

  `This function displays the Code 705 Sync data on the RT Screen

  local l_XPos as integer
  local l_YPos as integer : l_YPos = 464 - 20
  local l_CalcPercent# as float
  local l_TimeLeftActive as integer
  local l_TimeLeftDisp# as float

  if g_ENGINE_Screen_Resolution = 1
    l_XPos = 1025
  else
    l_XPos = 702
  endif

  l_TimeLeftActive = timer() - g_SYNC_ReSyncALL_CL_SER_State_Timer
  l_TimeLeftDisp# = (l_TimeLeftActive + 0.0) / 1000
  
	d3d_starttext
	
	
  	`inc l_YPos, 20:d3d_text 2, l_XPos, l_YPos, 0, "SERVER SYNC UPDATE", g_ENGINE_COLOUR_Black
  	inc l_YPos, 20:d3d_text 10, l_XPos, l_YPos, 0, "  CLIENT", g_ENGINE_COLOUR_Black
  	inc l_YPos, 20:d3d_text 10, l_XPos, l_YPos, 0, "    - Return Normal SYNC         : " + str$(l_TimeLeftDisp#, 1) + "s)", g_ENGINE_COLOUR_Black
  	inc l_YPos, 20:d3d_text 10, l_XPos, l_YPos, 0, "    - MEM DB Recs (At Start)     : " + str$(g_SYNC_Code705View_C_MEMDBRecStart), g_ENGINE_COLOUR_Black
  	inc l_YPos, 20:d3d_text 10, l_XPos, l_YPos, 0, "    - Records to SYNC (Received) : " + str$(g_SYNC_Code705View_C_RecordsUnpacked), g_ENGINE_COLOUR_Black
	  inc l_YPos, 20:d3d_text 10, l_XPos, l_YPos, 0, "  SERVER", g_ENGINE_COLOUR_Black
	  inc l_YPos, 20:d3d_text 10, l_XPos, l_YPos, 0, "    - MEM DB Recs (At Start)     : " + str$(g_SYNC_Code705View_S_RecStart), g_ENGINE_COLOUR_Black
	  inc l_YPos, 20:d3d_text 10, l_XPos, l_YPos, 0, "    - MEM DB Recs (Now)          : " + str$(g_SYNC_Code705View_S_RecUpdated), g_ENGINE_COLOUR_Black
	  
	  if g_SYNC_Code705View_S_ProcessedXNum > 0 and g_SYNC_Code705View_S_RecUpdated > 0
	    l_CalcPercent# = (((g_SYNC_Code705View_S_ProcessedXNum + 0.0) / (g_SYNC_Code705View_S_RecUpdated + 0.0)) * 100.0)
	  else
	    l_CalcPercent# = 0.0
	  endif
	  inc l_YPos, 20:d3d_text 10, l_XPos, l_YPos, 0, "    - Processed DB Recs          : " + str$(g_SYNC_Code705View_S_ProcessedXNum) + " (" + str$(l_CalcPercent#, 1) + " %)", g_ENGINE_COLOUR_Black
	  
	  
	d3d_endtext





endfunction

function lib_DEBUG_View_Incoming_Code705(r_TotalRecsInPacket as integer)

  
  do
  
    cls
    
     for print_lp = 1 to r_TotalRecsInPacket
     
     
     next print_lp
    
    sync
  
  loop
  

endfunction


function ___SCREENS____________________________________________tx17e1()
endfunction

function HANDLE_Screens()

  `Command Console
  if g_COMMANDCONSOLE_Active = 1
  
    if g_SPYMODE_ACTIVE = 1
      SPYMODE_ENGINE()
    else
      COMMAND_CONSOLE()
    endif
    
  else
  
    if g_MAIN_SCREEN_TYPE = 1
      SCREEN_FRONTSCREEN()
    endif
    if g_MAIN_SCREEN_TYPE = 2
      ENGINE_DATABASES_SCREEN()
    endif
    if g_MAIN_SCREEN_TYPE = 3
      ENGINE_SERIALPORT_SCREEN()
    endif
    if g_MAIN_SCREEN_TYPE = 4
      SCREEN_ROP_CALC()
    endif
    if g_MAIN_SCREEN_TYPE = 10
      LOGIN_CF2_SCREEN_Login()
    endif
    if g_MAIN_SCREEN_TYPE = 11
      MESSAGING_Main_SCREEN()
    endif
    
    `Special Screen - DEBUG - Show Internal System Variables Screen
    if g_MAIN_SCREEN_TYPE = 50
      ENGINE_DEBUG_SHOW_INTERNAL_VARIABLES()
    endif

    `RT SCREENS - Graphical Mode
    if g_MAIN_SCREEN_TYPE = 1000
      DISP_RT_ENGINE_Main()
      `Display and Handle button to switch from RT Graphics back to the menus/front screen etc
      `(Input Code Marker: 34281)
      if g_CHANNEL_ID_ChngChnl_Toggle = -1
        if g_ENGINE_Screen_Resolution = 1
          if mousex() > 1287 and mousex() < 1288 + image width(c_RTScreen_SYSTEM_LIT_Button) and mousey() > 22 and mousey() < (22 + image height(c_RTScreen_SYSTEM_LIT_Button))
            paste image c_RTScreen_SYSTEM_LIT_Button, 1288, 22
            if mouseclick() = 1 and mouse_click(1) = -1 and g_RCM_MSE_INPUT_Toggle = -1
              mouse_click(1) = 1
              lib_Activate_RTGraphicsDisplay()
            endif
          else
            paste image c_RTScreen_SYSTEM_Button, 1288, 22
          endif
        else
          if mousex() > 949 and mousex() < 950 + image width(c_RTScreen_SYSTEM_LIT_Button) and mousey() > 22 and mousey() < (22 + image height(c_RTScreen_SYSTEM_LIT_Button))
            paste image c_RTScreen_SYSTEM_LIT_Button, 950, 22
            if mouseclick() = 1 and mouse_click(1) = -1 and g_RCM_MSE_INPUT_Toggle = -1
              mouse_click(1) = 1
              lib_Activate_RTGraphicsDisplay()
            endif
          else
            paste image c_RTScreen_SYSTEM_Button, 950, 22
          endif  
        endif
      endif
      
      `Right Mouse Click Context Menu - Toggled as a super switch so it can easily be disabled during programming for release builds.
      if g_INPUT_MSE_RGHTCLICKMENU_Active = 1
        ENGINE_MSE_INPUT_RightClick_ContextMenus()
      endif
      
        `Right Click Context Menu - Handle Message Box's
          if g_ENG_RTPRNT2IMG_CTRLFLOW <> -1
            lib_RCM_G6_ENG_PrintToImage()
          endif
          if g_RTPRNT2IMG_DispMsgBox = 1
            lib_RCM_G6_2_PrintToImage_MessageBox()
          endif
      
  		`[F10] - WITS QUICKVIEW RT DISPLAY
  		if keystate(68)= 1
    		lib_WITS_RT_QuickView_Display()
  		endif
      
    else
      `Display and handle the button to switch to the graphics mode
      lib_CF2_DispHndl_RTGraphicsON_MiniButton()
    endif
  endif
  
  `Display and handle the Close, Minimise and Window/Fullscreen buttons on all CF2 screens.
  if g_ENGINE_CoreFunctionType = 2
    lib_CF2_DispHndl_WindowsStyle_Buttons()
  endif
  
 



  `EXIT OPTION - SHUT DOWN THE CLIENT PROGRAM
    if g_EXIT_Client_Toggle = 1
    
      `Ensure you cannot click on a chart on the PITS screen while interacting with this menu
        g_PITS_ChartData_MouseState = 1
        g_PITS_PLOTCHART_display_values_click_toggle = -1

      lib_CF2_EXIT_YesNoBox_Handle()
    endif

endfunction





function __________MAIN_SCREEN_________________________________tx17e1()
endfunction

function SCREEN_FRONTSCREEN()

  local l_Filesize_Kbs# as float
  local WITS_EmulationON$ as string

  d3d_starttext
  
    wdth_prnt = screen width() * 0.05 : sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    if g_SPYMODE_ACTIVE = 1
      inc sp,19*2 : d3d_text 4, wdth_prnt, sp, 0, "  DIAGNOSTICS MODE ENABLED"
    endif
    
    inc sp,19 
    
    if g_server_connected = 0

      inc sp, (19*1) : d3d_text 2, wdth_prnt, sp, 0, "  Program Details"
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Client Started on : " + g_PROGRAM_Start_Date$ + " at " + g_PROGRAM_Start_Time$
      l_Amnt# = (g_TIMER_1 + 0.0) / 86400.0
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Client Runtime : " + str$(g_TIMER_1) + " s (" + str$(l_Amnt#, 2) + " days)"
      `inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    System Timer : " + str$(g_TIMER_H)

      if g_ENGINE_CoreFunctionType = 1
        inc sp, 38 : d3d_text 4, wdth_prnt, sp, 0, "  CLIENT RUNNING IN VIEWER MODE"
        inc sp, 38 : d3d_text 2, wdth_prnt, sp, 0, "    Software Processes only required for Mudlogging"
        inc sp, 19 : d3d_text 2, wdth_prnt, sp, 0, "      - Database Logging"
        inc sp, 19 : d3d_text 2, wdth_prnt, sp, 0, "      - WITS Data Monitoring"
        inc sp, 19 : d3d_text 2, wdth_prnt, sp, 0, "      - ROP Calculator"
        inc sp, 19 : d3d_text 2, wdth_prnt, sp, 0, "      - SYNC Engine"
          for print_lp = 0 to 3
            d3d_text 2, wdth_prnt + 200, (sp - (print_lp * 19)), 0, "- DISABLED"
          next print_lp

        inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  PUSH TABLE RELATIONSHIP"
        if g_DISP_RT_DB_PUSHTABLE_State = -1
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    - Not Requested"
        else
          if g_DISP_RT_DB_PUSHTABLE_State = 1
            inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    - Set to 'Request' (No Connection)"
          endif
          if g_DISP_RT_DB_PUSHTABLE_State = 2
            inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    - Established"
          endif
        endif
      endif
      
      if g_ENGINE_CoreFunctionType = 2
        if g_ENG_Logging_Active = 1
          inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  Database Engine"
        else
          if timer() > g_ENG_FrntScrn_DBLoggingOFF_Timer
            g_ENG_FrntScrn_DBLoggingOFF_Timer = timer() + 1000
            if g_ENG_FrntScrn_DBLoggingOFF_Toggle <> 1
              g_ENG_FrntScrn_DBLoggingOFF_Toggle = 1
            else
              g_ENG_FrntScrn_DBLoggingOFF_Toggle = -1
            endif    
          endif  
          if g_ENG_FrntScrn_DBLoggingOFF_Toggle = 1  
            inc sp, (19*2)
            d3d_text 2, wdth_prnt, sp, 0, "  Database Engine"
            d3d_text 2, wdth_prnt + 130, sp, 0, " ( **** CAUTION LOGGING ENGINE DISABLED **** )"
          else
            inc sp, (19*2)
            d3d_text 2, wdth_prnt, sp, 0, "  Database Engine"
            d3d_text 2, wdth_prnt + 130, sp, 0, ""
          endif
        endif
        l_Amnt# = ((g_DATABASE_HD_Total_Num_Records * c_DATABASE_Bytes_Per_Record) + 0.0) / 1048576
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Number of records in the HD Database : " + str$(g_DATABASE_HD_Total_Num_Records) + " (" + str$(l_Amnt#, 2) + " MB)"
        l_Amnt# = (g_DATABASE_MEM_Total_Num_Records + 0.0) / 21600.0
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Number of records in the Memory Database : " + str$(g_DATABASE_MEM_Total_Num_Records) + " (" + str$(l_Amnt#, 1) + " days)"
        l_Amnt# = (g_DATABASE_MaxTotalRecords + 0.0) / 21600.0
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Maximum Number of records in the allocated RAM : " + str$(g_DATABASE_MaxTotalRecords) + " (" + str$(l_Amnt#, 1) + " days)"
        l_Amnt# = (g_DATABASE_MEM_Total_Num_Records + 0.0) / (g_DATABASE_MaxTotalRecords + 0.0) * 100.0
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Database Allocated RAM Usage : " + str$(l_Amnt#, 3) + " %"
      endif
      
      if g_ENGINE_CoreFunctionType = 2
        inc sp, 38 : d3d_text 2, wdth_prnt, sp, 0, "  WITS Reception Engine"
        if g_SERIALPORT_TimeOuts_Counter = 0
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    WITS Status : " + g_SERIALPORT_DataStatus$
        else
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    WITS Status : " + g_SERIALPORT_DataStatus$ + " (Timeout Fails: " + str$(g_SERIALPORT_TimeOuts_Counter) + ")"
        endif
        if g_SERIALPORT_Port_Name$ = ""
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Connected Via : No Ports Active"
        else
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Connected Via : " + g_SERIALPORT_Port_Name$
        endif
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Last Data Received at : " + g_SERIALPORT_Time_Last_Data_Received$
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Total Transmissions Passed : " + str$(g_WITS_RECEIVE_String_StructureTest_Passed)
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Total Transmissions Failed : " + str$(g_WITS_RECEIVE_String_StructureTest_Failed)
      endif
      

      
      if g_ENGINE_CoreFunctionType = 2
        inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  ROP Calculation"
        if g_ROPCALC_OnBottom_Toggle = 1
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    On Bottom Status : Drilling"
        else
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    On Bottom Status : Off Bottom"
        endif
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Last Calculated ROP : " + str$(g_ROPCALC_ROP_Value#, 1)  
      endif
      
      if g_ENGINE_CoreFunctionType = 2
        inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  Encryption (RC4)"
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Sequence Info : " + g_RC4_FinalBuiltPassword_Seq$
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Password       : " + g_RC4_FinalBuiltPassword_Str$
      endif
      
      `Automatic and Manual Connection Attempts
      if g_AUTO_CONNECT_ON = 1
        inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  SERVER CONNECTION"
      else
        inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  SERVER CONNECTION ( **** AUTOMATIC RE-CONNECTION DISABLED **** )"
      endif

      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Client/host Connection Status : ERROR: NO CONNECTION to [" + g_CONNECTED_To_IP_Address$ + ", port: " + str$(g_CONNECTED_To_Port) + "]"
      
      `Automatic
      if g_AUTO_CONNECT_ON = 1
        if g_connection_attempt_ATTEMPT_NOW = 1
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Automatic connection attempt in: " + str$(g_connection_attempt_counter) + " seconds [ATTEMPTING CONNECTION NOW - Please Wait...]"
        else
          if g_COMMANDCONSOLE_Active = 1
            inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Automatic connection attempt in: Countdown paused by the Command Console"
          else
            inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Automatic connection attempt in: " + str$(g_connection_attempt_counter) + " seconds"
          endif
        endif
      endif
      
      if g_connection_attempt_total_time <> 0
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "      Last attempt took " + str$(g_connection_attempt_total_time) + " ms"
      endif
      
      if g_ENGINE_CoreFunctionType = 2
        if g_SYNC_Engine_Active <> 1
          if g_SYNC_Engine_Active = -500
            inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  SYNC Engine ( **** NO CONNECTION **** )"
          else  
            inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  SYNC Engine ( **** NO CONNECTION, DISABLED: By User **** )"
          endif
        endif
      endif
      
      `If the program was not run for 7 days then an option was presented at startup to create a new well
      `if the user selected Y then the order was given for the server to also backup and create a new well.
      `This code displays the output while the server has not confirmed that it has started a new database.
      if g_INITFunc_ProgLastRun_ForceServerNewDatabase = 1
        inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  DATABASE: New local database created. Creating at Server (No Connection To Server)"
      endif
      
      `Manual
      inc sp,19*2 : d3d_text 2, wdth_prnt, sp, 0, "    Press F8 to connect to the Server"
    
    else
    
      `FrontScreen when client is connected to the server
    
      inc sp, (19*1) : d3d_text 2, wdth_prnt, sp, 0, "  Program Details "
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Startup Date : " + g_PROGRAM_Start_Date$
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Startup Time : " + g_PROGRAM_Start_Time$
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    System Timer : " + str$(g_TIMER_1)
    
    
      if g_ENGINE_CoreFunctionType = 1
        inc sp, 38 : d3d_text 4, wdth_prnt, sp, 0, "  CLIENT RUNNING IN VIEWER MODE"
        inc sp, 38 : d3d_text 2, wdth_prnt, sp, 0, "    Software Processes only required for Mudlogging"
        inc sp, 19 : d3d_text 2, wdth_prnt, sp, 0, "      - Database Logging"
        inc sp, 19 : d3d_text 2, wdth_prnt, sp, 0, "      - WITS Data Monitoring"
        inc sp, 19 : d3d_text 2, wdth_prnt, sp, 0, "      - ROP Calculator"
        inc sp, 19 : d3d_text 2, wdth_prnt, sp, 0, "      - SYNC Engine"
          for print_lp = 0 to 3
            d3d_text 2, wdth_prnt + 200, (sp - (print_lp * 19)), 0, "- DISABLED"
          next print_lp
          
        inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  PUSH TABLE RELATIONSHIP"
        if g_DISP_RT_DB_PUSHTABLE_State = -1
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    - Not Requested"
        else
          if g_DISP_RT_DB_PUSHTABLE_State = 1
            inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    - Requesting"
          endif
          if g_DISP_RT_DB_PUSHTABLE_State = 2
            inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    - Established"
          endif
        endif
      endif
      
      
      if g_ENGINE_CoreFunctionType = 2
        if g_ENG_Logging_Active = 1
          inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  Database Engine"
        else
          if timer() > g_ENG_FrntScrn_DBLoggingOFF_Timer
            g_ENG_FrntScrn_DBLoggingOFF_Timer = timer() + 1000
            if g_ENG_FrntScrn_DBLoggingOFF_Toggle <> 1
              g_ENG_FrntScrn_DBLoggingOFF_Toggle = 1
            else
              g_ENG_FrntScrn_DBLoggingOFF_Toggle = -1
            endif    
          endif  
          if g_ENG_FrntScrn_DBLoggingOFF_Toggle = 1  
            inc sp, (19*2)
            d3d_text 2, wdth_prnt, sp, 0, "  Database Engine"
            d3d_text 2, wdth_prnt + 130, sp, 0, " ( **** CAUTION LOGGING ENGINE DISABLED **** )"
          else
            inc sp, (19*2)
            d3d_text 2, wdth_prnt, sp, 0, "  Database Engine"
            d3d_text 2, wdth_prnt + 130, sp, 0, ""
          endif
        endif
        l_Amnt# = ((g_DATABASE_HD_Total_Num_Records * 72) + 0.0) / 1048576
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Number of records in the HD Database : " + str$(g_DATABASE_HD_Total_Num_Records) + " (" + str$(l_Amnt#, 2) + " MB)"
        l_Amnt# = (g_DATABASE_MEM_Total_Num_Records + 0.0) / 21600.0
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Number of records in the Memory Database : " + str$(g_DATABASE_MEM_Total_Num_Records) + " (" + str$(l_Amnt#, 1) + " days)"
        l_Amnt# = (g_DATABASE_MaxTotalRecords + 0.0) / 21600.0
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Maximum Number of records in the allocated RAM : " + str$(g_DATABASE_MaxTotalRecords) + " (" + str$(l_Amnt#, 1) + " days)"
        l_Amnt# = (g_DATABASE_MEM_Total_Num_Records + 0.0) / (g_DATABASE_MaxTotalRecords + 0.0) * 100.0
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Database Allocated RAM Usage : " + str$(l_Amnt#, 3) + " %"
      endif
      
      if g_ENGINE_CoreFunctionType = 2
        inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  WITS Reception Engine"
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    WITS Status : " + g_SERIALPORT_DataStatus$
        if g_SERIALPORT_Port_Name$ = ""
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Connected Via : No Ports Activated"
        else
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Connected Via : " + g_SERIALPORT_Port_Name$
        endif
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Last Data Received at : " + g_SERIALPORT_Time_Last_Data_Received$
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    WITS Transmissions Passed : " + str$(g_WITS_RECEIVE_String_StructureTest_Passed)
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    WITS Transmissions Failed : " + str$(g_WITS_RECEIVE_String_StructureTest_Failed)
      endif
        
      if g_ENGINE_CoreFunctionType = 2
        inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  ROP Calculation"
        if g_ROPCALC_OnBottom_Toggle = 1
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    On Bottom Status : Drilling"
        else
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    On Bottom Status : Off Bottom"
        endif
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Last Calculated ROP : " + str$(g_ROPCALC_ROP_Value#, 1) 
      endif
                                                       
      if g_AUTO_CONNECT_ON = 1
        inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  SERVER CONNECTION"
      else
        inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  SERVER CONNECTION ( **** AUTOMATIC RE-CONNECTION DISABLED **** )"
      endif
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Client/Server Connection Status : Connected! [to " + g_CONNECTED_To_IP_Address$ + ", port: " + str$(g_CONNECTED_To_Port) + "]" + "  [at " + g_SERVERConnect_Time$ + " on the " + g_SERVERConnect_Date$ + "]"
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Connection Message from Server : " + g_initial_test_message$
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Last Message from Server : " + g_Last_Msg_From_Server$
        if g_server_authorised_wits_transmission = 1
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Server Authorised SYNC Transmission : ON"
        else
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Server Authorised SYNC Transmission : OFF [Server Code : " + str$(g_server_relationship_code)+"]"
        endif

      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Last Data received from server at  : " + g_ENG_LastServerMSG_Time$ + " (" + lib_CONVERT_DATE_US_to_UK_Format(g_ENG_LastServerMSG_Date$) + ")"

      
      if g_ENGINE_CoreFunctionType = 2
        if g_SYNC_Engine_Active = 1
          inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  SYNC Engine"
        else
          if g_SYNC_Engine_Active = -500
            inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  SYNC Engine ( **** DISABLED: Not Authorised by Server **** )"
          else  
            inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  SYNC Engine ( **** DISABLED: By User **** )"
          endif
        endif
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Total Records at Server : " + str$(g_SYNC_Ttl_Server_Records)
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Time to Server : " + str$(g_SYNC_TtlTime) + " ms"
        inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    SYNC Array Buffer : " + str$(g_SYNC_ARR_Size) + "/" + g_SYNCDATA_PacketType$ + " records"
      
        `If the program was not run for 7 days then an option was presented at startup to create a new well
        `if the user selected Y then the order was given for the server to also backup and create a new well.
        `This code displays the output while the server has not confirmed that it has started a new database.
        if g_INITFunc_ProgLastRun_ForceServerNewDatabase = 1
          inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  DATABASE: New local database created. Creating at Server (" + str$(g_INITFunc_ProgLastRun_ForceServerTtlReqMade) + " Requests Sent To Server, Next Request In " + str$(g_INITFunc_ProgLastRun_ForceServerCounter) + " Seconds)"
        endif
        
      endif
      
      if g_TIMER_1 > g_ENG_DataTransfer_Rate_Next_Calc
        g_ENG_DataTransfer_Rate_Next_Calc = g_TIMER_1 + c_DataTCalcInt
        l_tempvar# = (g_ENG_DataTransfer_Total + 0.0) / 2.0
        g_ENG_DataTransfer_Rate# = l_tempvar# /1024.0
        g_ENG_DataTransfer_Total = 0
      endif
      
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Data Transfer Rate : " + str$(g_ENG_DataTransfer_Rate#, 2) + " kb/s"
    endif
  
  if g_server_authorised_wits_transmission = 1
    inc sp, 18 : d3d_text 1, screen width() - 390, 660, 0, "To Start a New Well go to the Command Console (F12)"
    inc sp, 18 : d3d_text 1, screen width() - 390, 680, 0, "and select 'Start a New Well'." 
  endif
  
  if g_ENGINE_FAKE_WITS_DATA = 1
    sp = 150
      inc sp, 18 : d3d_text 1, 600, sp, 0, "WFD - Fake WITS Data: ENABLED"
  endif
   
  d3d_endtext
  
  `Run this to view the DEBUG Server Connection Variables
  `lib_DEBUG_ServerConnectionsVars()  
    

endfunction

function lib_CF2_DispHndl_WindowsStyle_Buttons()

  `Handle the CF2 Close Button and Min/Max Windowed Button on the 1024x768 Screen
  
    `Minimise Program Button
    if mousey() < 18
      if g_ENGINE_Screen_Resolution = 1
        if mousex() > 1251 and mousex() < 1280
          paste image c_DISPLAY_MINIMISEButton_LIT, 1251, 2
          if mouseclick() = 1 and mouse_click(1) = -1
            mouse_click(1) = 1
            `put code here
            l_Handle = GET DBPRO WINDOW()
            MINIMISE WINDOW l_Handle
          endif 
        else  
          paste image c_DISPLAY_MINIMISEButton_UNLIT, 1251, 2
        endif
      else
        if mousex() > 915 and mousex() < 943
          paste image c_DISPLAY_MINIMISEButton_LIT, 915, 2
          if mouseclick() = 1 and mouse_click(1) = -1
            mouse_click(1) = 1
            `Put Code Here
            l_Handle = GET DBPRO WINDOW()
            MINIMISE WINDOW l_Handle
          endif
        else
          paste image c_DISPLAY_MINIMISEButton_UNLIT, 915, 2
        endif
      endif
    else
      if g_ENGINE_Screen_Resolution = 1
        paste image c_DISPLAY_MINIMISEButton_UNLIT, 1251, 2
      else
        paste image c_DISPLAY_MINIMISEButton_UNLIT, 915, 2
      endif
    endif
  
    `Windowed Mode Button
    if mousey() < 18
      if g_ENGINE_Screen_Resolution = 1
        if mousex() > 1281 and mousex() < 1310
          paste image c_DISPLAY_WINDOWEDButton_LIT, 1281, 2
          if mouseclick() = 1 and mouse_click(1) = -1
            mouse_click(1) = 1
            `put code here
            if g_Window_Fullscreen_Toggle = 1
              `Windowed
              lib_SetScreen_Windowed_FullScreen_p1or2(2)
            else
              `Fullscreen
              lib_SetScreen_Windowed_FullScreen_p1or2(1)
            endif
          endif 
        else  
          paste image c_DISPLAY_WINDOWEDButton_UNLIT, 1281, 2
        endif
      else
        if mousex() > 945 and mousex() < 973
          paste image c_DISPLAY_WINDOWEDButton_LIT, 945, 2
          if mouseclick() = 1 and mouse_click(1) = -1
            mouse_click(1) = 1
            `Put Code Here
            if g_Window_Fullscreen_Toggle = 1
              `Windowed
              lib_SetScreen_Windowed_FullScreen_p1or2(2)
            else
              `Fullscreen
              lib_SetScreen_Windowed_FullScreen_p1or2(1)
            endif
          endif
        else
          paste image c_DISPLAY_WINDOWEDButton_UNLIT, 945, 2
        endif
      endif
    else
      if g_ENGINE_Screen_Resolution = 1
        paste image c_DISPLAY_WINDOWEDButton_UNLIT, 1281, 2
      else
        paste image c_DISPLAY_WINDOWEDButton_UNLIT, 945, 2
      endif
    endif
    
    `Close Toggle
    if mousey() < 18
      if g_ENGINE_Screen_Resolution = 1
        if mousey() < 18
          if mousex() > 1310
            paste image c_DISPLAY_CLOSEButton_LIT, 1311, 2
            if mouseclick() = 1 and mouse_click(1) = -1
              mouse_click(1) = 1
              g_EXIT_Client_Toggle = 1
        			`g_RTDispEXITBOX_HighlightYorN = -1
        			g_RTDispEXITBOX_PosX = g_ENG_Half_Screen_Width - g_SPRITE_ExitBox_Half_Width
        			g_RTDispEXITBOX_PosY = g_ENG_Half_Screen_Height - g_SPRITE_ExitBox_Half_Height
        			`
        			g_RCM_ACTION_Toggle_EditWellData = 1
        			g_LOCKOUT_INPUTPAD_ChartInfoBoxes = 1
        			g_LOCKOUT_INPUTPAD_TimePeriodButtons = 1
        			g_LOCKOUT_INPUTPAD_DS_ChannelRanges = 1
        			g_LOCKOUT_INPUTPAD_PITS_ChannelRanges = 1
        			g_INFOBOX_INPUT_LMB_State = 1
        			lib_DS_CHART_INFOBOX_Deactivate()
        			lib_PITS_CHART_INFOBOX_Deactivate()
        			
            endif
          else
            paste image c_DISPLAY_CLOSEButton_UNLIT, 1311, 2
          endif
        else
          paste image c_DISPLAY_CLOSEButton_UNLIT, 1311, 2
        endif
      else
        if mousex() > 973
          paste image c_DISPLAY_CLOSEButton_LIT, 974, 2
          if mouseclick() = 1 and mouse_click(1) = -1
            mouse_click(1) = 1
            g_EXIT_Client_Toggle = 1
          	`g_RTDispEXITBOX_HighlightYorN = -1
        	  g_RTDispEXITBOX_PosX = g_ENG_Half_Screen_Width - g_SPRITE_ExitBox_Half_Width
        		g_RTDispEXITBOX_PosY = g_ENG_Half_Screen_Height - g_SPRITE_ExitBox_Half_Height
        		`
        		g_RCM_ACTION_Toggle_EditWellData = 1
        		g_LOCKOUT_INPUTPAD_ChartInfoBoxes = 1
        		g_LOCKOUT_INPUTPAD_TimePeriodButtons = 1
        		g_LOCKOUT_INPUTPAD_DS_ChannelRanges = 1
        		g_LOCKOUT_INPUTPAD_PITS_ChannelRanges = 1
        		g_INFOBOX_INPUT_LMB_State = 1
        		lib_DS_CHART_INFOBOX_Deactivate()
        		lib_PITS_CHART_INFOBOX_Deactivate()
        		
          endif
        else
          paste image c_DISPLAY_CLOSEButton_UNLIT, 974, 2
        endif
      endif
    else
      if g_ENGINE_Screen_Resolution = 1
        paste image c_DISPLAY_CLOSEButton_UNLIT, 1311, 2
      else
        paste image c_DISPLAY_CLOSEButton_UNLIT, 974, 2
      endif
    endif


endfunction

function lib_CF2_DispHndl_RTGraphicsON_MiniButton()

  `This function displays and handles the button that is displayed on all Front Screens that
  `shows a mini representation of the Realtime Graphics screen and allows you to click it to
  `switch to the RT Graphics screen.
  
  if g_ENGINE_Screen_Resolution = 1
    if mousex() > 1280 and mousex() < 1347 and mousey() > 24 and mousey() < 63
      paste image c_DISP_Button_Graphics_Tiny_LIT_Imgnum, 1281, 25
      if mouseclick() = 1 and mouse_click(1) = -1
        mouse_click(1) = 1
        lib_Activate_RTGraphicsDisplay()
      endif
    else
      paste image c_DISP_Button_Graphics_Tiny_Imgnum, 1281, 25
    endif
  else
    if mousex() > 944 and mousex() < 1011 and mousey() > 24 and mousey() < 63
      paste image c_DISP_Button_Graphics_Tiny_LIT_Imgnum, 945, 25
      if mouseclick() = 1 and mouse_click(1) = -1
        mouse_click(1) = 1
        lib_Activate_RTGraphicsDisplay()
      endif 
    else
      paste image c_DISP_Button_Graphics_Tiny_Imgnum, 945, 25
    endif  
  endif
  
   

endfunction

function __________DATABASE_SCREENS________________________________tx17e1()
endfunction

function ENGINE_DATABASES_SCREEN()


  if g_DISPLAY_DatabaseScreenType = 1
    SCREEN_MEM_DATABASE()
    if g_DATABASE_MEM_GotoPage_Toggle = -1
      `[1] - Screen Type - MEM Database
      if keystate(2)= 1 and key_state(2,0)= 0
        g_DISPLAY_DatabaseScreenType = 1
        key_state(2,0)=1
      endif
      if keystate(2)=0 and key_state(2,0)=1 then key_state(2,0)=0
      `[2] - Screen Type - HD Database
      if keystate(3)= 1 and key_state(61,0)= 0
        g_DISPLAY_DatabaseScreenType = 2
        key_state(3,0)=1
      endif
      if keystate(3)=0 and key_state(3,0)=1 then key_state(3,0)=0
      `[3] - Screen Type - SYNC Database
      if keystate(4)= 1 and key_state(4,0)= 0
        g_DISPLAY_DatabaseScreenType = 3
        key_state(4,0)=1
      endif
      if keystate(4)=0 and key_state(4,0)=1 then key_state(4,0)=0
    endif
  endif

  if g_DISPLAY_DatabaseScreenType = 2
    SCREEN_HD_DATABASE()
    if g_DATABASE_HD_GotoPage_Toggle = -1
      `[1] - Screen Type - MEM Database
      if keystate(2)= 1 and key_state(2,0)= 0
        g_DISPLAY_DatabaseScreenType = 1
        key_state(2,0)=1
      endif
      if keystate(2)=0 and key_state(2,0)=1 then key_state(2,0)=0
      `[2] - Screen Type - HD Database
      if keystate(3)= 1 and key_state(61,0)= 0
        g_DISPLAY_DatabaseScreenType = 2
        key_state(3,0)=1
      endif
      if keystate(3)=0 and key_state(3,0)=1 then key_state(3,0)=0
      `[3] - Screen Type - SYNC Database
      if keystate(4)= 1 and key_state(4,0)= 0
        g_DISPLAY_DatabaseScreenType = 3
        key_state(4,0)=1
      endif
      if keystate(4)=0 and key_state(4,0)=1 then key_state(4,0)=0
    endif
  endif
  
  if g_DISPLAY_DatabaseScreenType = 3
    SCREEN_SYNC_DATABASE()
    `[1] - Screen Type - MEM Database
    if keystate(2)= 1 and key_state(2,0)= 0
      g_DISPLAY_DatabaseScreenType = 1
      key_state(2,0)=1
    endif
    if keystate(2)=0 and key_state(2,0)=1 then key_state(2,0)=0
    `[2] - Screen Type - HD Database
    if keystate(3)= 1 and key_state(3,0)= 0
      g_DISPLAY_DatabaseScreenType = 2
      key_state(3,0)=1
    endif
    if keystate(3)=0 and key_state(3,0)=1 then key_state(3,0)=0
    `[3] - Screen Type - SYNC Database
    if keystate(4)= 1 and key_state(4,0)= 0
      g_DISPLAY_DatabaseScreenType = 3
      key_state(4,0)=1
    endif
    if keystate(4)=0 and key_state(4,0)=1 then key_state(4,0)=0
  endif



endfunction

function SCREEN_MEM_DATABASE()

  local l_Page_Description$ as string
  local l_EDITDB_ArrPos_Start as integer
  local l_EDITDB_ArrPos_End as integer


  d3d_starttext
  
    wdth_prnt = screen width() * 0.05 : sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
 
    lib_Display_Menu()
    
    inc sp,19 * 2
    d3d_text 2, wdth_prnt, sp, 0, "1) Memory Database"
    d3d_text 1, wdth_prnt + 150, sp, 0, "2) Harddisk Database"
    d3d_text 1, wdth_prnt + 300, sp, 0, "3) SYNC Database"
    
    if g_MEM_DB_EditBDMode_ON = 1
      d3d_text 2, wdth_prnt + 50, sp + 19, 0, "** EDITING MODE ** C:" + str$(g_MEM_DB_EditBDMode_Column) + " R: " + str$(g_MEM_DB_EditBDMode_Row) + "  Data: " + g_MEM_DB_EditBDMode_DispVal$ + "  ArrPos: " + str$(g_MEM_DB_EditBDMode_ArrPosUsed) + "  DataType: " + str$(g_MEM_DB_EditBDMode_Highlight_DataType) + "  EditCol: " + str$(g_MEM_DB_EditBDMode_Paste_LastEditCol) + "  Page: " + str$(g_MEM_DB_EditBDMode_PageNumUsed)
    endif
    
    if g_DATABASE_MEM_GotoPage_Toggle = 1
      l_GotoPage_Des$ = "- Enter page number to go to: " + g_DATABASE_MEM_GotoPage_BuildString$
    else
      l_GotoPage_Des$ = ""
    endif
    l_total_pages = int(g_DATABASE_MEM_Total_Num_Records / c_DATABASE_MEM_View_MaxRecordsPerPage) + 1
    inc sp,19 * 2
    l_Page_Description$ = "Page " + str$(g_DATABASE_MEM_View_PageNumber) + " of " + str$(l_total_pages) + " (" + str$(g_DATABASE_MEM_View_PageLeftRight) + " of 4)" + "     " + l_GotoPage_Des$
    d3d_text 1, wdth_prnt, sp, 0, l_Page_Description$
    
    if g_MEM_DB_EditBDMode_ON = 1 and g_MEM_DB_EditBDMode_Paste_ClipBoard$ <> ""
      if g_MEM_DB_EditBDMode_Paste_LastEditCol = g_MEM_DB_EditBDMode_Column
        d3d_text 2, wdth_prnt + text width(l_Page_Description$) + 20, sp, 0, "** PASTE: Press V to Paste [" + g_MEM_DB_EditBDMode_Paste_ClipBoard$ + "] ** "
      else
        d3d_text 2, wdth_prnt + text width(l_Page_Description$) + 20, sp, 0, "** PASTE: Remain in the Edited Column, Press V to Paste [" + g_MEM_DB_EditBDMode_Paste_ClipBoard$ + "] **"
      endif
    endif
        
    inc sp, 19
    if g_MEM_DB_EditBDMode_ON = 1
      d3d_text 1, wdth_prnt, sp, 0, "(G: Goto Page   Home: 1st Page  End: Last Page  E: Edit Data  V: Paste Last Data  B: Copy Cell Above  L: Copy Line Above  K: Copy Cell Above to End of Page"
    else
      d3d_text 1, wdth_prnt, sp, 0, "(G: Goto Page    Home: 1st Page    End: Last Page    E: Edit Data)"
    endif
    inc sp, 19
    
    if g_DATABASE_MEM_View_PageLeftRight = 1
      `Print Headers
        l_printx = wdth_prnt
        inc sp, 19 * 1
        inc l_printx, 0 : d3d_text 2, l_printx, sp, 0, "Array"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Date"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Time"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Hole Depth"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Bit Depth"
        
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "ROP"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "WOB"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Hookload"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "RPM"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Triptank"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Block Pos"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PVT"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Torque"
        
      `Print Data
        l_Start_X = wdth_prnt + 140
        l_Start_Y = sp + 19
        for arr_lp = 0 + ((g_DATABASE_MEM_View_PageNumber - 1) * c_DATABASE_MEM_View_MaxRecordsPerPage) to c_DATABASE_MEM_View_MaxRecordsPerPage + ((g_DATABASE_MEM_View_PageNumber - 1) * c_DATABASE_MEM_View_MaxRecordsPerPage)
          inc sp, 19
          l_printx = wdth_prnt
          inc l_printx, 0 : d3d_text 1, l_printx, sp, 0, str$(arr_lp)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(arr_lp).Date$)
          inc l_printx, 75 : d3d_text 1, l_printx, sp, 0, MEM_MAIN_DATABASE(arr_lp).Time$
          
          `Draw EDIT MEM DB Highlight Data D3D Box
          if g_MEM_DB_EditBDMode_Highlight_DataReady = 1
            l_AdditionX = 0
            for add_lp = 1 to g_MEM_DB_EditBDMode_Highlight_Column
              inc l_AdditionX, MEM_DB_EditBDMode_Highlight_XOffset(g_DATABASE_MEM_View_PageLeftRight, add_lp)
            next add_lp
            d3d_box (l_Start_X + l_AdditionX), (l_Start_Y + (g_MEM_DB_EditBDMode_Highlight_Row * 19)), (l_Start_X + l_AdditionX + g_MEM_DB_EditBDMode_Highlight_PxlLength + 10), (l_Start_Y + (g_MEM_DB_EditBDMode_Highlight_Row * 19) + 18), rgb(70, 70, 70)
          endif
         
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).Hole_Depth#, 2)
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).Bit_Depth#, 2)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).ROP#, 1)  
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).WOB#, 1) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).Hookload, 0) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).RPM, 0) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).TripTank#, 2)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).BlockPosition#, 1) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).PVT#, 1)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).Torque#, 1)
        next arr_lp  
    endif
    
    if g_DATABASE_MEM_View_PageLeftRight = 2
      `Print Headers
        l_printx = wdth_prnt
        inc sp, 19 * 1
        inc l_printx, 0 : d3d_text 2, l_printx, sp, 0, "Array"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Date"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Time"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Hole Depth"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Bit Depth"

        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "SPP"
        inc l_printx, 65 : d3d_text 2, l_printx, sp, 0, "Flow IN"
        inc l_printx, 60 : d3d_text 2, l_printx, sp, 0, "SPM 1"
        inc l_printx, 55 : d3d_text 2, l_printx, sp, 0, "SPM 2"
        inc l_printx, 55 : d3d_text 2, l_printx, sp, 0, "SPM 3"
        inc l_printx, 60 : d3d_text 2, l_printx, sp, 0, "TG %"
        inc l_printx, 60 : d3d_text 2, l_printx, sp, 0, "H2S"
        inc l_printx, 60 : d3d_text 2, l_printx, sp, 0, "SYNC'd"
        inc l_printx, 60 : d3d_text 2, l_printx, sp, 0, "SYNC Saved"
        
      `Print Data
        l_Start_X = wdth_prnt + 140
        l_Start_Y = sp + 19
        for arr_lp = 0 + ((g_DATABASE_MEM_View_PageNumber - 1) * c_DATABASE_MEM_View_MaxRecordsPerPage) to c_DATABASE_MEM_View_MaxRecordsPerPage + ((g_DATABASE_MEM_View_PageNumber - 1) * c_DATABASE_MEM_View_MaxRecordsPerPage)
          inc sp, 19
          l_printx = wdth_prnt
          inc l_printx, 0 : d3d_text 1, l_printx, sp, 0, str$(arr_lp)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(arr_lp).Date$)
          inc l_printx, 75 : d3d_text 1, l_printx, sp, 0, MEM_MAIN_DATABASE(arr_lp).Time$ 
          
          `Draw EDIT MEM DB Highlight Data D3D Box
          if g_MEM_DB_EditBDMode_Highlight_DataReady = 1
            l_AdditionX = 0
            for add_lp = 1 to g_MEM_DB_EditBDMode_Highlight_Column
              inc l_AdditionX, MEM_DB_EditBDMode_Highlight_XOffset(g_DATABASE_MEM_View_PageLeftRight, add_lp)
            next add_lp
            d3d_box (l_Start_X + l_AdditionX), (l_Start_Y + (g_MEM_DB_EditBDMode_Highlight_Row * 19)), (l_Start_X + l_AdditionX + g_MEM_DB_EditBDMode_Highlight_PxlLength + 10), (l_Start_Y + (g_MEM_DB_EditBDMode_Highlight_Row * 19) + 18), rgb(70, 70, 70)
          endif
          
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).Hole_Depth#, 2)
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).Bit_Depth#, 2) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).SPP, 0)  
          inc l_printx, 65 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).FlowIn, 0) 
          inc l_printx, 60 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).SPM1, 0) 
          inc l_printx, 55 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).SPM2, 0)
          inc l_printx, 55 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).SPM3, 0)
          inc l_printx, 60 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).TotalGas#, 2)
          inc l_printx, 60 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).H2S#, 0)
          if MEM_MAIN_DATABASE(arr_lp).Record_Syncd = 0
            inc l_printx, 60 : d3d_text 1, l_printx, sp, 0, "NO"
          else
            inc l_printx, 60 : d3d_text 1, l_printx, sp, 0, "YES"
          endif
          if MEM_MAIN_DATABASE(arr_lp).Record_Sync_Saved = 0
            inc l_printx, 60 : d3d_text 1, l_printx, sp, 0, "NO"
          else
            inc l_printx, 60 : d3d_text 1, l_printx, sp, 0, "YES"
          endif
        next arr_lp
    endif   

    if g_DATABASE_MEM_View_PageLeftRight = 3
      `Print Headers
        l_printx = wdth_prnt
        inc sp, 19 * 1
        inc l_printx, 0 : d3d_text 2, l_printx, sp, 0, "Array"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Date"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Time"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Hole Depth"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Bit Depth"
        
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT1"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT2"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT3"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT4"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT5"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT6"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT7"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT8"
        
      `Print Data
        l_Start_X = wdth_prnt + 140
        l_Start_Y = sp + 19
        for arr_lp = 0 + ((g_DATABASE_MEM_View_PageNumber - 1) * c_DATABASE_MEM_View_MaxRecordsPerPage) to c_DATABASE_MEM_View_MaxRecordsPerPage + ((g_DATABASE_MEM_View_PageNumber - 1) * c_DATABASE_MEM_View_MaxRecordsPerPage)
          inc sp, 19
          l_printx = wdth_prnt
          inc l_printx, 0 : d3d_text 1, l_printx, sp, 0, str$(arr_lp)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(arr_lp).Date$)
          inc l_printx, 75 : d3d_text 1, l_printx, sp, 0, MEM_MAIN_DATABASE(arr_lp).Time$
          
          `Draw EDIT MEM DB Highlight Data D3D Box
          if g_MEM_DB_EditBDMode_Highlight_DataReady = 1
            l_AdditionX = 0
            for add_lp = 1 to g_MEM_DB_EditBDMode_Highlight_Column
              inc l_AdditionX, MEM_DB_EditBDMode_Highlight_XOffset(g_DATABASE_MEM_View_PageLeftRight, add_lp)
            next add_lp
            d3d_box (l_Start_X + l_AdditionX), (l_Start_Y + (g_MEM_DB_EditBDMode_Highlight_Row * 19)), (l_Start_X + l_AdditionX + g_MEM_DB_EditBDMode_Highlight_PxlLength + 10), (l_Start_Y + (g_MEM_DB_EditBDMode_Highlight_Row * 19) + 18), rgb(70, 70, 70)
          endif
          
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).Hole_Depth#, 2)
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).Bit_Depth#, 2)
          
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).PIT1#, 1)  
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).PIT2#, 1) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).PIT3#, 1) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).PIT4#, 1) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).PIT5#, 1)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).PIT6#, 1) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).PIT7#, 1)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).PIT8#, 1)
          
        next arr_lp  
    endif
    
    if g_DATABASE_MEM_View_PageLeftRight = 4
      `Print Headers
        l_printx = wdth_prnt
        inc sp, 19 * 1
        inc l_printx, 0 : d3d_text 2, l_printx, sp, 0, "Array"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Date"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Time"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Hole Depth"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Bit Depth"
        
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "TEMP IN"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "TEMP OUT"
        inc l_printx, 100 : d3d_text 2, l_printx, sp, 0, "COMMENT"
        inc l_printx, 150 : d3d_text 2, l_printx, sp, 0, "CSG PRESS"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "FLOW OUT"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "TOTAL STROKES"

      `Print Data
        l_Start_X = wdth_prnt + 140
        l_Start_Y = sp + 19
        for arr_lp = 0 + ((g_DATABASE_MEM_View_PageNumber - 1) * c_DATABASE_MEM_View_MaxRecordsPerPage) to c_DATABASE_MEM_View_MaxRecordsPerPage + ((g_DATABASE_MEM_View_PageNumber - 1) * c_DATABASE_MEM_View_MaxRecordsPerPage)
          inc sp, 19
          l_printx = wdth_prnt
          inc l_printx, 0 : d3d_text 1, l_printx, sp, 0, str$(arr_lp)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(arr_lp).Date$)
          inc l_printx, 75 : d3d_text 1, l_printx, sp, 0, MEM_MAIN_DATABASE(arr_lp).Time$
          
          `Draw EDIT MEM DB Highlight Data D3D Box
          if g_MEM_DB_EditBDMode_Highlight_DataReady = 1
            l_AdditionX = 0
            for add_lp = 1 to g_MEM_DB_EditBDMode_Highlight_Column
              inc l_AdditionX, MEM_DB_EditBDMode_Highlight_XOffset(g_DATABASE_MEM_View_PageLeftRight, add_lp)
            next add_lp
            d3d_box (l_Start_X + l_AdditionX), (l_Start_Y + (g_MEM_DB_EditBDMode_Highlight_Row * 19)), (l_Start_X + l_AdditionX + g_MEM_DB_EditBDMode_Highlight_PxlLength + 10), (l_Start_Y + (g_MEM_DB_EditBDMode_Highlight_Row * 19) + 18), rgb(70, 70, 70)
          endif
          
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).Hole_Depth#, 1)
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).Bit_Depth#, 1)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).TempIN#, 1)  
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).TempOUT#, 1) 
          inc l_printx, 100 : d3d_text 1, l_printx, sp, 0, MEM_MAIN_DATABASE(arr_lp).Comment$
          inc l_printx, 150 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).CSG)
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).FlowOUT#, 1)
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(MEM_MAIN_DATABASE(arr_lp).Total_Strokes, 0)
          
        next arr_lp  
    endif
    
  d3d_endtext
  
  
  `Show the MEM DB EDIT DATA INPUT BOX
    if g_MEM_DB_EditBDMode_EDIT_LOCK = 1
    

    
    
    
      x1 = g_ENG_Half_Screen_Width - 200
      y1 = g_ENG_Half_Screen_Height - 150
      
      x2 = g_ENG_Half_Screen_Width + 200
      y2 = g_ENG_Half_Screen_Height + 150
      
      d3d_box x1, y1, x2, y2, rgb(70, 70, 70)
      
       

             
      
      
      d3d_starttext
      
        d3d_text 1, x1 + 25, y1 + 40 + 0 , 0, "Edit Data Value : " + g_MEM_DB_EditBDMode_Final_ColumnName$
        d3d_text 1, x1 + 25, y1 + 40 + 20, 0, "Original Value : " + g_MEM_DB_EditBDMode_Final_Orignal_Data$
        d3d_text 1, x1 + 25, y1 + 40 + 40, 0, "Array Position : " + str$(g_MEM_DB_EditBDMode_FInal_ArrayPos)
        d3d_text 1, x1 + 25, y1 + 40 + 60, 0, "Data Type : " + str$(g_MEM_DB_EditBDMode_Final_DataType)
        
        lib_INPUT_GetString_NumbersOnly()
        g_MEM_DB_EditBDMode_Input_BuildStr$ = g_ENGINE_InputNumbersOnly$
        
  	  	if timer() < g_MEM_DB_EditBDMode_Input_FlashTimer + 500
  	    	l_Flash$ = ">"
  	  	else
  	    	l_Flash$ = ""
  	    	if timer() > g_MEM_DB_EditBDMode_Input_FlashTimer + 1000 then g_MEM_DB_EditBDMode_Input_FlashTimer = timer()
  	  	endif
  	  	 
  	  	d3d_text 1, x1 + 25, y1 + 40 + 90, 0, "Enter New Data  " + l_Flash$
  	  	d3d_text 1, x1 + 25 + 110, y1 + 40 + 90, 0, ": " + g_MEM_DB_EditBDMode_Input_BuildStr$
     
      d3d_endtext
    
    endif

  
  `---------------- MEM DB EDITOR -----------------
  
  	l_EDITDB_ArrPos_Start = 0 + ((g_DATABASE_MEM_View_PageNumber - 1) * c_DATABASE_MEM_View_MaxRecordsPerPage)
  	l_EDITDB_ArrPos_End = c_DATABASE_MEM_View_MaxRecordsPerPage + ((g_DATABASE_MEM_View_PageNumber - 1) * c_DATABASE_MEM_View_MaxRecordsPerPage)
  	
    `This section just handles program flow.
  		`Edit MEM DB Flow
  		if g_MEM_DB_EditBDMode_ON = 1
    		EDIT_MEM_DB_ViaCmndConsoleViewer(g_DATABASE_MEM_View_PageLeftRight, l_EDITDB_ArrPos_Start)
  		endif
  		`Handle Database Edit Mode Input Flow
  		`NOTE: The input functions are at the end of this function so they have access to the local variables determined in this function
  		if g_MEM_DB_EditBDMode_ON = 1
    		INPUT_SCREEN_MEM_EditDBMode(g_DATABASE_MEM_View_PageLeftRight)
  		else
    		INPUT_SCREEN_MEM()
  		endif
   
     

endfunction

function EDIT_MEM_DB_ViaCmndConsoleViewer(r_LeftRightPageNum as integer, r_Edit_ArrPos as integer)

  `This function is the main function for editing the MEM DB.

  `Get Data Item Value currently being edited (so we have it to display and have its pixel width etc).
    g_MEM_DB_EditBDMode_DispVal$ = lib_MEM_EditBDMode_DispVal(r_LeftRightPageNum, g_MEM_DB_EditBDMode_Row, g_MEM_DB_EditBDMode_Column, r_Edit_ArrPos + g_MEM_DB_EditBDMode_Row)
  	



endfunction

function lib_MEM_EditBDMode_DispVal(r_PageNum as integer, r_DataRow as integer, r_DataColumn as integer, r_ArrPos as integer)

  `This function outputs a data item from the MEMORY DATABASE using the Data Type and Array Position
  `to a single STRING. I.e. converts any MEM DB item (float, word, int etc) into a single string
  `for display.

  g_MEM_DB_EditBDMode_ArrPosUsed = r_ArrPos
  g_MEM_DB_EditBDMode_PageNumUsed = r_PageNum
  
  g_MEM_DB_EditBDMode_Highlight_DataReady = 1
  g_MEM_DB_EditBDMode_Highlight_Row = r_DataRow
  g_MEM_DB_EditBDMode_Highlight_Column = r_DataColumn
  

  local p_OUTPUT$ as string
  
  `Get ITEM DATA as STRING (In correct number of decimal places)
  if r_PageNum = 1
    if r_DataColumn = 1 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).Hole_Depth#, 2)
    if r_DataColumn = 2 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).Bit_Depth#, 2)
    if r_DataColumn = 3 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).ROP#, 2)
    if r_DataColumn = 4 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).WOB#, 2)
    if r_DataColumn = 5 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).Hookload)
    if r_DataColumn = 6 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).RPM)
    if r_DataColumn = 7 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).TripTank#, 2)
    if r_DataColumn = 8 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).BlockPosition#, 2)
    if r_DataColumn = 9 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).PVT#, 2)
    if r_DataColumn = 10 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).Torque#, 2)
    `
    if r_DataColumn = 1 then g_MEM_DB_EditBDMode_Column_Name$ = "Hole Depth"
    if r_DataColumn = 2 then  g_MEM_DB_EditBDMode_Column_Name$ = "Bit Depth"
    if r_DataColumn = 3 then  g_MEM_DB_EditBDMode_Column_Name$ = "ROP"
    if r_DataColumn = 4 then  g_MEM_DB_EditBDMode_Column_Name$ = "WOB"
    if r_DataColumn = 5 then  g_MEM_DB_EditBDMode_Column_Name$ = "Hookload"
    if r_DataColumn = 6 then  g_MEM_DB_EditBDMode_Column_Name$ = "RPM"
    if r_DataColumn = 7 then  g_MEM_DB_EditBDMode_Column_Name$ = "Triptank"
    if r_DataColumn = 8 then  g_MEM_DB_EditBDMode_Column_Name$ = "Block Position"
    if r_DataColumn = 9 then  g_MEM_DB_EditBDMode_Column_Name$ = "PVT"
    if r_DataColumn = 10 then  g_MEM_DB_EditBDMode_Column_Name$ = "Torque"
    `
    if r_DataColumn = 1 then g_MEM_DB_EditBDMode_Highlight_DataType = 1
    if r_DataColumn = 2 then g_MEM_DB_EditBDMode_Highlight_DataType = 2
    if r_DataColumn = 3 then g_MEM_DB_EditBDMode_Highlight_DataType = 3
    if r_DataColumn = 4 then g_MEM_DB_EditBDMode_Highlight_DataType = 4
    if r_DataColumn = 5 then g_MEM_DB_EditBDMode_Highlight_DataType = 5
    if r_DataColumn = 6 then g_MEM_DB_EditBDMode_Highlight_DataType = 6
    if r_DataColumn = 7 then g_MEM_DB_EditBDMode_Highlight_DataType = 7
    if r_DataColumn = 8 then g_MEM_DB_EditBDMode_Highlight_DataType = 8
    if r_DataColumn = 9 then g_MEM_DB_EditBDMode_Highlight_DataType = 9
    if r_DataColumn = 10 then g_MEM_DB_EditBDMode_Highlight_DataType = 10
  endif
  if r_PageNum = 2
    if r_DataColumn = 1 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).Hole_Depth#, 2)
    if r_DataColumn = 2 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).Bit_Depth#, 2)
    if r_DataColumn = 3 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).SPP)
    if r_DataColumn = 4 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).FlowIn)
    if r_DataColumn = 5 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).SPM1)
    if r_DataColumn = 6 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).SPM2)
    if r_DataColumn = 7 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).SPM3)
    if r_DataColumn = 8 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).TotalGas#, 2)
    if r_DataColumn = 9 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).H2S#, 2)
    `
    if r_DataColumn = 1 then g_MEM_DB_EditBDMode_Column_Name$ = "Hole Depth"
    if r_DataColumn = 2 then  g_MEM_DB_EditBDMode_Column_Name$ = "Bit Depth"
    if r_DataColumn = 3 then  g_MEM_DB_EditBDMode_Column_Name$ = "SPP"
    if r_DataColumn = 4 then  g_MEM_DB_EditBDMode_Column_Name$ = "Flow IN"
    if r_DataColumn = 5 then  g_MEM_DB_EditBDMode_Column_Name$ = "SPM 1"
    if r_DataColumn = 6 then  g_MEM_DB_EditBDMode_Column_Name$ = "SPM 2"
    if r_DataColumn = 7 then  g_MEM_DB_EditBDMode_Column_Name$ = "SPM 3"
    if r_DataColumn = 8 then  g_MEM_DB_EditBDMode_Column_Name$ = "Total Gas"
    if r_DataColumn = 9 then  g_MEM_DB_EditBDMode_Column_Name$ = "H2S"
    `
    if r_DataColumn = 1 then g_MEM_DB_EditBDMode_Highlight_DataType = 1
    if r_DataColumn = 2 then g_MEM_DB_EditBDMode_Highlight_DataType = 2
    if r_DataColumn = 3 then g_MEM_DB_EditBDMode_Highlight_DataType = 11
    if r_DataColumn = 4 then g_MEM_DB_EditBDMode_Highlight_DataType = 12
    if r_DataColumn = 5 then g_MEM_DB_EditBDMode_Highlight_DataType = 13
    if r_DataColumn = 6 then g_MEM_DB_EditBDMode_Highlight_DataType = 14
    if r_DataColumn = 7 then g_MEM_DB_EditBDMode_Highlight_DataType = 15
    if r_DataColumn = 8 then g_MEM_DB_EditBDMode_Highlight_DataType = 16
    if r_DataColumn = 9 then g_MEM_DB_EditBDMode_Highlight_DataType = 17
  endif
  if r_PageNum = 3
    if r_DataColumn = 1 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).Hole_Depth#, 2)
    if r_DataColumn = 2 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).Bit_Depth#, 2)
    if r_DataColumn = 3 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).PIT1#, 2)
    if r_DataColumn = 4 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).PIT2#, 2)
    if r_DataColumn = 5 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).PIT3#, 2)
    if r_DataColumn = 6 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).PIT4#, 2)
    if r_DataColumn = 7 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).PIT5#, 2)
    if r_DataColumn = 8 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).PIT6#, 2)
    if r_DataColumn = 9 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).PIT7#, 2)
    if r_DataColumn = 10 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).PIT8#, 2)
    `
    if r_DataColumn = 1 then g_MEM_DB_EditBDMode_Column_Name$ = "Hole Depth"
    if r_DataColumn = 2 then  g_MEM_DB_EditBDMode_Column_Name$ = "Bit Depth"
    if r_DataColumn = 3 then  g_MEM_DB_EditBDMode_Column_Name$ = "Pit 1"
    if r_DataColumn = 4 then  g_MEM_DB_EditBDMode_Column_Name$ = "Pit 2"
    if r_DataColumn = 5 then  g_MEM_DB_EditBDMode_Column_Name$ = "Pit 3"
    if r_DataColumn = 6 then  g_MEM_DB_EditBDMode_Column_Name$ = "Pit 4"
    if r_DataColumn = 7 then  g_MEM_DB_EditBDMode_Column_Name$ = "Pit 5"
    if r_DataColumn = 8 then  g_MEM_DB_EditBDMode_Column_Name$ = "Pit 6"
    if r_DataColumn = 9 then  g_MEM_DB_EditBDMode_Column_Name$ = "Pit 7"
    if r_DataColumn = 10 then  g_MEM_DB_EditBDMode_Column_Name$ = "Pit 8"
    `
    if r_DataColumn = 1 then g_MEM_DB_EditBDMode_Highlight_DataType = 1
    if r_DataColumn = 2 then g_MEM_DB_EditBDMode_Highlight_DataType = 2
    if r_DataColumn = 3 then g_MEM_DB_EditBDMode_Highlight_DataType = 18
    if r_DataColumn = 4 then g_MEM_DB_EditBDMode_Highlight_DataType = 19
    if r_DataColumn = 5 then g_MEM_DB_EditBDMode_Highlight_DataType = 20
    if r_DataColumn = 6 then g_MEM_DB_EditBDMode_Highlight_DataType = 21
    if r_DataColumn = 7 then g_MEM_DB_EditBDMode_Highlight_DataType = 22
    if r_DataColumn = 8 then g_MEM_DB_EditBDMode_Highlight_DataType = 23
    if r_DataColumn = 9 then g_MEM_DB_EditBDMode_Highlight_DataType = 24
    if r_DataColumn = 10 then g_MEM_DB_EditBDMode_Highlight_DataType = 25
  endif
  if r_PageNum = 4
    if r_DataColumn = 1 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).Hole_Depth#, 2)
    if r_DataColumn = 2 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).Bit_Depth#, 2)
    if r_DataColumn = 3 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).TempIN#, 2)
    if r_DataColumn = 4 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).TempOUT#, 2)
    if r_DataColumn = 5 then p_OUTPUT$ = MEM_MAIN_DATABASE(r_ArrPos).Comment$
    if r_DataColumn = 6 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).CSG)
    if r_DataColumn = 7 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).FlowOUT#, 2)
    if r_DataColumn = 8 then p_OUTPUT$ = str$(MEM_MAIN_DATABASE(r_ArrPos).Total_Strokes, 0)
    `
    if r_DataColumn = 1 then g_MEM_DB_EditBDMode_Column_Name$ = "Hole Depth"
    if r_DataColumn = 2 then  g_MEM_DB_EditBDMode_Column_Name$ = "Bit Depth"
    if r_DataColumn = 3 then  g_MEM_DB_EditBDMode_Column_Name$ = "Temp IN"
    if r_DataColumn = 4 then  g_MEM_DB_EditBDMode_Column_Name$ = "Temp OUT"
    if r_DataColumn = 5 then  g_MEM_DB_EditBDMode_Column_Name$ = "Comment"
    if r_DataColumn = 6 then  g_MEM_DB_EditBDMode_Column_Name$ = "Casing Pressure"
    if r_DataColumn = 7 then  g_MEM_DB_EditBDMode_Column_Name$ = "Flow OUT"
    if r_DataColumn = 8 then  g_MEM_DB_EditBDMode_Column_Name$ = "Total Strokes"
    `
    if r_DataColumn = 1 then g_MEM_DB_EditBDMode_Highlight_DataType = 1
    if r_DataColumn = 2 then g_MEM_DB_EditBDMode_Highlight_DataType = 2
    if r_DataColumn = 3 then g_MEM_DB_EditBDMode_Highlight_DataType = 26
    if r_DataColumn = 4 then g_MEM_DB_EditBDMode_Highlight_DataType = 27
    if r_DataColumn = 5 then g_MEM_DB_EditBDMode_Highlight_DataType = 28
    if r_DataColumn = 6 then g_MEM_DB_EditBDMode_Highlight_DataType = 29
    if r_DataColumn = 7 then g_MEM_DB_EditBDMode_Highlight_DataType = 30
    if r_DataColumn = 8 then g_MEM_DB_EditBDMode_Highlight_DataType = 31
  endif

  g_MEM_DB_EditBDMode_Highlight_PxlLength = d3d_gettextwidth(1, p_OUTPUT$)

endfunction p_OUTPUT$

function lib_MEM_EditBDMode_CopyLineAbove(r_ArrPos as integer)

  Local l_Above_Row_ArrPos as integer

  `This function copies down the line above to allow very easy copying of whole lines in the DB.
  
  MEM_MAIN_DATABASE(r_ArrPos).Hole_Depth# = MEM_MAIN_DATABASE(r_ArrPos - 1).Hole_Depth#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Hole_Depth#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(1, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).Bit_Depth# = MEM_MAIN_DATABASE(r_ArrPos - 1).Bit_Depth#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Bit_Depth#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(2, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  
  `[1]
  MEM_MAIN_DATABASE(r_ArrPos).ROP# = MEM_MAIN_DATABASE(r_ArrPos - 1).ROP#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).ROP#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(3, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).WOB# = MEM_MAIN_DATABASE(r_ArrPos - 1).WOB#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).WOB#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(4, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).Hookload = MEM_MAIN_DATABASE(r_ArrPos - 1).Hookload
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Hookload)
    lib_MEM_EditBDMode_WriteDatatoHDDB(5, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).RPM = MEM_MAIN_DATABASE(r_ArrPos - 1).RPM
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).RPM)
    lib_MEM_EditBDMode_WriteDatatoHDDB(6, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).TripTank# = MEM_MAIN_DATABASE(r_ArrPos - 1).TripTank#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).TripTank#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(7, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).BlockPosition# = MEM_MAIN_DATABASE(r_ArrPos - 1).BlockPosition#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).BlockPosition#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(8, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).PVT# = MEM_MAIN_DATABASE(r_ArrPos - 1).PVT#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PVT#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(9, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).Torque# = MEM_MAIN_DATABASE(r_ArrPos - 1).Torque#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Torque#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(10, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$) 
  `[2]
  MEM_MAIN_DATABASE(r_ArrPos).SPP = MEM_MAIN_DATABASE(r_ArrPos - 1).SPP
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).SPP)
    lib_MEM_EditBDMode_WriteDatatoHDDB(11, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).FlowIn = MEM_MAIN_DATABASE(r_ArrPos - 1).FlowIn
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).FlowIn)
    lib_MEM_EditBDMode_WriteDatatoHDDB(12, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).SPM1 = MEM_MAIN_DATABASE(r_ArrPos - 1).SPM1
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).SPM1)
    lib_MEM_EditBDMode_WriteDatatoHDDB(13, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).SPM2 = MEM_MAIN_DATABASE(r_ArrPos - 1).SPM2
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).SPM2)
    lib_MEM_EditBDMode_WriteDatatoHDDB(14, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).SPM3 = MEM_MAIN_DATABASE(r_ArrPos - 1).SPM3
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).SPM3)
    lib_MEM_EditBDMode_WriteDatatoHDDB(15, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).TotalGas# = MEM_MAIN_DATABASE(r_ArrPos - 1).TotalGas#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).TotalGas#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(16, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).H2S# = MEM_MAIN_DATABASE(r_ArrPos - 1).H2S#
  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).H2S#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(17, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  `[3]
  MEM_MAIN_DATABASE(r_ArrPos).PIT1# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT1#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT1#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(18, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).PIT2# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT2#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT2#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(19, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).PIT3# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT3#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT3#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(20, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).PIT4# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT4#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT4#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(21, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).PIT5# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT5#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT5#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(22, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).PIT6# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT6#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT6#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(23, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).PIT7# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT7#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT7#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(24, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).PIT8# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT8#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT8#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(25, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    
  `[4]
  MEM_MAIN_DATABASE(r_ArrPos).TempIN# = MEM_MAIN_DATABASE(r_ArrPos - 1).TempIN#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).TempIN#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(26, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).TempOUT# = MEM_MAIN_DATABASE(r_ArrPos - 1).TempOUT#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).TempOUT#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(27, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
//   MEM_MAIN_DATABASE(r_ArrPos).Comment$ = MEM_MAIN_DATABASE(r_ArrPos - 1).Comment$
//     g_MEM_DB_EditBDMode_Paste_ClipBoard$ = MEM_MAIN_DATABASE(r_ArrPos - 1).Comment$
//     lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).CSG = MEM_MAIN_DATABASE(r_ArrPos - 1).CSG
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).CSG)
    lib_MEM_EditBDMode_WriteDatatoHDDB(29, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).FlowOUT# = MEM_MAIN_DATABASE(r_ArrPos - 1).FlowOUT#
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).FlowOUT#)
    lib_MEM_EditBDMode_WriteDatatoHDDB(30, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
  MEM_MAIN_DATABASE(r_ArrPos).Total_Strokes = MEM_MAIN_DATABASE(r_ArrPos - 1).Total_Strokes
    g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Total_Strokes)
    lib_MEM_EditBDMode_WriteDatatoHDDB(31, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)


endfunction

function lib_MEM_EditBDMode_CopyCellAbovetoEOP(r_DBPageLeftRightNum as integer, r_ColumnID as integer, r_ArrPos as integer, r_RowNumber as integer)

  `This function copies the value in the CELL ABOVE down all the column to the END OF PAGE
  
  local l_CopyValue_ArrPos as integer
  local l_Write_Start_ArrPos as integer
  local l_Write_End_ArrPos as integer
  
  l_Write_Start_ArrPos = r_ArrPos
  l_Write_End_ArrPos = r_ArrPos + (25-r_RowNumber)
  l_CopyValue_ArrPos = r_ArrPos - 1
  
  
  for write_lp = l_Write_Start_ArrPos to l_Write_End_ArrPos
  
    if r_DBPageLeftRightNum = 1
      if r_ColumnID = 1 
        MEM_MAIN_DATABASE(write_lp).Hole_Depth# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Hole_Depth#
        g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Hole_Depth#)
        lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      endif  
      if r_ColumnID = 2 
        MEM_MAIN_DATABASE(write_lp).Bit_Depth# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Bit_Depth#
        g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Bit_Depth#)
        lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      endif  
      if r_ColumnID = 3 
        MEM_MAIN_DATABASE(write_lp).ROP# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).ROP#
        g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).ROP#)
        lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      endif  
      if r_ColumnID = 4 
        MEM_MAIN_DATABASE(write_lp).WOB# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).WOB#
        g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).WOB#)
        lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      endif  
      if r_ColumnID = 5 
        MEM_MAIN_DATABASE(write_lp).Hookload = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Hookload
        g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Hookload)
        lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      endif  
      if r_ColumnID = 6 
        MEM_MAIN_DATABASE(write_lp).RPM = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).RPM
        g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).RPM)
        lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      endif  
      if r_ColumnID = 7 
        MEM_MAIN_DATABASE(write_lp).TripTank# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).TripTank#
        g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).TripTank#)
        lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      endif  
      if r_ColumnID = 8 
        MEM_MAIN_DATABASE(write_lp).BlockPosition# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).BlockPosition#
        g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).BlockPosition#)
        lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      endif  
      if r_ColumnID = 9 
        MEM_MAIN_DATABASE(write_lp).PVT# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PVT#
        g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PVT#)
        lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      endif  
      if r_ColumnID = 10 
        MEM_MAIN_DATABASE(write_lp).Torque# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Torque#
        g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Torque#)
        lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      endif  
    endif
  
  	if r_DBPageLeftRightNum = 2
    	if r_ColumnID = 1 
    	  MEM_MAIN_DATABASE(write_lp).Hole_Depth# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Hole_Depth#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Hole_Depth#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 2 
    	  MEM_MAIN_DATABASE(write_lp).Bit_Depth# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Bit_Depth#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Bit_Depth#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 3 
    	  MEM_MAIN_DATABASE(write_lp).SPP = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).SPP
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).SPP)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 4 
    	  MEM_MAIN_DATABASE(write_lp).FlowIn = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).FlowIn
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).FlowIn)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 5 
    	  MEM_MAIN_DATABASE(write_lp).SPM1 = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).SPM1
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).SPM1)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 6 
    	  MEM_MAIN_DATABASE(write_lp).SPM2 = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).SPM2
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).SPM2)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 7 
    	  MEM_MAIN_DATABASE(write_lp).SPM3 = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).SPM3
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).SPM3)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	 endif 
    	if r_ColumnID = 8 
    	  MEM_MAIN_DATABASE(write_lp).TotalGas# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).TotalGas#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).TotalGas#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 9 
    	  MEM_MAIN_DATABASE(write_lp).H2S# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).H2S#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).H2S#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
  	endif
  	
  	
  	if r_DBPageLeftRightNum = 3
    	if r_ColumnID = 1 
    	  MEM_MAIN_DATABASE(write_lp).Hole_Depth# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Hole_Depth#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Hole_Depth#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 2 
    	  MEM_MAIN_DATABASE(write_lp).Bit_Depth# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Bit_Depth#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Bit_Depth#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 3 
    	  MEM_MAIN_DATABASE(write_lp).PIT1# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT1#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT1#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	 endif 
    	if r_ColumnID = 4 
    	  MEM_MAIN_DATABASE(write_lp).PIT2# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT2#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT2#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 5 
    	  MEM_MAIN_DATABASE(write_lp).PIT3# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT3#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT3#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 6 
    	  MEM_MAIN_DATABASE(write_lp).PIT4# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT4#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT4#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 7 
    	  MEM_MAIN_DATABASE(write_lp).PIT5# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT5#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT5#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 8 
    	  MEM_MAIN_DATABASE(write_lp).PIT6# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT6#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT6#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 9 
    	  MEM_MAIN_DATABASE(write_lp).PIT7# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT7#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT7#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 10 
    	  MEM_MAIN_DATABASE(write_lp).PIT8# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT8#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).PIT8#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
  	endif
  	
  	
  	if r_DBPageLeftRightNum = 4
    	if r_ColumnID = 1 
    	  MEM_MAIN_DATABASE(write_lp).Hole_Depth# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Hole_Depth#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Hole_Depth#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 2 
    	  MEM_MAIN_DATABASE(write_lp).Bit_Depth# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Bit_Depth#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Bit_Depth#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 3 
    	  MEM_MAIN_DATABASE(write_lp).TempIN# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).TempIN#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).TempIN#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 4 
    	  MEM_MAIN_DATABASE(write_lp).TempOUT# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).TempOUT#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).TempOUT#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
//     	if r_ColumnID = 5 
//     	  MEM_MAIN_DATABASE(write_lp).Comment$ = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Comment$
//     	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Comment$
//     	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
//     	endif  
    	if r_ColumnID = 6 
    	  MEM_MAIN_DATABASE(write_lp).CSG = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).CSG
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).CSG)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 7 
    	  MEM_MAIN_DATABASE(write_lp).FlowOUT# = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).FlowOUT#
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).FlowOUT#)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
    	if r_ColumnID = 8 
    	  MEM_MAIN_DATABASE(write_lp).Total_Strokes = MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Total_Strokes
    	  g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(l_CopyValue_ArrPos).Total_Strokes)
    	  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, write_lp, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    	endif  
  	endif
  
  next write_lp
  


endfunction

function lib_MEM_EditBDMode_CopyCellAbove(r_DBPageLeftRightNum as integer, r_ColumnID as integer, r_ArrPos as integer)

  `This function copies down the cell above to allow easy copying in the DB.
    
  `EDIT DATA MODE - PASTE LAST EDITED DATA
 ` global g_MEM_DB_EditBDMode_Paste_ClipBoard$ as string : `Saved last build$ for paste (last g_MEM_DB_EditBDMode_Input_BuildStr$)
 ` global g_MEM_DB_EditBDMode_Paste_LastEditCol as integer : `Stores the last data edited column, so we know the datatype is locked/the same when we paste, else we might try and paste a different data type into the wrong column.
 ` global g_MEM_DB_EditBDMode_Paste_Datatype as integer
 ` global g_MEM_DB_EditBDMode_Paste_ArrPos as integer
    
    
  `1. CHANGE THE DATABASE DATA  
  if r_DBPageLeftRightNum = 1
    `
    if r_ColumnID = 1
      MEM_MAIN_DATABASE(r_ArrPos).Hole_Depth# = MEM_MAIN_DATABASE(r_ArrPos - 1).Hole_Depth#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Hole_Depth#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      g_MEM_DB_EditBDMode_Paste_LastEditCol = r_ColumnID
      g_MEM_DB_EditBDMode_Paste_Datatype = 1
      g_MEM_DB_EditBDMode_Final_DataType = 1
    endif
    if r_ColumnID = 2
      MEM_MAIN_DATABASE(r_ArrPos).Bit_Depth# = MEM_MAIN_DATABASE(r_ArrPos - 1).Bit_Depth#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Hole_Depth#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      g_MEM_DB_EditBDMode_Paste_LastEditCol = r_ColumnID
      g_MEM_DB_EditBDMode_Paste_Datatype = 2
      g_MEM_DB_EditBDMode_Final_DataType = 2
    endif
    `
    if r_ColumnID = 3
      MEM_MAIN_DATABASE(r_ArrPos).ROP# = MEM_MAIN_DATABASE(r_ArrPos - 1).ROP#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).ROP#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      g_MEM_DB_EditBDMode_Paste_LastEditCol = r_ColumnID
      g_MEM_DB_EditBDMode_Paste_Datatype = 3
      g_MEM_DB_EditBDMode_Final_DataType = 3
    endif
    if r_ColumnID = 4
      MEM_MAIN_DATABASE(r_ArrPos).WOB# = MEM_MAIN_DATABASE(r_ArrPos - 1).WOB#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).WOB#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      g_MEM_DB_EditBDMode_Paste_LastEditCol = r_ColumnID
      g_MEM_DB_EditBDMode_Paste_Datatype = 4
      g_MEM_DB_EditBDMode_Final_DataType = 4
    endif
    if r_ColumnID = 5
      MEM_MAIN_DATABASE(r_ArrPos).Hookload = MEM_MAIN_DATABASE(r_ArrPos - 1).Hookload
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Hookload)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      g_MEM_DB_EditBDMode_Paste_LastEditCol = r_ColumnID
      g_MEM_DB_EditBDMode_Paste_Datatype = 5
      g_MEM_DB_EditBDMode_Final_DataType = 5
    endif
    if r_ColumnID = 6
      MEM_MAIN_DATABASE(r_ArrPos).RPM = MEM_MAIN_DATABASE(r_ArrPos - 1).RPM
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).RPM)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      g_MEM_DB_EditBDMode_Paste_LastEditCol = r_ColumnID
      g_MEM_DB_EditBDMode_Paste_Datatype = 6
      g_MEM_DB_EditBDMode_Final_DataType = 6
    endif  
    if r_ColumnID = 7
      MEM_MAIN_DATABASE(r_ArrPos).TripTank# = MEM_MAIN_DATABASE(r_ArrPos - 1).TripTank#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).TripTank#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      g_MEM_DB_EditBDMode_Paste_LastEditCol = r_ColumnID
      g_MEM_DB_EditBDMode_Paste_Datatype = 7
      g_MEM_DB_EditBDMode_Final_DataType = 7
    endif
    if r_ColumnID = 8
      MEM_MAIN_DATABASE(r_ArrPos).BlockPosition# = MEM_MAIN_DATABASE(r_ArrPos - 1).BlockPosition#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).BlockPosition#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      g_MEM_DB_EditBDMode_Paste_LastEditCol = r_ColumnID
      g_MEM_DB_EditBDMode_Paste_Datatype = 8
      g_MEM_DB_EditBDMode_Final_DataType = 8
    endif
    if r_ColumnID = 9
      MEM_MAIN_DATABASE(r_ArrPos).PVT# = MEM_MAIN_DATABASE(r_ArrPos - 1).PVT#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PVT#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      g_MEM_DB_EditBDMode_Paste_LastEditCol = r_ColumnID
      g_MEM_DB_EditBDMode_Paste_Datatype = 9
      g_MEM_DB_EditBDMode_Final_DataType = 9
    endif
    if r_ColumnID = 10
      MEM_MAIN_DATABASE(r_ArrPos).Torque# = MEM_MAIN_DATABASE(r_ArrPos - 1).Torque#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Torque#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      g_MEM_DB_EditBDMode_Paste_LastEditCol = r_ColumnID
      g_MEM_DB_EditBDMode_Paste_Datatype = 10
      g_MEM_DB_EditBDMode_Final_DataType = 10
    endif
  
  endif
  
  
  if r_DBPageLeftRightNum = 2
    if r_ColumnID = 1
      MEM_MAIN_DATABASE(r_ArrPos).Hole_Depth# = MEM_MAIN_DATABASE(r_ArrPos - 1).Hole_Depth#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Hole_Depth#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif  
    if r_ColumnID = 2 
      MEM_MAIN_DATABASE(r_ArrPos).Bit_Depth# = MEM_MAIN_DATABASE(r_ArrPos - 1).Bit_Depth#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Bit_Depth#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif  
    if r_ColumnID = 3 
      MEM_MAIN_DATABASE(r_ArrPos).SPP = MEM_MAIN_DATABASE(r_ArrPos - 1).SPP
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).SPP)
    endif  lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    if r_ColumnID = 4 
      MEM_MAIN_DATABASE(r_ArrPos).FlowIn = MEM_MAIN_DATABASE(r_ArrPos - 1).FlowIn
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).FlowIn)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif  
    if r_ColumnID = 5 
      MEM_MAIN_DATABASE(r_ArrPos).SPM1 = MEM_MAIN_DATABASE(r_ArrPos - 1).SPM1
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).SPM1)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif  
    if r_ColumnID = 6 
      MEM_MAIN_DATABASE(r_ArrPos).SPM2 = MEM_MAIN_DATABASE(r_ArrPos - 1).SPM2
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).SPM2)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif  
    if r_ColumnID = 7 
      MEM_MAIN_DATABASE(r_ArrPos).SPM3 = MEM_MAIN_DATABASE(r_ArrPos - 1).SPM3
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).SPM3)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif  
    if r_ColumnID = 8 
      MEM_MAIN_DATABASE(r_ArrPos).TotalGas# = MEM_MAIN_DATABASE(r_ArrPos - 1).TotalGas#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).TotalGas#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif  
    if r_ColumnID = 9 
      MEM_MAIN_DATABASE(r_ArrPos).H2S# = MEM_MAIN_DATABASE(r_ArrPos - 1).H2S#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).H2S#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif  
  endif
  
  
  if r_DBPageLeftRightNum = 3
    if r_ColumnID = 1 
      MEM_MAIN_DATABASE(r_ArrPos).Hole_Depth# = MEM_MAIN_DATABASE(r_ArrPos - 1).Hole_Depth#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Hole_Depth#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 2 
      MEM_MAIN_DATABASE(r_ArrPos).Bit_Depth# = MEM_MAIN_DATABASE(r_ArrPos - 1).Bit_Depth#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Bit_Depth#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 3 
      MEM_MAIN_DATABASE(r_ArrPos).PIT1# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT1#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT1#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 4 
      MEM_MAIN_DATABASE(r_ArrPos).PIT2# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT2#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT2#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 5 
      MEM_MAIN_DATABASE(r_ArrPos).PIT3# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT3#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT3#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 6 
      MEM_MAIN_DATABASE(r_ArrPos).PIT4# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT4#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT4#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 7 
      MEM_MAIN_DATABASE(r_ArrPos).PIT5# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT5#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT5#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 8 
      MEM_MAIN_DATABASE(r_ArrPos).PIT6# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT6#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT6#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 9 
      MEM_MAIN_DATABASE(r_ArrPos).PIT7# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT7#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT7#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 10 
      MEM_MAIN_DATABASE(r_ArrPos).PIT8# = MEM_MAIN_DATABASE(r_ArrPos - 1).PIT8#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).PIT8#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
  endif
  
  
  if r_DBPageLeftRightNum = 4
    if r_ColumnID = 1 
      MEM_MAIN_DATABASE(r_ArrPos).Hole_Depth# = MEM_MAIN_DATABASE(r_ArrPos - 1).Hole_Depth#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Hole_Depth#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 2 
      MEM_MAIN_DATABASE(r_ArrPos).Bit_Depth# = MEM_MAIN_DATABASE(r_ArrPos - 1).Bit_Depth#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Bit_Depth#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 3 
      MEM_MAIN_DATABASE(r_ArrPos).TempIN# = MEM_MAIN_DATABASE(r_ArrPos - 1).TempIN#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).TempIN#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 4 
      MEM_MAIN_DATABASE(r_ArrPos).TempOUT# = MEM_MAIN_DATABASE(r_ArrPos - 1).TempOUT#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).TempOUT#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
//     if r_ColumnID = 5 
//       MEM_MAIN_DATABASE(r_ArrPos).Comment$ = MEM_MAIN_DATABASE(r_ArrPos - 1).Comment$
//       g_MEM_DB_EditBDMode_Paste_ClipBoard$ = MEM_MAIN_DATABASE(r_ArrPos - 1).Comment$
//       lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
//     endif
    if r_ColumnID = 6 
      MEM_MAIN_DATABASE(r_ArrPos).CSG = MEM_MAIN_DATABASE(r_ArrPos - 1).CSG
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).CSG)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 7 
      MEM_MAIN_DATABASE(r_ArrPos).FlowOUT# = MEM_MAIN_DATABASE(r_ArrPos - 1).FlowOUT#
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).FlowOUT#)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
    if r_ColumnID = 8 
      MEM_MAIN_DATABASE(r_ArrPos).Total_Strokes = MEM_MAIN_DATABASE(r_ArrPos - 1).Total_Strokes
      g_MEM_DB_EditBDMode_Paste_ClipBoard$ = str$(MEM_MAIN_DATABASE(r_ArrPos - 1).Total_Strokes)
      lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Highlight_DataType, r_ArrPos, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
    endif
  endif
  
  

    

endfunction



function lib_MEM_EditBDMode_WriteDatatoMEMDB(r_BuildStr_Or_Clipboard as integer)


  local l_SWAP_BuildStr_Clipboard$ as string : l_SWAP_BuildStr_Clipboard$ = ""
  local l_SWAP_DataType as integer : l_SWAP_DataType = -1
  local l_SWAP_ArrayPosition as integer

  `NOTE: r_BuildStr_Or_Clipboard is used to determine whether the function works 'normally' / as
  `      oringinally programmed. Later when the 'paste' function was added (because changing each value
  `      by hand, typing it in, was slow and annoying, this function was adapted to also be used by
  `      the 'paste' code. So it needed to be able to use this code, unchanged, but override it with
  `      the 'paste' variable.
  
  ` r_BuildStr_Or_Clipboard: 1=Normal (Build Str)   2=Override with 'paste'/clipboard Str


  `IF IN 'PASTE' MODE (r_BuildStr_Or_Clipboard=2) SET BUILD STR = CLIPBOARD STR & UNDO AT BOTTOM
  if r_BuildStr_Or_Clipboard = 2
    `SWAP (For Paste) - Value
      l_SWAP_BuildStr_Clipboard$ = g_MEM_DB_EditBDMode_Input_BuildStr$
      g_MEM_DB_EditBDMode_Input_BuildStr$ = g_MEM_DB_EditBDMode_Paste_ClipBoard$
    `SWAP (For Paste) - Data Type
      l_SWAP_DataType = g_MEM_DB_EditBDMode_Final_DataType
      g_MEM_DB_EditBDMode_Final_DataType = g_MEM_DB_EditBDMode_Paste_Datatype
    `SWAP (For Paste) - Array Position
    
      l_CalcArr = 0 + ((g_DATABASE_MEM_View_PageNumber - 1) * c_DATABASE_MEM_View_MaxRecordsPerPage) + g_MEM_DB_EditBDMode_Row
      g_MEM_DB_EditBDMode_Paste_ArrPos = l_CalcArr
    
      l_SWAP_ArrayPosition = g_MEM_DB_EditBDMode_Final_ArrayPos  
      g_MEM_DB_EditBDMode_Final_ArrayPos = g_MEM_DB_EditBDMode_Paste_ArrPos
      
      `do
      `  cls
      `  print "Build$ : " + g_MEM_DB_EditBDMode_Input_BuildStr$
      `  print "Data Type : " + str$(g_MEM_DB_EditBDMode_Final_DataType)
      `  print "Array Pos : " + str$(g_MEM_DB_EditBDMode_Final_ArrayPos)
      `  sync
      `loop
      
  endif





  if g_MEM_DB_EditBDMode_Input_BuildStr$ <> ""
  
    if g_MEM_DB_EditBDMode_Final_DataType = 1 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).Hole_Depth# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 2 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).Bit_Depth# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    
    if g_MEM_DB_EditBDMode_Final_DataType = 3 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).ROP# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 4 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).WOB# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 5 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).Hookload = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 6 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).RPM = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 7 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).TripTank# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 8 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).BlockPosition# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 9 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).PVT# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 10 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).Torque# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
 
    if g_MEM_DB_EditBDMode_Final_DataType = 11 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).SPP = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 12 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).FlowIn = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 13 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).SPM1 = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 14 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).SPM2 = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 15 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).SPM3 = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 16 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).TotalGas# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 17 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).H2S# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    
    if g_MEM_DB_EditBDMode_Final_DataType = 18 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).PIT1# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 19 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).PIT2# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 20 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).PIT3# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 21 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).PIT4# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 22 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).PIT5# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 23 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).PIT6# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 24 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).PIT7# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 25 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).PIT8# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    
    if g_MEM_DB_EditBDMode_Final_DataType = 26 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).TempIN# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 27 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).TempOUT# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    `if g_MEM_DB_EditBDMode_Final_DataType = 28 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).Comment$ = g_MEM_DB_EditBDMode_Input_BuildStr$
    if g_MEM_DB_EditBDMode_Final_DataType = 29 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).CSG = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 30 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).FlowOUT# = val(g_MEM_DB_EditBDMode_Input_BuildStr$)
    if g_MEM_DB_EditBDMode_Final_DataType = 31 then MEM_MAIN_DATABASE(g_MEM_DB_EditBDMode_Final_ArrayPos).Total_Strokes = val(g_MEM_DB_EditBDMode_Input_BuildStr$)

  endif

  `Reverse the Build Str / Clipboard Str swap
  if r_BuildStr_Or_Clipboard = 2
    `REVERSE THE ABOVE SWAP (For Paste) - Value
      g_MEM_DB_EditBDMode_Input_BuildStr$ = l_SWAP_BuildStr_Clipboard$
    `REVERSE THE ABOVE SWAP (For Paste) - Data Type  
      g_MEM_DB_EditBDMode_Final_DataType = l_SWAP_DataType
    `REVERSE THE ABOVE SWAP (For Paste) - Array Position
      g_MEM_DB_EditBDMode_Final_ArrayPos = l_SWAP_ArrayPosition
  endif


endfunction


function lib_MEM_EditBDMode_WriteDatatoHDDB(r_DataType as integer, r_ArrPos as integer, r_WriteStr$ as string)


  local l_Datafile_CalculatedPosition as integer

  open datafile to update 1, g_CLIENT_Database_Full_Path$
  
    `l_TempVal = lib_MEM_EditBDMode_GetFileByteOffset(r_DataType)

    l_Datafile_CalculatedPosition = ((r_ArrPos-1) * c_DATABASE_Bytes_Per_Record) + lib_MEM_EditBDMode_GetFileByteOffset(r_DataType)
  
    if l_Datafile_CalculatedPosition > 0 and l_Datafile_CalculatedPosition < datafile size(1)
  		
  		`1. Set the Datafile Position
    		set datafile position 1, l_Datafile_CalculatedPosition
		
  		`2. Write to the Datafile
  			lib_MEM_EditBDMode_WriteHDRecord(r_DataType, r_WriteStr$)
  			
  	endif
  
  close datafile 1
  
  
  
  
  `Exact Record Format (This table is also present in - lib_CMNTS_WRITE_COMMENT_To_HD_DB )
      `01-RecStart Indicator Byte1   - 1
      `02-RecStart Indicator Byte2   - 1
      `03-RecStart Indicator Byte3   - 1
      `04-Database Arr Pos as float  - 4
      `05-Time$ as string            -   2 + (8 Characters) = 10 bytes
      `06-Date$ as string            -   2 + (8 Characters) = 10 bytes
      `07-Hole_Depth# as float       - 4
      `08-Bit_Depth# as float        - 4
      `09-ROP# as float              - 4
      `10-WOB# as float              - 4
      `11-Hookload as word           -   2
      `12-RPM as word                -   2
      `13-Torque# as float           - 4
      `14-TripTank# as float         - 4
      `15-BlockPosition# as float    - 4
      `16-PVT# as float              - 4
      `17-Pit1# as float             - 4
      `18-Pit2# as float             - 4
      `19-Pit3# as float             - 4
      `20-Pit4# as float             - 4
      `21-Pit5# as float             - 4
      `22-Pit6# as float             - 4
      `23-Pit7# as float             - 4
      `24-Pit8# as float             - 4
      `25-SPP as word                -   2
      `26-FlowIn as word             -   2
      `27-SPM1 as word               -   2
      `28-SPM2 as word               -   2
      `29-SPM3 as word               -   2
      `30-TotalGas# as float         - 4
      `31-H2S# as float              - 4
      `32-TempIN# as float           - 4
      `33-TempOUT# as float          - 4
      `34-Comments are MAXIMUM OF 30 CHARACTERS : 2 + (30 Characters) = 32 bytes
      `35-CGS as word                - 2
      `36-Flow OUT as float          - 4
      `37-Total Strokes as integer   - 4
    
  `INDEX
  `Record Start Indicator Bytes  = 3
  `3  Strings                    = 52
  `22 Floats                     = 88
  `8  Words                      = 16
  `1  Integer                    = 4
  
  `TOTAL BYTES                   = 163
  
  
  

endfunction

function lib_MEM_EditBDMode_GetFileByteOffset(r_DataType as integer)

  `This function returns the number of bytes offset any data item exists at for that array position
  `in any record, etc.
  
  local p_OUTPUT as integer
  
  

  if r_DataType = 1 then p_OUTPUT = 27
  if r_DataType = 2 then p_OUTPUT = 31
  if r_DataType = 3 then p_OUTPUT = 35
  if r_DataType = 4 then p_OUTPUT = 39
  if r_DataType = 5 then p_OUTPUT = 43
  if r_DataType = 6 then p_OUTPUT = 45
  if r_DataType = 7 then p_OUTPUT = 51
  if r_DataType = 8 then p_OUTPUT = 55
  if r_DataType = 9 then p_OUTPUT = 59
  if r_DataType = 10 then p_OUTPUT = 47
  if r_DataType = 11 then p_OUTPUT = 95
  if r_DataType = 12 then p_OUTPUT = 97
  if r_DataType = 13 then p_OUTPUT = 99
  if r_DataType = 14 then p_OUTPUT = 101
  if r_DataType = 15 then p_OUTPUT = 103
  if r_DataType = 16 then p_OUTPUT = 105
  if r_DataType = 17 then p_OUTPUT = 109
  if r_DataType = 18 then p_OUTPUT = 63
  if r_DataType = 19 then p_OUTPUT = 67
  if r_DataType = 20 then p_OUTPUT = 71
  if r_DataType = 21 then p_OUTPUT = 75
  if r_DataType = 22 then p_OUTPUT = 79
  if r_DataType = 23 then p_OUTPUT = 83
  if r_DataType = 24 then p_OUTPUT = 87
  if r_DataType = 25 then p_OUTPUT = 91
  if r_DataType = 26 then p_OUTPUT = 113
  if r_DataType = 27 then p_OUTPUT = 117
  if r_DataType = 28 then p_OUTPUT = 121
  if r_DataType = 29 then p_OUTPUT = 153
  if r_DataType = 30 then p_OUTPUT = 155
  if r_DataType = 31 then p_OUTPUT = 159
  


endfunction p_OUTPUT


function lib_MEM_EditBDMode_WriteHDRecord(r_WriteDataType as integer, r_Write_StrVal$ as string)


    if r_WriteDataType = 1 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 2 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 3 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 4 then write datafile float 1, val(r_Write_StrVal$)
    `
    if r_WriteDataType = 5 then write datafile word 1, val(r_Write_StrVal$)
    if r_WriteDataType = 6 then write datafile word 1, val(r_Write_StrVal$)
    `
    if r_WriteDataType = 7 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 8 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 9 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 10 then write datafile float 1, val(r_Write_StrVal$)
    `
    if r_WriteDataType = 11 then write datafile word 1, val(r_Write_StrVal$)
    if r_WriteDataType = 12 then write datafile word 1, val(r_Write_StrVal$)
    if r_WriteDataType = 13 then write datafile word 1, val(r_Write_StrVal$)
    if r_WriteDataType = 14 then write datafile word 1, val(r_Write_StrVal$)
    if r_WriteDataType = 15 then write datafile word 1, val(r_Write_StrVal$)
    `
    if r_WriteDataType = 16 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 17 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 18 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 19 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 20 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 21 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 22 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 23 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 24 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 25 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 26 then write datafile float 1, val(r_Write_StrVal$)
    if r_WriteDataType = 27 then write datafile float 1, val(r_Write_StrVal$)
    `
    `if r_WriteDataType = 28 then write datafile string 1, r_Write_StrVal$
    `
    if r_WriteDataType = 29 then write datafile word 1, val(r_Write_StrVal$)
    `
    if r_WriteDataType = 30 then write datafile float 1, val(r_Write_StrVal$)
    `
    if r_WriteDataType = 31 then write datafile integer 1, val(r_Write_StrVal$)
  
endfunction 


function INPUT_SCREEN_MEM_EditDBMode(r_LeftRightPageNum as integer)

  dim l_MAX_Column(4) as integer
  l_MAX_Column(1) = 10
  l_MAX_Column(2) = 9
  l_MAX_Column(3) = 10
  l_MAX_Column(4) = 8
  `Note: On Page 4 Max Column is set at 8, but the comment column is not editable from inside the database.
  `      i.e. 5 (the Comments column) is non-editable

  `[E] - Toggle EDIT DATABASE MODE (Note this is in both MEM DB Functions so the 'E' key works in both editing and non editing modes
  if keystate(18)= 1 and key_state(18,0)= 0
    if g_MEM_DB_EditBDMode_ON = -1
      g_MEM_DB_EditBDMode_Column = 1
      g_MEM_DB_EditBDMode_Row = 0
      g_MEM_DB_EditBDMode_ON = 1
      g_MEM_DB_EditBDMode_Highlight_DataReady = -1
      g_MEM_DB_EditBDMode_BuildStr$ = ""
      g_ENGINE_InputNumbersOnly$ = ""
    else
      g_MEM_DB_EditBDMode_ON = -1
      g_MEM_DB_EditBDMode_Highlight_DataReady = -1
      g_MEM_DB_EditBDMode_EDIT_LOCK = -1
      g_ENGINE_InputNumbersOnly$ = ""
    endif    
    key_state(18,0)=1
  endif
  if keystate(18)=0 and key_state(18,0)=1 then key_state(18,0)=0
  
  `-----------------------------------------------
  
  if g_MEM_DB_EditBDMode_EDIT_LOCK = -1
  
  	`[LEFT Cursor] - Go to 1st Display page
  	if KEYSTATE(203)= 1 and key_state(203,0)= 0
    	if g_MEM_DB_EditBDMode_Column > 1
      	dec g_MEM_DB_EditBDMode_Column, 1
      	`Skip Comments (Which are not editable)
      	if r_LeftRightPageNum = 4
      	  if g_MEM_DB_EditBDMode_Column = 5
      	    g_MEM_DB_EditBDMode_Column = 4
      	  endif
      	endif
    	endif  
    	key_state(203,0)=1
  	endif
  	if KEYSTATE(203)=0 and key_state(203,0)=1 then key_state(203,0)=0
  	
  	`[RIGHT Cursor] - Go to 2st Display page
  	if KEYSTATE(205)= 1 and key_state(205,0)= 0
    	if g_MEM_DB_EditBDMode_Column < l_Max_Column(r_LeftRightPageNum)
      	inc g_MEM_DB_EditBDMode_Column, 1
      	`Skip Comments (Which are not editable)
      	if r_LeftRightPageNum = 4
      	  if g_MEM_DB_EditBDMode_Column = 5
      	    g_MEM_DB_EditBDMode_Column = 6
      	  endif
      	endif
    	endif  
    	key_state(205,0)=1
  	endif
  	if KEYSTATE(205)=0 and key_state(205,0)=1 then key_state(205,0)=0
	
  	`[UP Cursor] - Go up a page view
  	if KEYSTATE(200)= 1 and key_state(200,0)= 0
    	if g_MEM_DB_EditBDMode_Row > 0
      	dec g_MEM_DB_EditBDMode_Row, 1
      else
    		if g_DATABASE_MEM_View_PageNumber > 1
      		dec g_DATABASE_MEM_View_PageNumber, 1
      		g_MEM_DB_EditBDMode_Row = 25
    		endif  
    	endif
    	key_state(200,0)=1
      ` 
    	g_INPUT_DB_EditBDMode_UCursor_Timer = timer()
    	if g_INPUT_DB_EditBDMode_UCursor_Stage = -1 then g_INPUT_DB_EditBDMode_UCursor_Stage = 1
  	  `
  	endif
  	if KEYSTATE(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
  	if KEYSTATE(200)=0 then g_INPUT_DB_EditBDMode_UCursor_Stage = -1
    `
    if g_INPUT_DB_EditBDMode_UCursor_Stage = 2
  	  if timer() > g_INPUT_DB_EditBDMode_UCursor_Timer + 30 then key_state(200,0)= 0
  	endif
  	if g_INPUT_DB_EditBDMode_UCursor_Stage = 1
  	  if timer() > g_INPUT_DB_EditBDMode_UCursor_Timer + 333
  	    key_state(200,0)= 0
  	    g_INPUT_DB_EditBDMode_UCursor_Stage = 2
  	  endif  
  	endif
  	
  	
  	`[DOWN Cursor] - Go down a page view
  	if KEYSTATE(208)= 1 and key_state(208,0)= 0
  	  if g_MEM_DB_EditBDMode_Row = 25
  	    l_max_pages = int(g_DATABASE_MEM_Total_Num_Records / c_DATABASE_MEM_View_MaxRecordsPerPage) + 1
    		if g_DATABASE_MEM_View_PageNumber < l_max_pages
      		inc g_DATABASE_MEM_View_PageNumber, 1
    		endif
    		g_MEM_DB_EditBDMode_Row = 0
    	else
    		if g_MEM_DB_EditBDMode_Row < 25
      		inc g_MEM_DB_EditBDMode_Row, 1
    		endif
  	  endif
    	key_state(208,0)=1
      `
    	g_INPUT_DB_EditBDMode_DCursor_Timer = timer()
    	if g_INPUT_DB_EditBDMode_DCursor_Stage = -1 then g_INPUT_DB_EditBDMode_DCursor_Stage = 1
    	`
  	endif
  	if KEYSTATE(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
  	if KEYSTATE(208)=0 then g_INPUT_DB_EditBDMode_DCursor_Stage = -1
  	`
    if g_INPUT_DB_EditBDMode_DCursor_Stage = 2
  	  if timer() > g_INPUT_DB_EditBDMode_DCursor_Timer + 30 then key_state(208,0)= 0
  	endif
  	if g_INPUT_DB_EditBDMode_DCursor_Stage = 1
  	  if timer() > g_INPUT_DB_EditBDMode_DCursor_Timer + 333
  	    key_state(208,0)= 0
  	    g_INPUT_DB_EditBDMode_DCursor_Stage = 2
  	  endif  
  	endif

  
  	
  	`[PAGE UP Cursor] - Go up a page view (these are the page ups within EditDBMode_ON=1, so shldn't do anything)
  	if KEYSTATE(201)= 1 and key_state(201,0)= 0 and g_MEM_DB_EditBDMode_ON = -1
    	if g_MEM_DB_EditBDMode_Row > 0
      	dec g_MEM_DB_EditBDMode_Row, 5
      	if g_MEM_DB_EditBDMode_Row < 1 then g_MEM_DB_EditBDMode_Row = 1
    	endif
    	key_state(201,0)=1
  	endif
  	if KEYSTATE(201)=0 and key_state(201,0)=1 then key_state(201,0)=0
  	
  	`[PAGE DOWN Cursor] - Go down a page view
  	if KEYSTATE(209)= 1 and key_state(209,0)= 0 and g_MEM_DB_EditBDMode_ON = -1
    	if g_MEM_DB_EditBDMode_Row < 25
      	inc g_MEM_DB_EditBDMode_Row, 5
      	if g_MEM_DB_EditBDMode_Row > l_max_pages then g_MEM_DB_EditBDMode_Row = l_max_pages
    	endif
    	key_state(209,0)=1
  	endif
  	if KEYSTATE(209)=0 and key_state(209,0)=1 then key_state(209,0)=0
  	
  endif
  
  `[L] - Copy the line above down into the highlighted cells line
  	if KEYSTATE(38)= 1 and key_state(38,0) = 0
      `
      lib_MEM_EditBDMode_CopyLineAbove(g_MEM_DB_EditBDMode_ArrPosUsed)
      `
      g_DEBUG_MEMDB_Edit_CopyAboveLine_Toggle = 1
    	key_state(38,0)=1
  	endif
  	if KEYSTATE(38)=0 and key_state(38,0)=1 then key_state(38,0) = 0
  	if KEYSTATE(38)=0 and g_DEBUG_MEMDB_Edit_CopyAboveLine_Toggle = 1 then g_DEBUG_MEMDB_Edit_CopyAboveLine_Toggle = -1
  	
  `[B] - Copy the above cell down into the highlighted cell
  	if KEYSTATE(48)= 1 and key_state(48,0) = 0
      `
      lib_MEM_EditBDMode_CopyCellAbove(g_DATABASE_MEM_View_PageLeftRight, g_MEM_DB_EditBDMode_Column, g_MEM_DB_EditBDMode_ArrPosUsed)
      `
      g_DEBUG_MEMDB_Edit_CopyAboveCell_Toggle = 1
    	key_state(48,0)=1
  	endif
  	if KEYSTATE(48)=0 and key_state(48,0)=1 then key_state(48,0) = 0
  	if KEYSTATE(48)=0 and g_DEBUG_MEMDB_Edit_CopyAboveCell_Toggle = 1 then g_DEBUG_MEMDB_Edit_CopyAboveCell_Toggle = -1

  `[K] - Copy the above cell above down into all rows to the End of the Page
  	if KEYSTATE(37)= 1 and key_state(37,0) = 0 and g_DEBUG_MEMDB_Edit_CopyAboveCell_To_EOP = -1
      `
      lib_MEM_EditBDMode_CopyCellAbovetoEOP(g_DATABASE_MEM_View_PageLeftRight, g_MEM_DB_EditBDMode_Column, g_MEM_DB_EditBDMode_ArrPosUsed, g_MEM_DB_EditBDMode_Row)
      `
      g_MEM_DB_EditBDMode_Row = 1
      inc g_DATABASE_MEM_View_PageNumber, 1
      `
      g_DEBUG_MEMDB_Edit_CopyAboveCell_To_EOP = 1
    	key_state(37,0)=1
  	endif
  	if KEYSTATE(37)=0 and key_state(37,0)=1 then key_state(37,0) = 0
  	if KEYSTATE(37)=0 and g_DEBUG_MEMDB_Edit_CopyAboveCell_To_EOP = 1 then g_DEBUG_MEMDB_Edit_CopyAboveCell_To_EOP = -1
  	
  
  
  `[V] - Paste last value into currently highlighted cell
  	if KEYSTATE(47)= 1 and key_state(47,0)= 0
      `
      if g_MEM_DB_EditBDMode_Paste_ClipBoard$ <> ""
      	if g_MEM_DB_EditBDMode_Paste_LastEditCol = g_MEM_DB_EditBDMode_Column
        	lib_MEM_EditBDMode_WriteDatatoMEMDB(2)
        	lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Final_DataType, g_MEM_DB_EditBDMode_ArrPosUsed, g_MEM_DB_EditBDMode_Paste_ClipBoard$)
      	endif
      endif
      `
    	key_state(47,0)=1
  	endif
  	if KEYSTATE(47)=0 and key_state(47,0)=1 then key_state(47,0)=0
  	
  	
  	
  `[ENTER] - EDIT a MEM DB value
    if lib_Enter_Pressed(7281) = 1
      if g_MEM_DB_EditBDMode_EDIT_LOCK = -1
        `
        g_MEM_DB_EditBDMode_EDIT_LOCK = 1
        clear entry buffer
        g_MEM_DB_EditBDMode_Input_BuildStr$ = ""
        g_ENGINE_InputNumbersOnly$ = ""
        `
        g_MEM_DB_EditBDMode_Final_ColumnName$ = g_MEM_DB_EditBDMode_Column_Name$
        g_MEM_DB_EditBDMode_Final_DataType = g_MEM_DB_EditBDMode_Highlight_DataType
        g_MEM_DB_EditBDMode_FInal_ArrayPos = g_MEM_DB_EditBDMode_ArrPosUsed
        g_MEM_DB_EditBDMode_Final_Orignal_Data$ = g_MEM_DB_EditBDMode_DispVal$
        `
        g_MEM_DB_EditBDMode_Paste_LastEditCol = g_MEM_DB_EditBDMode_Column
        g_MEM_DB_EditBDMode_Paste_Datatype = g_MEM_DB_EditBDMode_Highlight_DataType
        `
      else
        g_MEM_DB_EditBDMode_EDIT_LOCK = -1
        lib_MEM_EditBDMode_WriteDatatoMEMDB(1)
        lib_MEM_EditBDMode_WriteDatatoHDDB(g_MEM_DB_EditBDMode_Final_DataType, g_MEM_DB_EditBDMode_FInal_ArrayPos, g_MEM_DB_EditBDMode_Input_BuildStr$)
        clear entry buffer
        g_MEM_DB_EditBDMode_Paste_ClipBoard$ = g_MEM_DB_EditBDMode_Input_BuildStr$
        g_MEM_DB_EditBDMode_Input_BuildStr$ = ""
        g_ENGINE_InputNumbersOnly$ = ""
      endif
    endif
  

endfunction


function INPUT_SCREEN_MEM()

  local l_max_pages as integer
  local l_MEMDB_Keyboard_Input as integer

  `[E] - Toggle EDIT DATABASE MODE (Note this is in both MEM DB Functions so the 'E' key works in both editing and non editing modes
  if keystate(18)= 1 and key_state(18,0)= 0
    if g_MEM_DB_EditBDMode_ON = -1
      g_MEM_DB_EditBDMode_ON = 1
      g_MEM_DB_EditBDMode_Column = 1
      g_MEM_DB_EditBDMode_Row = 0
      g_MEM_DB_EditBDMode_Highlight_DataReady = -1
      g_MEM_DB_EditBDMode_BuildStr$ = ""
      g_ENGINE_InputNumbersOnly$ = ""
    else
      g_MEM_DB_EditBDMode_ON = -1
      g_MEM_DB_EditBDMode_Highlight_DataReady = -1
      g_MEM_DB_EditBDMode_EDIT_LOCK = -1
      g_ENGINE_InputNumbersOnly$ = ""
    endif    
    key_state(18,0)=1
  endif
  if keystate(18)=0 and key_state(18,0)=1 then key_state(18,0)=0

  `[G] - Go to page number
  if keystate(34)= 1 and key_state(34,0)= 0
    if g_DATABASE_MEM_GotoPage_Toggle = -1
      g_DATABASE_MEM_GotoPage_Toggle = 1
      g_DATABASE_MEM_GotoPage_BuildString$ = ""
    else
      g_DATABASE_MEM_GotoPage_Toggle = -1
    endif    
    key_state(34,0)=1
  endif
  if keystate(34)=0 and key_state(34,0)=1 then key_state(34,0)=0
  
  `Build the MEM database goto number string if a number is pressed and g_DATABASE_MEM_GotoPage_Toggle = 1
    if g_DATABASE_MEM_GotoPage_Toggle = 1
      if scancode() > 1 and scancode() < 12
        l_MEMDB_Keyboard_Input = scancode()
        if keystate(l_MEMDB_Keyboard_Input)= 1 and key_state(l_MEMDB_Keyboard_Input,0)= 0
          if scancode() = 11
            g_DATABASE_MEM_GotoPage_BuildString$ = g_DATABASE_MEM_GotoPage_BuildString$ + "0"
          else
            g_DATABASE_MEM_GotoPage_BuildString$ = g_DATABASE_MEM_GotoPage_BuildString$ + str$(l_MEMDB_Keyboard_Input - 1)
          endif
          key_state(l_MEMDB_Keyboard_Input, 0) = 1
        endif
      endif
      `Delete Key
      if scancode() = 14 and key_state(14,0)= 0
        key_state(14,0) = 1
        g_DATABASE_MEM_GotoPage_BuildString$ = left$(g_DATABASE_MEM_GotoPage_BuildString$, (len(g_DATABASE_MEM_GotoPage_BuildString$)-1))
      endif
      if scancode() = 0
        for check_lp = 2 to 11
          if keystate(check_lp) = 0 and key_state(check_lp, 0) = 1
            key_state(check_lp,0) = 0
          endif
        next check_lp
      endif
      
    	`Dirty NUMPAD Code - Just do it this way to make it work and not mess with other code.
    	if scancode() > 70 and scancode() < 83
      	l_MEMDB_Keyboard_Input = scancode()
      	if keystate(l_MEMDB_Keyboard_Input)= 1 and key_state(l_MEMDB_Keyboard_Input,0)= 0
        	if l_MEMDB_Keyboard_Input = 79 then g_DATABASE_MEM_GotoPage_BuildString$ = g_DATABASE_MEM_GotoPage_BuildString$ + "1"
        	if l_MEMDB_Keyboard_Input = 80 then g_DATABASE_MEM_GotoPage_BuildString$ = g_DATABASE_MEM_GotoPage_BuildString$ + "2"
        	if l_MEMDB_Keyboard_Input = 81 then g_DATABASE_MEM_GotoPage_BuildString$ = g_DATABASE_MEM_GotoPage_BuildString$ + "3"
	
        	if l_MEMDB_Keyboard_Input = 75 then g_DATABASE_MEM_GotoPage_BuildString$ = g_DATABASE_MEM_GotoPage_BuildString$ + "4"
        	if l_MEMDB_Keyboard_Input = 76 then g_DATABASE_MEM_GotoPage_BuildString$ = g_DATABASE_MEM_GotoPage_BuildString$ + "5"
        	if l_MEMDB_Keyboard_Input = 77 then g_DATABASE_MEM_GotoPage_BuildString$ = g_DATABASE_MEM_GotoPage_BuildString$ + "6"
        	
        	if l_MEMDB_Keyboard_Input = 71 then g_DATABASE_MEM_GotoPage_BuildString$ = g_DATABASE_MEM_GotoPage_BuildString$ + "7"
        	if l_MEMDB_Keyboard_Input = 72 then g_DATABASE_MEM_GotoPage_BuildString$ = g_DATABASE_MEM_GotoPage_BuildString$ + "8"
        	if l_MEMDB_Keyboard_Input = 73 then g_DATABASE_MEM_GotoPage_BuildString$ = g_DATABASE_MEM_GotoPage_BuildString$ + "9"
        	
        	if l_MEMDB_Keyboard_Input = 82 then g_DATABASE_MEM_GotoPage_BuildString$ = g_DATABASE_MEM_GotoPage_BuildString$ + "0"
        	
        	key_state(l_MEMDB_Keyboard_Input,0) = 1
      	endif
    	endif
    	if scancode() = 0
    		for check_lp = 71 to 82
      		if keystate(check_lp) = 0 and key_state(check_lp, 0) = 1
        		key_state(check_lp,0) = 0
      		endif
    		next check_lp
    	endif
      
    endif
    if keystate(14)=0 and key_state(14,0)=1 then key_state(14,0)=0
    
    
    
    `[ENTER] - Accept the goto page number
    if lib_Enter_Pressed(7190) = 1
      l_max_pages = int(g_DATABASE_MEM_Total_Num_Records / c_DATABASE_MEM_View_MaxRecordsPerPage) + 1
      l_gotopage_calc = val(g_DATABASE_MEM_GotoPage_BuildString$)
      if l_gotopage_calc > l_max_pages
        l_gotopage_calc = l_max_pages
      endif
      if l_gotopage_calc = 0 
        l_gotopage_calc = 1
      endif
      g_DATABASE_MEM_View_PageNumber = l_gotopage_calc
      g_DATABASE_MEM_GotoPage_Toggle = -1
    endif

  `[LEFT Cursor] - Go to 1st Display page
  if KEYSTATE(203)= 1 and key_state(203,0)= 0
    if g_DATABASE_MEM_View_PageLeftRight > 1
      dec g_DATABASE_MEM_View_PageLeftRight, 1
    endif
    key_state(203,0)=1
  endif
  if KEYSTATE(203)=0 and key_state(203,0)=1 then key_state(203,0)=0
  
  `[RIGHT Cursor] - Go to 2st Display page
  if KEYSTATE(205)= 1 and key_state(205,0)= 0
    if g_DATABASE_MEM_View_PageLeftRight < 4
      inc g_DATABASE_MEM_View_PageLeftRight, 1
    endif
    key_state(205,0)=1
  endif
  if KEYSTATE(205)=0 and key_state(205,0)=1 then key_state(205,0)=0

  `[UP Cursor] - Go up a page view
  if KEYSTATE(200)= 1 and key_state(200,0)= 0
    if g_DATABASE_MEM_View_PageNumber > 1
      dec g_DATABASE_MEM_View_PageNumber, 1
    endif  
    key_state(200,0)=1
  endif
  if KEYSTATE(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
  
  `[DOWN Cursor] - Go down a page view
  if KEYSTATE(208)= 1 and key_state(208,0)= 0
    l_max_pages = int(g_DATABASE_MEM_Total_Num_Records / c_DATABASE_MEM_View_MaxRecordsPerPage) + 1
    if g_DATABASE_MEM_View_PageNumber < l_max_pages
      inc g_DATABASE_MEM_View_PageNumber, 1
    endif
    key_state(208,0)=1
  endif
  if KEYSTATE(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
  
  `[PAGE UP Cursor] - Go up a page view
  if KEYSTATE(201)= 1 and key_state(201,0)= 0 and g_MEM_DB_EditBDMode_ON = -1
    if g_DATABASE_MEM_View_PageNumber > 0
      dec g_DATABASE_MEM_View_PageNumber, 5
      if g_DATABASE_MEM_View_PageNumber < 1 then g_DATABASE_MEM_View_PageNumber = 1
    endif
    key_state(201,0)=1
  endif
  if KEYSTATE(201)=0 and key_state(201,0)=1 then key_state(201,0)=0
  
  `[PAGE DOWN Cursor] - Go down a page view
  if KEYSTATE(209)= 1 and key_state(209,0)= 0 and g_MEM_DB_EditBDMode_ON = -1
    l_max_pages = int(g_DATABASE_MEM_Total_Num_Records / c_DATABASE_MEM_View_MaxRecordsPerPage) + 1
    if g_DATABASE_MEM_View_PageNumber < l_max_pages
      inc g_DATABASE_MEM_View_PageNumber, 5
      if g_DATABASE_MEM_View_PageNumber > l_max_pages then g_DATABASE_MEM_View_PageNumber = l_max_pages
    endif
    key_state(209,0)=1
  endif
  if KEYSTATE(209)=0 and key_state(209,0)=1 then key_state(209,0)=0
  
  `[HOME] - Goto Page 1
  if KEYSTATE(199)= 1 and key_state(199,0)= 0
    g_DATABASE_MEM_View_PageNumber = 1
    key_state(199,0)=1
  endif
  if KEYSTATE(199)=0 and key_state(199,0)=1 then key_state(199,0)=0
  
  `[END] - Goto Last Page
  if KEYSTATE(207)= 1 and key_state(207,0)= 0
    l_max_pages = int(g_DATABASE_MEM_Total_Num_Records / c_DATABASE_MEM_View_MaxRecordsPerPage) + 1
    g_DATABASE_MEM_View_PageNumber = l_max_pages
    key_state(207,0)=1
  endif
  if KEYSTATE(207)=0 and key_state(207,0)=1 then key_state(207,0)=0
  
  `Scroll MEM DB Command Console Viewer Screen Numbers using mouse wheel
  if mousez() > g_BDMEM_Screen_MouseZ
    g_BDMEM_Screen_MouseZ = mousez()
    if g_DATABASE_MEM_View_PageNumber > 1
      dec g_DATABASE_MEM_View_PageNumber, 1
    endif 
  endif
  if mousez() < g_BDMEM_Screen_MouseZ
    g_BDMEM_Screen_MouseZ = mousez()
    l_max_pages = int(g_DATABASE_MEM_Total_Num_Records / c_DATABASE_MEM_View_MaxRecordsPerPage) + 1
    if g_DATABASE_MEM_View_PageNumber < l_max_pages
      inc g_DATABASE_MEM_View_PageNumber, 1
    endif
  endif
  
endfunction

function SCREEN_HD_DATABASE()

  INPUT_SCREEN_HD()
  
  open datafile to read 1, g_CLIENT_Database_Full_Path$

  d3d_starttext
  
    wdth_prnt = screen width() * 0.05 : sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    inc sp,19 * 2
    d3d_text 1, wdth_prnt, sp, 0, "1) Memory Database"
    d3d_text 2, wdth_prnt + 150, sp, 0, "2) Harddisk Database"
    d3d_text 1, wdth_prnt + 300, sp, 0, "3) SYNC Database"
    
    if g_DATABASE_HD_GotoPage_Toggle = 1
      l_GotoPage_Des$ = "- Enter page number to go to: " + g_DATABASE_HD_GotoPage_BuildString$
    else
      l_GotoPage_Des$ = ""
    endif
    inc sp,19 * 2
    l_total_pages = int((datafile size(1)/ c_DATABASE_Bytes_Per_Record) / c_DATABASE_HD_View_MaxRecordsPerPage) + 1
    d3d_text 1, wdth_prnt, sp, 0, "Page " + str$(g_DATABASE_HD_View_PageNumber) + " of " + str$(l_total_pages) + " (" + str$(g_DATABASE_HD_View_PageLeftRight) + " of 4)" + "     " + l_GotoPage_Des$
    
    inc sp, 19
    d3d_text 1, wdth_prnt, sp, 0, "(G: Goto Page    Home: 1st Page    End: Last Page)"
    inc sp, 19
    
    if g_DATABASE_HD_View_PageLeftRight = 1
      `Print Headers
        l_printx = wdth_prnt
        inc sp, 19
        inc l_printx, 0 : d3d_text 2, l_printx, sp, 0, "Rec Num"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Date"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Time"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Hole Depth"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Bit Depth"
        
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "ROP"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "WOB"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Hookload"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "RPM"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Triptank"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Block Pos"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PVT"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Torque"
        
      `Print Data
        for arr_lp = 0 + ((g_DATABASE_HD_View_PageNumber - 1) * c_DATABASE_HD_View_MaxRecordsPerPage) to c_DATABASE_HD_View_MaxRecordsPerPage + ((g_DATABASE_HD_View_PageNumber - 1) * c_DATABASE_HD_View_MaxRecordsPerPage)
          set datafile position 1, (arr_lp * c_DATABASE_Bytes_Per_Record)
          l_Tempbyte = datafile byte(1)
          l_Tempbyte = datafile byte(1)
          l_Tempbyte = datafile byte(1)
          l_HD_ArrayPos = datafile integer(1)
          l_HD_Read_Time$ = datafile string$(1)
          l_HD_Read_Date$ = datafile string$(1)
          l_HD_Read_Hole_Depth# = datafile float(1)
          l_HD_Read_Bit_Depth# = datafile float(1)
          l_HD_Read_ROP# = datafile float(1)
          l_HD_Read_WOB# = datafile float(1)
          l_HD_Read_Hookload = datafile word(1)
          l_HD_Read_RPM = datafile word(1)
          l_HD_Read_Torque# = datafile float(1)
          l_HD_Read_TripTank# = datafile float(1)
          l_HD_Read_BlockPosition# = datafile float(1)
          l_HD_Read_PVT# = datafile float(1)
          l_HD_Read_PIT1# = datafile float(1)
          l_HD_Read_PIT2# = datafile float(1)
          l_HD_Read_PIT3# = datafile float(1)
          l_HD_Read_PIT4# = datafile float(1)
          l_HD_Read_PIT5# = datafile float(1)
          l_HD_Read_PIT6# = datafile float(1)
          l_HD_Read_PIT7# = datafile float(1)
          l_HD_Read_PIT8# = datafile float(1)
          l_HD_Read_SPP = datafile word(1)
          l_HD_Read_FlowIn = datafile word(1)
          l_HD_Read_SPM1 = datafile word(1)
          l_HD_Read_SPM2 = datafile word(1)
          l_HD_Read_SPM3 = datafile word(1)
          l_HD_Read_TotalGas# = datafile float(1)
          l_HD_Read_H2S# = datafile float(1)
          l_HD_Read_TempIN# = datafile float(1)
          l_HD_Read_TempOUT# = datafile float(1)
          l_HD_Read_Comment$ = datafile string$(1)
          l_HD_Read_CSG = datafile word(1)
          l_HD_Read_FlowOut# = datafile float(1)
          l_HD_Read_TotalStrokes = datafile integer(1)

          inc sp, 19
          l_printx = wdth_prnt
          inc l_printx, 0 : d3d_text 1, l_printx, sp, 0, str$(l_HD_ArrayPos)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, lib_CONVERT_DATE_US_to_UK_Format(l_HD_Read_Date$)
          inc l_printx, 75 : d3d_text 1, l_printx, sp, 0, l_HD_Read_Time$
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_Hole_Depth#, 1)
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_Bit_Depth#, 1)
          
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_ROP#, 1)  
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_WOB#, 1) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_Hookload, 0) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_RPM, 0) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_TripTank#, 2)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_BlockPosition#, 1) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_PVT#, 1)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_Torque#, 1)
        next arr_lp  
    endif
    
    if g_DATABASE_HD_View_PageLeftRight = 2
      `Print Headers
        l_printx = wdth_prnt
        inc sp, 19
        inc l_printx, 0 : d3d_text 2, l_printx, sp, 0, "File Pos"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Date"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Time"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Hole Depth"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Bit Depth"

        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "SPP"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Flow IN"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "SPM 1"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "SPM 2"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "TG %"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "H2S"
        
      `Print Data
        for arr_lp = 0 + ((g_DATABASE_HD_View_PageNumber - 1) * c_DATABASE_HD_View_MaxRecordsPerPage) to c_DATABASE_HD_View_MaxRecordsPerPage + ((g_DATABASE_HD_View_PageNumber - 1) * c_DATABASE_HD_View_MaxRecordsPerPage)
          set datafile position 1, (arr_lp * c_DATABASE_Bytes_Per_Record)
          l_Tempbyte = datafile byte(1)
          l_Tempbyte = datafile byte(1)
          l_Tempbyte = datafile byte(1)
          l_HD_ArrayPos = datafile integer(1)
          l_HD_Read_Time$ = datafile string$(1)
          l_HD_Read_Date$ = datafile string$(1)
          l_HD_Read_Hole_Depth# = datafile float(1)
          l_HD_Read_Bit_Depth# = datafile float(1)
          l_HD_Read_ROP# = datafile float(1)
          l_HD_Read_WOB# = datafile float(1)
          l_HD_Read_Hookload = datafile word(1)
          l_HD_Read_RPM = datafile word(1)
          l_HD_Read_Torque# = datafile float(1)
          l_HD_Read_TripTank# = datafile float(1)
          l_HD_Read_BlockPosition# = datafile float(1)
          l_HD_Read_PVT# = datafile float(1)
          l_HD_Read_PIT1# = datafile float(1)
          l_HD_Read_PIT2# = datafile float(1)
          l_HD_Read_PIT3# = datafile float(1)
          l_HD_Read_PIT4# = datafile float(1)
          l_HD_Read_PIT5# = datafile float(1)
          l_HD_Read_PIT6# = datafile float(1)
          l_HD_Read_PIT7# = datafile float(1)
          l_HD_Read_PIT8# = datafile float(1)
          l_HD_Read_SPP = datafile word(1)
          l_HD_Read_FlowIn = datafile word(1)
          l_HD_Read_SPM1 = datafile word(1)
          l_HD_Read_SPM2 = datafile word(1)
          l_HD_Read_SPM3 = datafile word(1)
          l_HD_Read_TotalGas# = datafile float(1)
          l_HD_Read_H2S# = datafile float(1)
          l_HD_Read_TempIN# = datafile float(1)
          l_HD_Read_TempOUT# = datafile float(1)
          l_HD_Read_Comment$ = datafile string$(1)
          l_HD_Read_CSG = datafile word(1)
          l_HD_Read_FlowOut# = datafile float(1)
          l_HD_Read_TotalStrokes = datafile integer(1)
          
          inc sp, 19
          l_printx = wdth_prnt
          inc l_printx, 0 : d3d_text 1, l_printx, sp, 0, str$(arr_lp)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, lib_CONVERT_DATE_US_to_UK_Format(l_HD_Read_Date$)
          inc l_printx, 75 : d3d_text 1, l_printx, sp, 0, l_HD_Read_Time$ 
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_Hole_Depth#, 1)
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_Bit_Depth#, 1) 
 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_SPP, 0)  
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_FlowIn, 0) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_SPM1, 0) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_SPM2, 0) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_TotalGas#, 2) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_H2S#, 0) 
        next arr_lp
      
    endif
    
    
    if g_DATABASE_HD_View_PageLeftRight = 3
      `Print Headers
        l_printx = wdth_prnt
        inc sp, 19
        inc l_printx, 0 : d3d_text 2, l_printx, sp, 0, "File Pos"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Date"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Time"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Hole Depth"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Bit Depth"

        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT1"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT2"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT3"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT4"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT5"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT6"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT7"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PIT8"
        
      `Print Data
        for arr_lp = 0 + ((g_DATABASE_HD_View_PageNumber - 1) * c_DATABASE_HD_View_MaxRecordsPerPage) to c_DATABASE_HD_View_MaxRecordsPerPage + ((g_DATABASE_HD_View_PageNumber - 1) * c_DATABASE_HD_View_MaxRecordsPerPage)
          set datafile position 1, (arr_lp * c_DATABASE_Bytes_Per_Record)
          l_Tempbyte = datafile byte(1)
          l_Tempbyte = datafile byte(1)
          l_Tempbyte = datafile byte(1)
          l_HD_ArrayPos = datafile integer(1)
          l_HD_Read_Time$ = datafile string$(1)
          l_HD_Read_Date$ = datafile string$(1)
          l_HD_Read_Hole_Depth# = datafile float(1)
          l_HD_Read_Bit_Depth# = datafile float(1)
          l_HD_Read_ROP# = datafile float(1)
          l_HD_Read_WOB# = datafile float(1)
          l_HD_Read_Hookload = datafile word(1)
          l_HD_Read_RPM = datafile word(1)
          l_HD_Read_Torque# = datafile float(1)
          l_HD_Read_TripTank# = datafile float(1)
          l_HD_Read_BlockPosition# = datafile float(1)
          l_HD_Read_PVT# = datafile float(1)
          l_HD_Read_PIT1# = datafile float(1)
          l_HD_Read_PIT2# = datafile float(1)
          l_HD_Read_PIT3# = datafile float(1)
          l_HD_Read_PIT4# = datafile float(1)
          l_HD_Read_PIT5# = datafile float(1)
          l_HD_Read_PIT6# = datafile float(1)
          l_HD_Read_PIT7# = datafile float(1)
          l_HD_Read_PIT8# = datafile float(1)
          l_HD_Read_SPP = datafile word(1)
          l_HD_Read_FlowIn = datafile word(1)
          l_HD_Read_SPM1 = datafile word(1)
          l_HD_Read_SPM2 = datafile word(1)
          l_HD_Read_SPM3 = datafile word(1)
          l_HD_Read_TotalGas# = datafile float(1)
          l_HD_Read_H2S# = datafile float(1)
          l_HD_Read_TempIN# = datafile float(1)
          l_HD_Read_TempOUT# = datafile float(1)
          l_HD_Read_Comment$ = datafile string$(1)
          l_HD_Read_CSG = datafile word(1)
          l_HD_Read_FlowOut# = datafile float(1)
          l_HD_Read_TotalStrokes = datafile integer(1)
          
          inc sp, 19
          l_printx = wdth_prnt
          inc l_printx, 0 : d3d_text 1, l_printx, sp, 0, str$(arr_lp)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, lib_CONVERT_DATE_US_to_UK_Format(l_HD_Read_Date$)
          inc l_printx, 75 : d3d_text 1, l_printx, sp, 0, l_HD_Read_Time$ 
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_Hole_Depth#, 1)
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_Bit_Depth#, 1) 
 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_PIT1#, 1)  
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_PIT2#, 1) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_PIT3#, 1) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_PIT4#, 1) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_PIT5#, 1)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_PIT6#, 1) 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_PIT7#, 1)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_PIT8#, 1) 
        next arr_lp
      
    endif
    
    if g_DATABASE_HD_View_PageLeftRight = 4
      `Print Headers
        l_printx = wdth_prnt
        inc sp, 19
        inc l_printx, 0 : d3d_text 2, l_printx, sp, 0, "File Pos"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Date"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Time"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Hole Depth"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Bit Depth"

        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Temp IN"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Temp OUT"
        inc l_printx, 100 : d3d_text 2, l_printx, sp, 0, "COMMENT"
        inc l_printx, 150 : d3d_text 2, l_printx, sp, 0, "CSG"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "FLOW OUT"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Total Strokes"
        
      `Print Data
        for arr_lp = 0 + ((g_DATABASE_HD_View_PageNumber - 1) * c_DATABASE_HD_View_MaxRecordsPerPage) to c_DATABASE_HD_View_MaxRecordsPerPage + ((g_DATABASE_HD_View_PageNumber - 1) * c_DATABASE_HD_View_MaxRecordsPerPage)
          set datafile position 1, (arr_lp * c_DATABASE_Bytes_Per_Record)
          l_Tempbyte = datafile byte(1)
          l_Tempbyte = datafile byte(1)
          l_Tempbyte = datafile byte(1)
          l_HD_ArrayPos = datafile integer(1)
          l_HD_Read_Time$ = datafile string$(1)
          l_HD_Read_Date$ = datafile string$(1)
          l_HD_Read_Hole_Depth# = datafile float(1)
          l_HD_Read_Bit_Depth# = datafile float(1)
          l_HD_Read_ROP# = datafile float(1)
          l_HD_Read_WOB# = datafile float(1)
          l_HD_Read_Hookload = datafile word(1)
          l_HD_Read_RPM = datafile word(1)
          l_HD_Read_Torque# = datafile float(1)
          l_HD_Read_TripTank# = datafile float(1)
          l_HD_Read_BlockPosition# = datafile float(1)
          l_HD_Read_PVT# = datafile float(1)
          l_HD_Read_PIT1# = datafile float(1)
          l_HD_Read_PIT2# = datafile float(1)
          l_HD_Read_PIT3# = datafile float(1)
          l_HD_Read_PIT4# = datafile float(1)
          l_HD_Read_PIT5# = datafile float(1)
          l_HD_Read_PIT6# = datafile float(1)
          l_HD_Read_PIT7# = datafile float(1)
          l_HD_Read_PIT8# = datafile float(1)
          l_HD_Read_SPP = datafile word(1)
          l_HD_Read_FlowIn = datafile word(1)
          l_HD_Read_SPM1 = datafile word(1)
          l_HD_Read_SPM2 = datafile word(1)
          l_HD_Read_SPM3 = datafile word(1)
          l_HD_Read_TotalGas# = datafile float(1)
          l_HD_Read_H2S# = datafile float(1)
          l_HD_Read_TempIN# = datafile float(1)
          l_HD_Read_TempOUT# = datafile float(1)
          l_HD_Read_Comment$ = datafile string$(1)
          l_HD_Read_CSG = datafile word(1)
          l_HD_Read_FlowOut# = datafile float(1)
          l_HD_Read_TotalStrokes = datafile integer(1)
          
          inc sp, 19
          l_printx = wdth_prnt
          inc l_printx, 0 : d3d_text 1, l_printx, sp, 0, str$(arr_lp)
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, lib_CONVERT_DATE_US_to_UK_Format(l_HD_Read_Date$)
          inc l_printx, 75 : d3d_text 1, l_printx, sp, 0, l_HD_Read_Time$ 
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_Hole_Depth#, 1)
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_Bit_Depth#, 1) 
 
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_TempIN#, 1)  
          inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_TempOUT#, 1) 
          inc l_printx, 100 : d3d_text 1, l_printx, sp, 0, l_HD_Read_Comment$
          inc l_printx, 150 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_CSG)
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_FlowOut#, 1)
          inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(l_HD_Read_TotalStrokes, 0)
          
        next arr_lp
      
    endif
    
    
  d3d_endtext
  
  close datafile 1

endfunction

function INPUT_SCREEN_HD()

  `[G] - Go to page number
  if keystate(34)= 1 and key_state(34,0)= 0
    if g_DATABASE_HD_GotoPage_Toggle = -1
      g_DATABASE_HD_GotoPage_Toggle = 1
      g_DATABASE_HD_GotoPage_BuildString$ = ""
    else
      g_DATABASE_HD_GotoPage_Toggle = -1
    endif    
    key_state(34,0)=1
  endif
  if keystate(34)=0 and key_state(34,0)=1 then key_state(34,0)=0
  `Build the HD database goto number string if a number is pressed and g_DATABASE_MEM_GotoPage_Toggle = 1
    if g_DATABASE_HD_GotoPage_Toggle = 1
      if scancode() > 1 and scancode() < 12
        l_HDDB_Keyboard_Input = scancode()
        if keystate(l_HDDB_Keyboard_Input)= 1 and key_state(l_HDDB_Keyboard_Input,0)= 0
          if scancode() = 11
            g_DATABASE_HD_GotoPage_BuildString$ = g_DATABASE_HD_GotoPage_BuildString$ + "0"
          else
            g_DATABASE_HD_GotoPage_BuildString$ = g_DATABASE_HD_GotoPage_BuildString$ + str$(l_HDDB_Keyboard_Input - 1)
          endif
          key_state(l_HDDB_Keyboard_Input, 0) = 1
        endif
      endif
      `Delete Key
      if scancode() = 14 and key_state(14,0)= 0
        key_state(14,0) = 1
        g_DATABASE_HD_GotoPage_BuildString$ = left$(g_DATABASE_HD_GotoPage_BuildString$, (len(g_DATABASE_HD_GotoPage_BuildString$)-1))
      endif
      if scancode() = 0
        for check_lp = 2 to 11
          if keystate(check_lp) = 0 and key_state(check_lp, 0) = 1
            key_state(check_lp,0) = 0
          endif
        next check_lp
      endif
      
    	`Dirty NUMPAD Code - Just do it this way to make it work and not mess with other code.
    	if scancode() > 70 and scancode() < 83
      	l_HDDB_Keyboard_Input = scancode()
      	if keystate(l_HDDB_Keyboard_Input)= 1 and key_state(l_HDDB_Keyboard_Input,0)= 0
        	if l_HDDB_Keyboard_Input = 79 then g_DATABASE_HD_GotoPage_BuildString$ = g_DATABASE_HD_GotoPage_BuildString$ + "1"
        	if l_HDDB_Keyboard_Input = 80 then g_DATABASE_HD_GotoPage_BuildString$ = g_DATABASE_HD_GotoPage_BuildString$ + "2"
        	if l_HDDB_Keyboard_Input = 81 then g_DATABASE_HD_GotoPage_BuildString$ = g_DATABASE_HD_GotoPage_BuildString$ + "3"
	
        	if l_HDDB_Keyboard_Input = 75 then g_DATABASE_HD_GotoPage_BuildString$ = g_DATABASE_HD_GotoPage_BuildString$ + "4"
        	if l_HDDB_Keyboard_Input = 76 then g_DATABASE_HD_GotoPage_BuildString$ = g_DATABASE_HD_GotoPage_BuildString$ + "5"
        	if l_HDDB_Keyboard_Input = 77 then g_DATABASE_HD_GotoPage_BuildString$ = g_DATABASE_HD_GotoPage_BuildString$ + "6"
        	
        	if l_HDDB_Keyboard_Input = 71 then g_DATABASE_HD_GotoPage_BuildString$ = g_DATABASE_HD_GotoPage_BuildString$ + "7"
        	if l_HDDB_Keyboard_Input = 72 then g_DATABASE_HD_GotoPage_BuildString$ = g_DATABASE_HD_GotoPage_BuildString$ + "8"
        	if l_HDDB_Keyboard_Input = 73 then g_DATABASE_HD_GotoPage_BuildString$ = g_DATABASE_HD_GotoPage_BuildString$ + "9"
        	
        	if l_HDDB_Keyboard_Input = 82 then g_DATABASE_HD_GotoPage_BuildString$ = g_DATABASE_HD_GotoPage_BuildString$ + "0"
        	
        	key_state(l_HDDB_Keyboard_Input,0) = 1
      	endif
    	endif
    	if scancode() = 0
    		for check_lp = 71 to 82
      		if keystate(check_lp) = 0 and key_state(check_lp, 0) = 1
        		key_state(check_lp,0) = 0
      		endif
    		next check_lp
    	endif
      
    endif
    if keystate(14)=0 and key_state(14,0)=1 then key_state(14,0)=0
    
    `[ENTER] - Accept the goto page number
    if lib_Enter_Pressed(7414) = 1
      l_max_pages = int(g_DATABASE_HD_Total_Num_Records / c_DATABASE_MEM_View_MaxRecordsPerPage) + 1
      l_gotopage_calc = val(g_DATABASE_HD_GotoPage_BuildString$)
      if l_gotopage_calc > l_max_pages
        l_gotopage_calc = l_max_pages
      endif
      if l_gotopage_calc = 0 
        l_gotopage_calc = 1
      endif
      g_DATABASE_HD_View_PageNumber = l_gotopage_calc
      g_DATABASE_HD_GotoPage_Toggle = -1
    endif

  `[LEFT Cursor] - Go to 1st Display page
  if KEYSTATE(203)= 1 and key_state(203,0)= 0
    dec g_DATABASE_HD_View_PageLeftRight, 1
    if g_DATABASE_HD_View_PageLeftRight < 1 then g_DATABASE_HD_View_PageLeftRight = 1
    key_state(203,0)=1
  endif
  if KEYSTATE(203)=0 and key_state(203,0)=1 then key_state(203,0)=0
  
  `[RIGHT Cursor] - Go to 2st Display page
  if KEYSTATE(205)= 1 and key_state(205,0)= 0
    inc g_DATABASE_HD_View_PageLeftRight, 1
    if g_DATABASE_HD_View_PageLeftRight > 4 then g_DATABASE_HD_View_PageLeftRight = 4
    key_state(205,0)=1
  endif
  if KEYSTATE(205)=0 and key_state(205,0)=1 then key_state(205,0)=0
  
  `[UP Cursor] - Go up a page view
  if KEYSTATE(200)= 1 and key_state(200,0)= 0
    if g_DATABASE_HD_View_PageNumber > 1
      dec g_DATABASE_HD_View_PageNumber, 1
    endif  
    key_state(200,0)=1
  endif
  if KEYSTATE(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
  
  `[DOWN Cursor] - Go down a page view
  if KEYSTATE(208)= 1 and key_state(208,0)= 0
    l_max_pages = int(g_DATABASE_HD_Total_Num_Records / c_DATABASE_MEM_View_MaxRecordsPerPage) + 1
    if g_DATABASE_HD_View_PageNumber < l_max_pages
      inc g_DATABASE_HD_View_PageNumber, 1
    endif  
    key_state(208,0)=1
  endif
  if KEYSTATE(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
  
  `[PAGE UP Cursor] - Go up a page view
  if KEYSTATE(201)= 1 and key_state(201,0)= 0
    if g_DATABASE_HD_View_PageNumber > 1
      dec g_DATABASE_HD_View_PageNumber, 5
      if g_DATABASE_HD_View_PageNumber < 1 then g_DATABASE_HD_View_PageNumber = 1
    endif  
    key_state(201,0)=1
  endif
  if KEYSTATE(201)=0 and key_state(201,0)=1 then key_state(201,0)=0
  
  `[PAGE DOWN Cursor] - Go down a page view
  if KEYSTATE(209)= 1 and key_state(209,0)= 0
    l_max_pages = int(g_DATABASE_HD_Total_Num_Records / c_DATABASE_MEM_View_MaxRecordsPerPage) + 1
    if g_DATABASE_HD_View_PageNumber < l_max_pages
      inc g_DATABASE_HD_View_PageNumber, 5
      if g_DATABASE_HD_View_PageNumber > l_max_pages then g_DATABASE_HD_View_PageNumber = l_max_pages
    endif  
    key_state(209,0)=1
  endif
  if KEYSTATE(209)=0 and key_state(209,0)=1 then key_state(209,0)=0
  
  `[HOME] - Goto Page 1
  if KEYSTATE(199)= 1 and key_state(199,0)= 0
    g_DATABASE_HD_View_PageNumber = 1
    key_state(199,0)=1
  endif
  if KEYSTATE(199)=0 and key_state(199,0)=1 then key_state(199,0)=0
  
  `[END] - Goto Last Page
  if KEYSTATE(207)= 1 and key_state(207,0)= 0
    l_max_pages = int(g_DATABASE_HD_Total_Num_Records / c_DATABASE_MEM_View_MaxRecordsPerPage) + 1
    g_DATABASE_HD_View_PageNumber = l_max_pages
    key_state(207,0)=1
  endif
  if KEYSTATE(207)=0 and key_state(207,0)=1 then key_state(207,0)=0
  
  `Scroll HD DB Command Console Viewer Screen Numbers using mouse wheel
  if mousez() > g_BDHD_Screen_MouseZ
    g_BDHD_Screen_MouseZ = mousez()
    if g_DATABASE_HD_View_PageNumber > 1
      dec g_DATABASE_HD_View_PageNumber, 1
    endif  
  endif
  if mousez() < g_BDHD_Screen_MouseZ
    g_BDHD_Screen_MouseZ = mousez()
    l_max_pages = int(g_DATABASE_HD_Total_Num_Records / c_DATABASE_MEM_View_MaxRecordsPerPage) + 1
    if g_DATABASE_HD_View_PageNumber < l_max_pages
      inc g_DATABASE_HD_View_PageNumber, 1
    endif
  endif
  

endfunction

function SCREEN_SYNC_DATABASE()


  local l_VIEW_AT_SYNC_Array_Pos as integer
  local l_DATA_Array_Pntr as integer


  d3d_starttext
  
    wdth_prnt = screen width() * 0.05 : sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
 
    lib_Display_Menu()
    
    inc sp,19 * 2
    d3d_text 1, wdth_prnt, sp, 0, "1) Memory Database"
    d3d_text 1, wdth_prnt + 150, sp, 0, "2) Harddisk Database"
    d3d_text 2, wdth_prnt + 300, sp, 0, "3) SYNC Database"

    inc sp, (19 * 3)
    
    d3d_text 1, wdth_prnt, sp, 0, "(Home: 1st Page    End: Last Page)"

    inc sp, 19 * 3
    
    l_printx = wdth_prnt
    inc l_printx, 0 : d3d_text 2, l_printx, sp, 0, "Array"
    inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "MEM_DB_ArrPos"
    inc l_printx, 130 : d3d_text 2, l_printx, sp, 0, "Record_Syncd"
    inc l_printx, 130 : d3d_text 2, l_printx, sp, 0, "Date"
    inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Time"

    for print_lp = 0 to 25
    
      l_VIEW_AT_SYNC_Array_Pos = g_SYNC_ViewArray_ArrOffset + print_lp
      l_DATA_Array_Pntr = SIMPLE_SERVER_SYNC_ARRAY(1, l_VIEW_AT_SYNC_Array_Pos).MEM_DB_ArrPos
      
      if l_VIEW_AT_SYNC_Array_Pos < 0 then l_VIEW_AT_SYNC_Array_Pos = 0
      if l_VIEW_AT_SYNC_Array_Pos > 900 then l_VIEW_AT_SYNC_Array_Pos = 900
      
      if l_DATA_Array_Pntr < 0 then l_DATA_Array_Pntr = 0
      if l_DATA_Array_Pntr > g_DATABASE_MEM_Total_Num_Records then l_DATA_Array_Pntr = g_DATABASE_MEM_Total_Num_Records
      
      inc sp, 19
      l_printx = wdth_prnt
      inc l_printx, 0 : d3d_text 2, l_printx, sp, 0, str$(l_VIEW_AT_SYNC_Array_Pos) + ")"
      inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, str$(SIMPLE_SERVER_SYNC_ARRAY(1, l_VIEW_AT_SYNC_Array_Pos).MEM_DB_ArrPos)
      inc l_printx, 130 : d3d_text 2, l_printx, sp, 0, str$(SIMPLE_SERVER_SYNC_ARRAY(1, l_VIEW_AT_SYNC_Array_Pos).Record_Syncd)
      inc l_printx, 130 : d3d_text 2, l_printx, sp, 0, lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Date$)
      inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, MEM_MAIN_DATABASE(l_DATA_Array_Pntr).Time$
      
    next print_lp
 
//     		for set_lp_A = 1 to 899
//       		SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A).MEM_DB_ArrPos = SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A + 1).MEM_DB_ArrPos
//       		SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A).Record_Syncd = SIMPLE_SERVER_SYNC_ARRAY(1, set_lp_A + 1).Record_Syncd
//     		next set_lp_A


     
  d3d_endtext
  
  if mousez() > g_SYNC_ViewArray_Mousez
    g_SYNC_ViewArray_Mousez = mousez()
    dec g_SYNC_ViewArray_ArrOffset, 5
    if g_SYNC_ViewArray_ArrOffset < 0 then g_SYNC_ViewArray_ArrOffset = 0
  endif
  if mousez() < g_SYNC_ViewArray_Mousez
    g_SYNC_ViewArray_Mousez = mousez()
    inc g_SYNC_ViewArray_ArrOffset, 5
    if g_SYNC_ViewArray_ArrOffset > 900 - 25 then g_SYNC_ViewArray_ArrOffset = 900 - 25
  endif

  `[HOME] - Goto Page 1
  if KEYSTATE(199)= 1 and key_state(199,0)= 0
    g_SYNC_ViewArray_ArrOffset = 0
    key_state(199,0)=1
  endif
  if KEYSTATE(199)=0 and key_state(199,0)=1 then key_state(199,0)=0
  
  `[END] - Goto Last Page
  if KEYSTATE(207)= 1 and key_state(207,0)= 0
    g_SYNC_ViewArray_ArrOffset = 900 - 25
    key_state(207,0)=1
  endif
  if KEYSTATE(207)=0 and key_state(207,0)=1 then key_state(207,0)=0
   
     

endfunction

function __________SERIAL_PORT_DETAILS____________________________________________tx128r()
endfunction

function ENGINE_SERIALPORT_SCREEN()

  `Only allow the screen to be chosen if the WITS channels are not being edited.
  if g_WITS_UserSelection_EditToggle = -1
    `[1] - Screen Type - Serial Port Details
    if keystate(2)= 1 and key_state(2,0)= 0
      g_DISPLAY_SerialInfoScreenType = 1
      key_state(2,0)=1
    endif
    if keystate(2)=0 and key_state(2,0)=1 then key_state(2,0)=0
    
    `[2] - Screen Type - Serial Port Data Processed
    if keystate(3)= 1 and key_state(3,0)= 0
      g_DISPLAY_SerialInfoScreenType = 2
      key_state(3,0)=1
    endif
    if keystate(3)=0 and key_state(3,0)=1 then key_state(3,0)=0
    
    `[3] - Screen Type - Serial Port Raw
    if keystate(4)= 1 and key_state(4,0)= 0
      g_DISPLAY_SerialInfoScreenType = 3
      key_state(4,0)=1
    endif
    if keystate(4)=0 and key_state(4,0)=1 then key_state(4,0)=0
    
    `[4] - Screen Type - Serial Port Settings
    if keystate(5)= 1 and key_state(5,0)= 0
      g_DISPLAY_SerialInfoScreenType = 4
      g_ENGINE_ShowPortVariables = -1
      g_ENGINE_ShowPort_Success = -1
      key_state(5,0)=1
    endif
    if keystate(5)=0 and key_state(5,0)=1 then key_state(5,0)=0
  
    `[5] - Screen Type - WITS MAPPING
    if keystate(6)= 1 and key_state(6,0)= 0
      g_DISPLAY_SerialInfoScreenType = 5
      key_state(6,0)=1
    endif
    if keystate(6)=0 and key_state(6,0)=1 then key_state(6,0)=0
   
    `[6] - Screen Type - WITS OVERRIDE
    if keystate(7)= 1 and key_state(7,0)= 0
      g_DISPLAY_SerialInfoScreenType = 6
      key_state(7,0)=1
    endif
    if keystate(7)=0 and key_state(7,0)=1 then key_state(7,0)=0
    
  endif

  if g_DISPLAY_SerialInfoScreenType = 1
    SCREEN_SERIAL_PORT()
  endif
  
  if g_DISPLAY_SerialInfoScreenType = 2
    SCREEN_SERIAL_PORT_DATA_Processed()
  endif
  
  if g_DISPLAY_SerialInfoScreenType = 3
    SCREEN_SERIAL_PORT_DATA_Raw()
  endif
  
  if g_DISPLAY_SerialInfoScreenType = 4
    SCREEN_SERIAL_PORT_CONFIG()
  endif

  if g_DISPLAY_SerialInfoScreenType = 5
    SCREEN_SERIAL_PORT_WITS_MAPPING()
  endif
  
  if g_DISPLAY_SerialInfoScreenType = 6
    SCREEN_SERIAL_PORT_WITS_OVERRIDE()
  endif
  
  
endfunction

function SCREEN_SERIAL_PORT()

  local l_temp$ as string

  d3d_starttext

    wdth_prnt = screen width() * 0.05 : sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    inc sp, 19
    inc sp, 19
    d3d_text 2, wdth_prnt, sp, 0, "Serial Port Information"
    inc sp, 19
    d3d_text 2, wdth_prnt, sp, 0, "1. Port Details"
    d3d_text 1, wdth_prnt + 100, sp, 0, "2. Port Data - Processed"
    d3d_text 1, wdth_prnt + 255, sp, 0, "3. Port Data - Raw"
    d3d_text 1, wdth_prnt + 375, sp, 0, "4. Port Settings"
    d3d_text 1, wdth_prnt + 480, sp, 0, "5. WITS Mapping"
    d3d_text 1, wdth_prnt + 600, sp, 0, "6. WITS Override"
    
    
    
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "  SERIAL PORT DETAILS"
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Available Ports : " + g_SERIALPORT_OS_Available_Ports$
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Selected Port Name : " + g_SERIALPORT_Port_Name$
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Port Windows ID : " + str$(g_hPort)

    if g_SERIALPORT_ACTIVE = 1
      l_temp$ = "ACTIVE"
    else
      l_temp$ = "INACTIVE"
    endif  
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Port Activated  : " + l_temp$
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Port Error Code : " + str$(g_ENGINE_ERROR_DWORD_Code)
    
    inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  WITS ENGINE DETAILS"
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    WITS Status : " + g_SERIALPORT_DataStatus$
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Current Time : " + get time$()
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Last Data Certified At : " + g_SERIALPORT_Time_Last_Data_Received$
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Total Transmissions Passed : " + str$(g_WITS_RECEIVE_String_StructureTest_Passed)
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Total Transmissions Failed : " + str$(g_WITS_RECEIVE_String_StructureTest_Failed)
    
    inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  PORT COMMUNICATIONS FAILURES"
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Total Timeouts Surpassed : " + str$(g_SERIALPORT_TimeOuts_Counter)
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Successful Port Reboots : " + str$(g_SERIALPORT_Successful_Restarts)
    
    inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  PRIMARY PORT DATA (The data being received now, sorted into its channels)"
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Hole Depth : " + str$(g_COMMPORT_Receive_HoleDepth#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Bit Depth : " + str$(g_COMMPORT_Receive_BitDepth#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    ROP : " + str$(g_CALCULATED_Received_ROP#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    WOB : " + str$(g_COMMPORT_Receive_WOB#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Hookload : " + str$(g_COMMPORT_Receive_Hookload, 0)
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    RPM : " + str$(g_COMMPORT_Receive_RPM, 0)
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Triptank : " + str$(g_COMMPORT_Receive_TripTank#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Block Position : " + str$(g_COMMPORT_Receive_BlockPosition#, 1)
    inc sp,19
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "     Lag Depth   : " + str$(g_COMMPORT_Receive_LagDepth#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "     -Adjust Val : " + str$(g_LAGDEPTH_AdjustValue#, 3)
    dec sp, (19*11)
    inc sp,19 : d3d_text 1, wdth_prnt + 180, sp, 0, "    PVT : " + str$(g_COMMPORT_Receive_PVT#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 180, sp, 0, "    PIT1 : " + str$(g_COMMPORT_Receive_PIT1#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 180, sp, 0, "    PIT2 : " + str$(g_COMMPORT_Receive_PIT2#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 180, sp, 0, "    PIT3 : " + str$(g_COMMPORT_Receive_PIT3#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 180, sp, 0, "    PIT4 : " + str$(g_COMMPORT_Receive_PIT4#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 180, sp, 0, "    PIT5 : " + str$(g_COMMPORT_Receive_PIT5#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 180, sp, 0, "    PIT6 : " + str$(g_COMMPORT_Receive_PIT6#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 180, sp, 0, "    PIT7 : " + str$(g_COMMPORT_Receive_PIT7#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 180, sp, 0, "    PIT8 : " + str$(g_COMMPORT_Receive_PIT8#, 1)
    dec sp, (19*9)
    inc sp,19 : d3d_text 1, wdth_prnt + 360, sp, 0, "    Torque : " + str$(g_COMMPORT_Receive_Torque#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 360, sp, 0, "    SPP : " + str$(g_COMMPORT_Receive_SPP, 0)
    inc sp,19 : d3d_text 1, wdth_prnt + 360, sp, 0, "    Flow IN: " + str$(g_COMMPORT_Receive_FlowIN, 0)
    inc sp,19 : d3d_text 1, wdth_prnt + 360, sp, 0, "    SPM1 : " + str$(g_COMMPORT_Receive_SPM1, 0)
    inc sp,19 : d3d_text 1, wdth_prnt + 360, sp, 0, "    SPM2 : " + str$(g_COMMPORT_Receive_SPM2, 0)
    inc sp,19 : d3d_text 1, wdth_prnt + 360, sp, 0, "    SPM3 : " + str$(g_COMMPORT_Receive_SPM3, 0)
    inc sp,19 : d3d_text 1, wdth_prnt + 360, sp, 0, "    Total Gas% : " + str$(g_COMMPORT_Receive_TotalGas#, 2)
    inc sp,19 : d3d_text 1, wdth_prnt + 360, sp, 0, "    H2S : " + str$(g_COMMPORT_Receive_H2S#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 360, sp, 0, "    Temp IN  : " + str$(g_COMMPORT_Receive_TempIN#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 360, sp, 0, "    Temp OUT : " + str$(g_COMMPORT_Receive_TempOUT#, 1)
    dec sp, (19*10)
    inc sp,19 : d3d_text 1, wdth_prnt + 540, sp, 0, "    CSG : " + str$(g_COMMPORT_Receive_CSG, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 540, sp, 0, "    Flow OUT : " + str$(g_COMMPORT_Receive_FlowOUT#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 540, sp, 0, "    Lag Depth : " + str$(g_COMMPORT_Receive_LagDepth#, 1)
    inc sp,19 : d3d_text 1, wdth_prnt + 540, sp, 0, "    Total Strokes : " + str$(g_COMMPORT_Receive_TotalStrokes, 0)
    
  d3d_endtext  
  
endfunction

function SCREEN_SERIAL_PORT_DATA_Processed()

  local l_RecordIndexNum as integer
  local l_RecNum# as float
  local l_ChnlNum# as float
  local l_Value# as float

  d3d_starttext

    wdth_prnt = screen width() * 0.05 : sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    inc sp,19
    inc sp,19
    d3d_text 2, wdth_prnt, sp, 0, "Serial Port Information"
    inc sp, 19
    d3d_text 1, wdth_prnt, sp, 0, "1. Port Details"
    d3d_text 2, wdth_prnt + 100, sp, 0, "2. Port Data - Processed"
    d3d_text 1, wdth_prnt + 255, sp, 0, "3. Port Data - Raw"
    d3d_text 1, wdth_prnt + 375, sp, 0, "4. Port Settings"
    d3d_text 1, wdth_prnt + 480, sp, 0, "5. WITS Mapping"
    d3d_text 1, wdth_prnt + 600, sp, 0, "6. WITS Override"
    
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "  SERIAL PORT DETAILS - PROCESSED DATA"
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Serial Port System ID : " + g_SERIALPORT_Port_Name$
    if g_SERIALPORT_ACTIVE = 1
      l_temp$ = "ACTIVE"
    else
      l_temp$ = "INACTIVE"
    endif  
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Port Activated : " + l_temp$
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Total Transmissions Passed : " + str$(g_WITS_RECEIVE_String_StructureTest_Passed) + ", Total Transmissions Failed : " + str$(g_WITS_RECEIVE_String_StructureTest_Failed)
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Current Time : " + get time$() + ", Last data received at :" + g_SERIALPORT_Time_Last_Data_Received$
    inc sp,19

    `for print_lp = 0 to g_WITS_RECEIVE_String_Breakdown_Ttl_Num
    `  inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, str$(print_lp) + ": " + WITS_RECEIVE_String_Breakdown$(print_lp) + "     [Rec:" + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 0)) + ", Channel:" + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 1)) + ", Value:" + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 2)) + "]"
    `next print_lp
    
    `[LEFT Cursor] (Change Screen View)
    if keystate(203)= 1 and key_state(203,0)= 0
      dec g_SERIALPORT_ProcessedView_ScreenType, 1
      if g_SERIALPORT_ProcessedView_ScreenType < 0 then g_SERIALPORT_ProcessedView_ScreenType = 0
      key_state(203,0)=1
    endif
    if keystate(203)=0 and key_state(203,0)=1 then key_state(203,0)=0
    `[RIGHT Cursor] (Change Screen View)
    if keystate(205)= 1 and key_state(205,0)= 0
      inc g_SERIALPORT_ProcessedView_ScreenType, 1
      if g_SERIALPORT_ProcessedView_ScreenType > 30 then g_SERIALPORT_ProcessedView_ScreenType = 30
      key_state(205,0)=1
    endif
    if keystate(205)=0 and key_state(205,0)=1 then key_state(205,0)=0
    

    if g_SERIALPORT_ProcessedView_ScreenType = 0
      inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "  LAST RECEIVED DATA OVER SERIAL PORT"
      
  
      `if g_GENERAL_1SEC_ON_OFF_TOGGLE = 1
      `  d3d_text 1, wdth_prnt + 290, sp, 0, "(Left/Right Cursors to View Individual Records)" 
      `endif
      
      inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    (NOTE: Use Left/Right Cursors to View Individual Records)"
      
      `d3d_text 1, wdth_prnt + 290, sp, 0, "(Total items in the received string : " + str$(g_WITS_RECEIVE_String_Breakdown_Ttl_Num) + ")"
      d3d_text 1, wdth_prnt + 290 + 200, sp, 0, "(Total items in the received string : " + str$(g_WITS_RECEIVE_String_Breakdown_Ttl_Num) + ")"
      
      if g_WITS_RECEIVE_String_Breakdown_Ttl_Num < 26
        for print_lp = 0 to g_WITS_RECEIVE_String_Breakdown_Ttl_Num
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    " + str$(print_lp) + ", Record: " + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 0)) + ",    Channel: " + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 1)) + ",    Value: " + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 2))
        next print_lp
      else
        start_ypos = sp
        for print_lp = 0 to 23
          inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    " + str$(print_lp) + ", Record: " + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 0)) + ",    Channel: " + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 1)) + ",    Value: " + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 2))
        next print_lp
      
        sp = start_ypos
        for print_lp = 24 to g_WITS_RECEIVE_String_Breakdown_Ttl_Num
          inc sp,19 : d3d_text 1, wdth_prnt + 400, sp, 0, "    " + str$(print_lp) + ", Record: " + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 0)) + ",    Channel: " + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 1)) + ",    Value: " + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 2))
        next print_lp
      endif
    else
      `Display Individual Records with the Records Processed Data
      
        `Pad Data into Temp Array to view by record number
        for pad_lp = 0 to g_WITS_RECEIVE_String_Breakdown_Ttl_Num
          l_RecNum# = WITS_RECEIVE_String_Breakdown_Values#(pad_lp, 0)
          l_ChnlNum# = WITS_RECEIVE_String_Breakdown_Values#(pad_lp, 1)
          l_Value# = WITS_RECEIVE_String_Breakdown_Values#(pad_lp, 2)
          WITS_RECEIVE_TempDisplayChnlVals#(int(l_RecNum#), int(l_ChnlNum#)) = l_Value#
        next pad_lp
        
        
      
      l_RecordIndexNum = g_SERIALPORT_ProcessedView_ScreenType
      inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "  LAST RECEIVED DATA OVER SERIAL PORT"
      `d3d_text 1, wdth_prnt + 290, sp, 0, "(Left/Right Cursors to View Records)"
      inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "    (NOTE: Use Left/Right Cursors to View Individual Records)"

        for print_lp = 0 to 60

          inc sp,19
          `d3d_text 1, wdth_prnt, sp, 0, "    " + str$(print_lp) + ", Record: " + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 0)) + ",    Channel: " + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 1)) + ",    Value: " + str$(WITS_RECEIVE_String_Breakdown_Values#(print_lp, 2), 4)
          
           d3d_text 1, wdth_prnt, sp, 0, "    " + "Record: " + str$(l_RecordIndexNum) + ",    Channel: " + str$(print_lp) + ",    Value: " + str$(WITS_RECEIVE_TempDisplayChnlVals#(l_RecordIndexNum, print_lp))
           
          
          if print_lp = 20
            dec sp, 380
            inc wdth_prnt, 400
          endif
          if print_lp = 40
            dec sp, 380
            inc wdth_prnt, 400
          endif 
        next print_lp
        
    endif

  d3d_endtext
  
  

  
  
  
  `dim WITS_RECEIVE_String_Breakdown_Values#(500,2) as float: `1=Record Number, 2=Channel Number, 3=Value

endfunction

function SCREEN_SERIAL_PORT_DATA_Raw()

  d3d_starttext

    wdth_prnt = screen width() * 0.05 : sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    `[R] - Reset Passed/Failed Wits Transmission Values
    if keystate(19)= 1 and key_state(19,0)= 0
      g_WITS_RECEIVE_String_StructureTest_Passed = 0
      g_WITS_RECEIVE_String_StructureTest_Failed = 0
      key_state(19,0)=1
    endif
    if keystate(19)=0 and key_state(19,0)=1 then key_state(19,0)=0
    
    inc sp,19
    inc sp,19
    d3d_text 2, wdth_prnt, sp, 0, "Serial Port Information"
    inc sp, 19
    d3d_text 1, wdth_prnt, sp, 0, "1. Port Details"
    d3d_text 1, wdth_prnt + 100, sp, 0, "2. Port Data - Processed"
    d3d_text 2, wdth_prnt + 255, sp, 0, "3. Port Data - Raw"
    d3d_text 1, wdth_prnt + 375, sp, 0, "4. Port Settings"
    d3d_text 1, wdth_prnt + 480, sp, 0, "5. WITS Mapping"
    d3d_text 1, wdth_prnt + 600, sp, 0, "6. WITS Override"
    
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "  SERIAL PORT DETAILS - RAW DATA"
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Total Transmissions Passed : " + str$(g_WITS_RECEIVE_String_StructureTest_Passed) + ", Total Transmissions Failed : " + str$(g_WITS_RECEIVE_String_StructureTest_Failed) + "       (R - Reset Values)"
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "  WITS DATA RECEIVED (At Port Buffer)"
                d3d_text 2, wdth_prnt + 400, sp, 0, "  LAST DATA RECEIVED (Previous Data)"
    
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    String length : " + str$(len(g_SERIALPORT_Port_Output_String$))
                d3d_text 1, wdth_prnt + 400, sp, 0, "    String length : " + str$(len(g_SERIALPORT_Previous_Port_Output_String$))
   
    `WITS DATA RECEIVED (Realtime Bulk Arrival)
    lib_PrintString_IntoSections(g_SERIALPORT_Port_Output_String$, wdth_prnt, sp, 310, g_ENGINE_COLOUR_White)
    
    `LAST DATA RECEIVED
    lib_PrintString_IntoSections(g_SERIALPORT_Previous_Port_Output_String$, wdth_prnt + 400, sp, 310, g_ENGINE_COLOUR_White)
    
  d3d_endtext 
  

endfunction

function SCREEN_SERIAL_PORT_CONFIG()

  if g_ENGINE_ShowPortVariables = -1
    g_ENGINE_ShowPortVarTime$ = get time$()
    g_ENGINE_ShowPort_Success = lib_ShowSerial_GetState(g_hPort)
    g_ENGINE_ShowPortVariables = 1
  endif

  d3d_starttext
  
    wdth_prnt = screen width() * 0.05 : sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    inc sp,19
    inc sp,19
    d3d_text 2, wdth_prnt, sp, 0, "Serial Port Information"
    inc sp, 19
    d3d_text 1, wdth_prnt, sp, 0, "1. Port Details"
    d3d_text 1, wdth_prnt + 100, sp, 0, "2. Port Data - Processed"
    d3d_text 1, wdth_prnt + 255, sp, 0, "3. Port Data - Raw"
    d3d_text 2, wdth_prnt + 375, sp, 0, "4. Port Settings"
    d3d_text 1, wdth_prnt + 480, sp, 0, "5. WITS Mapping"
    d3d_text 1, wdth_prnt + 600, sp, 0, "6. WITS Override"
    
    inc sp,19
    inc sp,19
    d3d_text 2, wdth_prnt, sp, 0, "  SERIAL PORT CONFIGURATION SETTINGS - Read from Port"
    inc sp,19
    if g_ENGINE_ShowPort_Success = 0
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Port Read    : Error: Unable to read port"
    else
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Port Read    : Successful"
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Port Read at : " + g_ENGINE_ShowPortVarTime$
    endif
    
    if g_ENGINE_ShowPort_Success <> 0
      inc sp,19
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    DCBlength : " + str$(ShowScreen_DCB.DCBlength)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    BaudRate : " + str$(ShowScreen_DCB.BaudRate)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fBinary : " + str$(ShowScreen_DCB.fBinary)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fParity : " + str$(ShowScreen_DCB.fParity)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fOutxCtsFlow : " + str$(ShowScreen_DCB.fOutxCtsFlow)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fOutcDsrFlow : " + str$(ShowScreen_DCB.fOutcDsrFlow)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fDtrControl : " + str$(ShowScreen_DCB.fDtrControl)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fDsrSensitivity : " + str$(ShowScreen_DCB.fDsrSensitivity)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fTXContinueONXoff : " + str$(ShowScreen_DCB.fTXContinueONXoff)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fOutX : " + str$(ShowScreen_DCB.fOutX)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fInX : " + str$(ShowScreen_DCB.fInX)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fErrorChar : " + str$(ShowScreen_DCB.fErrorChar)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fNull : " + str$(ShowScreen_DCB.fNull)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fRtsControl : " + str$(ShowScreen_DCB.fRtsControl)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fAbortOnError : " + str$(ShowScreen_DCB.fAbortOnError)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    fDummy : " + str$(ShowScreen_DCB.fDummy)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    XonLim : " + str$(ShowScreen_DCB.XonLim)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    XoffLim : " + str$(ShowScreen_DCB.XoffLim)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    ByteSize : " + str$(ShowScreen_DCB.ByteSize)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Parity : " + str$(ShowScreen_DCB.Parity)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    StopBits : " + str$(ShowScreen_DCB.StopBits)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    XonChar : " + str$(ShowScreen_DCB.XonChar)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    XoffChar : " + str$(ShowScreen_DCB.XoffChar)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    ErrorChar : " + str$(ShowScreen_DCB.ErrorChar)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    EofChar : " + str$(ShowScreen_DCB.EofChar)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    EvtChar : " + str$(ShowScreen_DCB.EvtChar)
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    wReservedl : " + str$(ShowScreen_DCB.wReservedl)
    endif
  
  d3d_endtext

endfunction

function SCREEN_SERIAL_PORT_WITS_MAPPING()

  d3d_starttext

    wdth_prnt = screen width() * 0.05
    X_prnt1 = screen width() * 0.05 + 50
    X_prnt2 = screen width() * 0.05 + 200
    X_prnt3 = screen width() * 0.05 + 300
    sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    inc sp,19
    inc sp,19
    d3d_text 2, wdth_prnt, sp, 0, "Serial Port Information"
    inc sp, 19
    d3d_text 1, wdth_prnt, sp, 0, "1. Port Details"
    d3d_text 1, wdth_prnt + 100, sp, 0, "2. Port Data - Processed"
    d3d_text 1, wdth_prnt + 255, sp, 0, "3. Port Data - Raw"
    d3d_text 1, wdth_prnt + 375, sp, 0, "4. Port Settings"
    d3d_text 2, wdth_prnt + 480, sp, 0, "5. WITS Mapping"
    d3d_text 1, wdth_prnt + 600, sp, 0, "6. WITS Override"
    
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "  WITS MAPPINGS  (Use Cursor Keys. Press ENTER to edit)"
    
    lib_WITS_INPUT_UserSelection()
    lib_WITS_Fill_Information_Arrays()
    if g_WITS_UserSelection_EditToggle = 1
      lib_WITS_INPUT_ChangeVariable(500, 400)
    endif
    
    l_StartPrint_SP = sp
    
    inc sp,15
    d3d_text 1, X_prnt1, sp, 0, "NAME"
    d3d_text 1, X_prnt2, sp, 0, "RECORD"
    d3d_text 1, X_prnt3, sp, 0, "CHANNEL"
    
    for print_lp = 1 to 30
      inc sp,19
      
      `Draw Record Background Box
        if g_WITS_UserSelection_EditRecOrChnl = 1
          if g_WITS_UserSelection_EditItemNum = print_lp
            l_text_length = d3d_gettextwidth(1, WITS_UserSelection$(print_lp, 1)) + 7
            d3d_box X_prnt2 - 3, sp - 2, X_prnt2 + l_text_length, sp + 18, rgb(70, 70, 70)
            g_WITS_Userselection_CurrentSelectedValue$ = WITS_UserSelection$(print_lp, 1)
          endif
        endif
        
      `Draw Channel Background Box
        if g_WITS_UserSelection_EditRecOrChnl = 2
          if g_WITS_UserSelection_EditItemNum = print_lp
            l_text_length = d3d_gettextwidth(1, WITS_UserSelection$(print_lp, 2)) + 7
            d3d_box X_prnt3 - 3, sp - 2, X_prnt3 + l_text_length, sp + 18, rgb(70, 70, 70)
            g_WITS_Userselection_CurrentSelectedValue$ = WITS_UserSelection$(print_lp, 2)
          endif
        endif  
      
      `Print Name, Record and Channel Numbers
      d3d_text 1, X_prnt1, sp, 0, "  " + WITS_UserSelection$(print_lp, 0)
      d3d_text 1, X_prnt2, sp, 0, WITS_UserSelection$(print_lp, 1)
      d3d_text 1, X_prnt3, sp, 0, WITS_UserSelection$(print_lp, 2)

    next print_lp  
    
  d3d_endtext 


endfunction



function lib_WITS_INPUT_ChangeVariable(r_XPos as integer, r_YPos as integer)

  `This function allows the user to change the selected variable
  
  lib_INPUT_GetString_NumbersOnly()
  
  dec r_YPos, 19
  inc r_YPos, 19 : d3d_text 1, r_XPos, r_YPos, 0, "Enter a New Value"
  inc r_YPos, 19 : d3d_text 1, r_XPos, r_YPos, 0, "> " + g_ENGINE_InputNumbersOnly$

endfunction

function lib_WITS_INPUT_UserSelection()

  `g_WITS_UserSelection_EditRecOrChnl: 1= Edit Record Numbers, 2= Edit Channel Numbers
  `global g_WITS_UserSelection_EditRecOrChnl as integer : g_WITS_UserSelection_EditRecOrChnl = 1
  `g_WITS_UserSelection_EditItemNum: The array position to edit (Range 1 to 25)
  `global g_WITS_UserSelection_EditItemNum as integer : g_WITS_UserSelection_EditItemNum = 1

  if g_WITS_UserSelection_EditToggle = -1
    `[UP Cursor]
    if keystate(200)= 1 and key_state(200,0)= 0
      dec g_WITS_UserSelection_EditItemNum, 1
      if g_WITS_UserSelection_EditItemNum < 1 then g_WITS_UserSelection_EditItemNum = 1
      key_state(200,0)=1
    endif
    if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
    `[DOWN Cursor]
    if keystate(208)= 1 and key_state(208,0)= 0
      inc g_WITS_UserSelection_EditItemNum, 1
      if g_WITS_UserSelection_EditItemNum > 30 then g_WITS_UserSelection_EditItemNum = 30
      key_state(208,0)=1
    endif
    if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
    `[LEFT Cursor] (Edit Record Numbers)
    if keystate(203)= 1 and key_state(203,0)= 0
      g_WITS_UserSelection_EditRecOrChnl = 1
      key_state(203,0)=1
    endif
    if keystate(203)=0 and key_state(203,0)=1 then key_state(203,0)=0
    `[RIGHT Cursor] (Edit Channel Numbers)
    if keystate(205)= 1 and key_state(205,0)= 0
      g_WITS_UserSelection_EditRecOrChnl = 2
      key_state(205,0)=1
    endif
    if keystate(205)=0 and key_state(205,0)=1 then key_state(205,0)=0
  endif
  
  
  `[Enter] - Accept the command console string
  if keystate(28) = 0 and key_state(28,0) = 1 then key_state(28,0) = 0
  if keystate(28) = 1 and key_state(28,0) = 0
    key_state(28,0) = 1
    if g_WITS_UserSelection_EditToggle = -1
      `Toggle Edit ON
      g_WITS_UserSelection_EditToggle = 1
      g_WITS_UserSelection_BuildStr$ = ""
      clear entry buffer
      g_ENGINE_InputNumbersOnly$ = g_WITS_Userselection_CurrentSelectedValue$
    else
      `Toggle Edit OFF and change value  
      g_WITS_UserSelection_EditToggle = -1
      g_WITS_UserSelection_BuildStr$ = g_ENGINE_InputNumbersOnly$
      g_ENGINE_InputNumbersOnly$ = ""
      lib_WITS_NullAllValues()
      lib_WITS_Change_Engine_Value(g_WITS_UserSelection_EditRecOrChnl, g_WITS_UserSelection_EditItemNum, g_WITS_UserSelection_BuildStr$)
      SAVE_WITS_CONFIG_File()
    endif
  endif

endfunction

function lib_WITS_Change_Engine_Value(r_RecOrChnl as integer, r_ArrayPos as integer, r_NewVal$ as string)

  if r_RecOrChnl = 1 and r_ArrayPos = 1 then g_ENG_WITSCONFIG_RecordNumber_BitDepth$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 2 then g_ENG_WITSCONFIG_RecordNumber_HoleDepth$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 3 then g_ENG_WITSCONFIG_RecordNumber_BlockPosition$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 4 then g_ENG_WITSCONFIG_RecordNumber_HKLD$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 5 then g_ENG_WITSCONFIG_RecordNumber_WOB$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 6 then g_ENG_WITSCONFIG_RecordNumber_Torque$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 7 then g_ENG_WITSCONFIG_RecordNumber_RPM$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 8 then g_ENG_WITSCONFIG_RecordNumber_SPP$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 9 then g_ENG_WITSCONFIG_RecordNumber_CSG$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 10 then g_ENG_WITSCONFIG_RecordNumber_SPM1$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 11 then g_ENG_WITSCONFIG_RecordNumber_SPM2$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 12 then g_ENG_WITSCONFIG_RecordNumber_SPM3$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 13 then g_ENG_WITSCONFIG_RecordNumber_PVT$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 14 then g_ENG_WITSCONFIG_RecordNumber_PIT1$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 15 then g_ENG_WITSCONFIG_RecordNumber_PIT2$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 16 then g_ENG_WITSCONFIG_RecordNumber_PIT3$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 17 then g_ENG_WITSCONFIG_RecordNumber_PIT4$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 18 then g_ENG_WITSCONFIG_RecordNumber_PIT5$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 19 then g_ENG_WITSCONFIG_RecordNumber_PIT6$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 20 then g_ENG_WITSCONFIG_RecordNumber_PIT7$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 21 then g_ENG_WITSCONFIG_RecordNumber_PIT8$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 22 then g_ENG_WITSCONFIG_RecordNumber_FLOWIN$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 23 then g_ENG_WITSCONFIG_RecordNumber_FLOWOUT$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 24 then g_ENG_WITSCONFIG_RecordNumber_TG$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 25 then g_ENG_WITSCONFIG_RecordNumber_H2S$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 26 then g_ENG_WITSCONFIG_RecordNumber_TripTank$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 27 then g_ENG_WITSCONFIG_RecordNumber_TempIN$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 28 then g_ENG_WITSCONFIG_RecordNumber_TempOUT$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 29 then g_ENG_WITSCONFIG_RecordNumber_LagDepth$ = r_NewVal$
  if r_RecOrChnl = 1 and r_ArrayPos = 30 then g_ENG_WITSCONFIG_RecordNumber_TtlStrks$ = r_NewVal$
  
  
  if r_RecOrChnl = 2 and r_ArrayPos = 1 then g_ENG_WITSCONFIG_ChannelNumber_BitDepth$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 2 then g_ENG_WITSCONFIG_ChannelNumber_HoleDepth$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 3 then g_ENG_WITSCONFIG_ChannelNumber_BlockPosition$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 4 then g_ENG_WITSCONFIG_ChannelNumber_HKLD$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 5 then g_ENG_WITSCONFIG_ChannelNumber_WOB$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 6 then g_ENG_WITSCONFIG_ChannelNumber_Torque$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 7 then g_ENG_WITSCONFIG_ChannelNumber_RPM$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 8 then g_ENG_WITSCONFIG_ChannelNumber_SPP$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 9 then g_ENG_WITSCONFIG_ChannelNumber_CSG$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 10 then g_ENG_WITSCONFIG_ChannelNumber_SPM1$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 11 then g_ENG_WITSCONFIG_ChannelNumber_SPM2$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 12 then g_ENG_WITSCONFIG_ChannelNumber_SPM3$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 13 then g_ENG_WITSCONFIG_ChannelNumber_PVT$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 14 then g_ENG_WITSCONFIG_ChannelNumber_PIT1$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 15 then g_ENG_WITSCONFIG_ChannelNumber_PIT2$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 16 then g_ENG_WITSCONFIG_ChannelNumber_PIT3$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 17 then g_ENG_WITSCONFIG_ChannelNumber_PIT4$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 18 then g_ENG_WITSCONFIG_ChannelNumber_PIT5$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 19 then g_ENG_WITSCONFIG_ChannelNumber_PIT6$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 20 then g_ENG_WITSCONFIG_ChannelNumber_PIT7$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 21 then g_ENG_WITSCONFIG_ChannelNumber_PIT8$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 22 then g_ENG_WITSCONFIG_ChannelNumber_FLOWIN$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 23 then g_ENG_WITSCONFIG_ChannelNumber_FLOWOUT$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 24 then g_ENG_WITSCONFIG_ChannelNumber_TG$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 25 then g_ENG_WITSCONFIG_ChannelNumber_H2S$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 26 then g_ENG_WITSCONFIG_ChannelNumber_TripTank$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 27 then g_ENG_WITSCONFIG_ChannelNumber_TempIN$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 28 then g_ENG_WITSCONFIG_ChannelNumber_TempOUT$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 29 then g_ENG_WITSCONFIG_ChannelNumber_LagDepth$ = r_NewVal$
  if r_RecOrChnl = 2 and r_ArrayPos = 30 then g_ENG_WITSCONFIG_ChannelNumber_TtlStrks$ = r_NewVal$
  

endfunction

function lib_WITS_NullAllValues()

  `This function sets all receiving WITS variables to zero. It is used because the incoming
  `variables store the last recieved variable and if you change a WITS variables record or
  `channel mapping it will keep storing the last variable until set to zero. Rather than
  `program something complicated given how rarely channel mappings will be changed the code
  `just resets all variables.
  
  g_COMMPORT_Receive_HoleDepth# = 0.0
  g_COMMPORT_Receive_BitDepth# = 0.0
  g_COMMPORT_Receive_WOB# = 0.0
  g_COMMPORT_Receive_Hookload = 0
  g_COMMPORT_Receive_RPM = 0
  g_COMMPORT_Receive_Torque# = 0.0
  g_COMMPORT_Receive_TripTank# = 0.0
  g_COMMPORT_Receive_BlockPosition# = 0.0
  g_COMMPORT_Receive_PVT# = 0.0
  g_COMMPORT_Receive_Pit1# = 0.0
  g_COMMPORT_Receive_Pit2# = 0.0
  g_COMMPORT_Receive_Pit3# = 0.0
  g_COMMPORT_Receive_Pit4# = 0.0
  g_COMMPORT_Receive_Pit5# = 0.0
  g_COMMPORT_Receive_Pit6# = 0.0
  g_COMMPORT_Receive_Pit7# = 0.0
  g_COMMPORT_Receive_Pit8# = 0.0
  g_COMMPORT_Receive_SPP = 0
  g_COMMPORT_Receive_CSG = 0
  g_COMMPORT_Receive_FlowIN = 0
  g_COMMPORT_Receive_FlowOUT# = 0.0
  g_COMMPORT_Receive_SPM1 = 0
  g_COMMPORT_Receive_SPM2 = 0
  g_COMMPORT_Receive_SPM3 = 0
  g_COMMPORT_Receive_TotalGas# = 0.0
  g_COMMPORT_Receive_H2S# = 0.0
  g_COMMPORT_Receive_TempIN# = 0.0
  g_COMMPORT_Receive_TempOUT# = 0.0
  g_COMMPORT_Receive_LagDepth# = 0.0
  g_COMMPORT_Receive_TotalStrokes = 0
  
  
  
endfunction

function lib_WITS_Fill_Information_Arrays()

  ` WITS_UserSelection$: (0=Channel Name, 1=Record Num, 2=Channel Num)
  
  `Set Channel Names
  WITS_UserSelection$(1, 0) = "Bit Depth"
  WITS_UserSelection$(2, 0) = "Hole Depth"
  WITS_UserSelection$(3, 0) = "Block Position"
  WITS_UserSelection$(4, 0) = "Hookload"
  WITS_UserSelection$(5, 0) = "WOB"
  WITS_UserSelection$(6, 0) = "Torque"
  WITS_UserSelection$(7, 0) = "RPM"
  WITS_UserSelection$(8, 0) = "SPP"
  WITS_UserSelection$(9, 0) = "CSG"
  WITS_UserSelection$(10, 0) = "SPM1"
  WITS_UserSelection$(11, 0) = "SMP2"
  WITS_UserSelection$(12, 0) = "SPM3"
  WITS_UserSelection$(13, 0) = "PVT"
  WITS_UserSelection$(14, 0) = "PIT1"
  WITS_UserSelection$(15, 0) = "PIT2"
  WITS_UserSelection$(16, 0) = "PIT3"
  WITS_UserSelection$(17, 0) = "PIT4"
  WITS_UserSelection$(18, 0) = "PIT5"
  WITS_UserSelection$(19, 0) = "PIT6"
  WITS_UserSelection$(20, 0) = "PIT7"
  WITS_UserSelection$(21, 0) = "PIT8"
  WITS_UserSelection$(22, 0) = "Flow In"
  WITS_UserSelection$(23, 0) = "Flow OUT"
  WITS_UserSelection$(24, 0) = "TG%"
  WITS_UserSelection$(25, 0) = "H2S"
  WITS_UserSelection$(26, 0) = "Trip Tank"
  WITS_UserSelection$(27, 0) = "Temp IN"
  WITS_UserSelection$(28, 0) = "Temp OUT"
  WITS_UserSelection$(29, 0) = "Lag Depth"
  WITS_UserSelection$(30, 0) = "Total Strokes"

  `Set Record and Channel Numbers

  WITS_UserSelection$(1, 1) = g_ENG_WITSCONFIG_RecordNumber_BitDepth$ : WITS_UserSelection$(1, 2) = g_ENG_WITSCONFIG_ChannelNumber_BitDepth$
  WITS_UserSelection$(2, 1) = g_ENG_WITSCONFIG_RecordNumber_HoleDepth$ : WITS_UserSelection$(2, 2) = g_ENG_WITSCONFIG_ChannelNumber_HoleDepth$
  WITS_UserSelection$(3, 1) = g_ENG_WITSCONFIG_RecordNumber_BlockPosition$ : WITS_UserSelection$(3, 2) = g_ENG_WITSCONFIG_ChannelNumber_BlockPosition$
  WITS_UserSelection$(4, 1) = g_ENG_WITSCONFIG_RecordNumber_HKLD$ : WITS_UserSelection$(4, 2) = g_ENG_WITSCONFIG_ChannelNumber_HKLD$
  WITS_UserSelection$(5, 1) = g_ENG_WITSCONFIG_RecordNumber_WOB$ : WITS_UserSelection$(5, 2) = g_ENG_WITSCONFIG_ChannelNumber_WOB$
  WITS_UserSelection$(6, 1) = g_ENG_WITSCONFIG_RecordNumber_Torque$ : WITS_UserSelection$(6, 2) = g_ENG_WITSCONFIG_ChannelNumber_Torque$
  WITS_UserSelection$(7, 1) = g_ENG_WITSCONFIG_RecordNumber_RPM$ : WITS_UserSelection$(7, 2) = g_ENG_WITSCONFIG_ChannelNumber_RPM$
  WITS_UserSelection$(8, 1) = g_ENG_WITSCONFIG_RecordNumber_SPP$ : WITS_UserSelection$(8, 2) = g_ENG_WITSCONFIG_ChannelNumber_SPP$
  WITS_UserSelection$(9, 1) = g_ENG_WITSCONFIG_RecordNumber_CSG$ : WITS_UserSelection$(9, 2) = g_ENG_WITSCONFIG_ChannelNumber_CSG$
  WITS_UserSelection$(10, 1) = g_ENG_WITSCONFIG_RecordNumber_SPM1$ : WITS_UserSelection$(10, 2) = g_ENG_WITSCONFIG_ChannelNumber_SPM1$
  WITS_UserSelection$(11, 1) = g_ENG_WITSCONFIG_RecordNumber_SPM2$ : WITS_UserSelection$(11, 2) = g_ENG_WITSCONFIG_ChannelNumber_SPM2$
  WITS_UserSelection$(12, 1) = g_ENG_WITSCONFIG_RecordNumber_SPM3$ : WITS_UserSelection$(12, 2) = g_ENG_WITSCONFIG_ChannelNumber_SPM3$
  WITS_UserSelection$(13, 1) = g_ENG_WITSCONFIG_RecordNumber_PVT$ : WITS_UserSelection$(13, 2) = g_ENG_WITSCONFIG_ChannelNumber_PVT$
  WITS_UserSelection$(14, 1) = g_ENG_WITSCONFIG_RecordNumber_PIT1$ : WITS_UserSelection$(14, 2) = g_ENG_WITSCONFIG_ChannelNumber_PIT1$
  WITS_UserSelection$(15, 1) = g_ENG_WITSCONFIG_RecordNumber_PIT2$ : WITS_UserSelection$(15, 2) = g_ENG_WITSCONFIG_ChannelNumber_PIT2$
  WITS_UserSelection$(16, 1) = g_ENG_WITSCONFIG_RecordNumber_PIT3$ : WITS_UserSelection$(16, 2) = g_ENG_WITSCONFIG_ChannelNumber_PIT3$
  WITS_UserSelection$(17, 1) = g_ENG_WITSCONFIG_RecordNumber_PIT4$ : WITS_UserSelection$(17, 2) = g_ENG_WITSCONFIG_ChannelNumber_PIT4$
  WITS_UserSelection$(18, 1) = g_ENG_WITSCONFIG_RecordNumber_PIT5$ : WITS_UserSelection$(18, 2) = g_ENG_WITSCONFIG_ChannelNumber_PIT5$
  WITS_UserSelection$(19, 1) = g_ENG_WITSCONFIG_RecordNumber_PIT6$ : WITS_UserSelection$(19, 2) = g_ENG_WITSCONFIG_ChannelNumber_PIT6$
  WITS_UserSelection$(20, 1) = g_ENG_WITSCONFIG_RecordNumber_PIT7$ : WITS_UserSelection$(20, 2) = g_ENG_WITSCONFIG_ChannelNumber_PIT7$
  WITS_UserSelection$(21, 1) = g_ENG_WITSCONFIG_RecordNumber_PIT8$ : WITS_UserSelection$(21, 2) = g_ENG_WITSCONFIG_ChannelNumber_PIT8$
  WITS_UserSelection$(22, 1) = g_ENG_WITSCONFIG_RecordNumber_FLOWIN$ : WITS_UserSelection$(22, 2) = g_ENG_WITSCONFIG_ChannelNumber_FLOWIN$ 
  WITS_UserSelection$(23, 1) = g_ENG_WITSCONFIG_RecordNumber_FLOWOUT$ : WITS_UserSelection$(23, 2) = g_ENG_WITSCONFIG_ChannelNumber_FLOWOUT$
  WITS_UserSelection$(24, 1) = g_ENG_WITSCONFIG_RecordNumber_TG$ : WITS_UserSelection$(24, 2) = g_ENG_WITSCONFIG_ChannelNumber_TG$
  WITS_UserSelection$(25, 1) = g_ENG_WITSCONFIG_RecordNumber_H2S$ : WITS_UserSelection$(25, 2) = g_ENG_WITSCONFIG_ChannelNumber_H2S$
  WITS_UserSelection$(26, 1) = g_ENG_WITSCONFIG_RecordNumber_TripTank$ : WITS_UserSelection$(26, 2) = g_ENG_WITSCONFIG_ChannelNumber_TripTank$
  WITS_UserSelection$(27, 1) = g_ENG_WITSCONFIG_RecordNumber_TempIN$ : WITS_UserSelection$(27, 2) = g_ENG_WITSCONFIG_ChannelNumber_TempIN$
  WITS_UserSelection$(28, 1) = g_ENG_WITSCONFIG_RecordNumber_TempOUT$ : WITS_UserSelection$(28, 2) = g_ENG_WITSCONFIG_ChannelNumber_TempOUT$
  WITS_UserSelection$(29, 1) = g_ENG_WITSCONFIG_RecordNumber_LagDepth$ : WITS_UserSelection$(29, 2) = g_ENG_WITSCONFIG_ChannelNumber_LagDepth$
  WITS_UserSelection$(30, 1) = g_ENG_WITSCONFIG_RecordNumber_TtlStrks$ : WITS_UserSelection$(30, 2) = g_ENG_WITSCONFIG_ChannelNumber_TtlStrks$
     
     
     
     
     
endfunction



function lib_ShowSerial_GetState(r_PortID as dword)

  l_ShowGetResult = call dll (c_Kernel32DLL, "GetCommState", r_PortID, get memblock ptr(c_Memblock_DCB))

   ShowScreen_DCB.DCBlength  = memblock dword(c_Memblock_DCB,0)
   ShowScreen_DCB.BaudRate  = memblock dword(c_Memblock_DCB,4)
   ShowScreen_DCB.fBinary  = memblock dword(c_Memblock_DCB,8)
   ShowScreen_DCB.fParity  = memblock dword(c_Memblock_DCB,12)
   ShowScreen_DCB.fOutxCtsFlow  = memblock dword(c_Memblock_DCB,16)
   ShowScreen_DCB.fOutcDsrFlow  = memblock dword(c_Memblock_DCB,20)
   ShowScreen_DCB.fDtrControl  = memblock dword(c_Memblock_DCB,24)
   ShowScreen_DCB.fDsrSensitivity  = memblock dword(c_Memblock_DCB,28)
   ShowScreen_DCB.fTXContinueONXoff  = memblock dword(c_Memblock_DCB,32)
   ShowScreen_DCB.fOutX  = memblock dword(c_Memblock_DCB,36)
   ShowScreen_DCB.fInX  = memblock dword(c_Memblock_DCB,40)
   ShowScreen_DCB.fErrorChar  = memblock dword(c_Memblock_DCB,44)
   ShowScreen_DCB.fNull  = memblock dword(c_Memblock_DCB,48)
   ShowScreen_DCB.fRtsControl  = memblock dword(c_Memblock_DCB,52)
   ShowScreen_DCB.fAbortOnError  = memblock dword(c_Memblock_DCB,56)
   ShowScreen_DCB.fDummy  = memblock dword(c_Memblock_DCB,60)
   ShowScreen_DCB.XonLim  = memblock word(c_Memblock_DCB,64)
   ShowScreen_DCB.XoffLim  = memblock word(c_Memblock_DCB,66)
   ShowScreen_DCB.ByteSize  = memblock byte(c_Memblock_DCB,68)
   ShowScreen_DCB.Parity  = memblock byte(c_Memblock_DCB,69)
   ShowScreen_DCB.StopBits  = memblock byte(c_Memblock_DCB,70)
   ShowScreen_DCB.XonChar  = memblock byte(c_Memblock_DCB,71)
   ShowScreen_DCB.XoffChar  = memblock byte(c_Memblock_DCB,72)
   ShowScreen_DCB.ErrorChar  = memblock byte(c_Memblock_DCB,73)
   ShowScreen_DCB.EofChar  = memblock byte(c_Memblock_DCB,74)
   ShowScreen_DCB.EvtChar  = memblock byte(c_Memblock_DCB,75)
   ShowScreen_DCB.wReservedl  = memblock word(c_Memblock_DCB,76)
   

endfunction l_ShowGetResult

function __________WITS_OVERRIDE______________________________________________j83h83drf()
endfunction


function SCREEN_SERIAL_PORT_WITS_OVERRIDE()

	local l_ORTEMP_FINALSELECT_Record as integer
	local l_ORTEMP_FINALSELECT_Channel as integer
	local l_ORTEMP_FINALSELECT_Data as integer
	local l_ORTEMP_FINALSELECT_OR_ArrPos  as integer
	
	local l_PrintMessage$ as string
  local l_Prnt_Rec# as float
  local l_Prnt_Chn# as float
  local l_Prnt_Data# as float
  local l_MappedTo$ as string
  
  local l_Start_X as integer
  local l_Start_Y as integer
  
  local l_Row_Counter as integer
  
  local l_Print_X1 as integer
  local wdth_prnt as integer
  local X_prnt1 as integer
  local X_prnt2 as integer
  local X_prnt3 as integer
  local sp as integer
  local l_Data_SP_Position_Y as integer
  local l_ArrPos as integer
  
		     
		     
		     

  d3d_starttext

    wdth_prnt = screen width() * 0.05
    X_prnt1 = screen width() * 0.05 + 50
    X_prnt2 = screen width() * 0.05 + 200
    X_prnt3 = screen width() * 0.05 + 300
    sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    inc sp,19
    inc sp,19
    d3d_text 2, wdth_prnt, sp, 0, "Serial Port Information"
    inc sp, 19
    d3d_text 1, wdth_prnt, sp, 0, "1. Port Details"
    d3d_text 1, wdth_prnt + 100, sp, 0, "2. Port Data - Processed"
    d3d_text 1, wdth_prnt + 255, sp, 0, "3. Port Data - Raw"
    d3d_text 1, wdth_prnt + 375, sp, 0, "4. Port Settings"
    d3d_text 1, wdth_prnt + 480, sp, 0, "5. WITS Mapping"
    d3d_text 2, wdth_prnt + 600, sp, 0, "6. WITS Override"
    
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "  WITS MAPPINGS  (Use Cursor Keys. Press ENTER to edit)"
    
    
    lib_WITS_Fill_Information_Arrays()
    
    l_StartPrint_SP = sp
    
    inc sp,10
    inc sp,20 : d3d_text 1, X_prnt1, sp, 0, "  The WITS Override works by displaying all the incoming WITS Data and not caring about Record or Channel Numbers."
    inc sp,20 : d3d_text 1, X_prnt1, sp, 0, "  Screen 1: View current Overrides.   Screen 2: Set incoming total Record Numbers to see the data"
    inc sp,20 : d3d_text 1, X_prnt1, sp, 0, "  Screen 3: Select data captured using Screen 2 settings and apply it to Override MEM DB channels."
    
    inc sp, 30
    
    if g_GENERAL_1SEC_ON_HalfSecOFF_TOGGLE = 1
      if g_WITS_OVERRIDE_Screen_RawProc_Type = 1
      	d3d_text 2, X_prnt1, sp, 0, "1) OVERRIDE LIST"
      	d3d_text 1, X_prnt1 + 138, sp, 0, "2) WITS CAPTURE"
      	d3d_text 1, X_prnt1 + 268, sp, 0, "3) ASSIGN OVERRIDE"
      endif
      if g_WITS_OVERRIDE_Screen_RawProc_Type = 2
      	d3d_text 1, X_prnt1, sp, 0, "1) OVERRIDE LIST"
      	d3d_text 2, X_prnt1 + 138, sp, 0, "2) WITS CAPTURE"
      	d3d_text 1, X_prnt1 + 268, sp, 0, "3) ASSIGN OVERRIDE"
      endif
      if g_WITS_OVERRIDE_Screen_RawProc_Type = 3
      	d3d_text 1, X_prnt1, sp, 0, "1) OVERRIDE LIST"
      	d3d_text 1, X_prnt1 + 138, sp, 0, "2) WITS CAPTURE"
      	d3d_text 2, X_prnt1 + 268, sp, 0, "3) ASSIGN OVERRIDE"
      endif
      d3d_text 1, X_prnt1 + 410 + 40, sp, 0, "(Use TAB to Switch between Screens)" 
    endif
    
    inc sp, 30
    
    l_Data_SP_Position_Y = sp
    

    inc sp, 30
    
    
    
    
      `WITS OVERRIDE - SCREEN 1 (VIEW OVERRIDE LIST)
      if g_WITS_OVERRIDE_Screen_RawProc_Type = 1
    
        d3d_text 2, X_prnt1, sp, 0, "OVERRIDE LIST"
        
        inc sp, 30
        
          d3d_text 2, X_prnt1 + 20, sp, 0, "Number"
          d3d_text 2, X_prnt1 + 90, sp, 0, "MEM DB Name"
          d3d_text 2, X_prnt1 + 200, sp, 0, "Override Status"
          d3d_text 2, X_prnt1 + 330, sp, 0, "Mapped To OR ArrPos"
          
          d3d_text 2, X_prnt1 + 500 + 20, sp, 0, "Number"
          d3d_text 2, X_prnt1 + 500 + 90, sp, 0, "MEM DB Name"
          d3d_text 2, X_prnt1 + 500 + 200, sp, 0, "Override Status"
          d3d_text 2, X_prnt1 + 500 + 330, sp, 0, "Mapped To OR ArrPos"
          
          inc sp, 40
    
    		l_Start_X = X_prnt1
    		l_Start_Y = sp
    		l_Row_Counter = -1
    		l_Print_X1 = l_Start_X
    			for print_lp = 1 to 30
      			inc l_Row_Counter, 1
      			if l_Row_Counter = 20
        			l_Row_Counter = 0
        			inc l_Print_X1, 500
      			endif
      			sp = l_Start_Y + (l_Row_Counter * 19)
      			`Array Number
      		  	d3d_text 1, l_Print_X1 + 20, sp, 0, str$(print_lp) + " : "
      			`Channel Name
      		  	d3d_text 1, l_Print_X1 + 90, sp, 0, WITS_OVERRIDE_MEMDBMAP(print_lp).MEM_DB_ChannelName$

    		    l_ArrPos = WITS_OVERRIDE_MEMDBMAP(print_lp).MapTo_COMDATA_ArrPos    		    
      			`Override State
      			  if l_ArrPos <> -1
      		  	  d3d_text 1, l_Print_X1 + 200, sp, 0, "OVERRIDE ON"
      		  	else
      		  	  d3d_text 1, l_Print_X1 + 200, sp, 0, "/"
      		  	endif
      		  `Override Details
      			  if l_ArrPos <> -1
      		  	  d3d_text 1, l_Print_X1 + 330, sp, 0, "Array Pos: " + str$(l_ArrPos)
      		  	else
      		  	  d3d_text 1, l_Print_X1 + 330, sp, 0, "/"
      		  	endif
    			
    			
    			next print_lp
      
      endif
      
      
      
      
      
      `WITS OVERRIDE - SCREEN 2 (WITS CAPTURE)
      if g_WITS_OVERRIDE_Screen_RawProc_Type = 2
      
        d3d_text 1, X_prnt1, l_Data_SP_Position_Y, 0, "Total WITS Items : " + str$(g_WITS_RECEIVE_String_Breakdown_Ttl_Num) 
        
        if g_WITS_OVERRIDE_Screen_RawProc_Type = 2
          d3d_text 1, X_prnt1 + 140, l_Data_SP_Position_Y, 0, "Seq Resets : " + str$(g_WITS_OVERRIDE_DeBug_NumOfSeqResets)
          d3d_text 2, X_prnt1 + 250, l_Data_SP_Position_Y, 0, "Max Records : " + str$(g_WITS_OVERRIDE_User_MaxSetRecords)
          d3d_text 1, X_prnt1 + 360, l_Data_SP_Position_Y, 0, "Total OR Array Items: " + str$(g_WITS_OVERRIDE_GlobalItemCounter)
          d3d_text 2, X_prnt1 + 510, l_Data_SP_Position_Y, 0, "(Cursor UP/DOWN : Change Max Rec Number)  U:Clear Array  I:Reset Sequence"
        endif
    
        inc l_Data_SP_Position_Y, 19
        d3d_text 1, X_prnt1, l_Data_SP_Position_Y, 0, "Data Sequence (Auto) : Lowest Record Number : " + str$(g_WITS_OVERRIDE_SetSeq_LowestRecNum) + "  (Accepted as first into array)"
    
        inc sp, 19
    
        d3d_text 2, X_prnt1, sp, 0, "VIEWING - [WITS_Override] Array Structure : RAW - SERIAL PORT DATA CAPTURE (Separated by carriage returns)"
        
        inc sp, 30
    
    		l_Start_X = X_prnt1
    		l_Start_Y = sp
    		l_Row_Counter = -1
    		l_Print_X1 = l_Start_X
    			for print_lp = 1 to 80
      			inc l_Row_Counter, 1
      			if l_Row_Counter = 20
        			l_Row_Counter = 0
        			inc l_Print_X1, 300
      			endif
      			sp = l_Start_Y + (l_Row_Counter * 19)
      			if WITS_OVERRIDE_COMDATA(print_lp).WITS_Item_BOHROUT_RAWDATA$ <> "NULL"
      			
      			  `Original Line
      			  d3d_text 1, l_Print_X1, sp, 0, str$(print_lp) + ") " + WITS_OVERRIDE_COMDATA(print_lp).WITS_Item_BOHROUT_RAWDATA$
      			
      			  `Debug/Still coding lines showing record number and full date
      		  	  `d3d_text 1, l_Print_X1, sp, 0, str$(print_lp) + ") R:" + str$(WITS_OVERRIDE_COMDATA(print_lp).WITS_Item_BOHROUT_RecordNum#)
      			    `d3d_text 1, l_Print_X1 + 60, sp, 0, WITS_OVERRIDE_COMDATA(print_lp).WITS_Item_BOHROUT_RAWDATA$
    			  else
    			    d3d_text 1, l_Print_X1, sp, 0, str$(print_lp) + ") /"
    			  endif
    			next print_lp
    		
  			`INPUTS: Wits Override Screen
    			`[UP Cursor] (Increase MaxSetRecords)
    			if keystate(200)= 1 and key_state(200,0)= 0
      			inc g_WITS_OVERRIDE_User_MaxSetRecords, 1
      			lib_WITS_OVERRIDE_ClearOverrideArray()
      			key_state(200,0)=1
      			SAVE_WITS_OVERRIDE_CONFIG_File()
    			endif
    			if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
    			`[DOWN Cursor] (Decrease MaxSetRecords)
    			if keystate(208)= 1 and key_state(208,0)= 0
      			dec g_WITS_OVERRIDE_User_MaxSetRecords, 1
      			if g_WITS_OVERRIDE_User_MaxSetRecords < 0 then g_WITS_OVERRIDE_User_MaxSetRecords = 0
      			lib_WITS_OVERRIDE_ClearOverrideArray()
      			key_state(208,0)=1
      			SAVE_WITS_OVERRIDE_CONFIG_File()
    			endif
    			if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0

      endif
      
      
      ``WITS OVERRIDE - SCREEN 3 (ASSIGN OVERRIDE)
      if g_WITS_OVERRIDE_Screen_RawProc_Type = 3
    
        `PROCESSED WITS OVERRIDE DATA
    
        d3d_text 2, X_prnt1, sp, 0, "VIEWING - [WITS_Override] Array Structure : PROCESSED - DATA"
        
        inc sp, 30
    
    		l_Start_X = X_prnt1
    		l_Start_Y = sp
    		
    		l_Row_Counter = -1
    		l_Print_X1 = l_Start_X

    		for print_lp = 1 to 80
    		
      		inc l_Row_Counter, 1
      		if l_Row_Counter = 20
        		l_Row_Counter = 0
        		inc l_Print_X1, 320
      		endif

      		l_Prnt_Rec# = WITS_OVERRIDE_COMDATA(print_lp).WITS_Item_BOHROUT_RecordNum#
      		l_Prnt_Chn# = WITS_OVERRIDE_COMDATA(print_lp).WITS_Item_BOHROUT_ChannelNum#
      		l_Prnt_Data# = WITS_OVERRIDE_COMDATA(print_lp).WITS_Item_BOHROUT_Data#
      		
      		`         WITS_OVERRIDE_MEMDBMAP(1).MapTo_COMDATA_ArrPos
      		`if WITS_OVERRIDE_COMDATA(print_lp).MapTo_MEMDBMAP_ChnlArrPos <> -1

      		if WITS_OVERRIDE_COMDATA(print_lp).MapTo_MEMDBMAP_ChnlArrPos <> -1
      	  	`l_MappedTo$ = ", Mapped To: " + str$(WITS_OVERRIDE_COMDATA(print_lp).MapTo_MEMDBMAP_ChnlArrPos)
      	  	`l_MappedTo$ = " > " + WITS_OVERRIDE_MEMDBMAP(WITS_OVERRIDE_COMDATA(print_lp).MapTo_MEMDBMAP_ChnlArrPos).MEM_DB_ChannelName$
      	  	l_MappedTo$ = "  Arr> " + str$(WITS_OVERRIDE_COMDATA(print_lp).MapTo_MEMDBMAP_ChnlArrPos)
      	  	`l_MappedTo$ = "  Arr> " + str$(WITS_OVERRIDE_MEMDBMAP(print_lp).MapTo_COMDATA_ArrPos)
      		else
      		  l_MappedTo$ = "."
      		endif
      		
      		if l_Prnt_Data# <> -1
      		  l_PrintMessage$ = str$(print_lp) + ") R:" + str$(l_Prnt_Rec#) + "C:" + str$(l_Prnt_Chn#) + " [Data: " + str$(l_Prnt_Data#, 2) + "] " + l_MappedTo$
      		else
      		  l_PrintMessage$ = "/"
      		endif
      		
      		sp = l_Start_Y + (l_Row_Counter * 19)
      		
    		  `Display the Highlight Box if it is the selected array 
		      if print_lp = g_WITS_OVERRIDE_SelectedArrPos
            d3d_box l_Print_X1, sp, (l_Print_X1 + d3d_gettextwidth(1, l_PrintMessage$) + 5), sp + 19, rgb(70, 70, 70)
     				l_ORTEMP_FINALSELECT_Record = l_Prnt_Rec#
     				l_ORTEMP_FINALSELECT_Channel = l_Prnt_Chn#
     				l_ORTEMP_FINALSELECT_Data = l_Prnt_Data#
     				l_ORTEMP_FINALSELECT_OR_ArrPos = print_lp
		      endif
      		
      		
      		d3d_text 1, l_Print_X1, sp, 0, l_PrintMessage$
      		

		
    		next print_lp

    		
    		`INPUTS - PROCESSED WITS OVERRIDE DATA
    			`[ENTER] - INPUTPAD Enter Button
    			if lib_Enter_Pressed(4593) = 1
      			if g_WITS_OVERRIDE_Proc_Enter_Pressed = -1
        			g_WITS_OVERRIDE_Proc_Enter_Pressed = 1
        			
        			if l_ORTEMP_FINALSELECT_OR_ArrPos <> 31
     						g_WITS_OVERRIDE_FINALSELECT_Record = l_ORTEMP_FINALSELECT_Record
     						g_WITS_OVERRIDE_FINALSELECT_Channel = l_ORTEMP_FINALSELECT_Channel
     						g_WITS_OVERRIDE_FINALSELECT_Data = l_ORTEMP_FINALSELECT_Data
     						g_WITS_OVERRIDE_FINALSELECT_OR_ArrPos = l_ORTEMP_FINALSELECT_OR_ArrPos
     					endif
     					
     					g_WITS_OVERRIDE_EnterButton_FinalStageID = 1
     				else
     				  g_WITS_OVERRIDE_EnterButton_FinalStageID = 2
     				  `Final [Enter] Keypress from the Choose MEMDB channel by name submenu
     				  if g_WITS_OVERRIDE_SlctMenu_ItemNum = 31
     				    WITS_OVERRIDE_MEMDBMAP(WITS_OVERRIDE_COMDATA(l_ORTEMP_FINALSELECT_OR_ArrPos).MapTo_MEMDBMAP_ChnlArrPos).MapTo_COMDATA_ArrPos = -1
     				    WITS_OVERRIDE_COMDATA(l_ORTEMP_FINALSELECT_OR_ArrPos).MapTo_MEMDBMAP_ChnlArrPos = -1
     				  else
     				    `if WITS_OVERRIDE_COMDATA(l_ORTEMP_FINALSELECT_OR_ArrPos).MapTo_MEMDBMAP_ChnlArrPos <> -1
     				    `if l_ORTEMP_FINALSELECT_OR_ArrPos <> -1
     				    
     				    `Just in case write the old pointers to NULL incase the highlighted channel is already something
     				      if l_ORTEMP_FINALSELECT_OR_ArrPos <> -1
     				        if WITS_OVERRIDE_COMDATA(l_ORTEMP_FINALSELECT_OR_ArrPos).MapTo_MEMDBMAP_ChnlArrPos <> -1
     				          WITS_OVERRIDE_MEMDBMAP(WITS_OVERRIDE_COMDATA(l_ORTEMP_FINALSELECT_OR_ArrPos).MapTo_MEMDBMAP_ChnlArrPos).MapTo_COMDATA_ArrPos = -1
     				        endif
     				      endif
     				      
     				    `Set new arrays to be Overridden
     				      WITS_OVERRIDE_COMDATA(l_ORTEMP_FINALSELECT_OR_ArrPos).MapTo_MEMDBMAP_ChnlArrPos = g_WITS_OVERRIDE_SlctMenu_ItemNum
     				      WITS_OVERRIDE_MEMDBMAP(WITS_OVERRIDE_COMDATA(l_ORTEMP_FINALSELECT_OR_ArrPos).MapTo_MEMDBMAP_ChnlArrPos).MapTo_COMDATA_ArrPos = g_WITS_OVERRIDE_FINALSELECT_OR_ArrPos
     				    
     				      SAVE_WITS_OVERRIDE_CONFIG_File()
     				    
     				    	`do
     				    	`cls
     				    	``print l_ORTEMP_FINALSELECT_OR_ArrPos this is ok
     				    	`print WITS_OVERRIDE_COMDATA(l_ORTEMP_FINALSELECT_OR_ArrPos).MapTo_MEMDBMAP_ChnlArrPos
     				    	`sync
     				    	`loop
     				    
     				    	``if WITS_OVERRIDE_MEMDBMAP(WITS_OVERRIDE_COMDATA(l_ORTEMP_FINALSELECT_OR_ArrPos).MapTo_MEMDBMAP_ChnlArrPos).MapTo_COMDATA_ArrPos = -1
     				    	``Ensure that the MEMBD Mapped Channel is not already in use. If it is then it should be cleared first so the user cannot assign multiple overrides to the same channel.
     				    `	`	`Just in case write the old pointers to NULL incase the highlighted channel is already something
     				    	`	WITS_OVERRIDE_MEMDBMAP(WITS_OVERRIDE_COMDATA(l_ORTEMP_FINALSELECT_OR_ArrPos).MapTo_MEMDBMAP_ChnlArrPos).MapTo_COMDATA_ArrPos = -1
     				    	`	`Set new arrays to be Overridden
      			    	`	WITS_OVERRIDE_MEMDBMAP(g_WITS_OVERRIDE_SlctMenu_ItemNum).MapTo_COMDATA_ArrPos = g_WITS_OVERRIDE_FINALSELECT_OR_ArrPos
      			    	`	WITS_OVERRIDE_COMDATA(l_ORTEMP_FINALSELECT_OR_ArrPos).MapTo_MEMDBMAP_ChnlArrPos = g_WITS_OVERRIDE_SlctMenu_ItemNum	
      			      ``endif
      			    `endif
      			    `endif
      			  endif
      			endif
    			endif

          if g_WITS_OVERRIDE_Proc_Enter_Pressed = -1
    				`[UP Cursor] (Change Screen View)
    				if keystate(200)= 1 and key_state(200,0)= 0
      				dec g_WITS_OVERRIDE_SelectedArrPos, 1
      				if g_WITS_OVERRIDE_SelectedArrPos < 1 then g_WITS_OVERRIDE_SelectedArrPos = 1
      				key_state(200,0)=1
    				endif
    				if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
    				`[DOWN Cursor] (Change Screen View)
    				if keystate(208)= 1 and key_state(208,0)= 0
            	inc g_WITS_OVERRIDE_SelectedArrPos, 1
            	if g_WITS_OVERRIDE_SelectedArrPos > 80 then g_WITS_OVERRIDE_SelectedArrPos = 80
      				key_state(208,0)=1
    				endif
    				if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
    	
    				`[LEFT Cursor] (Change Screen View)
    				if keystate(203)= 1 and key_state(203,0)= 0
      				if g_WITS_OVERRIDE_SelectedArrPos - 20 > 0 then dec g_WITS_OVERRIDE_SelectedArrPos, 20
      				key_state(203,0)=1
    				endif
    				if keystate(203)=0 and key_state(203,0)=1 then key_state(203,0)=0
    				`[RIGHT Cursor] (Change Screen View)
    				if keystate(205)= 1 and key_state(205,0)= 0
      				inc g_WITS_OVERRIDE_SelectedArrPos, 20
      				if g_WITS_OVERRIDE_SelectedArrPos > 80 then g_WITS_OVERRIDE_SelectedArrPos = 80
      				key_state(205,0)=1
    				endif
    				if keystate(205)=0 and key_state(205,0)=1 then key_state(205,0)=0
    			endif
    			

    
      endif
    
  d3d_endtext
  
  `If the ENTER KEY has been pressed
  if g_WITS_OVERRIDE_Proc_Enter_Pressed = 1
    			  
    x1 = g_ENG_Half_Screen_Width - 500
    ``y1 = g_ENG_Half_Screen_Height - 300
    y1 = 50
    
    `x2 = g_ENG_Half_Screen_Width + 500
    `y2 = g_ENG_Half_Screen_Height + 300
    
    `d3d_box x1, y1, x2, y2, rgb(70, 70, 70)
    
    paste image c_OVERRIDE_WITS_OR_Chse_Chnl_BkgdImg, x1, y1
    
    d3d_starttext
    
      l_TempStr$ = str$(g_WITS_OVERRIDE_FINALSELECT_OR_ArrPos) + ") " + str$(g_WITS_OVERRIDE_FINALSELECT_Record) + ":" + str$(g_WITS_OVERRIDE_FINALSELECT_Channel) + ":" + str$(g_WITS_OVERRIDE_FINALSELECT_Data)
      d3d_text 1, x1 + 20, y1 + 20, 0, "You selected Data [" + l_TempStr$ + "]. Now assign that data to a MEM DB Channel"
      				    
      d3d_text 1, x1 + 20, y1 + 40, 0, "Select the MEM DB Channel to copy this data into each WITS loop:"
      
      for Channel_lp = 1 to 31
      
		    if Channel_lp = g_WITS_OVERRIDE_SlctMenu_ItemNum
		      x1h = x1 + 20
		      y1h = y1 + 60 + (Channel_lp * 19)
		      l_PrintMessageH$ = WITS_OVERRIDE_MEMDBMAP(Channel_lp).MEM_DB_ChannelName$
		      x2h = x1 + 20 + d3d_gettextwidth(1, l_PrintMessageH$) + 5
		      y2h = y1 + 60 + (Channel_lp * 19) + 19
		      d3d_box x1h, y1h, x2h, y2h, rgb(110, 110, 110)
		    endif
      
      	`Display Channel Name Text
      	if g_WITS_OVERRIDE_EnterButton_FinalStageID = 2 and g_WITS_OVERRIDE_SlctMenu_ItemNum <> 31
      		l_OVDComm$ = "OVERRIDDEN"
      	else
      		l_OVDComm$ = ""
      	endif
      				  
      	if Channel_lp = g_WITS_OVERRIDE_SlctMenu_ItemNum
      		d3d_text 1, x1 + 20, y1 + 60 + (Channel_lp * 19), 0, WITS_OVERRIDE_MEMDBMAP(Channel_lp).MEM_DB_ChannelName$ + "  (Override " + WITS_OVERRIDE_MEMDBMAP(Channel_lp).MEM_DB_ChannelName$ + " with Values : "+ str$(g_WITS_OVERRIDE_FINALSELECT_Data) + " )  " + l_OVDComm$
      	else
      		d3d_text 1, x1 + 20, y1 + 60 + (Channel_lp * 19), 0, WITS_OVERRIDE_MEMDBMAP(Channel_lp).MEM_DB_ChannelName$
      	endif
      	
      	if g_WITS_OVERRIDE_EnterButton_FinalStageID = 2
      		`if lib_Enter_Pressed(12434) = -1
      		if keystate(28) = 0
      			g_WITS_OVERRIDE_Proc_Enter_Pressed = -1
      		endif  
      		`endif
      	endif
     	
      next Channel_lp
      

    
    d3d_endtext
    
    `[UP Cursor] (Select a channel to Override)
    if keystate(200)= 1 and key_state(200,0)= 0
      dec g_WITS_OVERRIDE_SlctMenu_ItemNum, 1
      if g_WITS_OVERRIDE_SlctMenu_ItemNum < 1 then g_WITS_OVERRIDE_SlctMenu_ItemNum = 31
      key_state(200,0)=1
    endif
    if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
    `[DOWN Cursor] (Select a channel to Override)
    if keystate(208)= 1 and key_state(208,0)= 0
      inc g_WITS_OVERRIDE_SlctMenu_ItemNum, 1
      if g_WITS_OVERRIDE_SlctMenu_ItemNum > 31 then g_WITS_OVERRIDE_SlctMenu_ItemNum = 1
      key_state(208,0)=1
    endif
    if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
    
    `[PAGE UP Cursor] - Go up a page view
    if keystate(201)= 1 and key_state(201,0)= 0
      g_WITS_OVERRIDE_SlctMenu_ItemNum = 1
      key_state(201,0)=1
    endif
    if keystate(201)=0 and key_state(201,0)=1 then key_state(201,0)=0
    
    `[PAGE DOWN Cursor] - Go down a page view
    if keystate(209)= 1 and key_state(209,0)= 0
      g_WITS_OVERRIDE_SlctMenu_ItemNum = 31
      key_state(209,0)=1
    endif
    if keystate(209)=0 and key_state(209,0)=1 then key_state(209,0)=0
  
  
  endif
  
  
  `INPUTS: Wits Override Screen
    `[TAB] (Change Screen View)
    if keystate(15)= 1 and key_state(15,0) = 0
      if g_WITS_OVERRIDE_Screen_RawProc_Type = 1 and key_state(15,0) = 0
        g_WITS_OVERRIDE_Screen_RawProc_Type = 2
        g_GENERAL_1SEC_ON_HalfSecOFF_TOGGLE = 1
        g_GENERAL_1SEC_ON_HalfSecOFF_TIMER = timer() + 1500
        key_state(15,0)=1
      endif
      if g_WITS_OVERRIDE_Screen_RawProc_Type = 2 and key_state(15,0) = 0
        g_WITS_OVERRIDE_Screen_RawProc_Type = 3
        g_GENERAL_1SEC_ON_HalfSecOFF_TOGGLE = 1
        g_GENERAL_1SEC_ON_HalfSecOFF_TIMER = timer() + 1500
        key_state(15,0)=1
      endif   
      if g_WITS_OVERRIDE_Screen_RawProc_Type = 3 and key_state(15,0) = 0
        g_WITS_OVERRIDE_Screen_RawProc_Type = 1
        g_GENERAL_1SEC_ON_HalfSecOFF_TOGGLE = 1
        g_GENERAL_1SEC_ON_HalfSecOFF_TIMER = timer() + 1500
        key_state(15,0)=1
      endif
    endif
    if keystate(15) = 0 and key_state(15,0) = 1 then key_state(15,0) = 0
   
   
 `   
   if g_WITS_OVERRIDE_Screen_RawProc_Type = 2
    `[U] - Clear Array
    if keystate(22)= 1 and key_state(22,0) = 0
			for set_lp = 0 to 250
	  		WITS_OVERRIDE_COMDATA(set_lp).WITS_Item_BOHROUT_RAWDATA$ = "NULL"
	  		WITS_OVERRIDE_COMDATA(set_lp).WITS_Item_BOHROUT_Data# = -1
	  		WITS_OVERRIDE_COMDATA(set_lp).WITS_Item_BOHROUT_RecordNum# = -1
	  		WITS_OVERRIDE_COMDATA(set_lp).WITS_Item_BOHROUT_ChannelNum# = -1
	  		WITS_OVERRIDE_COMDATA(set_lp).MapTo_MEMDBMAP_ChnlArrPos = -1
			next set_lp
      key_state(22,0)=1
    endif
    if keystate(22)=0 and key_state(22,0)=1 then key_state(22,0)=0
    
    `[I] - Reset Sequence [hf2u46l2w9]
    if keystate(23)= 1 and key_state(23,0) = 0
      `Note: This code is copied from the original main code at [3d2fk4s5] and also used at [9g23s4lh]
      `
      for set_lp = 0 to 250
	  		WITS_OVERRIDE_COMDATA(set_lp).WITS_Item_BOHROUT_RAWDATA$ = "NULL"
	  		WITS_OVERRIDE_COMDATA(set_lp).WITS_Item_BOHROUT_Data# = -1
	  		WITS_OVERRIDE_COMDATA(set_lp).WITS_Item_BOHROUT_RecordNum# = -1
	  		WITS_OVERRIDE_COMDATA(set_lp).WITS_Item_BOHROUT_ChannelNum# = -1
	  		WITS_OVERRIDE_COMDATA(set_lp).MapTo_MEMDBMAP_ChnlArrPos = -1
			next set_lp
			`
      g_WITS_OVERRIDE_RecordCounter = 0
      g_WITS_OVERRIDE_GlobalItemCounter = 0
      inc g_WITS_OVERRIDE_DeBug_NumOfSeqResets, 1
      `
      key_state(23,0)=1
    endif
    if keystate(23)=0 and key_state(23,0)=1 then key_state(23,0)=0
  endif  
    
    
    
    
endfunction


function ENGINE_WITS_OVERRIDE()

  `If there are any flags set in the WITS OVERRIDE array then action them (copy data over MEM BD Channels)
   
   if WITS_OVERRIDE_MEMDBMAP(1).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_BitDepth# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(1).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(2).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_HoleDepth# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(2).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(3).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_BlockPosition# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(3).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(4).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_Hookload = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(4).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(5).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_WOB# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(5).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(6).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_Torque# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(6).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(7).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_RPM = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(7).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(8).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_SPP = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(8).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(9).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_CSG = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(9).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(10).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_SPM1 = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(10).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(11).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_SPM2 = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(11).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(12).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_SPM3 = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(12).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(13).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_PVT# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(13).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(14).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_PIT1# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(14).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(15).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_PIT2# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(15).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(16).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_PIT3# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(16).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(17).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_PIT4# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(17).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(18).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_PIT5# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(18).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(19).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_PIT6# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(19).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(20).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_PIT7# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(20).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(21).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_PIT8# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(21).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(22).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_FlowIN = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(22).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(23).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_FlowOUT# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(23).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(24).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_TotalGas# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(24).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(25).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_H2S# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(25).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(26).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_TripTank# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(26).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(27).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_TempIN# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(27).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(28).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_TempOUT# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(28).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(29).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_LagDepth# = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(29).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   if WITS_OVERRIDE_MEMDBMAP(30).MapTo_COMDATA_ArrPos <> -1 then g_COMMPORT_Receive_TotalStrokes = WITS_OVERRIDE_COMDATA(WITS_OVERRIDE_MEMDBMAP(30).MapTo_COMDATA_ArrPos).WITS_Item_BOHROUT_Data#
   

endfunction


function lib_WITS_OVERRIDE_ClearOverrideArray()

  `Clear the main WITS Override Array so you can see the most recent data - not data filling arrays from past loops

	
	`Clear the WITS OVERRIDE COM DATA (Data received on all WITS incoming record streams and stored in a sequential array per WITS data reception)
	for clear_lp = 0 to 250
	
	  WITS_OVERRIDE_COMDATA(clear_lp).WITS_Item_BOHROUT_RAWDATA$ = ""
	  WITS_OVERRIDE_COMDATA(clear_lp).WITS_Item_BOHROUT_Data# = 0
	  WITS_OVERRIDE_COMDATA(clear_lp).WITS_Item_BOHROUT_RecordNum# = 0
	  WITS_OVERRIDE_COMDATA(clear_lp).WITS_Item_BOHROUT_ChannelNum# = 0
	
	next clear_lp


endfunction

function __________ROP_CALCULATION____________________________________________sfkg9349f()
endfunction

function SCREEN_ROP_CALC()

  local l_OffBottomZeroTimer as integer
  local l_ROPCalc_NextDepthInterval# as float
  local l_Unit$ as string
  
  if g_ENGINE_UNITS_FT_or_M = 1
    l_Unit$ = " ft"
  else
    l_Unit$ = " m"
  endif

  d3d_starttext
  
    wdth_prnt = screen width() * 0.05 : sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "ROP CALCULATION DETAILS"
    inc sp,19
   
    if g_ROPCALC_OnBottom_Toggle = 1
      inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "WELL STATUS"
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "  On Bottom Status : Drilling"
      inc sp,19
      inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "OFF BOTTOM DATA RESET"
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "  Time until Off Bottom Zeroing of the ROP Value : N/A"
    else
      inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "WELL STATUS"
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "  On Bottom Status : Off Bottom"
      l_OffBottomZeroTimer = (g_ROPCALC_LastOnBottom_Timer + (c_ROPCALC_OffBottomDisplayTime + 1)) - g_TIMER_1
      inc sp,19
      inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "OFF BOTTOM DATA RESET"
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "  Time until Off Bottom Zeroing of the ROP Value : " + str$(l_OffBottomZeroTimer) + " s"
    endif    
    
    `Time to next time based ROP update
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "TIME BASED ROP CALCULATIONS"
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "  Time interval between ROP calculations : " + str$(c_ROPCALC_TimeInterval + 1) + " s"
    if g_ROPCALC_OnBottom_Toggle = 1
      l_ElapseTimeCalc = (g_ROPCALC_Timer_at_last_calculation + c_ROPCALC_TimeInterval + 1)
    else
      l_ElapseTimeCalc = -1
    endif
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "  Time to next time based ROP calculation : " + str$(l_ElapseTimeCalc) + " s"

    `If the system timer() is > g_ROPCALC_Timer_at_last_calculation then the time limit for a
    `new ROP calculation as elapsed and it is time to calculate the ROP over interval c_ROPCALC_TimeInterval
    
    `Depth to next depth based ROP update, including last depth update, current hole and bit depths
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "DEPTH BASED ROP CALCULATIONS"
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "  Hole Depth at last calculation : " + str$(g_ROPCALC_HoleDepth_at_last_calculation#, 3) + l_Unit$
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "  Current Hole Depth : " + str$(g_COMMPORT_Receive_HoleDepth#, 3) + l_Unit$
    l_ROPCalc_NextDepthInterval# = g_ROPCALC_HoleDepth_at_last_calculation# + g_ROPCALC_ROPCalcDepthInterval#
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "  Hole Depth at next depth based calculaton : " + str$(l_ROPCalc_NextDepthInterval#, 3) + l_Unit$
    
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "  ROP Calculation depth interval: " + str$(g_ROPCALC_ROPCalcDepthInterval#, 1) + l_Unit$

    `SHOW LAST CALCULATED ROP
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "OUTPUT"
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "  Calculated ROP : " + str$(g_ROPCALC_ROP_Value#, 1) + " " + l_Unit$ + "/hr"

 
  d3d_endtext

endfunction

function __________MESSAGING_SCREEN_AND_ENGINE___________________________________ji4kd7()
endfunction

function MESSAGING_Main_SCREEN()

  local l_Box_StartSP as integer
  local l_wdth_prnt as integer

  d3d_starttext

    l_wdth_prnt = screen width() * 0.05 : sp = 0
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    inc sp, 19*2
    d3d_text 2, l_wdth_prnt, sp, 0, "INSTANT MESSAGING"
    inc sp, 19
    inc sp, 19 : d3d_text 1, l_wdth_prnt, sp, 0, "Instructions."
    inc sp, 19 : d3d_text 1, l_wdth_prnt, sp, 0, "This console can be used to send broadcasts across the network."
    inc sp, 19 : d3d_text 1, l_wdth_prnt, sp, 0, "All messages are visible to everyone."
    
    inc sp, 19*2
    if g_server_connected = 1
      if INST_MSG_MessageSent_Toggle = -1
        d3d_text 2, l_wdth_prnt, sp, 0, "Enter your message > " + INST_MSG_LocalInput$
      else
        d3d_text 2, l_wdth_prnt, sp, 0, "Message Sent!" + INST_MSG_LocalInput$
        if timer() > INST_MSG_MessageSentTimer
          INST_MSG_MessageSent_Toggle = -1
        endif
      endif
    else
      d3d_text 2, l_wdth_prnt, sp, 0, "Enter your message > (No Connection to Server)"
    endif
    
    inc sp, 19*2
    `Draw Top Line
      l_Box_StartSP = sp
      d3d_line l_wdth_prnt, sp, l_wdth_prnt + 700, sp, rgb(110, 110, 110)
    `Left Line
    `Right Line
    
    `Print Data In Box
    inc sp, 5
    for print_lp = 0 to 20
      d3d_text 2, l_wdth_prnt + 10, sp, 0, ": " + INSTANT_MESSAGING$(print_lp)
      inc sp, 19
    next print_lp
    
    `Draw Bottom Line
      inc sp, 3
      d3d_line l_wdth_prnt, sp, l_wdth_prnt + 700, sp, rgb(110, 110, 110)
    `Left Line
      d3d_line l_wdth_prnt, l_Box_StartSP, l_wdth_prnt, sp, rgb(110, 110, 110)
    `Right Line
      d3d_line l_wdth_prnt + 700, l_Box_StartSP, l_wdth_prnt + 700, sp, rgb(110, 110, 110)
    
  d3d_endtext
  
  INST_MSG_LocalInput$ = lib_INPUT_GetStringX(INST_MSG_LocalInput$, 70, -1, -1)
  
  if lib_Enter_Pressed(6792) = 1
    net send 0 : `Clear the message queue
    `Add the identifier
      net put long 600
    `Add string data to the message queue
      net put string INST_MSG_LocalInput$
    `Send the message to the host server
      net send
      inc g_ENG_DataTransfer_Total, 2048
    INST_MSG_LocalInput$ = ""
    INST_MSG_MessageSent_Toggle = 1
    INST_MSG_MessageSentTimer = timer() + 750
  endif
  

endfunction

function __________DEBUG_VIEW_INTERNAL_VARIABLES_SCREEN__________________________vquslj()
endfunction

function ENGINE_DEBUG_SHOW_INTERNAL_VARIABLES()

    `[1] - Screen Type - General Program Variables
    if keystate(2)= 1 and key_state(2,0)= 0
      g_DISPLAY_Debug_DispVars_ScreenType = 1
      key_state(2,0)=1
    endif
    if keystate(2)=0 and key_state(2,0)=1 then key_state(2,0)=0

    `[2] - Screen Type - Comment System Variables
    if keystate(3)= 1 and key_state(3,0)= 0
      g_DISPLAY_Debug_DispVars_ScreenType = 2
      key_state(3,0)=1
    endif
    if keystate(3)=0 and key_state(3,0)=1 then key_state(3,0)=0

  if g_DISPLAY_Debug_DispVars_ScreenType = 1
    SCREEN_DEBUG_SIV_1_GeneralProgVars()
  endif
  
  if g_DISPLAY_Debug_DispVars_ScreenType = 2
    SCREEN_DEBUG_SIV_2_CommentSystem()
  endif

endfunction

function SCREEN_DEBUG_SIV_1_GeneralProgVars()

  d3d_starttext
  
    wdth_prnt = screen width() * 0.05 : sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    inc sp, (19*1) : d3d_text 2, wdth_prnt, sp, 0, "  Program Details"
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Client Started on : " + g_PROGRAM_Start_Date$ + " at " + g_PROGRAM_Start_Time$
    l_Amnt# = (g_TIMER_1 + 0.0) / 86400.0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Client Runtime : " + str$(g_TIMER_1) + " s (" + str$(l_Amnt#, 2) + " days)"

    if g_ENG_Logging_Active = 1
      inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  Database Engine"
    else
      if timer() > g_ENG_FrntScrn_DBLoggingOFF_Timer
        g_ENG_FrntScrn_DBLoggingOFF_Timer = timer() + 1000
        if g_ENG_FrntScrn_DBLoggingOFF_Toggle <> 1
          g_ENG_FrntScrn_DBLoggingOFF_Toggle = 1
        else
          g_ENG_FrntScrn_DBLoggingOFF_Toggle = -1
        endif    
      endif  
      if g_ENG_FrntScrn_DBLoggingOFF_Toggle = 1  
        inc sp, (19*2)
        d3d_text 2, wdth_prnt, sp, 0, "  Database Engine"
        d3d_text 2, wdth_prnt + 130, sp, 0, " ( **** CAUTION LOGGING ENGINE DISABLED **** )"
      else
        inc sp, (19*2)
        d3d_text 2, wdth_prnt, sp, 0, "  Database Engine"
        d3d_text 2, wdth_prnt + 130, sp, 0, ""
      endif
    endif
    l_Amnt# = ((g_DATABASE_HD_Total_Num_Records * c_DATABASE_Bytes_Per_Record) + 0.0) / 1048576
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Number of records in the HD Database : " + str$(g_DATABASE_HD_Total_Num_Records) + " (" + str$(l_Amnt#, 2) + " MB)"
    l_Amnt# = (g_DATABASE_MEM_Total_Num_Records + 0.0) / 21600.0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Number of records in the Memory Database : " + str$(g_DATABASE_MEM_Total_Num_Records) + " (" + str$(l_Amnt#, 1) + " days)"
    l_Amnt# = (g_DATABASE_MaxTotalRecords + 0.0) / 21600.0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Maximum Number of records in the allocated RAM : " + str$(g_DATABASE_MaxTotalRecords) + " (" + str$(l_Amnt#, 1) + " days)"
    l_Amnt# = (g_DATABASE_MEM_Total_Num_Records + 0.0) / (g_DATABASE_MaxTotalRecords + 0.0) * 100.0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Database Allocated RAM Usage : " + str$(l_Amnt#, 3) + " %"

    inc sp, 38 : d3d_text 2, wdth_prnt, sp, 0, "  WITS Reception Engine"
    if g_SERIALPORT_TimeOuts_Counter = 0
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    WITS Status : " + g_SERIALPORT_DataStatus$
    else
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    WITS Status : " + g_SERIALPORT_DataStatus$ + " (Timeout Fails: " + str$(g_SERIALPORT_TimeOuts_Counter) + ")"
    endif
    if g_SERIALPORT_Port_Name$ = ""
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Connected Via : No Ports Active"
    else
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Connected Via : " + g_SERIALPORT_Port_Name$
    endif
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Last Data Received at : " + g_SERIALPORT_Time_Last_Data_Received$ + ", Total Transmissions Passed : " + str$(g_WITS_RECEIVE_String_StructureTest_Passed) + ", Total Transmissions Failed : " + str$(g_WITS_RECEIVE_String_StructureTest_Failed)

    inc sp, 19
    inc sp, 19
    d3d_text 2, wdth_prnt, sp, 0, "DEBUG Information"
    inc sp, 19
    d3d_text 2, wdth_prnt, sp, 0, "1) General"
    d3d_text 1, wdth_prnt + 100, sp, 0, "2) Comment System"

 
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "  GENERAL PROGRAM VARIABLES"
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Not currently programmed to display any variables - no need yet :) "
 
    
  d3d_endtext

endfunction

function SCREEN_DEBUG_SIV_2_CommentSystem()

  local l_Text$ as string
  local l_XPos as integer
  local l_YPos as integer
  local l_Screen_ID as integer
  local l_Chart_ID as integer
  local l_ArrPos as integer
  
  

  d3d_starttext
  
    wdth_prnt = screen width() * 0.05 : sp = 0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    inc sp, (19*1) : d3d_text 2, wdth_prnt, sp, 0, "  Program Details"
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Client Started on : " + g_PROGRAM_Start_Date$ + " at " + g_PROGRAM_Start_Time$
    l_Amnt# = (g_TIMER_1 + 0.0) / 86400.0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Client Runtime : " + str$(g_TIMER_1) + " s (" + str$(l_Amnt#, 2) + " days)"

    if g_ENG_Logging_Active = 1
      inc sp, (19*2) : d3d_text 2, wdth_prnt, sp, 0, "  Database Engine"
    else
      if timer() > g_ENG_FrntScrn_DBLoggingOFF_Timer
        g_ENG_FrntScrn_DBLoggingOFF_Timer = timer() + 1000
        if g_ENG_FrntScrn_DBLoggingOFF_Toggle <> 1
          g_ENG_FrntScrn_DBLoggingOFF_Toggle = 1
        else
          g_ENG_FrntScrn_DBLoggingOFF_Toggle = -1
        endif    
      endif  
      if g_ENG_FrntScrn_DBLoggingOFF_Toggle = 1  
        inc sp, (19*2)
        d3d_text 2, wdth_prnt, sp, 0, "  Database Engine"
        d3d_text 2, wdth_prnt + 130, sp, 0, " ( **** CAUTION LOGGING ENGINE DISABLED **** )"
      else
        inc sp, (19*2)
        d3d_text 2, wdth_prnt, sp, 0, "  Database Engine"
        d3d_text 2, wdth_prnt + 130, sp, 0, ""
      endif
    endif
    l_Amnt# = ((g_DATABASE_HD_Total_Num_Records * c_DATABASE_Bytes_Per_Record) + 0.0) / 1048576
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Number of records in the HD Database : " + str$(g_DATABASE_HD_Total_Num_Records) + " (" + str$(l_Amnt#, 2) + " MB)"
    l_Amnt# = (g_DATABASE_MEM_Total_Num_Records + 0.0) / 21600.0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Number of records in the Memory Database : " + str$(g_DATABASE_MEM_Total_Num_Records) + " (" + str$(l_Amnt#, 1) + " days)"
    l_Amnt# = (g_DATABASE_MaxTotalRecords + 0.0) / 21600.0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Maximum Number of records in the allocated RAM : " + str$(g_DATABASE_MaxTotalRecords) + " (" + str$(l_Amnt#, 1) + " days)"
    l_Amnt# = (g_DATABASE_MEM_Total_Num_Records + 0.0) / (g_DATABASE_MaxTotalRecords + 0.0) * 100.0
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Database Allocated RAM Usage : " + str$(l_Amnt#, 3) + " %"

    inc sp, 38 : d3d_text 2, wdth_prnt, sp, 0, "  WITS Reception Engine"
    if g_SERIALPORT_TimeOuts_Counter = 0
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    WITS Status : " + g_SERIALPORT_DataStatus$
    else
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    WITS Status : " + g_SERIALPORT_DataStatus$ + " (Timeout Fails: " + str$(g_SERIALPORT_TimeOuts_Counter) + ")"
    endif
    if g_SERIALPORT_Port_Name$ = ""
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Connected Via : No Ports Active"
    else
      inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Connected Via : " + g_SERIALPORT_Port_Name$
    endif
    inc sp,19 : d3d_text 1, wdth_prnt, sp, 0, "    Last Data Received at : " + g_SERIALPORT_Time_Last_Data_Received$ + ", Total Transmissions Passed : " + str$(g_WITS_RECEIVE_String_StructureTest_Passed) + ", Total Transmissions Failed : " + str$(g_WITS_RECEIVE_String_StructureTest_Failed)

    inc sp, 19
    inc sp, 19
    d3d_text 2, wdth_prnt, sp, 0, "DEBUG Information"
    inc sp, 19
    d3d_text 1, wdth_prnt, sp, 0, "1) General"
    d3d_text 2, wdth_prnt + 100, sp, 0, "2) Comment System"

 
    inc sp,19
    inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "  COMMENT SYSTEM VARIABLES"
 
    
 
    `Block 1
      l_PX = wdth_prnt
      l_StartPrnt_Y = sp
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_CMNTSYS_MseStart_MseState : " + str$(g_CMNTSYS_MseStart_MseState)
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_CMNTSYS_Slctd_ArrPos : " + str$(g_CMNTSYS_Slctd_ArrPos)
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_CMNTSYS_Edit_ArrPos : " + str$(g_CMNTSYS_Edit_ArrPos)
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_CMNTSYS_AddNewCmnt_Stage : " + str$(g_CMNTSYS_AddNewCmnt_Stage)
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_CMNTSYS_AddNewCmnt_BuildStr$ : " + g_CMNTSYS_AddNewCmnt_BuildStr$

    
    
    `Block 2
      l_PX = wdth_prnt + 300
      sp = l_StartPrnt_Y
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_CMNTSYS_FlashInput_Timer : " + str$(g_CMNTSYS_FlashInput_Timer)
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_CMNTSYS_FlashInput_Toggle : " + str$(g_CMNTSYS_FlashInput_Toggle)
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_CMNTSYS_ShiftKey_State : " + str$(g_CMNTSYS_ShiftKey_State)
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_CMNTSYS_StrEditCharPos : " + str$(g_CMNTSYS_StrEditCharPos)
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_CMNTSYS_StrEditChar_CursorKeyState : " + str$(g_CMNTSYS_StrEditChar_CursorKeyState)
 
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_DS_CHART_Scroll_Array_Offset : " + str$(g_DS_CHART_Scroll_Array_Offset)
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_ENGINE_DS_Chart_Time_Period_Adjust : " + str$(g_ENGINE_DS_Chart_Time_Period_Adjust)

      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_PITS_CHART_Scroll_Array_Offset : " + str$(g_PITS_CHART_Scroll_Array_Offset)
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_ENGINE_PITS_Chart_Time_Period_Adjust : " + str$(g_ENGINE_PITS_Chart_Time_Period_Adjust)

    
    
    `Block 3
    
      l_PX = wdth_prnt + 650
      sp = l_StartPrnt_Y
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  g_CMNTSYS_TotalCommentsOnScreen : " + str$(g_CMNTSYS_TotalCommentsOnScreen)
      inc sp,19
      inc sp,19 : d3d_text 1, l_PX, sp, 0, "  Comment Array"
    
      for print_lp = 1 to g_CMNTSYS_TotalCommentsOnScreen
        
      	l_Text$ = CommentSystem(print_lp).Comment_Text$
      	l_XPos = CommentSystem(print_lp).XPos
      	l_YPos = CommentSystem(print_lp).YPos
      	l_Screen_ID = CommentSystem(print_lp).ScreenID
      	l_Chart_ID = CommentSystem(print_lp).ChartID
      	l_ArrPos = CommentSystem(print_lp).Array_Pos 
    
        inc sp,19 : d3d_text 1, l_PX, sp, 0, "    " + str$(print_lp) + "> " + l_Text$ + ", X: " + str$(l_XPos) + ", Y: " + str$(l_YPos) + ", ScreenID: " + str$(l_Screen_ID) + ", ChartID: " + str$(l_Chart_ID) + ", ArrPos: " + str$(l_ArrPos)
      
      
      next print_lp

 
    
  d3d_endtext

endfunction

function __________LOGIN_SCREEN_CF1_VIEWER_______________________________________hfkwo3()
endfunction


function LOGIN_CF1_ENGINE()

  `CF1 - Viewer Mode

  local l_DragLB as integer : l_DragLB = 1
  
  lib_Login_CF1_INPUT_Keyboard()
  
  `Select LoginBox active input cell (Cell 1 or Cell 2 - or 3 or 4 in the Networking Box).
  if mouseclick() = 1 and mouse_click(1) = -1
    if mousex() > g_ENGINELOGIN_MainBox_PosX + 138 and mousex() < g_ENGINELOGIN_MainBox_PosX + 356
      `Cell 1
      if mousey() > g_ENGINELOGIN_MainBox_PosY + 157 and mousey() < g_ENGINELOGIN_MainBox_PosY + 197
        g_ENGINELOGIN_InputBoxActive = 1
        g_ENGINELOGIN_InputFlashToggle = 1
        mouse_click(1) = 1
        l_DragLB = -1
      endif
      `Cell 2
      if mousey() > g_ENGINELOGIN_MainBox_PosY + 207 and mousey() < g_ENGINELOGIN_MainBox_PosY + 247
        g_ENGINELOGIN_InputBoxActive = 2
        g_ENGINELOGIN_InputFlashToggle = 1
        mouse_click(1) = 1
        l_DragLB = -1
      endif
      if g_ENGINELOGIN_Show_Networking = 1
        `Cell 3
        if mousey() > g_ENGINELOGIN_MainBox_PosY + 414 and mousey() < g_ENGINELOGIN_MainBox_PosY + 454
          g_ENGINELOGIN_InputBoxActive = 3
          g_ENGINELOGIN_InputFlashToggle = 1
          mouse_click(1) = 1
          l_DragLB = -1
        endif
        `Cell 4
        if mousey() > g_ENGINELOGIN_MainBox_PosY + 464 and mousey() < g_ENGINELOGIN_MainBox_PosY + 504
          g_ENGINELOGIN_InputBoxActive = 4
          g_ENGINELOGIN_InputFlashToggle = 1
          mouse_click(1) = 1
          l_DragLB = -1
        endif
      endif
    endif
  endif
  
  `Select the Login networking icon button
  if mouseclick() = 1 and mouse_click(1) = -1
    if mousex() > g_ENGINELOGIN_MainBox_PosX + 21 and mousex() < g_ENGINELOGIN_MainBox_PosX + 65
      if mousey() > g_ENGINELOGIN_MainBox_PosY + 287 and mousey() < g_ENGINELOGIN_MainBox_PosY + 330
        if g_ENGINELOGIN_Show_Networking = 1
          g_ENGINELOGIN_Show_Networking = -1
          if g_ENGINELOGIN_InputBoxActive = 3 or g_ENGINELOGIN_InputBoxActive = 4
            g_ENGINELOGIN_InputBoxActive = 1
          endif  
        else
          g_ENGINELOGIN_Show_Networking = 1
        endif
        mouse_click(1) = 1
        l_DragLB = -1   
      endif
    endif
  endif
  
  `Prior to the code for the Login Button set the automatic countdown timer to maximum so it doesnt
  `count down. Do this prior to the Login Button so the Login Button still functions normally.
  g_connection_attempt_counter = g_connection_attempt_interval
  
  `Click the LOGIN Button
  if mouseclick() = 1 and mouse_click(1) = -1
    if mousex() > g_ENGINELOGIN_MainBox_PosX + 254 and mousex() < g_ENGINELOGIN_MainBox_PosX + 355
      if mousey() > g_ENGINELOGIN_MainBox_PosY + 288 and mousey() < g_ENGINELOGIN_MainBox_PosY + 327
        if g_ENGINELOGIN_InputUsername$ <> "" and g_ENGINELOGIN_InputPassword$ <> "" and g_ENGINELOGIN_InputIPAddress$ <> "" and g_ENGINELOGIN_InputPortNumber$ <> ""
          lib_Login_CF1_FinalID_Details_Entered()
        else
          g_ENGINELOGIN_ConnectionInfoText$ = "Please complete all information."
          g_ENGINELOGIN_InputFlashTimer = timer() + 750
          g_ENGINELOGIN_InputFlashToggle = 1
          g_ENGINELOGIN_InputBoxActive = 1
        endif
      endif
    endif
  endif
  
  `Handle Keyboard Inputs to Input Cells
  if g_ENGINELOGIN_InputBoxActive = 1
    lib_Login_CF1_INPUT_GetStrings(1)
  endif
  if g_ENGINELOGIN_InputBoxActive = 2
    lib_Login_CF1_INPUT_GetStrings(2)
  endif
  if g_ENGINELOGIN_InputBoxActive = 3
    lib_Login_CF1_INPUT_GetStrings(3)
  endif
  if g_ENGINELOGIN_InputBoxActive = 4
    lib_Login_CF1_INPUT_GetStrings(4)
  endif
  
  if l_DragLB = 1
    lib_Login_CF1_Drag_LoginBox()
  endif

endfunction

function lib_Login_CF1_Display_LoginBox()

  `Display the Upper (Main Section )Login Box
  paste sprite c_SPRITE_ENG_LoginBox_Bkgd, g_ENGINELOGIN_MainBox_PosX, g_ENGINELOGIN_MainBox_PosY
  `Display the Lower (Networking Section) Login Box
  if g_ENGINELOGIN_Show_Networking = 1
    paste sprite c_SPRITE_ENG_LoginBox_BkgdBtm, g_ENGINELOGIN_MainBox_PosX, g_ENGINELOGIN_MainBox_PosY + 346
  endif

  `Display Highlighted input box
  if g_ENGINELOGIN_InputBoxActive = 1
    paste image c_IMG_ENG_LOGINBox_InputCellLit, g_ENGINELOGIN_MainBox_PosX + 136, g_ENGINELOGIN_MainBox_PosY + 157
  endif
  if g_ENGINELOGIN_InputBoxActive = 2
    paste image c_IMG_ENG_LOGINBox_InputCellLit, g_ENGINELOGIN_MainBox_PosX + 136, g_ENGINELOGIN_MainBox_PosY + 207
  endif
  if g_ENGINELOGIN_InputBoxActive = 3
    paste image c_IMG_ENG_LOGINBox_InputCellLit, g_ENGINELOGIN_MainBox_PosX + 136, g_ENGINELOGIN_MainBox_PosY + 414
  endif
  if g_ENGINELOGIN_InputBoxActive = 4
    paste image c_IMG_ENG_LOGINBox_InputCellLit, g_ENGINELOGIN_MainBox_PosX + 136, g_ENGINELOGIN_MainBox_PosY + 464
  endif
  
  `Highlight the Login Button if the mouse is hovered over it
  if mousex() > g_ENGINELOGIN_MainBox_PosX + 254 and mousex() < g_ENGINELOGIN_MainBox_PosX + 355
    if mousey() > g_ENGINELOGIN_MainBox_PosY + 288 and mousey() < g_ENGINELOGIN_MainBox_PosY + 327
      paste image c_IMG_ENG_LOGINBox_ButtonLit, g_ENGINELOGIN_MainBox_PosX + 252, g_ENGINELOGIN_MainBox_PosY + 285
    endif
  endif
  
  `Highlight the Network button if the mouse is hovered over it
  if mousex() > g_ENGINELOGIN_MainBox_PosX + 21 and mousex() < g_ENGINELOGIN_MainBox_PosX + 65
    if mousey() > g_ENGINELOGIN_MainBox_PosY + 287 and mousey() < g_ENGINELOGIN_MainBox_PosY + 330
      paste image c_IMG_ENG_LOGINBox_NetworkBtnLit, g_ENGINELOGIN_MainBox_PosX + 21, g_ENGINELOGIN_MainBox_PosY + 288
    endif
  endif
  
  
  `Display the input texts
    `Flash at input
    if timer() > g_ENGINELOGIN_InputFlashTimer
      g_ENGINELOGIN_InputFlashTimer = timer() + 750
      if g_ENGINELOGIN_InputFlashToggle = -1
        g_ENGINELOGIN_InputFlashToggle = 1
      else
        g_ENGINELOGIN_InputFlashToggle = -1
      endif
    endif
    
    d3d_starttext
      
      `Cell 1
      if g_ENGINELOGIN_InputBoxActive = 1
        if g_ENGINELOGIN_InputFlashToggle = 1
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 168, 0, g_ENGINELOGIN_InputUsername$ + "|", g_ENGINE_COLOUR_White
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 217, 0, g_ENGINELOGIN_InputPasswordSTARS$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 424, 0, g_ENGINELOGIN_InputIPAddress$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 474, 0, g_ENGINELOGIN_InputPortNumber$, g_ENGINE_COLOUR_White
        else
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 168, 0, g_ENGINELOGIN_InputUsername$, g_ENGINE_COLOUR_White
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 217, 0, g_ENGINELOGIN_InputPasswordSTARS$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 424, 0, g_ENGINELOGIN_InputIPAddress$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 474, 0, g_ENGINELOGIN_InputPortNumber$, g_ENGINE_COLOUR_White
        endif
      endif
      `Cell 2
      if g_ENGINELOGIN_InputBoxActive = 2
        if g_ENGINELOGIN_InputFlashToggle = 1
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 168, 0, g_ENGINELOGIN_InputUsername$, g_ENGINE_COLOUR_White
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 217, 0, g_ENGINELOGIN_InputPasswordSTARS$ + "|", g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 424, 0, g_ENGINELOGIN_InputIPAddress$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 474, 0, g_ENGINELOGIN_InputPortNumber$, g_ENGINE_COLOUR_White
        else
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 168, 0, g_ENGINELOGIN_InputUsername$, g_ENGINE_COLOUR_White
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 217, 0, g_ENGINELOGIN_InputPasswordSTARS$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 424, 0, g_ENGINELOGIN_InputIPAddress$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 474, 0, g_ENGINELOGIN_InputPortNumber$, g_ENGINE_COLOUR_White
        endif
      endif
      `Cell 3
      if g_ENGINELOGIN_InputBoxActive = 3
        if g_ENGINELOGIN_InputFlashToggle = 1
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 168, 0, g_ENGINELOGIN_InputUsername$, g_ENGINE_COLOUR_White
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 217, 0, g_ENGINELOGIN_InputPasswordSTARS$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 424, 0, g_ENGINELOGIN_InputIPAddress$ + "|", g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 474, 0, g_ENGINELOGIN_InputPortNumber$, g_ENGINE_COLOUR_White
        else
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 168, 0, g_ENGINELOGIN_InputUsername$, g_ENGINE_COLOUR_White
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 217, 0, g_ENGINELOGIN_InputPasswordSTARS$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 424, 0, g_ENGINELOGIN_InputIPAddress$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 474, 0, g_ENGINELOGIN_InputPortNumber$, g_ENGINE_COLOUR_White
        endif
      endif
      `Cell 4
      if g_ENGINELOGIN_InputBoxActive = 4
        if g_ENGINELOGIN_InputFlashToggle = 1
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 168, 0, g_ENGINELOGIN_InputUsername$, g_ENGINE_COLOUR_White
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 217, 0, g_ENGINELOGIN_InputPasswordSTARS$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 424, 0, g_ENGINELOGIN_InputIPAddress$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 474, 0, g_ENGINELOGIN_InputPortNumber$ + "|", g_ENGINE_COLOUR_White
        else
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 168, 0, g_ENGINELOGIN_InputUsername$, g_ENGINE_COLOUR_White
          d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 217, 0, g_ENGINELOGIN_InputPasswordSTARS$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 424, 0, g_ENGINELOGIN_InputIPAddress$, g_ENGINE_COLOUR_White
          if g_ENGINELOGIN_Show_Networking = 1 then d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 149, g_ENGINELOGIN_MainBox_PosY + 474, 0, g_ENGINELOGIN_InputPortNumber$, g_ENGINE_COLOUR_White
        endif
      endif
      
      `Display Login Text while trying to login - or Failed login text if an attempt has been made that failed.
      if g_ENGINELOGIN_ConnectionInfoText$ <> ""
        d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 75, g_ENGINELOGIN_MainBox_PosY + 123, 0, "- " + g_ENGINELOGIN_ConnectionInfoText$, g_ENGINE_COLOUR_White
      endif
      
      `Persistent Message - used to provide details for failed logins when the Login Box is turned
      `on within the program - to help provide information about the previous login attempt
      `if g_ENGINELOGIN_LoginScreenPersistentMessage$ <> ""
      `  d3d_text 7, g_ENGINELOGIN_MainBox_PosX + 63, g_ENGINELOGIN_MainBox_PosY + 122, 0, g_ENGINELOGIN_LoginScreenPersistentMessage$, g_ENGINE_COLOUR_White
      `endif
           
    d3d_endtext
    

endfunction

function lib_Login_CF1_GET_LoginBox_Image()

  local l_TempPass$ as string : l_TempPass$ = ""

  create bitmap 1, image width(c_IMG_ENG_LOGINBox_NoDataReqBkgd), image height(c_IMG_ENG_LOGINBox_NoDataReqBkgd)
  set current bitmap 1
  
    `lib_Login_CF1_Display_LoginBox()
    
    paste image c_IMG_ENG_LOGINBox_NoDataReqBkgd, 0, 0
    
    d3d_starttext

      d3d_text 7, 147, 175, 0, g_ENGINELOGIN_Main_Username$, g_ENGINE_COLOUR_White
        for mk_pass_lp = 1 to len(g_ENGINELOGIN_Main_Password$)
          l_TempPass$ = l_TempPass$ + "*"
        next mk_pass_lp
        d3d_text 7, 147, 225, 0, l_TempPass$, g_ENGINE_COLOUR_White
      d3d_text 7, 147, 290, 0, g_ClientsideHOST_IP_Address$, g_ENGINE_COLOUR_White
      d3d_text 7, 147, 340, 0, str$(g_CLIENT_Server_Port_Int), g_ENGINE_COLOUR_White    
    
    d3d_endtext

    get image c_IMG_ENG_LOGINBox_NoDataReqGet, 0, 0, image width(c_IMG_ENG_LOGINBox_NoDataReqBkgd), image height(c_IMG_ENG_LOGINBox_NoDataReqBkgd), 1
    
  
  set current bitmap 0
  
  sprite c_SPRITE_ENG_LoginBox_NoDataReq, g_ENGINELOGIN_MainBox_PosX, g_ENGINELOGIN_MainBox_PosY, c_IMG_ENG_LOGINBox_NoDataReqGet
  set sprite alpha c_SPRITE_ENG_LoginBox_NoDataReq, 255
  hide sprite c_SPRITE_ENG_LoginBox_NoDataReq



endfunction

function lib_Login_CF1_Drag_LoginBox()

  `HANDLE DRAGGING THE RANGE INPUT BOX AROUND THE SCREEN
  if mouseclick() = 1
    if g_LOGINBOX_MOVE_MouseClickHOLD = -1 and mouse_click(1) = -1
      if mousex() > g_ENGINELOGIN_MainBox_PosX and mousex() < g_ENGINELOGIN_MainBox_PosX + 430
        if mousey() > g_ENGINELOGIN_MainBox_PosY and mousey() < g_ENGINELOGIN_MainBox_PosY + 352
          g_LOGINBOX_MOVE_MouseClickHOLD = 1
          g_LOGINBOX_MOVE_Old_MseX = mousex()
          g_LOGINBOX_MOVE_Old_MseY = mousey()
          mouse_click(1) = 1
        endif
      endif
    endif
    if g_LOGINBOX_MOVE_MouseClickHOLD = 1
      g_ENGINELOGIN_MainBox_PosX = g_ENGINELOGIN_MainBox_PosX + (mousex() - g_LOGINBOX_MOVE_Old_MseX)
      if g_ENGINELOGIN_MainBox_PosY + (mousey() - g_ENGINELOGIN_MainBox_PosY) > 0 
        g_ENGINELOGIN_MainBox_PosY = g_ENGINELOGIN_MainBox_PosY + (mousey() - g_LOGINBOX_MOVE_Old_MseY)
      endif
      g_LOGINBOX_MOVE_Old_MseX = mousex()
      g_LOGINBOX_MOVE_Old_MseY = mousey()
    endif
  endif
  if mouseclick() = 0 and g_LOGINBOX_MOVE_MouseClickHOLD = 1
    g_LOGINBOX_MOVE_MouseClickHOLD = -1
  endif  

endfunction

function lib_Login_CF1_INPUT_Keyboard()

  if lib_Enter_Pressed(8111) = 1
    if g_ENGINELOGIN_InputUsername$ <> "" and g_ENGINELOGIN_InputPassword$ <> "" and g_ENGINELOGIN_InputIPAddress$ <> "" and g_ENGINELOGIN_InputPortNumber$ <> ""
      lib_Login_CF1_FinalID_Details_Entered()
    else
      g_ENGINELOGIN_InputFlashTimer = timer() + 750
      g_ENGINELOGIN_InputFlashToggle = 1
      inc g_ENGINELOGIN_InputBoxActive, 1
      if g_ENGINELOGIN_InputBoxActive = 5 then g_ENGINELOGIN_InputBoxActive = 1
    endif
  endif  

  `[TAB] - Alternate Between Active Cells
  if keystate(15)= 1 and key_state(15,0)= 0
    if g_ENGINELOGIN_InputBoxActive = 1
      g_ENGINELOGIN_InputBoxActive = 2
    else
      g_ENGINELOGIN_InputBoxActive = 1
    endif
    g_ENGINELOGIN_InputFlashTimer = timer() + 750
    g_ENGINELOGIN_InputFlashToggle = 1
    key_state(15,0)=1
  endif
  if keystate(15)=0 and key_state(15,0)=1 then key_state(15,0)=0


endfunction

function lib_Login_CF1_INPUT_GetStrings(r_Type as integer)

  l_char$ = entry$()
  select asc(l_char$)
    case 8 : `Backspace
      if r_Type = 1
        g_ENGINELOGIN_InputUsername$ = left$(g_ENGINELOGIN_InputUsername$, len(g_ENGINELOGIN_InputUsername$) - 1)
      endif
      if r_Type = 2
        g_ENGINELOGIN_InputPassword$ = left$(g_ENGINELOGIN_InputPassword$, len(g_ENGINELOGIN_InputPassword$) - 1)
        g_ENGINELOGIN_InputPasswordSTARS$ = left$(g_ENGINELOGIN_InputPasswordSTARS$, len(g_ENGINELOGIN_InputPasswordSTARS$) - 1)
      endif
      if r_Type = 3
        g_ENGINELOGIN_InputIPAddress$ = left$(g_ENGINELOGIN_InputIPAddress$, len(g_ENGINELOGIN_InputIPAddress$) - 1)
      endif
      if r_Type = 4
        g_ENGINELOGIN_InputPortNumber$ = left$(g_ENGINELOGIN_InputPortNumber$, len(g_ENGINELOGIN_InputPortNumber$) - 1)
      endif
    endcase   
    case default
      if asc(l_char$) > 31
        if r_Type = 1
          g_ENGINELOGIN_InputUsername$ = g_ENGINELOGIN_InputUsername$ + l_char$
        endif
        if r_Type = 2
          g_ENGINELOGIN_InputPassword$ = g_ENGINELOGIN_InputPassword$ + l_char$
          if len(g_ENGINELOGIN_InputPassword$) > 1
            g_ENGINELOGIN_InputPasswordSTARS$ = "" 
            `for mk_lp = 1 to len(g_ENGINELOGIN_InputPassword$) - 1
            for mk_lp = 1 to len(g_ENGINELOGIN_InputPassword$)
              g_ENGINELOGIN_InputPasswordSTARS$ = g_ENGINELOGIN_InputPasswordSTARS$ + "*"
            next mk_lp
            `g_ENGINELOGIN_InputPasswordSTARS$ = g_ENGINELOGIN_InputPasswordSTARS$ + l_char$
          else
            g_ENGINELOGIN_InputPasswordSTARS$ = "*"
          endif
        endif
        if r_Type = 3
          g_ENGINELOGIN_InputIPAddress$ = g_ENGINELOGIN_InputIPAddress$ + l_char$
        endif
        if r_Type = 4
          g_ENGINELOGIN_InputPortNumber$ = g_ENGINELOGIN_InputPortNumber$ + l_char$
        endif
      endif
    endcase
  endselect
      
  clear entry buffer
      
endfunction

function lib_Login_CF1_GetPassword()

  `DELETE - this function does not seem to be ever called ??????

  l_char$ = entry$()
  select asc(l_char$)
    case 8 : `Backspace
      g_ENGINELOGIN_InputPassword$ = left$(g_ENGINELOGIN_InputPassword$, len(g_ENGINELOGIN_InputPassword$) - 1)
      g_ENGINELOGIN_InputPasswordSTARS$ = left$(g_ENGINELOGIN_InputPasswordSTARS$, len(g_ENGINELOGIN_InputPasswordSTARS$) - 1)
    endcase
    case default
      if asc(l_char$) > 31
        g_ENGINELOGIN_InputPassword$ = g_ENGINELOGIN_InputPassword$ + l_char$
        if len(g_ENGINELOGIN_InputPassword$) > 1  
          for mk_lp = 1 to len(g_ENGINELOGIN_InputPassword$) - 1
            g_ENGINELOGIN_InputPasswordSTARS$ = g_ENGINELOGIN_InputPasswordSTARS$ + "*"
          next mk_lp
          g_ENGINELOGIN_InputPasswordSTARS$ = g_ENGINELOGIN_InputPasswordSTARS$ + l_char$
        else
          g_ENGINELOGIN_InputPasswordSTARS$ = g_ENGINELOGIN_InputPassword$
        endif
      endif
    endcase
  endselect
      
  clear entry buffer
      
endfunction

function lib_Login_CF1_STARTUP()

  g_ENGINELOGIN_InputIPAddress$ = g_ClientsideHOST_IP_Address$
  g_ENGINELOGIN_InputPortNumber$ = str$(g_CLIENT_Server_Port_Int)
 
  g_ENGINELOGIN_Hide_DSHS_Button = 1
 
  `Set the Drilling Screen to display 1Hr Interval
  `g_DISPLAY_SCREEN_TimePeriod_Button = 2
  `g_ENGINE_DS_Chart_Time_Period_Adjust = 2
  `g_DS_ChartScroll_MseSpeed_Multiplier = g_DS_MouseScrollMultiplier_1Hour
  `g_DS_SCROLLTIME_Text_Scroll_Adjust = 8
  
  g_DISPLAY_SCREEN_TimePeriod_Button = 1
  g_ENGINE_DS_Chart_Time_Period_Adjust = 1
  g_DS_ChartScroll_MseSpeed_Multiplier = g_DS_MouseScrollMultiplier_HalfHour
  g_DS_SCROLLTIME_Text_Scroll_Adjust = 2
 
endfunction



function lib_Login_CF1_CF2_Graphics_Setup()

  g_ENGINELOGIN_MainBox_PosX = g_ENG_Half_Screen_Width - (sprite width(c_SPRITE_ENG_LoginBox_Bkgd)/2)
  
  if g_ENGINELOGIN_Show_Networking = 1
    g_ENGINELOGIN_MainBox_PosY = g_ENG_Half_Screen_Height - ( (sprite height(c_SPRITE_ENG_LoginBox_Bkgd) + sprite height(c_SPRITE_ENG_LoginBox_BkgdBtm)) /2)
  else
    g_ENGINELOGIN_MainBox_PosY = g_ENG_Half_Screen_Height - (sprite height(c_SPRITE_ENG_LoginBox_Bkgd)/2)
  endif

endfunction

function lib_Login_CF1_FinalID_Details_Entered()
  
  `g_ENGINELOGIN_Show_Login = -1
  g_ENGINELOGIN_ConnectionInfoText$ = "Connecting..."
  g_ENGINELOGIN_Main_Username$ = g_ENGINELOGIN_InputUsername$
  g_ENGINELOGIN_Main_Password$ = g_ENGINELOGIN_InputPassword$
  g_connection_attempt_ATTEMPT_NOW = 1
  SAVE_CF1_LOGIN_ACCOUNT_File(g_ENGINELOGIN_Main_Username$, g_ENGINELOGIN_Main_Password$)

endfunction



function __________LOGIN_SCREEN_CF2_MUDLOGGING___________________________________hfkwo3()
endfunction

function LOGIN_CF2_SCREEN_Login()

  LOGIN_CF2_Login_INPUT()

  local l_wdth_prnt as integer
  local l_StartPrint_Sp as integer
  
  `Flash Timer
  if timer() > g_LOGIN_UserID_InputFlashTimer
    g_LOGIN_UserID_InputFlashTimer = timer() + 750
    if g_LOGIN_UserID_InputFlashToggle <> 1
      g_LOGIN_UserID_InputFlashToggle = 1
      g_LOGIN_UserID_Build$ = "|"
    else
      g_LOGIN_UserID_InputFlashToggle = -1
      g_LOGIN_UserID_Build$ = ""
    endif
  endif      
 
  d3d_starttext
  
    sp = 0
    l_wdth_prnt = screen width() * 0.05
    l_wdth_prnt1 = l_wdth_prnt + 5
    l_wdth_prnt2 = l_wdth_prnt1 + 400
    l_wdth_prnt3 = l_wdth_prnt2 + 330
    
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    lib_Display_Menu()
    
    inc sp, (19*2) : d3d_text 2, l_wdth_prnt, sp, 0, "  Login ID Tables"
    
    `Display Tables
      `Left Side
        `Upper Table
        lib_Login_CF2_DrawUserIDBox(l_wdth_prnt1, 160, c_LOGIN_ID_MaxArr, 1, 1, 25)
        `Lower Table
        lib_Login_CF2_DrawUserIDBox(l_wdth_prnt1, 595, c_LOGIN_ID_Universal_MaxArr, 2, 1, 25)
      `Right Side
        `Upper Table
        lib_Login_CF2_DrawUserIDBox(l_wdth_prnt2, 160, c_LOGIN_ID_MaxArr, 1, -1, 25)
        `Lower Table
        lib_Login_CF2_DrawUserIDBox(l_wdth_prnt2, 595, c_LOGIN_ID_Universal_MaxArr, 2, -1, 25)
    
    `Check for clicks outside of any tables to deactivate input box
    `Test Inside Box 1
    if mousex() > l_wdth_prnt1 + 40 and mousex() < l_wdth_prnt1 + 300 and mousey() > 185 and mousey() < 160 + ((c_LOGIN_ID_MaxArr + 1) * 25)
    else
      `Test Inside Box 2
      if mousex() > l_wdth_prnt1 + 40 and mousex() < l_wdth_prnt1 + 300 and mousey() > 620 and mousey() < 595 + ((c_LOGIN_ID_Universal_MaxArr + 1) * 25)
      else
        if mouseclick() = 1 and mouse_click(1) = -1
          mouse_click(1) = 1
          g_LOGIN_UserID_ActiveColumnNum = -1
          g_LOGIN_UserID_ActiveRowNum = -1
          g_LOGIN_UserID_InputToggle = -1
          g_LOGIN_UserID_ID_Type = -1
        endif
      endif
    endif
    
    `UPDATE THE SELECTED DATABASE ITEM
    if g_LOGIN_UserID_InputToggle = 1
      lib_Login_CF2_INPUT_GetString_Keyboard()
      lib_INPUT_GetString_USERIDInput()
      if g_LOGIN_UserID_ID_Type = 1
        if g_LOGIN_UserID_ActiveColumnNum = 1
          if g_LOGIN_UserID_ActiveRowNum >= 1 and g_LOGIN_UserID_ActiveRowNum <= c_LOGIN_ID_MaxArr
            if LOGIN_ID(g_LOGIN_UserID_ActiveRowNum).Username$ <> g_LOGIN_UserID_Input$
              LOGIN_ID(g_LOGIN_UserID_ActiveRowNum).Username$ = g_LOGIN_UserID_Input$
              g_LOGIN_ID_SavefileState$ = "Not Saved"
            endif
          endif
        endif
        if g_LOGIN_UserID_ActiveColumnNum = 2
          if g_LOGIN_UserID_ActiveRowNum >= 1 and g_LOGIN_UserID_ActiveRowNum <= c_LOGIN_ID_MaxArr
            if LOGIN_ID(g_LOGIN_UserID_ActiveRowNum).Password$ <> g_LOGIN_UserID_Input$
              LOGIN_ID(g_LOGIN_UserID_ActiveRowNum).Password$ = g_LOGIN_UserID_Input$
              g_LOGIN_ID_SavefileState$ = "Not Saved"
            endif
          endif
        endif
      endif
      if g_LOGIN_UserID_ID_Type = 2
        if g_LOGIN_UserID_ActiveColumnNum = 1
          if g_LOGIN_UserID_ActiveRowNum >= 1 and g_LOGIN_UserID_ActiveRowNum <= c_LOGIN_ID_Universal_MaxArr
            if LOGIN_ID_Universal(g_LOGIN_UserID_ActiveRowNum).Username$ <> g_LOGIN_UserID_Input$
              LOGIN_ID_Universal(g_LOGIN_UserID_ActiveRowNum).Username$ = g_LOGIN_UserID_Input$
              g_LOGIN_ID_SavefileState$ = "Not Saved"
            endif
          endif
        endif
        if g_LOGIN_UserID_ActiveColumnNum = 2
          if g_LOGIN_UserID_ActiveRowNum >= 1 and g_LOGIN_UserID_ActiveRowNum <= c_LOGIN_ID_Universal_MaxArr
            if LOGIN_ID_Universal(g_LOGIN_UserID_ActiveRowNum).Password$ <> g_LOGIN_UserID_Input$
              LOGIN_ID_Universal(g_LOGIN_UserID_ActiveRowNum).Password$ = g_LOGIN_UserID_Input$
              g_LOGIN_ID_SavefileState$ = "Not Saved"
            endif
          endif
        endif
      endif
    endif
    
    inc sp, 3
    inc sp, 20*3
    l_StartPrint_Sp = sp
    
      if g_server_connected = 1
        d3d_text 2, l_wdth_prnt1, sp, 0, "Local User ID Database"
        inc sp, 20
        d3d_text 2, l_wdth_prnt1, sp, 0, "  :F5 - Transmit to Server & Save Login File" + " (" + g_LOGIN_ID_SavefileState$ + ")"
      else
        d3d_text 2, l_wdth_prnt1, sp, 0, "Local User ID Database"
        inc sp, 20
        d3d_text 2, l_wdth_prnt1, sp, 0, "  :F5 - Save Login File" + " (" + g_LOGIN_ID_SavefileState$ + ")"
      endif
      
      inc sp, 20 
      d3d_text 2, l_wdth_prnt1 + 10, sp + 5, 0, "ID"
      d3d_text 2, l_wdth_prnt1 + 60, sp + 5, 0, "Username"
      d3d_text 2, l_wdth_prnt1 + 170, sp + 5, 0, "Password"
      
           
      for print_lp = 1 to c_LOGIN_ID_MaxArr
        inc sp, 25
        `Print ID Number
        d3d_text 2, l_wdth_prnt1 + 10, sp + 5, 0, str$(print_lp)
        `Print Username
        if g_LOGIN_UserID_ActiveColumnNum = 1
          if g_LOGIN_UserID_ActiveRowNum = print_lp and g_LOGIN_UserID_ID_Type = 1
            d3d_text 2, l_wdth_prnt1 + 60, sp + 5, 0, LOGIN_ID(print_lp).Username$ + g_LOGIN_UserID_Build$
          else
            d3d_text 2, l_wdth_prnt1 + 60, sp + 5, 0, LOGIN_ID(print_lp).Username$
          endif
        else
          d3d_text 2, l_wdth_prnt1 + 60, sp + 5, 0, LOGIN_ID(print_lp).Username$
        endif
        `Print Password
        if g_LOGIN_UserID_ActiveColumnNum = 2
          if g_LOGIN_UserID_ActiveRowNum = print_lp and g_LOGIN_UserID_ID_Type = 1
            d3d_text 2, l_wdth_prnt1 + 170, sp + 5, 0, LOGIN_ID(print_lp).Password$ + g_LOGIN_UserID_Build$
          else
            d3d_text 2, l_wdth_prnt1 + 170, sp + 5, 0, LOGIN_ID(print_lp).Password$
          endif
        else
          d3d_text 2, l_wdth_prnt1 + 170, sp + 5, 0, LOGIN_ID(print_lp).Password$
        endif
      next print_lp
      
      `SPECIAL SECTION - UNIVERSAL PASSWORDS
      inc sp, 40
      d3d_text 2, l_wdth_prnt1, sp, 0, "Universal User ID's"
      inc sp, 20
      
      d3d_text 2, l_wdth_prnt1 + 10, sp + 5, 0, "ID"
      d3d_text 2, l_wdth_prnt1 + 60, sp + 5, 0, "Username"
      d3d_text 2, l_wdth_prnt1 + 170, sp + 5, 0, "Password"

      for print_lp = 1 to c_LOGIN_ID_Universal_MaxArr
        inc sp, 25
        `Print ID Number
        d3d_text 2, l_wdth_prnt1 + 10, sp + 5, 0, str$(print_lp)
        
        `Print Username
        if g_LOGIN_UserID_ActiveColumnNum = 1
          if g_LOGIN_UserID_ActiveRowNum = print_lp and g_LOGIN_UserID_ID_Type = 2
            d3d_text 2, l_wdth_prnt1 + 60, sp + 5, 0, LOGIN_ID_Universal(print_lp).Username$ + g_LOGIN_UserID_Build$
          else
            d3d_text 2, l_wdth_prnt1 + 60, sp + 5, 0, LOGIN_ID_Universal(print_lp).Username$
          endif
        else
          d3d_text 2, l_wdth_prnt1 + 60, sp + 5, 0, LOGIN_ID_Universal(print_lp).Username$
        endif
        `Print Password
        if g_LOGIN_UserID_ActiveColumnNum = 2
          if g_LOGIN_UserID_ActiveRowNum = print_lp and g_LOGIN_UserID_ID_Type = 2
            d3d_text 2, l_wdth_prnt1 + 170, sp + 5, 0, LOGIN_ID_Universal(print_lp).Password$ + g_LOGIN_UserID_Build$
          else
            d3d_text 2, l_wdth_prnt1 + 170, sp + 5, 0, LOGIN_ID_Universal(print_lp).Password$
          endif
        else
          d3d_text 2, l_wdth_prnt1 + 170, sp + 5, 0, LOGIN_ID_Universal(print_lp).Password$
        endif
      next print_lp
    
      inc sp, 20
      inc sp, 20 : d3d_text 2, l_wdth_prnt1, sp, 0, "Last transmission to Server at : " + g_ENG_LOGIN_LastTransmit_Time$ + "(" + g_ENG_LOGIN_LastTransmit_Date$ + ")"
  
      `---- DISPLAY SERVER LOGIN TABLE (Downloaded from the Server) ----
  
      sp = l_StartPrint_Sp
      `d3d_text 2, l_wdth_prnt2, sp, 0, "Server User ID Database"
      `inc sp, 20
      `d3d_text 2, l_wdth_prnt2, sp, 0, "  :F6 - View the current Server Login Table"
      
      if g_server_connected = 1
        d3d_text 2, l_wdth_prnt2, sp, 0, "Server Login ID Database"
        inc sp, 20
        d3d_text 2, l_wdth_prnt2, sp, 0, "  :F6 - View the current Server Login Table"
      else
        if g_MENU_F8Connect_Toggle = 1
          d3d_text 2, l_wdth_prnt2, sp, 0, "Server Login ID Database (No Connection to Server)"
        else
          d3d_text 2, l_wdth_prnt2, sp, 0, "Server Login ID Database"
        endif  
        inc sp, 20
        d3d_text 2, l_wdth_prnt2, sp, 0, "  :F6 - View the current Server Login Table"
      endif
      
      inc sp, 20
      d3d_text 2, l_wdth_prnt2 + 10, sp + 5, 0, "ID"
      d3d_text 2, l_wdth_prnt2 + 60, sp + 5, 0, "Username"
      d3d_text 2, l_wdth_prnt2 + 170, sp + 5, 0, "Password"
      
      for print_lp = 1 to c_LOGIN_ID_MaxArr
        inc sp, 25
        `Print ID Number
        d3d_text 2, l_wdth_prnt2 + 10, sp + 5, 0, str$(print_lp)
        `Print Username
        d3d_text 2, l_wdth_prnt2 + 60, sp + 5, 0, LOGIN_ID_ServerArr(print_lp).Username$
        `Print Password
        d3d_text 2, l_wdth_prnt2 + 170, sp + 5, 0, LOGIN_ID_ServerArr(print_lp).Password$
      next print_lp
      
      `SPECIAL SECTION - UNIVERSAL PASSWORDS
      inc sp, 40
      d3d_text 2, l_wdth_prnt2, sp, 0, "Universal User ID's"
      inc sp, 20
      
      d3d_text 2, l_wdth_prnt2 + 10, sp + 5, 0, "ID"
      d3d_text 2, l_wdth_prnt2 + 60, sp + 5, 0, "Username"
      d3d_text 2, l_wdth_prnt2 + 170, sp + 5, 0, "Password"

      for print_lp = 1 to c_LOGIN_ID_Universal_MaxArr
        inc sp, 25
        `Print ID Number
        d3d_text 2, l_wdth_prnt2 + 10, sp + 5, 0, str$(print_lp)
        `Print Username
        d3d_text 2, l_wdth_prnt2 + 60, sp + 5, 0, LOGIN_ID_Uni_ServerArr(print_lp).Username$
        `Print Password
        d3d_text 2, l_wdth_prnt2 + 170, sp + 5, 0, LOGIN_ID_Uni_ServerArr(print_lp).Password$
      next print_lp
      
      inc sp, 20
      inc sp, 20 : d3d_text 2, l_wdth_prnt2, sp, 0, "Last update received at : " + g_ENG_LOGIN_LastUpdate_Time$ + "(" + g_ENG_LOGIN_LastUpdate_Date$ + ")"
      
      
      `---- DISPLAY Users Logged Into The Server ----
  
      sp = l_StartPrint_Sp
      inc sp, 20
      d3d_text 2, l_wdth_prnt3, sp, 0, "  Users connected to the Server"
      inc sp, 20
      
      `Draw far Left Line
      d3d_line l_wdth_prnt3, sp, l_wdth_prnt3, sp + ((c_ENG_MaxServerClients + 1) * 25), rgb(110, 110, 110)
      `ID/Username Line
      d3d_line l_wdth_prnt3 + 40, sp, l_wdth_prnt3 + 40, sp + ((c_ENG_MaxServerClients + 1) * 25), rgb(110, 110, 110)
      `Far Right Line
      d3d_line l_wdth_prnt3 + 190, sp, l_wdth_prnt3 + 190, sp + ((c_ENG_MaxServerClients + 1) * 25), rgb(110, 110, 110)
      `Top connection line to Server Logins
      d3d_line l_wdth_prnt3 - 30, sp, l_wdth_prnt3, sp, rgb(110, 110, 110)
      `Table Lines
      l_Y1Pos = sp - 25
      for print_lp = 0 to c_ENG_MaxServerClients + 1
        inc l_Y1Pos, 25
        d3d_line l_wdth_prnt3, l_Y1Pos, l_wdth_prnt3 + 190, l_Y1Pos, rgb(110, 110, 110)
      next print_lp
      `Bottom connection line to Server Logins
      d3d_line l_wdth_prnt3 - 30, l_Y1Pos, l_wdth_prnt3, l_Y1Pos, rgb(110, 110, 110)
      
      d3d_text 2, l_wdth_prnt3 + 10, sp + 5, 0, "ID"
      d3d_text 2, l_wdth_prnt3 + 60, sp + 5, 0, "Username"
      for print_lp = 1 to c_ENG_MaxServerClients
        inc sp, 25
        `Print ID Number
        d3d_text 2, l_wdth_prnt3 + 10, sp + 5, 0, str$(print_lp)
        `Print Username
        if LOGIN_ServerUsernames(print_lp).Username$ <> ""
          d3d_text 2, l_wdth_prnt3 + 60, sp + 5, 0, LOGIN_ServerUsernames(print_lp).Username$
        else
          d3d_text 2, l_wdth_prnt3 + 60, sp + 5, 0, "\"
        endif
      next print_lp
      
  d3d_endtext
    
endfunction

function LOGIN_CF2_Login_INPUT()

  `[F5] - Transmit Client Login Table to the Server
  if keystate(63)= 1 and key_state(63,0)= 0
    lib_Login_CF2_TransmitToServer()
    key_state(63,0)=1
  endif
  if keystate(63)=0 and key_state(63,0)=1 then key_state(63,0)=0

  `[F6] - Request Server Login Table
  if keystate(64)= 1 and key_state(64,0)= 0
    lib_Login_CF2_Reset_Server_ReturnLT_Arrs()
    lib_Login_CF2_RequestServerLoginTable()
    key_state(64,0)=1
  endif
  if keystate(64)=0 and key_state(64,0)=1 then key_state(64,0)=0

endfunction

function lib_Login_CF2_INPUT_GetString_Keyboard()

  `This function handles the keyboard inputs while getting the login INPUT$

  `[TAB] - Alternate Between Active Cells
  if keystate(15)= 1 and key_state(15,0)= 0
    if g_LOGIN_UserID_ActiveColumnNum = 1
      g_LOGIN_UserID_ActiveColumnNum = 2
    else
      g_LOGIN_UserID_ActiveColumnNum = 1
      inc g_LOGIN_UserID_ActiveRowNum, 1
      
      if g_LOGIN_UserID_ID_Type = 1 then l_MaxArr = c_LOGIN_ID_MaxArr
      if g_LOGIN_UserID_ID_Type = 2 then l_MaxArr = c_LOGIN_ID_Universal_MaxArr

      if g_LOGIN_UserID_ActiveRowNum > l_MaxArr
        g_LOGIN_UserID_ActiveRowNum = 1
        if g_LOGIN_UserID_ID_Type = 1
          g_LOGIN_UserID_ID_Type = 2
        else
          g_LOGIN_UserID_ID_Type = 1
        endif    
      endif
    
    endif
    lib_Login_CF2_Input_SetActiveCell(g_LOGIN_UserID_ActiveColumnNum, g_LOGIN_UserID_ActiveRowNum, g_LOGIN_UserID_ID_Type)
    key_state(15,0)=1
  endif
  if keystate(15)=0 and key_state(15,0)=1 then key_state(15,0)=0
  
  `[UP Cursor]
  if keystate(200)= 1 and key_state(200,0)= 0
    dec g_LOGIN_UserID_ActiveRowNum, 1
    if g_LOGIN_UserID_ActiveRowNum < 1
      if g_LOGIN_UserID_ID_Type = 2
        g_LOGIN_UserID_ID_Type = 1
        g_LOGIN_UserID_ActiveRowNum = c_LOGIN_ID_MaxArr
      else
        g_LOGIN_UserID_ActiveRowNum = 1  
      endif
    endif
    lib_Login_CF2_Input_SetActiveCell(g_LOGIN_UserID_ActiveColumnNum, g_LOGIN_UserID_ActiveRowNum, g_LOGIN_UserID_ID_Type)
    key_state(200,0)=1
  endif
  if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
  
  `[DOWN Cursor]
  if keystate(208)= 1 and key_state(208,0)= 0
    if g_LOGIN_UserID_ID_Type = 1 then l_MaxArr = c_LOGIN_ID_MaxArr
    if g_LOGIN_UserID_ID_Type = 2 then l_MaxArr = c_LOGIN_ID_Universal_MaxArr
    inc g_LOGIN_UserID_ActiveRowNum, 1
    if g_LOGIN_UserID_ActiveRowNum > l_MaxArr
      if g_LOGIN_UserID_ID_Type = 2
        g_LOGIN_UserID_ActiveRowNum = c_LOGIN_ID_Universal_MaxArr
      endif  
      if g_LOGIN_UserID_ID_Type = 1
        g_LOGIN_UserID_ID_Type = 2
        g_LOGIN_UserID_ActiveRowNum = 1
      endif
    endif
    lib_Login_CF2_Input_SetActiveCell(g_LOGIN_UserID_ActiveColumnNum, g_LOGIN_UserID_ActiveRowNum, g_LOGIN_UserID_ID_Type)
    key_state(208,0)=1
  endif
  if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
  
  `[LEFT Cursor]
  if keystate(203)= 1 and key_state(203,0)= 0
    g_LOGIN_UserID_ActiveColumnNum = 1
    lib_Login_CF2_Input_SetActiveCell(g_LOGIN_UserID_ActiveColumnNum, g_LOGIN_UserID_ActiveRowNum, g_LOGIN_UserID_ID_Type)
    key_state(203,0)=1
  endif
  if keystate(203)=0 and key_state(203,0)=1 then key_state(203,0)=0
  
  `[RIGHT Cursor]
  if keystate(205)= 1 and key_state(205,0)= 0
    g_LOGIN_UserID_ActiveColumnNum = 2
    lib_Login_CF2_Input_SetActiveCell(g_LOGIN_UserID_ActiveColumnNum, g_LOGIN_UserID_ActiveRowNum, g_LOGIN_UserID_ID_Type)
    key_state(205,0)=1
  endif
  if keystate(205)=0 and key_state(205,0)=1 then key_state(205,0)=0
      
  if lib_Enter_Pressed(8630) = 1
    g_LOGIN_UserID_ActiveColumnNum = -1
    g_LOGIN_UserID_ActiveRowNum = -1
    g_LOGIN_UserID_InputToggle = -1
    g_LOGIN_UserID_ID_Type = -1
  endif
  


endfunction

function lib_Login_CF2_DrawUserIDBox(r_X1Pos as integer, r_Y1Pos as integer, r_NumLines as integer, r_Type as integer, r_Highlight as integer, r_LineSpacing as integer)

  local l_Col_Num as integer : l_Col_Num = -1
  local l_Row_Num as integer : l_Row_Num = -1
  local l_StartY as integer : l_StartY = r_Y1Pos
  
  `Mouse Highlighting With Cells
  
  `Column
  if mousex() > r_X1Pos + 40 and mousex() < r_X1Pos + 300
    if mousex() < r_X1Pos + 150
      l_Col_Num = 1
    else
      l_Col_Num = 2
    endif
  endif
    

      
  `Far Left Line
  d3d_line r_X1Pos, r_Y1Pos, r_X1Pos, r_Y1Pos + ((r_NumLines + 1) * r_LineSpacing), rgb(110, 110, 110)
  `ID/Username Line
  d3d_line r_X1Pos + 40, r_Y1Pos, r_X1Pos + 40, r_Y1Pos + ((r_NumLines + 1) * r_LineSpacing), rgb(110, 110, 110)
  `Username/Password Line
  d3d_line r_X1Pos + 150, r_Y1Pos, r_X1Pos + 150, r_Y1Pos + ((r_NumLines + 1) * r_LineSpacing), rgb(110, 110, 110)
  `Far Right Line
  d3d_line r_X1Pos + 300, r_Y1Pos, r_X1Pos + 300, r_Y1Pos + ((r_NumLines + 1) * r_LineSpacing), rgb(110, 110, 110)

  `Top Line
  d3d_line r_X1Pos, r_Y1Pos, r_X1Pos + 300, r_Y1Pos, rgb(110, 110, 110)

  `Draw Table Lines
  for print_lp = 1 to r_NumLines
    inc r_Y1Pos, r_LineSpacing
    d3d_line r_X1Pos, r_Y1Pos, r_X1Pos + 300, r_Y1Pos, rgb(110, 110, 110)
    if mousey() > r_Y1Pos and mousey() < r_Y1Pos + r_LineSpacing
      l_Row_Num = print_lp
    endif
  next print_lp
  
  `Base Line
  d3d_line r_X1Pos, r_Y1Pos + r_LineSpacing, r_X1Pos + 300, r_Y1Pos + r_LineSpacing, rgb(110, 110, 110)

  `Display COLOURED BOX SELECTION INFILL
  if r_Highlight = 1
    `Highlight the selected (Editing) box
    if g_LOGIN_UserID_InputToggle = 1
      if r_Type = g_LOGIN_UserID_ID_Type
        if g_LOGIN_UserID_ActiveColumnNum = 1
          d3d_box r_X1Pos + 42, l_StartY + (g_LOGIN_UserID_ActiveRowNum*r_LineSpacing) + 2, r_X1Pos + 149, l_StartY + ((g_LOGIN_UserID_ActiveRowNum+1)*r_LineSpacing) - 1, rgb(120, 120, 120)
        else
          d3d_box r_X1Pos + 152, l_StartY + (g_LOGIN_UserID_ActiveRowNum*r_LineSpacing) + 2, r_X1Pos + 299, l_StartY + ((g_LOGIN_UserID_ActiveRowNum+1)*r_LineSpacing) - 1, rgb(120, 120, 120)
        endif
      endif
    endif
    
    if l_Col_Num <> -1 and l_Row_Num <> -1
      if l_Row_Num = g_LOGIN_UserID_ActiveRowNum and l_Col_Num = g_LOGIN_UserID_ActiveColumnNum
      else
        if l_Col_Num = 1
          d3d_box r_X1Pos + 42, l_StartY + (l_Row_Num*r_LineSpacing) + 2, r_X1Pos + 149, l_StartY + ((l_Row_Num+1)*r_LineSpacing) - 1, rgb(80, 80, 80)
        endif
        if l_Col_Num = 2
          d3d_box r_X1Pos + 152, l_StartY + (l_Row_Num*r_LineSpacing) + 2, r_X1Pos + 299, l_StartY + ((l_Row_Num+1)*r_LineSpacing) - 1, rgb(80, 80, 80)
        endif
      endif
    endif
  endif

  if l_Col_Num <> -1 and l_Row_Num <> -1
    if mouseclick() = 1 and mouse_click(1) = -1
      mouse_click(1) = 1
      lib_Login_CF2_Input_SetActiveCell(l_Col_Num, l_Row_Num, r_Type)
    endif
  endif
  `Deselect cell if right mouse button clicked
  if mouseclick() = 2 and mouse_click(2) = -1
    mouse_click(2) = 1
    g_LOGIN_UserID_ActiveColumnNum = -1
    g_LOGIN_UserID_ActiveRowNum = -1
    g_LOGIN_UserID_InputToggle = -1
    g_LOGIN_UserID_ID_Type = -1
  endif  
              
endfunction

function lib_Login_CF2_TransmitToServer()

  `This function sends the Client Login Table to the server.
  
  g_Already_Transmitted_To_Server_This_Program_Loop = 1
  net send 0
  net put long 5000
  net put long 18635
    `Send standard User ID's
    for send_lp = 1 to c_LOGIN_ID_MaxArr
      net put string LOGIN_ID(send_lp).Username$
      net put string LOGIN_ID(send_lp).Password$
    next send_lp
    `Send Uninversal User ID's
    for send_lp = 1 to c_LOGIN_ID_Universal_MaxArr
      net put string LOGIN_ID_Universal(send_lp).Username$
      net put string LOGIN_ID_Universal(send_lp).Password$
    next send_lp
  net send
  inc g_ENG_DataTransfer_Total, 2048
  
  g_ENG_LOGIN_LastTransmit_Date$ = lib_CONVERT_DATE_US_to_UK_Format(get date$())
  g_ENG_LOGIN_LastTransmit_Time$ = get time$()
  
  CREATE_CF2_Login_Accounts_File()

endfunction

function lib_Login_CF2_RequestServerLoginTable()

  g_Already_Transmitted_To_Server_This_Program_Loop = 1
  net send 0
  net put long 5002
  net put long 12652
  net send
  inc g_ENG_DataTransfer_Total, 2048

endfunction

function lib_Login_CF2_Receive_Server_LoginTable()

  `This function Receives the Client Login Table from the Authorised Client

    `Receive standard User ID's
    for receive_lp = 1 to c_LOGIN_ID_MaxArr
      LOGIN_ID_ServerArr(receive_lp).Username$ = net get string()
      LOGIN_ID_ServerArr(receive_lp).Password$ = net get string()
    next receive_lp
    `Receive Uninversal User ID's
    for receive_lp = 1 to c_LOGIN_ID_Universal_MaxArr
      LOGIN_ID_Uni_ServerArr(receive_lp).Username$ = net get string()
      LOGIN_ID_Uni_ServerArr(receive_lp).Password$ = net get string()
    next receive_lp

  g_ENG_LOGIN_LastUpdate_Date$ = lib_CONVERT_DATE_US_to_UK_Format(get date$())
  g_ENG_LOGIN_LastUpdate_Time$ = get time$()
  
  `Receive Usernames logged into the server
  for Receive_UN_lp = 1 to c_ENG_MaxServerClients
    LOGIN_ServerUsernames(Receive_UN_lp).Username$ = net get string()
  next Receive_UN_lp
  


endfunction

function lib_Login_CF2_Reset_Server_ReturnLT_Arrs()

  `This function resets the arrays that store the return values from the
  `server, i.e. the Login Table currently stored by the server.

  for set_lp = 0 to c_LOGIN_ID_MaxArr
    LOGIN_ID_ServerArr(set_lp).Username$ = "Unknown"
    LOGIN_ID_ServerArr(set_lp).Password$ = "Unknown"
  next set_lp
  
  for set_lp = 0 to c_LOGIN_ID_Universal_MaxArr
    LOGIN_ID_Uni_ServerArr(set_lp).Username$ = "Unknown"
    LOGIN_ID_Uni_ServerArr(set_lp).Password$ = "Unknown"
  next set_lp
  
  for set_lp = 0 to c_ENG_MaxServerClients
    LOGIN_ServerUsernames(set_lp).Username$ = "Unknown"
  next set_lp



    

endfunction

function lib_Login_CF2_Input_SetActiveCell(r_Col_Num, r_Row_Num, r_SetType)
  clear entry buffer
  g_LOGIN_UserID_Input$ = ""
  g_LOGIN_UserID_ActiveColumnNum = r_Col_Num
  g_LOGIN_UserID_ActiveRowNum = r_Row_Num
  g_LOGIN_UserID_InputToggle = 1
  g_LOGIN_UserID_ID_Type = r_SetType
  g_LOGIN_UserID_InputFlashTimer = timer() + 750
  g_LOGIN_UserID_InputFlashToggle = 1
  g_LOGIN_UserID_Build$ = "|"
  
  `Get the cell value for use in g_LOGIN_UserID_Input$ so when you select a cell containing data
  `g_LOGIN_UserID_Input$ is set to it and it doesn't go blank
  if g_LOGIN_UserID_ID_Type = 1
    if g_LOGIN_UserID_ActiveColumnNum = 1
      if g_LOGIN_UserID_ActiveRowNum >= 1 and g_LOGIN_UserID_ActiveRowNum <= c_LOGIN_ID_MaxArr
        if g_lib_Login_CF2_Input_SetActiveCell = 1
          g_LOGIN_UserID_Input$ = LOGIN_ID(g_LOGIN_UserID_ActiveRowNum).Username$
        else
          g_LOGIN_UserID_Input$ = LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(g_LOGIN_UserID_ActiveRowNum).Username$
        endif
      endif
    endif
    if g_LOGIN_UserID_ActiveColumnNum = 2
      if g_LOGIN_UserID_ActiveRowNum >= 1 and g_LOGIN_UserID_ActiveRowNum <= c_LOGIN_ID_MaxArr
        if g_lib_Login_CF2_Input_SetActiveCell = 1
          g_LOGIN_UserID_Input$ = LOGIN_ID(g_LOGIN_UserID_ActiveRowNum).Password$
        else
          g_LOGIN_UserID_Input$ = LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(g_LOGIN_UserID_ActiveRowNum).Password$
        endif
      endif
    endif
  endif
  
  if g_LOGIN_UserID_ID_Type = 2
    if g_LOGIN_UserID_ActiveColumnNum = 1
      if g_LOGIN_UserID_ActiveRowNum >= 1 and g_LOGIN_UserID_ActiveRowNum <= c_LOGIN_ID_Universal_MaxArr
        if g_lib_Login_CF2_Input_SetActiveCell = 1
          g_LOGIN_UserID_Input$ = LOGIN_ID_Universal(g_LOGIN_UserID_ActiveRowNum).Username$
        else
          g_LOGIN_UserID_Input$ = LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(g_LOGIN_UserID_ActiveRowNum).Username$
        endif
      endif
    endif
    if g_LOGIN_UserID_ActiveColumnNum = 2
      if g_LOGIN_UserID_ActiveRowNum >= 1 and g_LOGIN_UserID_ActiveRowNum <= c_LOGIN_ID_Universal_MaxArr
        if g_lib_Login_CF2_Input_SetActiveCell = 1
          g_LOGIN_UserID_Input$ = LOGIN_ID_Universal(g_LOGIN_UserID_ActiveRowNum).Password$
        else
          g_LOGIN_UserID_Input$ = LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(g_LOGIN_UserID_ActiveRowNum).Password$
        endif  
      endif
    endif
  endif

endfunction

function lib_Login_CF2_STARTUP()

  `AUTHORISED CLIENT SIDE
  g_ENGINELOGIN_Show_Login = -1
  g_ENGINELOGIN_Main_Username$ = "GDS_MLSUNIT"
  g_ENGINELOGIN_Main_Password$ = "MlsMlgPWD"
  
  `Set the Drilling Screen to display 1Hr Interval
  g_DISPLAY_SCREEN_TimePeriod_Button = 2
  g_ENGINE_DS_Chart_Time_Period_Adjust = 2
  g_DS_ChartScroll_MseSpeed_Multiplier = g_DS_MouseScrollMultiplier_1Hour
  g_DS_SCROLLTIME_Text_Scroll_Adjust = 8

endfunction

function __________COMMAND_CONSOLE______________________________________tx128r()
endfunction

function Command_Console_Setup_ENGINE()


  if g_ENGINE_CoreFunctionType = 1
    Command_Console_Setup_VIEWER()
  endif
  
  if g_ENGINE_CoreFunctionType = 2
    Command_Console_Setup_MUDLOGGING()
  endif

endfunction


function Command_Console_Setup_VIEWER()

  g_CConsl_ADV_Lvl1_TotalMenus = 5

  `MENU 1
  CConsl_ADV_Ttl(1) = 1
  CConsl_ADV$(1, 1) = "CLIENT COMMANDS"

    if g_AUTO_CONNECT_ON = 1
      if g_server_connected = 0
        CConsl_ADV$(1, 2) = "TOGGLE - Automatic Reconnect (Currently ENABLED - attempting every " + str$(g_connection_attempt_interval) + " seconds) (" + str$(g_connection_attempt_counter) + " seconds remaining - Paused by Command Console)"
      else
        CConsl_ADV$(1, 2) = "TOGGLE - Automatic Reconnect (Currently ENABLED - attempting every " + str$(g_connection_attempt_interval) + " seconds) (Connected!)"
      endif
    else
      CConsl_ADV$(1, 2) = "TOGGLE - Automatic Reconnect (Currently DISABLED)"
    endif
      
  `MENU 2
  CConsl_ADV_Ttl(2) = 3
  CConsl_ADV$(2, 1) = "INTERNET RELATED COMMANDS"
    CConsl_ADV$(2, 2) = "INPUT New Server IP Address [Current Server IP Address : [" + g_ClientsideHOST_IP_Address$ + "]"
    if g_ClientsideHOST_IP_Address$ = "127.0.0.1"
      CConsl_ADV$(2, 3) = "INPUT New Server Port [Current Server Port: " + str$(g_CLIENT_Server_Port_Int) + "] (Port will use loopback port - 2332)"
    else
      CConsl_ADV$(2, 3) = "INPUT New Server Port [Current Server Port: " + str$(g_CLIENT_Server_Port_Int) + "]"
    endif
    
    l_net_connected_test = net connected()
    if l_net_connected_test = 1
      CConsl_ADV$(2, 4) = "DISCONNECT from the Server (Currently Connected to " + g_CONNECTED_To_IP_Address$ + ")"
    else
      CConsl_ADV$(2, 4) = "DISCONNECT from the Server (Currently Disconnected)"
    endif
    
  `MENU 3
  CConsl_ADV_Ttl(3) = 6
  CConsl_ADV$(3, 1) = "OTHER COMMANDS"
    if g_CMNDCONSL_Received_ServerVal_DS_LineThickness = -2 or g_server_connected <> 1
      CConsl_ADV$(3, 2) = "TOGGLE Server Drill Screen Line Thickness (No connection to server)" 
    else
      if g_CMNDCONSL_Received_ServerVal_DS_LineThickness = 1
        CConsl_ADV$(3, 2) = "TOGGLE Server Drill Screen Line Thickness (Current setting: Double)"
      else
        CConsl_ADV$(3, 2) = "TOGGLE Server Drill Screen Line Thickness (Current setting: Single)"
      endif
    endif
    if g_CMNDCONSL_Received_ServerVal_HS_LineThickness = -2 or g_server_connected <> 1
      CConsl_ADV$(3, 3) = "TOGGLE Server Historical Screen Line Thickness (No connection to server)"
    else
      if g_CMNDCONSL_Received_ServerVal_HS_LineThickness = 1
        CConsl_ADV$(3, 3) = "TOGGLE Server Historical Screen Line Thickness (Current setting: Double)"
      else
        CConsl_ADV$(3, 3) = "TOGGLE Server Historical Screen Line Thickness (Current setting: Single)"
      endif
    endif  
    
    if g_CMNDCONSL_Received_ServerVal_Display_DS_or_HS = -2 or g_server_connected <> 1
      CConsl_ADV$(3, 4) = "TOGGLE DISPLAY - Server Drilling Screen / Historical Screen (No connection to server)"
    else
      if g_CMNDCONSL_Received_ServerVal_Display_DS_or_HS = 1
        CConsl_ADV$(3, 4) = "TOGGLE DISPLAY - Server Drilling Screen / Historical Screen (Current Screen - Drill Screen)"
      else
        CConsl_ADV$(3, 4) = "TOGGLE DISPLAY - Server Drilling Screen / Historical Screen (Current Screen - Historical Screen)"
      endif
    endif  
    
    CConsl_ADV$(3, 5) = "DRILLSCREEN CHARTS - Plot Server Charts from current time"

    CConsl_ADV$(3, 6) = "SET RANGE - Set Server Upper or Lower Range Values on the Drilling Screen Chart Plots"

    if g_CMNDCONSL_Received_ServerVal_Display_MainScreen_Or_CMNDCONSL = -2 or  g_server_connected <> 1
      CConsl_ADV$(3, 7) = "TOGGLE Server Command Console Screen / Main Graphics Gcreen  (No connection to server)"
    else
      if g_CMNDCONSL_Received_ServerVal_Display_MainScreen_Or_CMNDCONSL = 1
        CConsl_ADV$(3, 7) = "TOGGLE Server Command Console Screen / Main Graphics Gcreen (Current Screen Type - Graphics Display)"
      else
        CConsl_ADV$(3, 7) = "TOGGLE Server Command Console Screen / Main Graphics Gcreen (Current Screen Type - Command Console)"
      endif
    endif  

  `MENU 4
  CConsl_ADV_Ttl(4) = 1
  CConsl_ADV$(4, 1) = "REALTIME DISPLAY"
    if g_server_authorised_wits_transmission = 1
      if g_ENGINE_Screen_Resolution = 1
        CConsl_ADV$(4, 2) = "Show Drill Screen using realtime and display variables from the Server (Widescreen)"
      else
        CConsl_ADV$(4, 2) = "Show Drill Screen using realtime and display variables from the Server (1024x768)"
      endif
    else
      if g_ENGINE_Screen_Resolution = 1
        CConsl_ADV$(4, 2) = "Show Drill Screen using realtime and display variables from the local database (Widescreen)"
      else
        CConsl_ADV$(4, 2) = "Show Drill Screen using realtime and display variables from the local database (1024x768)"
      endif
    endif
    
  `MENU 5
  CConsl_ADV_Ttl(5) = 1
  CConsl_ADV$(5, 1) = "SCREEN (FULLSCREEN / WINDOWED)"
    if g_Window_Fullscreen_Toggle = 1
      CConsl_ADV$(5, 2) = "Toggle Windowed/Fullscreen Mode (Currently: Windowed)"
    endif
    if g_Window_Fullscreen_Toggle = 2
      CConsl_ADV$(5, 2) = "Toggle Windowed/Fullscreen Mode (Currently: Fullscreen)"
    endif
    
endfunction

function Command_Console_Setup_MUDLOGGING()

  g_CConsl_ADV_Lvl1_TotalMenus = 10

  `MENU 1
  CConsl_ADV_Ttl(1) = 11
  CConsl_ADV$(1, 1) = "CLIENT COMMANDS"
    CConsl_ADV$(1, 2) = "REINITIALISE SERIALPORT - Delete, then automatically recreate the serial port"
    
    if g_AUTO_CONNECT_ON = 1
      CConsl_ADV$(1, 3) = "TOGGLE - Automatic Reconnect (Currently ENABLED - attempting every " + str$(g_connection_attempt_interval) + " seconds)"
    else
      CConsl_ADV$(1, 3) = "TOGGLE - Automatic Reconnect (Currently DISABLED)"
    endif
      
    CConsl_ADV$(1, 4) = "BACKUP the Local Harddisk Database file"
    
    if g_SYNC_Engine_Active = 1
      CConsl_ADV$(1, 5) = "TOGGLE SYNC - Toggle the Client SYNC Engine (Currently: ACTIVE)"
    else
      CConsl_ADV$(1, 5) = "TOGGLE SYNC - Toggle the Client SYNC Engine (Currently: DISABLED)"
    endif
    
    if g_ENG_Logging_Active = 1
      CConsl_ADV$(1, 6) = "TOGGLE LOGGING - Toggle the Client DATA LOGGING Engine (Currently: ACTIVE)"
    else
      CConsl_ADV$(1, 6) = "TOGGLE LOGGING - Toggle the Client DATA LOGGING Engine (Currently: DISABLED)"
    endif
    
    CConsl_ADV$(1, 7) = "FORMAT LOCAL HARDDISK DATABASE - Deletes the HD Database and recreates from the LOCAL Memory Database"
    
    if g_ENGINE_UNITS_FT_or_M = 1
      CConsl_ADV$(1, 8) = "TOGGLE UNITS - Switch between M or FT across the Network (Currently: FT)"
    else
      CConsl_ADV$(1, 8) = "TOGGLE UNITS - Switch between M or FT across the Network (Currently: M)"
    endif
    
    CConsl_ADV$(1, 9) = "Set Variable <g_DATABASE_MEM_Total_Num_Records>"
    
    CConsl_ADV$(1, 10) = "Set ROP Depth Interval"
    
    CConsl_ADV$(1, 11) = "RENAME a Channel Display Name (OVERRIDE CHANNEL NAME)"
    
    CConsl_ADV$(1, 12) = "LAG DEPTH Display & Adjust"
    
  `MENU 2
  CConsl_ADV_Ttl(2) = 5
  CConsl_ADV$(2, 1) = "SERVER COMMANDS"
    CConsl_ADV$(2, 2) = "Unlock the SERVER DATABASE"
    CConsl_ADV$(2, 3) = "Delete the SERVER DATABASE (Must be unlocked first)"
    CConsl_ADV$(2, 4) = "Request that the Server perform a Database BACKUP"
    CConsl_ADV$(2, 5) = "FORMAT SERVER HARDDISK DATABASE - Deletes the Server HD Database and recreates from the Server LOCAL Memory Database"
    if g_server_connected = 1
      CConsl_ADV$(2, 6) = "RE-SYNC (SYNC DB) - Check all records on Server and Update Client SYNC fields (Server: Connected)"
    else
      CConsl_ADV$(2, 6) = "RE-SYNC (SYNC DB) - Check all records on Server and Update Client SYNC fields (Server: Not Connected)"
    endif
  
  `MENU 3
  CConsl_ADV_Ttl(3) = 3
  CConsl_ADV$(3, 1) = "INTERNET RELATED COMMANDS"
    CConsl_ADV$(3, 2) = "INPUT New Server IP Address [Current Server IP Address : [" + g_ClientsideHOST_IP_Address$ + "]"
    if g_ClientsideHOST_IP_Address$ = "127.0.0.1"
      CConsl_ADV$(3, 3) = "INPUT New Server Port [Current Server Port: " + str$(g_CLIENT_Server_Port_Int) + "] (Port will use loopback port - 2332)"
    else
      CConsl_ADV$(3, 3) = "INPUT New Server Port [Current Server Port: " + str$(g_CLIENT_Server_Port_Int) + "]"
    endif
    
    l_net_connected_test = net connected()
    if l_net_connected_test = 1
      CConsl_ADV$(3, 4) = "DISCONNECT from the server (Currently Connected to " + g_CONNECTED_To_IP_Address$ + ")"
    else
      CConsl_ADV$(3, 4) = "DISCONNECT from the server (Currently Disconnected)"
    endif
    
  `MENU 4
  CConsl_ADV_Ttl(4) = 6
  CConsl_ADV$(4, 1) = "OTHER COMMANDS"
    if g_CMNDCONSL_Received_ServerVal_DS_LineThickness = -2 or g_server_connected <> 1
      CConsl_ADV$(4, 2) = "TOGGLE Server Drill Screen Line Thickness (No connection to server)" 
    else
      if g_CMNDCONSL_Received_ServerVal_DS_LineThickness = 1
        CConsl_ADV$(4, 2) = "TOGGLE Server Drill Screen Line Thickness (Current setting: Double)"
      else
        CConsl_ADV$(4, 2) = "TOGGLE Server Drill Screen Line Thickness (Current setting: Single)"
      endif
    endif
    if g_CMNDCONSL_Received_ServerVal_HS_LineThickness = -2 or g_server_connected <> 1
      CConsl_ADV$(4, 3) = "TOGGLE Server Historical Screen Line Thickness (No connection to server)"
    else
      if g_CMNDCONSL_Received_ServerVal_HS_LineThickness = 1
        CConsl_ADV$(4, 3) = "TOGGLE Server Historical Screen Line Thickness (Current setting: Double)"
      else
        CConsl_ADV$(4, 3) = "TOGGLE Server Historical Screen Line Thickness (Current setting: Single)"
      endif
    endif  
    
    if g_CMNDCONSL_Received_ServerVal_Display_DS_or_HS = -2 or g_server_connected <> 1
      CConsl_ADV$(4, 4) = "TOGGLE DISPLAY - Server Drilling Screen / Historical Screen (No connection to server)"
    else
      if g_CMNDCONSL_Received_ServerVal_Display_DS_or_HS = 1
        CConsl_ADV$(4, 4) = "TOGGLE DISPLAY - Server Drilling Screen / Historical Screen (Current Screen - Drill Screen)"
      else
        CConsl_ADV$(4, 4) = "TOGGLE DISPLAY - Server Drilling Screen / Historical Screen (Current Screen - Historical Screen)"
      endif
    endif  
    
    CConsl_ADV$(4, 5) = "DRILLSCREEN CHARTS - Plot Server Charts from current time"

    CConsl_ADV$(4, 6) = "SET RANGE - Set Server Upper or Lower Range Values on the Drilling Screen chart plots"

    if g_CMNDCONSL_Received_ServerVal_Display_MainScreen_Or_CMNDCONSL = -2 or  g_server_connected <> 1
      CConsl_ADV$(4, 7) = "TOGGLE Server Command Console Screen / Main Graphics Gcreen  (No connection to server)"
    else
      if g_CMNDCONSL_Received_ServerVal_Display_MainScreen_Or_CMNDCONSL = 1
        CConsl_ADV$(4, 7) = "TOGGLE Server Command Console Screen / Main Graphics Gcreen (Current Screen Type - Graphics Display)"
      else
        CConsl_ADV$(4, 7) = "TOGGLE Server Command Console Screen / Main Graphics Gcreen (Current Screen Type - Command Console)"
      endif
    endif  

  `MENU 5
  `CConsl_ADV_Ttl(5) = 1
  `CConsl_ADV$(5, 1) = "MESSAGING COMMANDS"
  `  CConsl_ADV$(5, 2) = "Send a message to the Network (" + "Last Rec Msg: " + g_Last_Msg_From_Server$ + ")"
    
  `MENU 5
  CConsl_ADV_Ttl(5) = 2
  CConsl_ADV$(5, 1) = "DIAGNOSTICS"
    CConsl_ADV$(5, 2) = "DIAGNOSTICS MODE ON - Diagnostic Connection; No Data SYNC."
    CConsl_ADV$(5, 3) = "DEBUG VARIABLES - View Program Internal Variables Screen for Debugging"
    
  `MENU 6
  CConsl_ADV_Ttl(6) = 1
  CConsl_ADV$(6, 1) = "REALTIME DISPLAY"
    if g_server_authorised_wits_transmission = 1
      if g_ENGINE_Screen_Resolution = 1
        CConsl_ADV$(6, 2) = "Show Drill Screen using realtime and display variables from the Server (Widescreen)"
      else
        CConsl_ADV$(6, 2) = "Show Drill Screen using realtime and display variables from the Server (1024x768)"
      endif
    else
      if g_ENGINE_Screen_Resolution = 1
        CConsl_ADV$(6, 2) = "Show Drill Screen using realtime and display variables from the local database (Widescreen)"
      else
        CConsl_ADV$(6, 2) = "Show Drill Screen using realtime and display variables from the local database (1024x768)"
      endif
    endif
    
  `MENU 7
  CConsl_ADV_Ttl(7) = 4
  CConsl_ADV$(7, 1) = "EDIT WELL DATA"
    CConsl_ADV$(7, 2) = "Edit - HOLE ID (Current Value: " + str$(WELLDATA_HoleID#, 3) + ")"
    CConsl_ADV$(7, 3) = "Edit - PIPE OD (Current Value: " + str$(WELLDATA_PipeOD#, 3) + ")"
    CConsl_ADV$(7, 4) = "Edit - PIPE ID (Current Value: " + str$(WELLDATA_PipeID#, 3) + ")"
    CConsl_ADV$(7, 5) = "Edit - Mud Motor Factor (Current Value - Revs per Gallon: " + str$(WELLDATA_MudMotorFactor_RevsGallon#, 3) + ")"

  `MENU 8
  CConsl_ADV_Ttl(8) = 1
  CConsl_ADV$(8, 1) = "SCREEN (FULLSCREEN / WINDOWED)"
    if g_Window_Fullscreen_Toggle = 1
      CConsl_ADV$(8, 2) = "Toggle Windowed/Fullscreen Mode (Currently: Windowed)"
    endif
    if g_Window_Fullscreen_Toggle = 2
      CConsl_ADV$(8, 2) = "Toggle Windowed/Fullscreen Mode (Currently: Fullscreen)"
    endif
    
  `MENU 9
  CConsl_ADV_Ttl(9) = 2
  CConsl_ADV$(9, 1) = "START A NEW WELL"
  
    if g_CMNDCONSL_ForceSTART_NEW_WELL = -99
      CConsl_ADV$(9, 2) = "Start a New Well (Option LOCKED. Please use the Unlock Option below)"
    endif
    if g_CMNDCONSL_ForceSTART_NEW_WELL = -1
      CConsl_ADV$(9, 2) = "Start a New Well"
    endif
    if g_CMNDCONSL_ForceSTART_NEW_WELL > -1
      CConsl_ADV$(9, 2) = "Start a New Well " + g_CMNDCONSL_ForceSTART_NEW_WELL_State$
    endif
    
    
    if g_CMNDCONSL_ForceSTART_Unlock = 1
      if g_server_connected = 1
        if g_server_authorised_wits_transmission = 1
          CConsl_ADV$(9, 3) = "UNLOCK: Start a New Well (Currently Locked)"
        else
          CConsl_ADV$(9, 3) = "UNLOCK: Start a New Well (LOCKED: No Permission from Server)"
        endif
      else
        CConsl_ADV$(9, 3) = "UNLOCK: Start a New Well (No Connection to the Server)"
      endif
    endif
    if g_CMNDCONSL_ForceSTART_Unlock = 2
      CConsl_ADV$(9, 3) = "UNLOCK: Start a New Well " + g_CMNDCONSL_ForceSTART_UnlockSTR$
    endif
    
  `MENU 10
  CConsl_ADV_Ttl(10) = 1
  CConsl_ADV$(10, 1) = "EXPORT TIME DATA"
    CConsl_ADV$(10, 2) = "Export Time Data"


    
 endfunction

function COMMAND_CONSOLE()

  local f_EnterKey_Pressed as integer : f_EnterKey_Pressed = -1

  Command_Console_Setup_ENGINE()
  Command_Console_Input()
  
  l_wdth_prnt = screen width() * 0.05 : sp = 0
  
  

  d3d_starttext
  
    if g_MAIN_SCREEN_TYPE <> 1000
      lib_CmndCons_Display_Menu()
      `lib_Display_Menu()
    else
      lib_Disp_RT_Display_Menu()
    endif 
    
  

    if g_TIMER_1 > g_COMMANDCONSOLE_Flash_Timer
      g_COMMANDCONSOLE_Flash_Timer = g_TIMER_1 + 1
      if g_COMMANDCONSOLE_Flash_Toggle = -1
        g_COMMANDCONSOLE_Flash_Toggle = 1
      else
        g_COMMANDCONSOLE_Flash_Toggle = -1
      endif
    endif
    
    
    
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
    inc sp,38
    
    paste sprite c_SPRITE_CmndConsol_Bkgd, l_wdth_prnt - 10, sp - 10
    
    if g_COMMANDCONSOLE_Flash_Toggle = -1
      d3d_text 2, l_wdth_prnt, sp, 0, "COMMAND CONSOLE"
    else
      d3d_text 2, l_wdth_prnt, sp, 0, "COMMAND CONSOLE   (Press F12 to exit)"
    endif
    
    inc sp, 19 * 2

    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "  MENU (Select an option using the cursor keys and Enter)"
    inc sp,19
    
    
    for menu_lp = 1 to g_CConsl_ADV_Lvl1_TotalMenus
    
      d3d_color 255, 255, 255, 255
      inc sp,21 : d3d_text 1, l_wdth_prnt, sp, 0, "    " + CConsl_ADV$(menu_lp, 1)

        if g_CConsl_ADV_Lvl1 = menu_lp
          if g_CConsl_ADV_Lvl2 = 1
            l_text_length = d3d_gettextwidth(1, CConsl_ADV$(g_CConsl_ADV_Lvl1, 1)) + 30
            d3d_box l_wdth_prnt + 13, sp - 2, l_wdth_prnt + l_text_length, sp + 18, rgb(70, 70, 70)
          else
            l_text_length = d3d_gettextwidth(1, CConsl_ADV$(g_CConsl_ADV_Lvl1, g_CConsl_ADV_Lvl2a + 1)) + 40
            offset_y = g_CConsl_ADV_Lvl2a * 21
            d3d_box l_wdth_prnt + 13, offset_y + sp - 2, l_wdth_prnt + l_text_length, offset_y + sp + 18, rgb(70, 70, 70)
          endif
          d3d_color 198, 198, 198, 255
          for cmnd_lp = 2 to CConsl_ADV_Ttl(g_CConsl_ADV_Lvl1) + 1
            inc sp,21 : d3d_text 1, l_wdth_prnt, sp, 0, "      - " + CConsl_ADV$(menu_lp, cmnd_lp)
          next cmnd_lp
        endif
    
    next menu_lp

  d3d_endtext
  
  d3d_color 255, 255, 255, 255
  
  if g_CMNDCONSL_CommandINPUT_ToggleON = -1
    if lib_Enter_Pressed(9206) = 1 and g_CConsl_ADV_Lvl2 = 2
      if g_ENGINE_CoreFunctionType = 1
        CMND_CNSL_Command_Library_VIEWER(g_CConsl_ADV_Lvl1, g_CConsl_ADV_Lvl2a)
      endif
      if g_ENGINE_CoreFunctionType = 2
        CMND_CNSL_Command_Library_MUDLOGGING(g_CConsl_ADV_Lvl1, g_CConsl_ADV_Lvl2a)
      endif
    endif
  endif
  
  
  `Display the screen info showing that the command was run, then fade after 3 seconds
  if g_COMMANDCONSOLE_CommandActivatedSwitch = 1
    l_wdth_prnt = screen width() * 0.05
    d3d_starttext
    
      if g_ENGINE_Alpha_Available = 1
        d3d_color 230, 230, 230, g_COMMANDCONSOLE_Report_Alpha
        d3d_text 2, l_wdth_prnt, g_CMNDCON_Report_PrintY, 0, "   Command Activated : "
        d3d_color 200, 200, 200, g_COMMANDCONSOLE_Report_AlphaCMND
        d3d_text 2, l_wdth_prnt + 160, g_CMNDCON_Report_PrintY, 0, g_COMMANDCONSOLE_CommandReport1$
      else
        d3d_color 210, 210, 210, 255
        d3d_text 1, l_wdth_prnt, g_CMNDCON_Report_PrintY, 0, "   Command Activated : " + g_COMMANDCONSOLE_CommandReport1$
      endif 
      
      if g_Last_Msg_From_Server$ <> ""
        inc g_CMNDCON_Report_PrintY, 21
        d3d_text 1, l_wdth_prnt, g_CMNDCON_Report_PrintY, 0, "       (Server response > " + g_Last_Msg_From_Server$ + ")"
      endif
      
    d3d_endtext
    
    

    
      `INPUT - New Server IP Address
      if g_CMNDCONSL_CommandINPUT_Toggle_NewServerIPAddress = 1
        g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer : `Stop the command report from fading
        lib_CMND_CNSL_Request_Input(sp, "Input a new server IP Address")
      endif
      `INPUT - New Server Port
      if g_CMNDCONSL_CommandINPUT_Toggle_NewServerPort = 1
        g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer
        lib_CMND_CNSL_Request_Input(sp, "Input a new server Port")
      endif
      `INPUT - Change a channel range on the server graphics drilling screen
      if g_CMNDCONSL_CommandINPUT_Toggle_ChannelRange = 1
        g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer
        lib_CMND_CNSL_Request_Input_RangeEdit(sp)
      endif
      `INPUT - Enter a message to transmit to the server for communications
      `if g_CMNDCONSL_CommandINPUT_Toggle_MessageON = 1
      `  g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer
      `  lib_CMND_CNSL_Request_Input(sp, "Enter a message to send to the server")
      `endif
      `INPUT - WELL DATA
      if g_CMNDCONSL_CommandINPUT_Toggle_WELLDATA_Input = 1
        g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer : `Stop the command report from fading
        if g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = 1
          lib_CMND_CNSL_Request_Input(sp, "[Well Data] Input new Well ID")
        endif
        if g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = 2
          lib_CMND_CNSL_Request_Input(sp, "[Well Data] Input new Pipe OD")
        endif
        if g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = 3
          lib_CMND_CNSL_Request_Input(sp, "[Well Data] Input new Pipe ID")
        endif
        if g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = 4
          lib_CMND_CNSL_Request_Input(sp, "[Well Data] Input new Mud Motor Factor")
        endif
      endif
    
    if g_TIMER_1 > g_COMMANDCONSOLE_Report_Timer
      dec g_COMMANDCONSOLE_Report_Alpha, 1
        dec g_COMMANDCONSOLE_Report_AlphaCMND, 1
        if g_COMMANDCONSOLE_Report_AlphaCMND > 200
          g_COMMANDCONSOLE_Report_Alpha = 255
        endif
        if g_COMMANDCONSOLE_Report_AlphaCMND < 0
          g_COMMANDCONSOLE_Report_AlphaCMND = 0
        endif  
      if g_COMMANDCONSOLE_Report_Alpha < 0
        g_COMMANDCONSOLE_CommandActivatedSwitch = -1
      endif
    endif
    
    d3d_color 255, 255, 255, 255
  
  endif
  

endfunction


function Command_Console_Input()

  `This function controls the F12, Escape and cursor keys for controlling the command console

  `[F8] - Connect to server if option available
  if keystate(66)= 1 and key_state(66,0)= 0
    if g_server_connected = 0
      g_connection_attempt_ATTEMPT_NOW = 1
      g_connection_attempt_counter = 0
    endif
    key_state(66,0)=1
  endif
  if keystate(66)=0 and key_state(66,0)=1 then key_state(66,0)=0
  
  `[F12] - Toggle Command Console
  if keystate(88)= 1 and key_state(88,0)= 0
    if g_COMMANDCONSOLE_Active = 1
      `Turn the command console off
      g_COMMANDCONSOLE_Active = 0
      `Reset all command console variables
      lib_CMND_CNSL_Deactivate()
    else
      g_COMMANDCONSOLE_Toggle = 1
      g_CMND_CONSL_ServerSettings_Received = -1
      g_CMNDCONSL_ServerRange_Stage = 1
      g_CMNDCONSL_ServerRange_UpperLower_Type = 1
    endif
    key_state(88,0)=1
  endif
  if keystate(88)=0 and key_state(88,0)=1
    key_state(88,0)=0
    g_COMMANDCONSOLE_Toggle = 0
  endif
  
  `[ESC] - EXITS THE COMMAND CONSOLE
  if g_EXIT_Client_Toggle = -1
    if keystate(1)= 1 and key_state(1,0) = 0
      key_state(1,0)=1
      g_ENGINELOGIN_ESCToggle = 1
      if g_COMMANDCONSOLE_Active = 0
        `From the Command Console ESC Pressed. Turn the RT Display back ON. SUSPECT NEVER RUNS
        `g_EXIT_Client_Toggle = 1
        `g_RTDispEXITBOX_HighlightYorN = -1
        `g_RTDispEXITBOX_PosX = g_ENG_Half_Screen_Width - g_SPRITE_ExitBox_Half_Width
        `g_RTDispEXITBOX_PosY = g_ENG_Half_Screen_Height - g_SPRITE_ExitBox_Half_Height
        lib_Activate_RTGraphicsDisplay()
      endif
      if g_COMMANDCONSOLE_Active = 1
        if g_COMMANDCONSOLE_CommandActivatedSwitch = 1
          lib_CMND_CNSL_Deactivate()
        else
          `Turn the command console off
          g_COMMANDCONSOLE_Active = 0
          `Reset all command console variables
          lib_CMND_CNSL_Deactivate()
        endif
      endif
    endif
    if keystate(1)=0 and key_state(1,0)=1 then key_state(1,0)=0
  endif
  
  
  if g_CMNDCONSL_CommandINPUT_ToggleON = -1
    `[LEFT Cursor]
    if keystate(203)= 1 and key_state(203,0)= 0
      if g_CConsl_ADV_Lvl2 > 1
        dec g_CConsl_ADV_Lvl2, 1
      endif
      key_state(203,0)=1
    endif
    if keystate(203)=0 and key_state(203,0)=1 then key_state(203,0)=0
    `[RIGHT Cursor]
    if keystate(205)= 1 and key_state(205,0)= 0
      if g_CConsl_ADV_Lvl2 < 2
        inc g_CConsl_ADV_Lvl2, 1
        g_CConsl_ADV_Lvl2a = 1
      endif
      key_state(205,0)=1
    endif
    if keystate(205)=0 and key_state(205,0)=1 then key_state(205,0)=0
    `[UP Cursor]
    if keystate(200)= 1 and key_state(200,0)= 0
      if g_CConsl_ADV_Lvl2 = 1
        if g_CConsl_ADV_Lvl1 > 1
          dec g_CConsl_ADV_Lvl1, 1
        endif
      else
        if g_CConsl_ADV_Lvl2a > 1
          dec g_CConsl_ADV_Lvl2a, 1
        endif
      endif
      key_state(200,0)=1
    endif
    if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
    `[DOWN Cursor]
    if keystate(208)= 1 and key_state(208,0)= 0
      if g_CConsl_ADV_Lvl2 = 1
        if g_CConsl_ADV_Lvl1 < g_CConsl_ADV_Lvl1_TotalMenus
          inc g_CConsl_ADV_Lvl1, 1
        endif
      else
        if g_CConsl_ADV_Lvl2a < CConsl_ADV_Ttl(g_CConsl_ADV_Lvl1)
          inc g_CConsl_ADV_Lvl2a, 1
        endif
      endif
      key_state(208,0)=1
    endif
    if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
  endif

endfunction

function lib_CMND_CNSL_Deactivate()

  g_COMMANDCONSOLE_CommandActivatedSwitch = -1
  
  
  g_CMNDCONSL_ServerRange_Stage = 1
  g_CMNDCONSL_CommandINPUT_Toggle_ChannelRange = -1
  
  g_CMNDCONSL_CommandINPUT_ToggleON = -1
  g_CMNDCONSL_CommandINPUT_Toggle_NewServerIPAddress = -1
  g_CMNDCONSL_CommandINPUT_Toggle_NewServerPort = -1
  `g_CMNDCONSL_CommandINPUT_Toggle_MessageON = -1
  g_CMNDCONSL_CommandINPUT_Toggle_ReSYNC = -1
  g_CMNDCONSL_CommandINPUT_Toggle_WELLDATA_Input = -1
  g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = -1

endfunction

function CMND_CNSL_Command_Library_VIEWER(r_Index_1, r_Index_2)

  local l_net_connected_test as integer
  

  `This function contains all the command console library command functions.
  `It receives the two array index's corresponding with the position in the command console menu
  
  g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer
  g_COMMANDCONSOLE_Report_Alpha = 255
  clear entry buffer

  `********** MENU GROUP 1 - Client Commands
  if r_Index_1 = 1
    `TOGGLE - Automatic Reconnect
    if r_Index_2 = 1
      if g_AUTO_CONNECT_ON = 1
        g_AUTO_CONNECT_ON = -1
        SAVE_Engine_Setup()
        lib_Activate_CMNDCON_CmndInfo("Client Automatic Reconnect - DISABLED")
      else
        g_AUTO_CONNECT_ON = 1
        SAVE_Engine_Setup()
        g_connection_attempt_counter = g_connection_attempt_interval
        l_Build8ha$ = "Client Automatic Reconnect - ENABLED (Will attempt every " + str$(g_connection_attempt_interval) + " seconds)"
        lib_Activate_CMNDCON_CmndInfo(l_Build8ha$)
        
      endif
    endif
  endif
  
  `********** MENU GROUP 2 - Internet Related Commands
  if r_Index_1 = 2
    `INPUT New Server IP Address
    if r_Index_2 = 1
      g_CMNDCONSL_CommandINPUT_ToggleON = 1
      g_ENGINE_Input$ = ""
      g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H + c_CMND_CONSL_FlashTimer
      g_COMMANDCONSOLE_InputFlash_Toggle = 1
      g_CMNDCONSL_CommandINPUT_Toggle_NewServerIPAddress = 1
      lib_Activate_CMNDCON_CmndInfo("INPUT NEW SERVER IP ADDRESS> Run")
    endif
    `INPUT New Server Port
    if r_Index_2 = 2
      g_CMNDCONSL_CommandINPUT_ToggleON = 1
      g_ENGINE_Input$ = ""
      g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H + c_CMND_CONSL_FlashTimer
      g_COMMANDCONSOLE_InputFlash_Toggle = 1
      g_CMNDCONSL_CommandINPUT_Toggle_NewServerPort = 1
      lib_Activate_CMNDCON_CmndInfo("INPUT NEW SERVER PORT> Run")
    endif
    `DISCONNECT from the server (This is the Viewer Mode Code)
    if r_Index_2 = 3
      l_net_connected_test = net connected()
      if l_net_connected_test = 1
        lib_EXIT_Disconnect_Server()
        lib_Activate_CMNDCON_CmndInfo("Disconnect Command> Connection to Server Disengaged")
      else
        lib_Activate_CMNDCON_CmndInfo("Disconnect Command> You are not connected to the Server")
      endif
    endif
  endif
  
  `********** MENU GROUP 3 - Other Commands
  if r_Index_1 = 3
    `Toggle Drillscreen Line Thickness
    if r_Index_2 = 1
      net send 0 : `Clear the message queue
      `Add the identifier
        net put long 603
      ``Add Authorisation Code, to ensure no error in communication
        net put long 57296
      `Send the message to the host server
        net send
        inc g_ENG_DataTransfer_Total, 2048
        lib_Activate_CMNDCON_CmndInfo("TOGGLE DRILL SCREEN LINE THICKNESS> Run")
    endif
    `Toggle Historical Screen Line Thickness
    if r_Index_2 = 2
      net send 0 : `Clear the message queue
      `Add the identifier
        net put long 604
      ``Add Authorisation Code, to ensure no error in communication
        net put long 32886
      `Send the message to the host server
        net send
        inc g_ENG_DataTransfer_Total, 2048
        lib_Activate_CMNDCON_CmndInfo("TOGGLE HISTORICAL SCREEN LINE THICKNESS> Run")
    endif
    `Toggle Main Screen Type
    if r_Index_2 = 3
      net send 0 : `Clear the message queue
      `Add the identifier
        net put long 605
      ``Add Authorisation Code, to ensure no error in communication
        net put long 74477
      `Send the message to the host server
        net send
        inc g_ENG_DataTransfer_Total, 2048
        lib_Activate_CMNDCON_CmndInfo("TOGGLE MAIN DISPLAY SCREEN> Run")
    endif
    `Zero DS time plotting offset
    if r_Index_2 = 4
      net send 0 : `Clear the message queue
      `Add the identifier
        net put long 606
      ``Add Authorisation Code, to ensure no error in communication
        net put long 28652
      `Send the message to the host server
        net send
        inc g_ENG_DataTransfer_Total, 2048
        lib_Activate_CMNDCON_CmndInfo("DRILLING SCREEN TIME OFFSET ZERO> Run")
    endif
    `Change the range of a channel on the server graphics drilling screen
    if r_Index_2 = 5
      g_CMNDCONSL_CommandINPUT_ToggleON = 1
      lib_Activate_CMNDCON_CmndInfo("CHANNEL RANGE EDITING - SERVER DRILL SCREEN> Run")
      g_CMNDCONSL_CommandINPUT_ToggleON_RangeEdit = 1
      g_CMNDCONSL_CommandINPUT_Toggle_ChannelRange = 1
      g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H + c_CMND_CONSL_FlashTimer
      g_COMMANDCONSOLE_InputFlash_Toggle = 1
    endif
    `Toggle Server between server Main Graphics screen and server Command Console screen
    if r_Index_2 = 6
      net send 0 : `Clear the message queue
      `Add the identifier
        net put long 608
      ``Add Authorisation Code, to ensure no error in communication
        net put long 83562
      `Send the message to the host server
        net send
        inc g_ENG_DataTransfer_Total, 2048
        lib_Activate_CMNDCON_CmndInfo("TOGGLE SERVER COMMAND CONSOLE SCREEN> Run")
    endif
  endif 

  `********** MENU GROUP 4 - Realtime Display Commands
  if r_Index_1 = 4
    `Display Realtime Graphics Screen
    if r_Index_2 = 1
        g_MAIN_SCREEN_TYPE = 1000
        g_COMMANDCONSOLE_Active = 0
        lib_CMND_CNSL_Deactivate()
        lib_Disp_RT_STARTUP()
      if g_ENGINE_Screen_Resolution = 1
        lib_Activate_CMNDCON_CmndInfo("Realtime Display: Widescreen.")
      else
        lib_Activate_CMNDCON_CmndInfo("Realtime Display: 1024x768.")
      endif
    endif
  endif
  
  
  `********** MENU GROUP 5 - Screen Layout Commands
  if r_Index_1 = 5
    if r_Index_2 = 1
      if g_Window_Fullscreen_Toggle = 1
        lib_SetScreen_Windowed_FullScreen_p1or2(2)
      else
        lib_SetScreen_Windowed_FullScreen_p1or2(1)
      endif   
      lib_Activate_CMNDCON_CmndInfo("Toggle WINDOWED/FULLSCREEN Mode > Run")
    endif
  endif

endfunction


function CMND_CNSL_Command_Library_MUDLOGGING(r_Index_1, r_Index_2)

  local l_net_connected_test as integer
  local l_net_connected_test_final as integer
  
  local l_LogFileBuildStr$ as string
  local l_LOG_NewHDFile_FileSize as integer
  local l_LOG_NewHDFile_TotalRecs# as float
  
  local l_day$ as string
  local l_month$ as string
  local l_year$ as string
  local l_hours$ as string
  local l_minutes$ as string
  local l_date$ as string
  local l_time$ as string
  local f_filename$ as string
  local l_dest$ as string

  `This function contains all the command console library command functions.
  `It receives the two array index's corresponding with the position in the command console menu
  
  g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer
  g_COMMANDCONSOLE_Report_Alpha = 255
  clear entry buffer

  `********** MENU GROUP 1 - Client Commands
  if r_Index_1 = 1
    
    `Reinitialise Serial Port
    if r_Index_2 = 1
      l_ClosePort_Result = lib_Close_Serial_Port(g_hPort)
      if l_ClosePort_Result = 0
        if g_SERIALPORT_ACTIVE = -1
          lib_Activate_CMNDCON_CmndInfo("Restart Port: ERROR: NO PORT ACTIVE TO UNMOUNT")
        else
          lib_Activate_CMNDCON_CmndInfo("Restart Port: ERROR: Unable to remove the port. Try again.")
        endif
      else
        g_SERIALPORT_ACTIVE = -1
        g_SERIALPORT_ACTIVE_ID$ = ""
        l_RestartPort_Result = Kernel32_PORT_Setup(g_SERIALPORT_Port_Name$)
        if l_RestartPort_Result = 0
          lib_Activate_CMNDCON_CmndInfo("Restart Port: ERROR: Port Deleted, Unable to recreate port")
        else
          lib_Activate_CMNDCON_CmndInfo("Restart Port: SUCCESS, port re-initiated")
          g_hPort = l_RestartPort_Result
        endif
      endif
    endif
    
    `TOGGLE - Automatic Reconnect
    if r_Index_2 = 2
      if g_AUTO_CONNECT_ON = 1
        g_AUTO_CONNECT_ON = -1
        SAVE_Engine_Setup()
        lib_Activate_CMNDCON_CmndInfo("Client Automatic Reconnect - DISABLED")
      else
        g_AUTO_CONNECT_ON = 1
        SAVE_Engine_Setup()
        g_connection_attempt_counter = g_connection_attempt_interval
        l_Build8ha$ = "Client Automatic Reconnect - ENABLED (Will attempt every " + str$(g_connection_attempt_interval) + " seconds)"
        lib_Activate_CMNDCON_CmndInfo(l_Build8ha$)
        
      endif
    endif
    
    `Backup the Local Harddisk (Client) Database file
    `BACKUP From: CMND CONSOL (HD DB Copy + MEM DB Write)
    
    if r_Index_2 = 3
      if file exist(g_CLIENT_Database_Full_Path$) = 1
        lib_ARS_Start_New_Report("Backup Local HD Database", -1)
        ARS_LOCAL_Add_Report("Local Database Backup > Running", -1)
        l_day$ = right$(left$(get date$(), 5), 2)
        l_month$ = left$(get date$(), 2)
        l_year$ =  right$(get date$(), 2)
        l_hours$ = left$(get time$(), 2)
        l_minutes$ = right$(left$(get time$(), 5), 2)
        l_date$  = l_day$ + l_month$ + l_year$
        l_time$ = l_hours$ + l_minutes$
        f_filename$ = "BackupDB_" + l_date$ + "_" + l_time$ + ".dat"
        
        `OLD: Delete: l_dest$ = g_autodir_full_directory_path$ + "\Database\" + f_filename$
        l_dest$ = g_autodir_full_directory_path$ + "\Database\DB Backups\" + f_filename$
        
      	lib_LOG_FILE_Backup_Information("  ")
      	lib_LOG_FILE_Backup_Information("**** NEW BACKUP at " + get time$() + " / " + l_date$ + " ****")
      	lib_LOG_FILE_Backup_Information("  + ** NEW HD BACKUP (A Copy of the HD DB file) **")
      	lib_LOG_FILE_Backup_Information("  + Requested via the Command Console")
    		l_LogFileBuildStr$ = "  + Variable: g_DATABASE_HD_Total_Num_Records: " + str$(g_DATABASE_HD_Total_Num_Records)
    		lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        
        
        if file exist(l_dest$) = 0
          `1. Create a copy of the HD DB File
          	copy file g_CLIENT_Database_Full_Path$, l_dest$
          	if file exist(l_dest$) = 1
            	l_BuildFnm$ = "Local Database Backup > Successful (Filename : " + f_filename$ + ")"
            	lib_Activate_CMNDCON_CmndInfo(l_BuildFnm$)
            	ARS_LOCAL_Add_Report_and_Complete(l_BuildFnm$, -1)
        			`
        			l_LogFileBuildStr$ = "  + HD DB : Successful > HD File Copy Created"
        			lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        			`
        			l_LogFileBuildStr$ = "  + Filename: " + l_dest$
        			lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
          		`    	
        			l_LOG_NewHDFile_FileSize = file size(l_dest$)
        			l_LOG_NewHDFile_TotalRecs# = (l_LOG_NewHDFile_FileSize + 0.0) / c_DATABASE_Bytes_Per_Record
        			l_LogFileBuildStr$ = "  + HD DB :   - File Size: " + str$(l_LOG_NewHDFile_FileSize) + "KB     Total Records: " + str$(l_LOG_NewHDFile_TotalRecs#, 2)
        			lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        			`
          	else
            	lib_Activate_CMNDCON_CmndInfo("Local Database Backup > ERROR: Database backup failed")
            	ARS_LOCAL_Add_Report_and_Complete("Local Database Backup > ERROR: Database backup failed", -1)
            	lib_LOG_FILE_Backup_Information("   + HD DB : Failed > HD File not found after copy operation")
          	endif
          `2. Write a copy of the MEM DB File
            lib_Database_MEM_WriteHDBackup("Arrived at from: 'Command Console' Request")
          `
        else
          lib_Activate_CMNDCON_CmndInfo("Database BACKUP > ERROR: The backup file already exists")
          ARS_LOCAL_Add_Report_and_Complete("Database BACKUP > ERROR: The backup file already exists", -1)
        endif
      else
        lib_Activate_CMNDCON_CmndInfo("Database BACKUP > ERROR: Main Database file not found.")
        ARS_LOCAL_Add_Report_and_Complete("Database BACKUP > ERROR: Main Database file not found.", -1)
      endif
    endif
    
    `Toggle SYNC ENGINE
    if r_Index_2 = 4
      if g_server_relationship_code = 1001
        if g_SYNC_Engine_Active = 1
          g_SYNC_Engine_Active = -1
        else
          g_SYNC_Engine_Active = 1
        endif
        lib_Activate_CMNDCON_CmndInfo("TOGGLE CLIENT SYNC ENGINE> Run")
      else
        lib_Activate_CMNDCON_CmndInfo("TOGGLE CLIENT SYNC ENGINE> DENIED [No Server Permisison to SYNC]")
      endif  
    endif
    
    `Toggle Engine Logging
    if r_Index_2 = 5
      if g_ENG_Logging_Active = 1
        g_ENG_Logging_Active = -1
      else
        g_ENG_Logging_Active = 1
      endif
      lib_Activate_CMNDCON_CmndInfo("TOGGLE CLIENT DATA LOGGING> Run")
    endif
    
    `Format the LOCAL HD Database using the LOCAL MEM Database
    if r_Index_2 = 6
      lib_ARS_Start_New_Report("Format Local HD Database", -1)
      ARS_LOCAL_Add_Report("Format Local HD Database > Running", -1)
      lib_AUClient_RECREATE_HD_Database(-9999)
    endif
    
    `Toggle Network Units.
  `  This works by changing the local units and, if connected, asking the server to change its units.
  `  The server will then send its new, swapped over, units back, which will overwrite the 
  `  local units. This means that the client and the server will be synced, but means the
  `  local units can still be changed.
    if r_Index_2 = 7
      lib_AUClient_ToggleNetworkUnits()
    endif
    
    if r_Index_2 = 8
      lib_USERINPUT_DB_MEM_Ttl_Num_Records()  
    endif
    
    if r_Index_2 = 9
      lib_USERINPUT_ROP_DepthInterval()  
    endif
    
    if r_Index_2 = 10
      lib_USERINPUT_ChangeAChannelName()
    endif
    
    if r_Index_2 = 11
      lib_USERINPUT_LagDepth_DisplayAndAdjust()
    endif
    
  endif
  
  `********** MENU GROUP 2 - Server Commands
  if r_Index_1 = 2
  
    `UNLOCK SERVER DATABASE
    if r_Index_2 = 1
      net send 0 : `Clear the message queue
      lib_ARS_Start_New_Report("Unlock Server Database", 1)
      `Add the identifier
        net put long 601
      `Add Authorisation Code, to ensure no error in communication
        net put long 67309
      `Send the message to the host server
        net send all
        lib_ARS_RequestSentMsg("Unlock Server Database")
        inc g_ENG_DataTransfer_Total, 2048
        lib_Activate_CMNDCON_CmndInfo("Server HD Database UNLOCK Command> Run")
        g_Last_Msg_From_Server$ = "No reply from the Server"
    endif
    
    `DELETE SERVER THE DATABASE
    if r_Index_2 = 2
      net send 0 : `Clear the message queue
      lib_ARS_Start_New_Report("Delete Server Database", 1)
      `Add the identifier
        net put long 602
      ``Add Authorisation Code, to ensure no error in communication
        net put long 53981
      `Send the message to the host server
        net send all
        lib_ARS_RequestSentMsg("Delete Server Database")
        inc g_ENG_DataTransfer_Total, 2048
        lib_Activate_CMNDCON_CmndInfo("Server Database DELETION Command> Run")
        g_Last_Msg_From_Server$ = "No reply from the Server"
    endif
    
    `Request that the Server perform a Database BACKUP
    if r_Index_2 = 3
      lib_ARS_Start_New_Report("Backup Server Database", 1)
      lib_Activate_CMNDCON_CmndInfo("Server Database BACKUP Command> Run")
      g_Last_Msg_From_Server$ = "No reply from the Server"
      net send 0
      net put long 555
      net put long 15274
      net send all
      lib_ARS_RequestSentMsg("Backup Server Database")
      inc g_ENG_DataTransfer_Total, 2048
    endif
    
    `Format the Server HD DB using the Server LOCAL MEM DB
    if r_Index_2 = 4
      lib_ARS_Start_New_Report("Format Server Database", 1)
      lib_Activate_CMNDCON_CmndInfo("Server Format HD Database from MEM Database> Run")
      g_Last_Msg_From_Server$ = "No reply from the Server"
      net send 0
      net put long 556
      net put long 32749
      net send all
      lib_ARS_RequestSentMsg("Format Server Database")
      inc g_ENG_DataTransfer_Total, 2048
    endif
    
    `ReSYNC the Server & Client Record Sync List/Record State (MEM_MAIN_DATABASE(xxxx).Record_Syncd fields)
    if r_Index_2 = 5
      lib_ARS_Start_New_Report("Re-SYNC Client/Server SYNC DB", 1)
      lib_Activate_CMNDCON_CmndInfo("Re-SYNC Client/Server SYNC DB> Run")
      g_Last_Msg_From_Server$ = "No reply from the Server"
      net send 0
      net put long 702
      net put long 81542
      net send all
      lib_ARS_RequestSentMsg("Re-SYNC Client/Server SYNC DB")
      inc g_ENG_DataTransfer_Total, 2048
    endif
    
  endif
  
  `--------------------------------------------------------------------------------------------------
  
  `********** MENU GROUP 3 - Internet Related Commands
  if r_Index_1 = 3
    `INPUT New Server IP Address
    if r_Index_2 = 1
      g_CMNDCONSL_CommandINPUT_ToggleON = 1
      g_ENGINE_Input$ = ""
      g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H + c_CMND_CONSL_FlashTimer
      g_COMMANDCONSOLE_InputFlash_Toggle = 1
      g_CMNDCONSL_CommandINPUT_Toggle_NewServerIPAddress = 1
      lib_Activate_CMNDCON_CmndInfo("INPUT NEW SERVER IP ADDRESS> Run")
    endif
    `INPUT New Server Port
    if r_Index_2 = 2
      g_CMNDCONSL_CommandINPUT_ToggleON = 1
      g_ENGINE_Input$ = ""
      g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H + c_CMND_CONSL_FlashTimer
      g_COMMANDCONSOLE_InputFlash_Toggle = 1
      g_CMNDCONSL_CommandINPUT_Toggle_NewServerPort = 1
      lib_Activate_CMNDCON_CmndInfo("INPUT NEW SERVER PORT> Run")
    endif
    `DISCONNECT from the server (Mudlogging Mode Code)
    if r_Index_2 = 3
      l_net_connected_test = net connected()
      if l_net_connected_test = 1
        lib_ARS_Start_New_Report("Disconnect From Server", -1)
        lib_EXIT_Disconnect_Server()
        lib_Activate_CMNDCON_CmndInfo("Disconnect Command> Connection to Server Disengaged")
        ARS_LOCAL_Add_Report("Disconnect> SUCCESS. Connection to Server Disengaged", -1)
          `Re-Test Connection State and Report - Just in case.
          l_net_connected_test_final = net connected()
          if l_net_connected_test_final = 1
            ARS_LOCAL_Add_Report("Disconnect> FINAL TEST > FAILED - STILL CONNECTED", -1)
          else
            ARS_LOCAL_Add_Report("Disconnect> FINAL TEST > OK - NOT CONNECTED", -1)
            
    				g_connection_attempt_timer = g_TIMER_1
    				g_connection_attempt_counter = g_connection_attempt_interval
    				g_server_connected = 0
    				`g_Relationship_Request_Timer = timer()
    				g_server_relationship_data_received = -1
    				`g_connection_attempt_total_time = timer()
    				`g_Establish_Relationship_Timer = timer()
    				
    				g_connection_attempt_ATTEMPT_NOW = -1
            
            g_SYNC_Engine_Active = -1
            
          endif
      else
        lib_Activate_CMNDCON_CmndInfo("Disconnect Command> You are not connected to the Server")
        lib_ARS_Start_New_Report("Disconnect From Server", -1)
        ARS_LOCAL_Add_Report("Disconnect> FAILED. You are not connected to the Server", -1)
      endif
    endif
  endif
  
  `********** MENU GROUP 4 - Other Commands
  if r_Index_1 = 4
    `Toggle Drillscreen Line Thickness
    if r_Index_2 = 1
      net send 0 : `Clear the message queue
      `Add the identifier
        net put long 603
      ``Add Authorisation Code, to ensure no error in communication
        net put long 57296
      `Send the message to the host server
        net send
        inc g_ENG_DataTransfer_Total, 2048
        lib_Activate_CMNDCON_CmndInfo("TOGGLE DRILL SCREEN LINE THICKNESS> Run")
    endif
    `Toggle Historical Screen Line Thickness
    if r_Index_2 = 2
      net send 0 : `Clear the message queue
      `Add the identifier
        net put long 604
      ``Add Authorisation Code, to ensure no error in communication
        net put long 32886
      `Send the message to the host server
        net send
        inc g_ENG_DataTransfer_Total, 2048
        lib_Activate_CMNDCON_CmndInfo("TOGGLE HISTORICAL SCREEN LINE THICKNESS> Run")
    endif
    `Toggle Main Screen Type
    if r_Index_2 = 3
      net send 0 : `Clear the message queue
      `Add the identifier
        net put long 605
      ``Add Authorisation Code, to ensure no error in communication
        net put long 74477
      `Send the message to the host server
        net send
        inc g_ENG_DataTransfer_Total, 2048
        lib_Activate_CMNDCON_CmndInfo("TOGGLE MAIN DISPLAY SCREEN> Run")
    endif
    `Zero DS time plotting offset
    if r_Index_2 = 4
      net send 0 : `Clear the message queue
      `Add the identifier
        net put long 606
      ``Add Authorisation Code, to ensure no error in communication
        net put long 28652
      `Send the message to the host server
        net send
        inc g_ENG_DataTransfer_Total, 2048
        lib_Activate_CMNDCON_CmndInfo("DRILLING SCREEN TIME OFFSET ZERO> Run")
    endif
    
    `Change the range of a channel on the server graphics drilling screen
    if r_Index_2 = 5
      g_CMNDCONSL_CommandINPUT_ToggleON = 1
      lib_Activate_CMNDCON_CmndInfo("CHANNEL RANGE EDITING - SERVER DRILL SCREEN> Run")
      g_CMNDCONSL_CommandINPUT_ToggleON_RangeEdit = 1
      g_CMNDCONSL_CommandINPUT_Toggle_ChannelRange = 1
      g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H + c_CMND_CONSL_FlashTimer
      g_COMMANDCONSOLE_InputFlash_Toggle = 1
    endif
    
    `Toggle Server between server Main Graphics screen and server Command Console screen
    if r_Index_2 = 6
      net send 0 : `Clear the message queue
      `Add the identifier
        net put long 608
      ``Add Authorisation Code, to ensure no error in communication
        net put long 83562
      `Send the message to the host server
        net send
        inc g_ENG_DataTransfer_Total, 2048
        lib_Activate_CMNDCON_CmndInfo("TOGGLE SERVER COMMAND CONSOLE SCREEN> Run")
    endif
  endif
    
  `********** MENU GROUP 5 - Diagnostic Commands
  if r_Index_1 = 5
    `DIAGNOSTICS MODE ON
    if r_Index_2 = 1
     if g_SPYMODE_ACTIVE = -1
       lib_SPYMODE_StartUp()
     endif    
    endif
    `DEBUG - View Program Internal Variables Screen
    if r_Index_2 = 2
      g_MAIN_SCREEN_TYPE = 50

      
      `Turn the command console off
      g_COMMANDCONSOLE_Active = 0
      `Reset all command console variables
      lib_CMND_CNSL_Deactivate()
      
    endif
  endif 
  
  `********** MENU GROUP 6 - Realtime Display Commands
  if r_Index_1 = 6
    `Display Realtime Graphics Screen
    if r_Index_2 = 1
        g_MAIN_SCREEN_TYPE = 1000
        g_COMMANDCONSOLE_Active = 0
        lib_CMND_CNSL_Deactivate()
        lib_Disp_RT_STARTUP()
      if g_ENGINE_Screen_Resolution = 1
        lib_Activate_CMNDCON_CmndInfo("Realtime Display: Widescreen.")
      else
        lib_Activate_CMNDCON_CmndInfo("Realtime Display: 1024x768.")
      endif
    endif
  endif
  
  `********** MENU GROUP 7 - Edit WELL DATA Commands
  if r_Index_1 = 7
    `Edit
    if r_Index_2 = 1
      g_CMNDCONSL_CommandINPUT_ToggleON = 1
      g_ENGINE_Input$ = ""
      g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H + c_CMND_CONSL_FlashTimer
      g_COMMANDCONSOLE_InputFlash_Toggle = 1
      g_CMNDCONSL_CommandINPUT_Toggle_WELLDATA_Input = 1
      g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = 1
      lib_Activate_CMNDCON_CmndInfo("EDIT WELL DATA [Hole ID] COMMAND > Run")
    endif
    if r_Index_2 = 2
      g_CMNDCONSL_CommandINPUT_ToggleON = 1
      g_ENGINE_Input$ = ""
      g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H + c_CMND_CONSL_FlashTimer
      g_COMMANDCONSOLE_InputFlash_Toggle = 1
      g_CMNDCONSL_CommandINPUT_Toggle_WELLDATA_Input = 1
      g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = 2
      lib_Activate_CMNDCON_CmndInfo("EDIT WELL DATA [Pipe OD] COMMAND > Run")
    endif
    if r_Index_2 = 3
      g_CMNDCONSL_CommandINPUT_ToggleON = 1
      g_ENGINE_Input$ = ""
      g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H + c_CMND_CONSL_FlashTimer
      g_COMMANDCONSOLE_InputFlash_Toggle = 1
      g_CMNDCONSL_CommandINPUT_Toggle_WELLDATA_Input = 1
      g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = 3
      lib_Activate_CMNDCON_CmndInfo("EDIT WELL DATA [Pipe ID] COMMAND > Run")
    endif
    if r_Index_2 = 4
      g_CMNDCONSL_CommandINPUT_ToggleON = 1
      g_ENGINE_Input$ = ""
      g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H + c_CMND_CONSL_FlashTimer
      g_COMMANDCONSOLE_InputFlash_Toggle = 1
      g_CMNDCONSL_CommandINPUT_Toggle_WELLDATA_Input = 1
      g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = 4
      lib_Activate_CMNDCON_CmndInfo("EDIT DATA [Mud Motor Factor] COMMAND > Run")
    endif
  endif
  
  `********** MENU GROUP 8 - Screen Layout Commands
  if r_Index_1 = 8
    if r_Index_2 = 1
      if g_Window_Fullscreen_Toggle = 1
        lib_SetScreen_Windowed_FullScreen_p1or2(2)
      else
        lib_SetScreen_Windowed_FullScreen_p1or2(1)
      endif   
      lib_Activate_CMNDCON_CmndInfo("Toggle WINDOWED/FULLSCREEN Mode > Run")
    endif
  endif
  
  `********** MENU GROUP 9 - Create New Well
  if r_Index_1 = 9
    if r_Index_2 = 1
      if g_CMNDCONSL_ForceSTART_NEW_WELL = -1
        if g_CMNDCONSL_ForceSTART_Unlock = 2
          g_CMNDCONSL_ForceSTART_NEW_WELL = 1
        else
          g_CMNDCONSL_ForceSTART_UnlockMSGFlash = timer() + 2200
          g_CMNDCONSL_ForceSTART_NEW_WELL = -99
        endif
      endif
    endif
    if r_Index_2 = 2
      if g_CMNDCONSL_ForceSTART_Unlock = 1 and g_CMNDCONSL_ForceSTART_NEW_WELL = -1
        if g_server_authorised_wits_transmission = 1
          g_CMNDCONSL_ForceSTART_Unlock = 2
          g_CMNDCONSL_ForceSTART_UnlockTimer = timer() + 60000
          g_CMNDCONSL_ForceSTART_UnlockSTR$ = "(Unlocked for 1 minute at : " + get time$() + ")"
        endif
      endif
    endif    
  endif

endfunction

function lib_CMND_CNSL_Request_Input(r_YPos as integer, r_CMND_String$)

  local f_EnterKey_Pressed as integer
  local l_wdth_prnt as integer
  l_wdth_prnt = screen width() * 0.05
  

  lib_INPUT_GetString()  

  
    d3d_starttext
      inc r_YPos, 21
      inc r_YPos, 21 : d3d_text 2, l_wdth_prnt, r_YPos, 0, "     " + r_CMND_String$
      
      `Flash the Input Position - g_COMMANDCONSOLE_InputFlash_Timer
      if g_TIMER_H > g_COMMANDCONSOLE_InputFlash_Timer
        g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H + c_CMND_CONSL_FlashTimer
        if g_COMMANDCONSOLE_InputFlash_Toggle = 1
          g_COMMANDCONSOLE_InputFlash_Toggle = -1
        else
          g_COMMANDCONSOLE_InputFlash_Toggle = 1
        endif
      endif
      if g_COMMANDCONSOLE_InputFlash_Toggle = 1
        inc r_YPos, 21 : d3d_text 1, l_wdth_prnt, r_YPos, 0, "    : >"
      else
        inc r_YPos, 21 : d3d_text 1, l_wdth_prnt, r_YPos, 0, "    :"
      endif  
      
      `Display the input
      d3d_text 1, l_wdth_prnt, r_YPos, 0, "         [" + g_ENGINE_Input$ + "]"
      
    d3d_endtext
    
  
  `INPUT New Server IP Address
  if g_CMNDCONSL_CommandINPUT_Toggle_NewServerIPAddress = 1
    if lib_Enter_Pressed(9968) = 1
      g_ClientsideHOST_IP_Address$ = g_ENGINE_Input$
      if g_ClientsideHOST_IP_Address$ = ""
        g_ClientsideHOST_IP_Address$ = "127.0.0.1"
      endif  
      lib_CMND_CNSL_Deactivate()
      SAVE_CLIENT_TXT_File()
    endif
  endif
  
  `INPUT New Server Port
  if g_CMNDCONSL_CommandINPUT_Toggle_NewServerPort = 1
    if lib_Enter_Pressed(9981) = 1
      g_CLIENT_Server_Port_Int = val(g_ENGINE_Input$)
      if g_CLIENT_Server_Port_Int = 0
        g_CLIENT_Server_Port_Int = 2332
      endif  
      lib_CMND_CNSL_Deactivate()
      SAVE_CLIENT_TXT_File()
    endif
  endif
  
  `EDIT WELL DATA
  if g_CMNDCONSL_CommandINPUT_Toggle_WELLDATA_Input = 1
    if lib_Enter_Pressed(10014) = 1
      if g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = 1
        WELLDATA_HoleID# = val(g_ENGINE_Input$)
        SAVE_WELL_DATA_File()
      endif
      if g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = 2
        WELLDATA_PipeOD# = val(g_ENGINE_Input$)
        SAVE_WELL_DATA_File()
      endif
      if g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = 3
        WELLDATA_PipeID# = val(g_ENGINE_Input$)
        SAVE_WELL_DATA_File()
      endif
      if g_CMNDCONSL_CommandINPUT_WELLDATA_InputType = 4
        WELLDATA_MudMotorFactor_RevsGallon# = val(g_ENGINE_Input$)
        SAVE_WELL_DATA_File()
      endif
      lib_CMND_CNSL_Deactivate()
    endif
  endif


endfunction


function lib_CMND_CNSL_Request_Input_RangeEdit(r_YPos as integer)

  local l_wdth_prnt as integer : l_wdth_prnt = screen width() * 0.05
  local l_RNG_HL_Server as integer
  
  
    `Flash the Input Position - g_COMMANDCONSOLE_InputFlash_Timer
    if g_TIMER_H > g_COMMANDCONSOLE_InputFlash_Timer
      g_COMMANDCONSOLE_InputFlash_Timer = g_TIMER_H + c_CMND_CONSL_FlashTimer
      if g_COMMANDCONSOLE_InputFlash_Toggle = 1
        g_COMMANDCONSOLE_InputFlash_Toggle = -1
      else
        g_COMMANDCONSOLE_InputFlash_Toggle = 1
      endif
    endif
  
  `Run a check to ensure g_CMNDCONSL_ServerRangeChannel_Pntr is not out of range
  if g_CMNDCONSL_ServerRangeChannel_Pntr < 1
    g_CMNDCONSL_ServerRangeChannel_Pntr = 1
  endif
  if g_CMNDCONSL_ServerRangeChannel_Pntr > 9
    g_CMNDCONSL_ServerRangeChannel_Pntr = 9
  endif
  
  if g_CMNDCONSL_ServerRange_UpperLower_Type < 1
    g_CMNDCONSL_ServerRange_UpperLower_Type = 1
  endif
  if g_CMNDCONSL_ServerRange_UpperLower_Type > 2
    g_CMNDCONSL_ServerRange_UpperLower_Type = 2
  endif    

  d3d_starttext
   
    inc r_YPos, 21
    inc r_YPos, 21 : d3d_text 2, l_wdth_prnt, r_YPos, 0, "     RANGE SELECTION PROTOCOL"
    inc r_YPos, 21 : d3d_text 1, l_wdth_prnt, r_YPos, 0, "       (Use the cursor keys to select the channel on the server to edit)" 
    
    inc r_YPos, 21
    inc r_YPos, 21 : d3d_text 1, l_wdth_prnt, r_YPos, 0, "       Select Channel >"
    
    if g_CMNDCONSL_ServerRange_Stage = 1
      l_text_length = d3d_gettextwidth(1, g_CMNDCONSL_ServerRangeChannels$(g_CMNDCONSL_ServerRangeChannel_Pntr)) + 30
      d3d_box l_wdth_prnt + 132, r_YPos - 2, l_wdth_prnt + l_text_length + 110, r_YPos + 18, rgb(70, 70, 70)
    endif
    
    d3d_color 128, 0, 0, 255
    d3d_text 1, l_wdth_prnt + 135, r_YPos, 0, g_CMNDCONSL_ServerRangeChannels$(g_CMNDCONSL_ServerRangeChannel_Pntr)
    d3d_color 255, 255, 255, 255
    
    if g_CMNDCONSL_ServerRange_Stage > 1
      inc r_YPos, 21 : d3d_text 1, l_wdth_prnt, r_YPos, 0, "       Select Upper/Lower Range >"
      if g_CMNDCONSL_ServerRange_Stage = 2
        if g_CMNDCONSL_ServerRange_UpperLower_Type = 1
          l_text_length = d3d_gettextwidth(1, "LOWER Range Value") + 30
        endif
        if g_CMNDCONSL_ServerRange_UpperLower_Type = 2
          l_text_length = d3d_gettextwidth(1, "UPPER Range Value") + 30
        endif
        d3d_box l_wdth_prnt + 197, r_YPos - 2, l_wdth_prnt + l_text_length + 173, r_YPos + 18, rgb(70, 70, 70)
      endif
      d3d_color 128, 0, 0, 255
      if g_CMNDCONSL_ServerRange_UpperLower_Type = 1
        d3d_text 1, l_wdth_prnt + 200, r_YPos, 0, "LOWER Range Value"
      endif
      if g_CMNDCONSL_ServerRange_UpperLower_Type = 2
        d3d_text 1, l_wdth_prnt + 200, r_YPos, 0, "UPPER Range Value"
      endif
      d3d_color 255, 255, 255, 255
    endif
    
    if g_CMNDCONSL_ServerRange_Stage > 2
      if g_CMNDCONSL_ServerRange_Stage = 3
        lib_INPUT_GetString()
      endif
      inc r_YPos, 21 : d3d_text 1, l_wdth_prnt, r_YPos, 0, "       INPUT NEW RANGE VALUE > " + g_ENGINE_Input$
      d3d_color 255, 255, 255, 255
    endif
    
    if g_CMNDCONSL_ServerRange_Stage > 3
      inc r_YPos, 21
      if g_CMNDCONSL_ServerRangeFinal_UpperLower_ID = 1 then l_RngTypeTXT$ = "LOWER"
      if g_CMNDCONSL_ServerRangeFinal_UpperLower_ID = 2 then l_RngTypeTXT$ = "UPPER"
      inc r_YPos, 21 : d3d_text 1, l_wdth_prnt, r_YPos, 0, "       Please confirm that you wish to change the " + l_RngTypeTXT$ + " " + g_CMNDCONSL_ServerRangeChannels$(g_CMNDCONSL_ServerRangeFinal_ChannelID) + " range value to " + str$(g_CMNDCONSL_ServerRangeFinal_RangeVAL)
      if g_COMMANDCONSOLE_InputFlash_Toggle = 1
        inc r_YPos, 21 : d3d_text 1, l_wdth_prnt, r_YPos, 0, "       Press either Y or N"
      endif
      `N - User denied the change
        if keystate(49)= 1 and key_state(49,0)= 0
          lib_CMND_CNSL_Deactivate()
          g_COMMANDCONSOLE_CommandActivatedSwitch = 1
          g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer
          g_COMMANDCONSOLE_CommandReport1$ = "CHANNEL RANGE EDITING - SERVER DRILL SCREEN> Command Run - USER DECLINED ALTERATION"
          key_state(49,0)=1
        endif
        if keystate(49)=0 and key_state(49,0)=1 then key_state(49,0)=0
      `Y - User accepted the change
        if keystate(21)= 1 and key_state(21,0)= 0
          key_state(21,0)=1
            `Transmit data to server
            net send 0 : `Clear the message queue
            `Add the identifier
              net put long 607
            `Add Authorisation Code, to ensure no error in communication
              net put long 52085
                `Add the Channel Number, Upper/Lower ID and Values
                  `Server and client programs use different values for high and low - calibrate for server
                  if g_CMNDCONSL_ServerRange_UpperLower_Type = 1 then l_RNG_HL_Server = 2
                  if g_CMNDCONSL_ServerRange_UpperLower_Type = 2 then l_RNG_HL_Server = 1
                net put byte g_CMNDCONSL_ServerRangeChannel_Pntr
                net put byte l_RNG_HL_Server
                net put long g_CMNDCONSL_ServerRangeFinal_RangeVAL
            `Send the message to the host server
              net send
              inc g_ENG_DataTransfer_Total, 2048
            `Deactivate command
            lib_CMND_CNSL_Deactivate()
            g_COMMANDCONSOLE_CommandActivatedSwitch = 1
            g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer
            if g_server_connected = 1
              g_COMMANDCONSOLE_CommandReport1$ = "SERVER RANGE VALUES MODIFIED > Code RUN"
            else
              g_COMMANDCONSOLE_CommandReport1$ = "SERVER RANGE VALUES MODIFIED > Code RUN (No connection to server)"
            endif
        endif
        if keystate(21)=0 and key_state(21,0)=1 then key_state(21,0)=0
        
    endif
  
  d3d_endtext
 
  `Contextual response to ENTER KEY press
  if lib_Enter_Pressed(10167) = 1
    if g_CMNDCONSL_ServerRange_Stage = 3
      g_CMNDCONSL_ServerRangeFinal_RangeVAL = int(val(g_ENGINE_Input$))
      g_CMNDCONSL_ServerRange_Stage = 4
    endif
    if g_CMNDCONSL_ServerRange_Stage = 2
      g_CMNDCONSL_ServerRangeFinal_UpperLower_ID = g_CMNDCONSL_ServerRange_UpperLower_Type
      g_ENGINE_Input$ = ""
      clear entry buffer
      g_CMNDCONSL_ServerRange_Stage = 3
    endif
    if g_CMNDCONSL_ServerRange_Stage = 1
      g_CMNDCONSL_ServerRangeFinal_ChannelID = g_CMNDCONSL_ServerRangeChannel_Pntr
      g_CMNDCONSL_ServerRange_Stage = 2
    endif
  endif
 
 
  `Set cursor keys to control Channel ID / Array Pointer
  if g_CMNDCONSL_ServerRange_Stage = 1
    `[UP Cursor]
    if keystate(200)= 1 and key_state(200,0)= 0
      if g_CMNDCONSL_ServerRangeChannel_Pntr < 9
        inc g_CMNDCONSL_ServerRangeChannel_Pntr, 1
      endif
      key_state(200,0)=1
    endif
    if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
    `[DOWN Cursor]
    if keystate(208)= 1 and key_state(208,0)= 0
      if g_CMNDCONSL_ServerRangeChannel_Pntr > 1
        dec g_CMNDCONSL_ServerRangeChannel_Pntr, 1
      endif
      key_state(208,0)=1
    endif
    if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
  endif
  
  `Set cursor keys to control Upper/Lower Range setting
  if g_CMNDCONSL_ServerRange_Stage = 2
    `[UP Cursor]
    if keystate(200)= 1 and key_state(200,0)= 0
      if g_CMNDCONSL_ServerRange_UpperLower_Type < 2
        inc g_CMNDCONSL_ServerRange_UpperLower_Type, 1
      endif
      key_state(200,0)=1
    endif
    if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
    `[DOWN Cursor]
    if keystate(208)= 1 and key_state(208,0)= 0
      if g_CMNDCONSL_ServerRange_UpperLower_Type > 1
        dec g_CMNDCONSL_ServerRange_UpperLower_Type, 1
      endif
      key_state(208,0)=1
    endif
    if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
  endif
 
 
endfunction

function MENUS_Update_SERVER_AUClient_CrntSettings()

  `This function is designed as a single function call to update all Command Console and
  `Spymode (plus Realtime display) MENU display settings - to show what condition all the
  `Command Console and Spymode menu options are in on the Server and Authorised Client.

  lib_MENUS_SET_Status_Variables("No Reply")

  net send 0
  net put long 1100
  net put long 43826
  net send
  inc g_ENG_DataTransfer_Total, 2048

endfunction

function lib_MENUS_SET_Status_Variables(r_SET_TO$)

  `This function resets to null all the Server and Authorised Client variables ready for a fresh
  `reception from the Server and Authorised Client via the Server

  `SET SERVER VARIABLES
    g_SPYM_SERVER_ServerVersion$ = r_SET_TO$
    g_SPYM_SERVER_SubVersion$ = "(" + r_SET_TO$ + ")"
    g_SPYM_SERVER_Total_HD_Records$ = r_SET_TO$
    g_SPYM_SERVER_Total_MEM_Records$ = r_SET_TO$
    g_SPYM_SERVER_Max_MEM_Records$ = r_SET_TO$
    g_SPYM_SERVER_Total_Connected_Clients$ = r_SET_TO$
    g_SPYM_SERVER_Auth_Client_ID$ = r_SET_TO$
    g_SPYM_SERVER_CurrentTime$ = r_SET_TO$
  
  `SET CLIENT VARIABLES
    g_SPYM_CLIENT_VersionNum$ = r_SET_TO$
    g_SPYM_CLIENT_SubVersionNum$ = "(" + r_SET_TO$ + ")"
    g_SPYM_CLIENT_Total_HD_Records$ = r_SET_TO$
    g_SPYM_CLIENT_Total_MEM_Records$ = r_SET_TO$
    g_SPYM_CLIENT_Max_MEM_Records$ = r_SET_TO$
    g_SPYM_CLIENT_LastMEMDB_Time$ = r_SET_TO$
    g_SPYM_CLIENT_SerialPort_Name$ = r_SET_TO$
    g_SPYM_CLIENT_Current_Time$ = r_SET_TO$
    
    g_SPYM_CLIENT_SerialPort_State = 200
    
    g_SPYM_M_Menu_Wits$ = r_SET_TO$
    g_SPYM_M_Menu_AConnect$ = r_SET_TO$
    g_SPYM_M_Menu_SYNC$ = r_SET_TO$
    g_SPYM_M_Menu_LOGGING$ = r_SET_TO$
    
endfunction

function lib_MENUS_Receive_SERVER_Data()

  `Values are returned by the function lib_SPYMODE_SERVER_Respond() in the Host code.

  g_SPYM_SERVER_ServerVersion$ = net get string()
  g_SPYM_SERVER_SubVersion$ = net get string()
  
  g_SPYM_SERVER_Total_HD_Records$ = str$(net get int())
  g_SPYM_SERVER_Total_MEM_Records$ = str$(net get int())
  g_SPYM_SERVER_Max_MEM_Records$ = str$(net get int())
  g_SPYM_SERVER_Total_Connected_Clients$ = str$(net get int())
  g_SPYM_SERVER_Auth_Client_ID$ = str$(net get int())
  g_SPYM_SERVER_CurrentTime$ = net get string()
  
endfunction

function lib_MENUS_Receive_Relayed_AuthClient()

  `This function recieves the final Auth Client spymode variables that have been relayed
  `via the Server (from the Authorised Client) - (Code 1202 from the Server)
  
  g_SPYMODE_SerCli_AuthClient_Refresh_Complete = 1

  g_SPYM_CLIENT_VersionNum$ = net get string()
  g_SPYM_CLIENT_SubVersionNum$ = net get string()
  g_SPYM_CLIENT_Total_HD_Records$ = str$(net get int())
  g_SPYM_CLIENT_Total_MEM_Records$ = str$(net get int())
  g_SPYM_CLIENT_Max_MEM_Records$ = str$(net get int())
  g_SPYM_CLIENT_LastMEMDB_Time$ = net get string()
  g_SPYM_CLIENT_Current_Time$ = net get string()
  g_SPYM_CLIENT_SerialPort_Name$ = net get string()
  g_SPYM_CLIENT_SerialPort_State = net get byte()
  
  `Authorised Client settings for spymode menus
  g_SPYM_M_WitsState = net get int()
    if g_SPYM_M_WitsState = -1 then g_SPYM_M_Menu_Wits$ = "Inactive"
    if g_SPYM_M_WitsState = 1 then g_SPYM_M_Menu_Wits$ = "Active"
  g_SPYM_M_AutoConnect = net get int()
    if g_SPYM_M_AutoConnect = -1 then g_SPYM_M_Menu_AConnect$ = "OFF"
    if g_SPYM_M_AutoConnect = 1 then g_SPYM_M_Menu_AConnect$ = "ON"
  g_SPYM_M_SYNC = net get int()
    if g_SPYM_M_SYNC = -1 then g_SPYM_M_Menu_SYNC$ = "OFF"
    if g_SPYM_M_SYNC = 1 then g_SPYM_M_Menu_SYNC$ = "ON"
  g_SPYM_M_LOGGING = net get int()
    if g_SPYM_M_LOGGING = -1 then g_SPYM_M_Menu_LOGGING$ = "OFF"
    if g_SPYM_M_LOGGING = 1 then g_SPYM_M_Menu_LOGGING$ = "ON"

endfunction

function lib_MENUS_Auth_Client_Send_Variables()

  local l_AC_ClientID as integer
  local l_AC_CurrentTime$ as string : l_AC_CurrentTime$ = get time$()

  `This function responds to server code 1201. The server has requested the authorised client send
  `it's spymode variables, which the server will then relay to the spymode client that made the original
  `request.

  l_AC_ClientID = net get int()

  net send 0
  net put long 1203
  net put long 15281
  
  `Client Software Version Number
  net put string g_CLIENT_Version_Num$
  `Client Software Sub-Version Number
  net put string g_CLIENT_SUBVersion_Num$
  `Send requesting spymode client number
  net put int l_AC_ClientID
  `Send Client Total HD Records
  net put int g_DATABASE_HD_Total_Num_Records
  `Send Client Total MEM Records
  net put int g_DATABASE_MEM_Total_Num_Records
  `Send Client Max Records
  net put int g_DATABASE_MaxTotalRecords
  `Send time of last MEM DB Record Creation
  net put string g_MEMDB_LastRecord_Time$
  `Send Client current time
  net put string l_AC_CurrentTime$
  
  `Send Serial Port Values
    `Serial Port Name
    net put string g_SERIALPORT_Port_Name$
    `Serial Port Running Status
    net put byte g_SERIALPORT_Started
  
  `For SPYMODE Menu
    `State of the Client Serial Port
    net put int g_SERIALPORT_ACTIVE
    `State of the Automatic Reconnect
    net put int g_AUTO_CONNECT_ON
    `State of the SYNC ENGINE
    net put int g_SYNC_Engine_Active
    `State of the LOGGING ENGINE
    net put int g_ENG_Logging_Active
  
  net send
  inc g_ENG_DataTransfer_Total, 2048

endfunction



function __________DIAGNOSTICS_MODE_Formerly___________Called_SPYMODE__________tx182721d()
endfunction



function SPYMODE_BASIC_Console_Setup()

  g_SPYConsl_ADV_Lvl1_TotalMenus = 2

  `MENU 1
  SPYConsl_ADV_Ttl(1) = 2
  SPYConsl_ADV$(1, 1) = "DIAGNOSTICS MODE COMMANDS"
    if g_server_connected = 1
      SPYConsl_ADV$(1, 2) = "DIAGNOSTICS MODE OFF (Will disconnect from the server)"
    else
      SPYConsl_ADV$(1, 2) = "DIAGNOSTICS MODE OFF"
    endif
    
    l_net_connected_test = net connected()
    if l_net_connected_test = 1
      SPYConsl_ADV$(1, 3) = "Refresh Server and Client Variables (F5)"
    else
      SPYConsl_ADV$(1, 3) = "Refresh Server and Client Variables (F5) (Not Connected)"
    endif  

  `MENU 2
  SPYConsl_ADV_Ttl(2) = 7
  SPYConsl_ADV$(2, 1) = "WITH THE AUTHORISED CLIENT"
    SPYConsl_ADV$(2, 2) = "REINITIALISE SERIALPORT - Delete, then automatically recreate the serial port (Port Currently: " + g_SPYM_M_Menu_Wits$ + ")"
    
      SPYConsl_ADV$(2, 3) = "TOGGLE - Automatic Reconnect (Currently: " + g_SPYM_M_Menu_AConnect$ + ")"
      SPYConsl_ADV$(2, 4) = "TOGGLE SYNC - Toggle the Client SYNC Engine (Currently: " + g_SPYM_M_Menu_SYNC$ + ")"
      SPYConsl_ADV$(2, 5) = "TOGGLE LOGGING - Toggle the Client DATA LOGGING Engine (Currently: " + g_SPYM_M_Menu_LOGGING$ + ")"
      
    SPYConsl_ADV$(2, 6) = "BACKUP the Authorised Client HD Database"
    SPYConsl_ADV$(2, 7) = "FORMAT AUTH CLIENT HD Database - Deletes the HD Database and recreates from the AUTH CLIENT local Memory Database"
    SPYConsl_ADV$(2, 8) = "EDIT AUTHORISED CLIENT LOGIN TABLE (Automatically replicates to the Server upon updating)"
       

endfunction

function SPYMODE_LoginScreen_Console_Setup()

  local l_net_connected_test as integer

  g_SPYConsl_ADV_Lvl1_TotalMenus = 2
  l_net_connected_test = net connected()

  `MENU 1
  SPYConsl_ADV_Ttl(1) = 1
  SPYConsl_ADV$(1, 1) = "DIAGNOSTICS MODE (LOGIN TABLE) COMMANDS"

    SPYConsl_ADV$(1, 2) = "LOGIN SCREEN OFF (Return to Standard Diagnostics)"

    
    
    if l_net_connected_test = 1
      SPYConsl_ADV$(1, 3) = "Refresh Server and Client Login Tables (F5)"
    else
      SPYConsl_ADV$(1, 3) = "Refresh Server and Client Login Tables (F5) (Not Connected)"
    endif  

  `MENU 2
  SPYConsl_ADV_Ttl(2) = 2
  SPYConsl_ADV$(2, 1) = "WITH THE AUTHORISED CLIENT"
    if l_net_connected_test = 1
      SPYConsl_ADV$(2, 2) = "DOWNLOAD the Login Tables from the Authorised Client and the Server"
      SPYConsl_ADV$(2, 3) = "UPLOAD the login table to the Authorised Client (Automatically updates the Server)"
    else
      SPYConsl_ADV$(2, 2) = "DOWNLOAD the Login Tables from the Authorised Client and the Server (Not Connected)"
      SPYConsl_ADV$(2, 3) = "UPLOAD the login table to the Authorised Client (Automatically updates the Server) (Not Connected)"
    endif
       

endfunction

function SPYMODE_ENGINE()

  SPYMODE_SCREEN_Header()
  
  
  SPYMODE_INPUT()
  
  `Either run the standard Diagnostics Screen, or Run the Login Diagnostics Screen
  if g_CMND_CONSL_AUClient_Diagnostic_RouteToLoginScreen = -1
    SPYMODE_BASIC_Console_Setup()
    DIAGNOSTICS_SCREEN()
  else
    SPYMODE_LoginScreen_Console_Setup()
    DIAGNOSTICS_SCREEN_LoginScreen()
  endif
  
  `Double Check that the Server/Client Relationship is set to Diagnostics Spymode with all SYNC Disabled
  if g_server_relationship_code <> 3001
    net send 0
    net put long 2005
    net put string g_ENGINELOGIN_Main_Username$
    net put string g_ENGINELOGIN_Main_Password$
    net send
    inc g_ENG_DataTransfer_Total, 2048
  endif
  

  


endfunction  

function SPYMODE_SCREEN_Header()

 

  sp = 0
  d3d_starttext

    lib_Display_Menu()
    
    if g_TIMER_1 > g_COMMANDCONSOLE_Flash_Timer
      g_COMMANDCONSOLE_Flash_Timer = g_TIMER_1 + 1
      if g_COMMANDCONSOLE_Flash_Toggle = -1
        g_COMMANDCONSOLE_Flash_Toggle = 1
      else
        g_COMMANDCONSOLE_Flash_Toggle = -1
      endif
    endif
    
    l_wdth_prnt = screen width() * 0.05 : sp = 0
    
    if g_COMMANDCONSOLE_Flash_Toggle = -1
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    else
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$ + "   (Press F12 to exit)"
    endif
    
    inc sp,19*2 : d3d_text 4, l_wdth_prnt, sp, 0, "  DIAGNOSTICS MODE ENABLED"
    
  d3d_endtext


endfunction 

function DIAGNOSTICS_SCREEN()

  `Spy Mode Main Command Console Screen

  r_py = 80
  l_wdth_prnt = screen width() * 0.05
  g_lib_Login_CF2_Input_SetActiveCell = 1

  d3d_starttext
  
    `Display Connection Status
    l_net_connected_test = net connected()
    if l_net_connected_test = 1
      inc r_py,19*1 : d3d_text 2, l_wdth_prnt, r_py, 0, "  Connection Status : Connected to IP:" + g_CONNECTED_To_IP_Address$
    else
      inc r_py,19*1 : d3d_text 2, l_wdth_prnt, r_py, 0, "  Connection Status : *** NOT CONNECTED TO A SERVER ***"
    endif

    inc r_py,19
    l_PY = r_py
    `Display SERVER Information
      inc l_PY,19 : d3d_text 2, l_wdth_prnt, l_PY, 0, "  Server Information (F5 - Refresh)"
      inc l_PY,19 : d3d_text 1, l_wdth_prnt, l_PY, 0, "    Server Version Number"    
      inc l_PY,19 : d3d_text 1, l_wdth_prnt, l_PY, 0, "    Server Total HD Records" 
      inc l_PY,19 : d3d_text 1, l_wdth_prnt, l_PY, 0, "    Server Total MEM Records"
      inc l_PY,19 : d3d_text 1, l_wdth_prnt, l_PY, 0, "    Server Maximum MEM Records"
      inc l_PY,19 : d3d_text 1, l_wdth_prnt, l_PY, 0, "    Server DB Allocated RAM Usage" 
      inc l_PY,19 : d3d_text 1, l_wdth_prnt, l_PY, 0, "    Server Total Connected Clients" 
      inc l_PY,19 : d3d_text 1, l_wdth_prnt, l_PY, 0, "    Server Authorised Client ID"
      inc l_PY,19 : d3d_text 1, l_wdth_prnt, l_PY, 0, "    Server Current Time"
      `Dislplay SERVER Information Data
        l_PY = r_py : l_WPXDataOff = 230
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, "" : `Title
          if g_SPYM_SERVER_ServerVersion$ <> ""
            if g_SPYM_SERVER_Total_MEM_Records$ <> "No Reply"
              inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_SERVER_ServerVersion$ + " " + g_SPYM_SERVER_SubVersion$
            else
              inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, ": No Reply"
            endif
          else
            inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, ":"
          endif
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_SERVER_Total_HD_Records$
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_SERVER_Total_MEM_Records$
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_SERVER_Max_MEM_Records$
        if g_SPYM_SERVER_Total_MEM_Records$ <> "No Reply"
          if g_SPYM_SERVER_Max_MEM_Records$ <> ""
            l_calc# = (val(g_SPYM_SERVER_Total_MEM_Records$) + 0.0) / (val(g_SPYM_SERVER_Max_MEM_Records$) + 0.0) * 100.0
            inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, ": " + str$(l_calc#, 2) + " %"
          else
            inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, ":"
          endif
        else
          inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, ": No Reply"
        endif
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_SERVER_Total_Connected_Clients$
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_SERVER_Auth_Client_ID$
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_SERVER_CurrentTime$
   
     l_PY = r_py : l_WPXOff = 400
    `Display CLIENT Information
      inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff, l_PY, 0, "  SYNC Authorised Client Information"
      inc l_PY,19 : d3d_text 1, l_wdth_prnt + l_WPXOff, l_PY, 0, "    Client Version Number" 
      inc l_PY,19 : d3d_text 1, l_wdth_prnt + l_WPXOff, l_PY, 0, "    Client Total HD Records"
      inc l_PY,19 : d3d_text 1, l_wdth_prnt + l_WPXOff, l_PY, 0, "    Client Total MEM Records"
      inc l_PY,19 : d3d_text 1, l_wdth_prnt + l_WPXOff, l_PY, 0, "    Client Maximum MEM Records"
      inc l_PY,19 : d3d_text 1, l_wdth_prnt + l_WPXOff, l_PY, 0, "    Client DB Allocated RAM Usage"
      inc l_PY,19 : d3d_text 1, l_wdth_prnt + l_WPXOff, l_PY, 0, "    Time of last MEM DB Record"
      inc l_PY,19 : d3d_text 1, l_wdth_prnt + l_WPXOff, l_PY, 0, "    Client Serial Port Name"
      inc l_PY,19 : d3d_text 1, l_wdth_prnt + l_WPXOff, l_PY, 0, "    Client Serial Port Status"
      inc l_PY,19 : d3d_text 1, l_wdth_prnt + l_WPXOff, l_PY, 0, "    Client Current Time"
      
      
      `Dislplay CLIENT Information Data
        l_PY = r_py : l_WPXDataOff = 230
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, "" : `Title
          if g_SPYM_CLIENT_VersionNum$ <> ""
            if g_SPYM_SERVER_Total_MEM_Records$ <> "No Reply"
              inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_CLIENT_VersionNum$ + " " + g_SPYM_CLIENT_SubVersionNum$
            else
              inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": No Reply"
            endif
          else
            inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ":"
          endif  
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_CLIENT_Total_HD_Records$
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_CLIENT_Total_MEM_Records$
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_CLIENT_Max_MEM_Records$
          if g_SPYM_CLIENT_Total_MEM_Records$ <> "No Reply"
            if g_SPYM_CLIENT_Max_MEM_Records$ <> ""
              l_calc# = (val(g_SPYM_CLIENT_Total_MEM_Records$) + 0.0) / (val(g_SPYM_CLIENT_Max_MEM_Records$) + 0.0) * 100.0
              inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": " + str$(l_calc#, 2) + " %"
            else
              inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ":"
            endif
          else
            inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": No Reply"
          endif
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_CLIENT_LastMEMDB_Time$
          if g_SPYM_CLIENT_SerialPort_Name$ <> ""
            inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_CLIENT_SerialPort_Name$
          else
            inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": N/A"
          endif
          if g_SPYM_CLIENT_SerialPort_State <> 1 and g_SPYM_CLIENT_SerialPort_State <> 2
            inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": No Reply"
          else
            if g_SPYM_CLIENT_SerialPort_State = 1
              inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": Inactive"
            endif
            if g_SPYM_CLIENT_SerialPort_State = 2
              inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": Data Received, Connection Active"
            endif
          endif
        inc l_PY,19 : d3d_text 2, l_wdth_prnt + l_WPXOff + l_WPXDataOff, l_PY, 0, ": " + g_SPYM_CLIENT_Current_Time$
  
 
  `Display the screen info showing that the command was run, then fade after 3 seconds
  inc r_py, 19
  if g_COMMANDCONSOLE_CommandActivatedSwitch = 1
    if g_ENGINE_Alpha_Available = 1
      d3d_color 230, 230, 230, g_COMMANDCONSOLE_Report_Alpha
      d3d_text 2, l_wdth_prnt, g_CMNDCON_Report_PrintY, 0, "   Command Activated : "
      d3d_color 200, 200, 200, g_COMMANDCONSOLE_Report_AlphaCMND
      d3d_text 2, l_wdth_prnt + 160, g_CMNDCON_Report_PrintY, 0, g_COMMANDCONSOLE_CommandReport1$
    else
      d3d_color 210, 210, 210, 255
      d3d_text 1, l_wdth_prnt, g_CMNDCON_Report_PrintY, 0, "   Command Activated : " + g_COMMANDCONSOLE_CommandReport1$
    endif  

      `INPUT - New Server IP Address
      `if g_CMNDCONSL_CommandINPUT_Toggle_NewServerIPAddress = 1
      `  g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer : `Stop the command report from fading
      `  lib_CMND_CNSL_Request_Input(sp, "Input a new server IP Address")
      `endif
      `INPUT - New Server Port
      `if g_CMNDCONSL_CommandINPUT_Toggle_NewServerPort = 1
      `  g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer
      `  lib_CMND_CNSL_Request_Input(sp, "Input a new server Port")
      `endif
    
    if g_TIMER_1 > g_COMMANDCONSOLE_Report_Timer
      dec g_COMMANDCONSOLE_Report_Alpha, 1
        dec g_COMMANDCONSOLE_Report_AlphaCMND, 1
        if g_COMMANDCONSOLE_Report_AlphaCMND > 200
          g_COMMANDCONSOLE_Report_Alpha = 255
        endif
        if g_COMMANDCONSOLE_Report_AlphaCMND < 0
          g_COMMANDCONSOLE_Report_AlphaCMND = 0
        endif  
      if g_COMMANDCONSOLE_Report_Alpha < 0
        g_COMMANDCONSOLE_CommandActivatedSwitch = -1
      endif
    endif
    
    d3d_color 255, 255, 255, 255
  
  endif
  
    l_DIAG_CmndCon_Pos_Y = 375
    d3d_text 1, l_wdth_prnt, l_DIAG_CmndCon_Pos_Y, 0, "    MENU (Select an option using the cursor keys and Enter)"
    inc l_DIAG_CmndCon_Pos_Y,19
    for menu_lp = 1 to g_SPYConsl_ADV_Lvl1_TotalMenus
      d3d_color 255, 255, 255, 255
      inc l_DIAG_CmndCon_Pos_Y,21 : d3d_text 1, l_wdth_prnt, l_DIAG_CmndCon_Pos_Y, 0, "    " + SPYConsl_ADV$(menu_lp, 1)
        if g_SPYConsl_ADV_Lvl1 = menu_lp
          if g_SPYConsl_ADV_Lvl2 = 1
            l_text_length = d3d_gettextwidth(1, SPYConsl_ADV$(g_SPYConsl_ADV_Lvl1, 1)) + 30
            d3d_box l_wdth_prnt + 13, l_DIAG_CmndCon_Pos_Y - 2, l_wdth_prnt + l_text_length, l_DIAG_CmndCon_Pos_Y + 18, rgb(70, 70, 70)
          else
            l_text_length = d3d_gettextwidth(1, SPYConsl_ADV$(g_SPYConsl_ADV_Lvl1, g_SPYConsl_ADV_Lvl2a + 1)) + 40
            offset_y = g_SPYConsl_ADV_Lvl2a * 21
            d3d_box l_wdth_prnt + 13, offset_y + l_DIAG_CmndCon_Pos_Y - 2, l_wdth_prnt + l_text_length, offset_y + l_DIAG_CmndCon_Pos_Y + 18, rgb(70, 70, 70)
          endif
          d3d_color 198, 198, 198, 255
          for cmnd_lp = 2 to SPYConsl_ADV_Ttl(g_SPYConsl_ADV_Lvl1) + 1
            inc l_DIAG_CmndCon_Pos_Y,21
            d3d_text 1, l_wdth_prnt, l_DIAG_CmndCon_Pos_Y, 0, "      - " + SPYConsl_ADV$(menu_lp, cmnd_lp)
          next cmnd_lp
        endif
    next menu_lp

    d3d_color 255, 255, 255, 255

  d3d_endtext
  
  if lib_Enter_Pressed(10717) = 1 and g_SPYConsl_ADV_Lvl2 = 2
    DIAGNOSTICS_Command_Library(g_SPYConsl_ADV_Lvl1, g_SPYConsl_ADV_Lvl2a)
  endif


endfunction


function DIAGNOSTICS_SCREEN_LoginScreen()


  `Spy Mode Main Command Console Screen
  local l_TableYPos as integer


  l_TableYPos = 80
  
  l_wdth_prnt1 = screen width() * 0.05
  l_wdth_prnt2 = l_wdth_prnt1 + 320
  l_wdth_prnt3 = l_wdth_prnt2 + 320
  g_lib_Login_CF2_Input_SetActiveCell = 2
  
  
  `EDIT THE SELECTED DATABASE ITEM
  if g_LOGIN_UserID_InputToggle = 1
    lib_Login_CF2_INPUT_GetString_Keyboard()
    lib_INPUT_GetString_USERIDInput()
    if g_LOGIN_UserID_ID_Type = 1
      if g_LOGIN_UserID_ActiveColumnNum = 1
        if g_LOGIN_UserID_ActiveRowNum >= 1 and g_LOGIN_UserID_ActiveRowNum <= c_LOGIN_ID_MaxArr
          LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(g_LOGIN_UserID_ActiveRowNum).Username$ = g_LOGIN_UserID_Input$
        endif
      endif
      if g_LOGIN_UserID_ActiveColumnNum = 2
        if g_LOGIN_UserID_ActiveRowNum >= 1 and g_LOGIN_UserID_ActiveRowNum <= c_LOGIN_ID_MaxArr
          LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(g_LOGIN_UserID_ActiveRowNum).Password$ = g_LOGIN_UserID_Input$
        endif
      endif
    endif
    if g_LOGIN_UserID_ID_Type = 2
      if g_LOGIN_UserID_ActiveColumnNum = 1
        if g_LOGIN_UserID_ActiveRowNum >= 1 and g_LOGIN_UserID_ActiveRowNum <= c_LOGIN_ID_Universal_MaxArr
          LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(g_LOGIN_UserID_ActiveRowNum).Username$ = g_LOGIN_UserID_Input$
        endif
      endif
      if g_LOGIN_UserID_ActiveColumnNum = 2
        if g_LOGIN_UserID_ActiveRowNum >= 1 and g_LOGIN_UserID_ActiveRowNum <= c_LOGIN_ID_Universal_MaxArr
          LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(g_LOGIN_UserID_ActiveRowNum).Password$ = g_LOGIN_UserID_Input$
        endif
      endif
    endif
  endif
  

  d3d_starttext
  
    `Display Connection Status
    l_net_connected_test = net connected()
    if l_net_connected_test = 1
      inc l_TableYPos,10 : d3d_text 2, l_wdth_prnt1, l_TableYPos, 0, "  Connection Status : Connected to IP:" + g_CONNECTED_To_IP_Address$
    else
      inc l_TableYPos,10 : d3d_text 2, l_wdth_prnt1, l_TableYPos, 0, "  Connection Status : *** NOT CONNECTED TO A SERVER ***"
    endif
    
    inc l_TableYPos, 25
    if g_SPYM_Login_Screentype = 1
      d3d_text 2, l_wdth_prnt1, l_TableYPos, 0, "1) Login Tables"
      d3d_text 1, l_wdth_prnt1 + 150, l_TableYPos, 0, "2) Users Logged Into Server"
    else
      d3d_text 1, l_wdth_prnt1, l_TableYPos, 0, "1) Login Tables"
      d3d_text 2, l_wdth_prnt1 + 150, l_TableYPos, 0, "2) Users Logged Into Server"
    endif

    inc l_TableYPos,5
    l_PY = l_TableYPos
    
    `DISPLAY LOGIN TABLE DETAILS SCREEN
    if g_SPYM_Login_Screentype = 1
      `Display SERVER Information
      inc l_PY,20 : d3d_text 2, l_wdth_prnt1, l_PY, 0, "  LOCAL (Editing) Login Table"
      lib_Login_CF2_DrawUserIDBox(l_wdth_prnt1, 160, c_LOGIN_ID_MaxArr, 1, 1, 20)
      
      inc l_PY, 20
      d3d_text 2, l_wdth_prnt1 + 10, l_PY + 5, 0, "ID"
      d3d_text 2, l_wdth_prnt1 + 50, l_PY + 5, 0, "Username"
      d3d_text 2, l_wdth_prnt1 + 170, l_PY + 5, 0, "Password"
      
      lib_Login_CF2_DrawUserIDBox(l_wdth_prnt1, 510, c_LOGIN_ID_Universal_MaxArr, 2, 1, 20)
      d3d_text 2, l_wdth_prnt1, 490, 0, "Universal User ID's"
      d3d_text 2, l_wdth_prnt1 + 10, 510 + 5, 0, "ID"
      d3d_text 2, l_wdth_prnt1 + 50, 510 + 5, 0, "Username"
      d3d_text 2, l_wdth_prnt1 + 170, 510 + 5, 0, "Password"
      
      l_PY = l_TableYPos
      `Display CLIENT Information
      inc l_PY,20 : d3d_text 2, l_wdth_prnt2, l_PY, 0, "  AUTHORISED CLIENT Login Table"
      lib_Login_CF2_DrawUserIDBox(l_wdth_prnt2, 160, c_LOGIN_ID_MaxArr, 1, -1, 20)
      inc l_PY, 20 
      d3d_text 2, l_wdth_prnt2 + 10, l_PY + 5, 0, "ID", g_ENG_COLOUR_NoEditWh
      d3d_text 2, l_wdth_prnt2 + 50, l_PY + 5, 0, "Username", g_ENG_COLOUR_NoEditWh
      d3d_text 2, l_wdth_prnt2 + 170, l_PY + 5, 0, "Password", g_ENG_COLOUR_NoEditWh
      
      lib_Login_CF2_DrawUserIDBox(l_wdth_prnt2, 510, c_LOGIN_ID_Universal_MaxArr, 2, -1, 20)
      d3d_text 2, l_wdth_prnt2, 490, 0, "Universal User ID's", g_ENG_COLOUR_NoEditWh
      d3d_text 2, l_wdth_prnt2 + 10, 510 + 5, 0, "ID", g_ENG_COLOUR_NoEditWh
      d3d_text 2, l_wdth_prnt2 + 50, 510 + 5, 0, "Username", g_ENG_COLOUR_NoEditWh
      d3d_text 2, l_wdth_prnt2 + 170, 510 + 5, 0, "Password", g_ENG_COLOUR_NoEditWh
      
      l_PY = l_TableYPos
      `Display CLIENT Information
      inc l_PY,20 : d3d_text 2, l_wdth_prnt3, l_PY, 0, "  SERVER Login Table"
      lib_Login_CF2_DrawUserIDBox(l_wdth_prnt3, 160, c_LOGIN_ID_MaxArr, 1, -1, 20)
      inc l_PY, 20 
      d3d_text 2, l_wdth_prnt3 + 10, l_PY + 5, 0, "ID", g_ENG_COLOUR_NoEditWh
      d3d_text 2, l_wdth_prnt3 + 50, l_PY + 5, 0, "Username", g_ENG_COLOUR_NoEditWh
      d3d_text 2, l_wdth_prnt3 + 170, l_PY + 5, 0, "Password", g_ENG_COLOUR_NoEditWh
      
      lib_Login_CF2_DrawUserIDBox(l_wdth_prnt3, 510, c_LOGIN_ID_Universal_MaxArr, 2, -1, 20)
      d3d_text 2, l_wdth_prnt3, 490, 0, "Universal User ID's", g_ENG_COLOUR_NoEditWh
      d3d_text 2, l_wdth_prnt3 + 10, 510 + 5, 0, "ID", g_ENG_COLOUR_NoEditWh
      d3d_text 2, l_wdth_prnt3 + 50, 510 + 5, 0, "Username", g_ENG_COLOUR_NoEditWh
      d3d_text 2, l_wdth_prnt3 + 170, 510 + 5, 0, "Password", g_ENG_COLOUR_NoEditWh
    endif
    
    `DISPLAY USERS CONNECTED TO THE SERVER DETAILS SCREEN
    if g_SPYM_Login_Screentype = 2
      `Display SERVER Information
      inc l_PY,40 : d3d_text 2, l_wdth_prnt1, l_PY, 0, "  Users Connected to the Server"
      inc l_PY, 20
      `Draw far Left Line
      d3d_line l_wdth_prnt1, l_PY, l_wdth_prnt1, l_PY + ((c_ENG_MaxServerClients + 1) * 25), rgb(110, 110, 110)
      `ID/Username Line
      d3d_line l_wdth_prnt1 + 40, l_PY, l_wdth_prnt1 + 40, l_PY + ((c_ENG_MaxServerClients + 1) * 25), rgb(110, 110, 110)
      `Far Right Line
      d3d_line l_wdth_prnt1 + 190, l_PY, l_wdth_prnt1 + 190, l_PY + ((c_ENG_MaxServerClients + 1) * 25), rgb(110, 110, 110)
      `Table Lines
      l_Y1Pos = l_PY - 25
      for print_lp = 0 to c_ENG_MaxServerClients + 1
        inc l_Y1Pos, 25
        d3d_line l_wdth_prnt1, l_Y1Pos, l_wdth_prnt1 + 190, l_Y1Pos, rgb(110, 110, 110)
      next print_lp
      d3d_text 2, l_wdth_prnt1 + 10, l_PY + 5, 0, "ID"
      d3d_text 2, l_wdth_prnt1 + 50, l_PY + 5, 0, "Username"
      for print_lp = 1 to c_ENG_MaxServerClients
        inc l_PY, 25
        `Print ID Number
        d3d_text 2, l_wdth_prnt1 + 10, l_PY + 5, 0, str$(print_lp)
        `Print Username
        if LOGIN_ID_Universal_CF2_2001_ServerUsernames(print_lp).Username$ <> ""
          d3d_text 2, l_wdth_prnt1 + 60, l_PY + 5, 0, LOGIN_ID_Universal_CF2_2001_ServerUsernames(print_lp).Username$
        else
          d3d_text 2, l_wdth_prnt1 + 60, l_PY + 5, 0, "\"
        endif
      next print_lp
    endif
  

    l_PrntINST_X = 560
    l_PrntINST_Y = 580
    inc l_PrntINST_Y, 20 : d3d_text 1, l_PrntINST_X, l_PrntINST_Y, 0, "Instructions (Note: use Screen (2) to view the Current Logged in Users)"
    inc l_PrntINST_Y, 20 : d3d_text 1, l_PrntINST_X, l_PrntINST_Y, 0, "1. Press F5: Download the data from the Network."
    inc l_PrntINST_Y, 20 : d3d_text 1, l_PrntINST_X, l_PrntINST_Y, 0, "2. Edit the Local (Editable) Login Table"
    inc l_PrntINST_Y, 20 : d3d_text 1, l_PrntINST_X, l_PrntINST_Y, 0, "3. Upload the Edited Table to the Authorised Client and Server"
    inc l_PrntINST_Y, 20 : d3d_text 1, l_PrntINST_X, l_PrntINST_Y, 0, "4. Press F5: Download and check the Data"

  
    l_py = 600
    d3d_text 1, l_wdth_prnt1, l_py, 0, "    MENU (Select an option using the cursor keys and Enter)"
    inc l_py,19
    for menu_lp = 1 to g_SPYConsl_ADV_Lvl1_TotalMenus
      d3d_color 255, 255, 255, 255
      inc l_py,21 : d3d_text 1, l_wdth_prnt1, l_py, 0, "    " + SPYConsl_ADV$(menu_lp, 1)
        if g_SPYConsl_ADV_Lvl1 = menu_lp
          if g_SPYConsl_ADV_Lvl2 = 1
            l_text_length = d3d_gettextwidth(1, SPYConsl_ADV$(g_SPYConsl_ADV_Lvl1, 1)) + 30
            d3d_box l_wdth_prnt1 + 13, l_py - 2, l_wdth_prnt1 + l_text_length, l_py + 18, rgb(70, 70, 70)
          else
            l_text_length = d3d_gettextwidth(1, SPYConsl_ADV$(g_SPYConsl_ADV_Lvl1, g_SPYConsl_ADV_Lvl2a + 1)) + 40
            offset_y = g_SPYConsl_ADV_Lvl2a * 21
            d3d_box l_wdth_prnt1 + 13, offset_y + l_py - 2, l_wdth_prnt1 + l_text_length, offset_y + l_py + 18, rgb(70, 70, 70)
          endif
          d3d_color 198, 198, 198, 255
          for cmnd_lp = 2 to SPYConsl_ADV_Ttl(g_SPYConsl_ADV_Lvl1) + 1
            inc l_py,21 : d3d_text 1, l_wdth_prnt1, l_py, 0, "      - " + SPYConsl_ADV$(menu_lp, cmnd_lp)
          next cmnd_lp
        endif
    next menu_lp

    d3d_color 255, 255, 255, 255

  d3d_endtext
  
  if g_SPYM_Login_Screentype = 1
    `Have to run this outside of the d3d_text block above
    lib_DIAGNOSTICS_LoginTables_PrintArrays(l_TableYPos, l_wdth_prnt1, l_wdth_prnt2, l_wdth_prnt3)
  endif
  
  if g_LOGIN_UserID_InputToggle = -1
    if lib_Enter_Pressed(10916) = 1 and g_SPYConsl_ADV_Lvl2 = 2
      DIAGNOSTICS_LOGINSCREEN_Command_Library(g_SPYConsl_ADV_Lvl1, g_SPYConsl_ADV_Lvl2a)
    endif
  endif





endfunction

function lib_DIAGNOSTICS_LoginTables_PrintArrays(r_YPOS, r_Width1, r_Width2, r_Width3)

  `Flash Timer
  if timer() > g_LOGIN_UserID_InputFlashTimer
    g_LOGIN_UserID_InputFlashTimer = timer() + 750
    if g_LOGIN_UserID_InputFlashToggle <> 1
      g_LOGIN_UserID_InputFlashToggle = 1
      g_LOGIN_UserID_Build$ = "|"
    else
      g_LOGIN_UserID_InputFlashToggle = -1
      g_LOGIN_UserID_Build$ = ""
    endif
  endif

  l_PrintY = r_YPOS + 58
  d3d_starttext
  
    `Print Editable Login Table Details
    for print_lp = 1 to c_LOGIN_ID_MaxArr
      `Print ID Number
      d3d_text 2, r_Width1 + 10, l_PrintY + 5, 0, str$(print_lp)
      `Print Username
      if g_LOGIN_UserID_ActiveColumnNum = 1
        if g_LOGIN_UserID_ActiveRowNum = print_lp and g_LOGIN_UserID_ID_Type = 1
          d3d_text 2, r_Width1 + 50, l_PrintY + 5, 0, LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(print_lp).Username$ + g_LOGIN_UserID_Build$
        else
          d3d_text 2, r_Width1 + 50, l_PrintY + 5, 0, LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(print_lp).Username$
        endif
      else
        d3d_text 2, r_Width1 + 50, l_PrintY + 5, 0, LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(print_lp).Username$
      endif
      `Print Password
      if g_LOGIN_UserID_ActiveColumnNum = 2
        if g_LOGIN_UserID_ActiveRowNum = print_lp and g_LOGIN_UserID_ID_Type = 1
          d3d_text 2, r_Width1 + 170, l_PrintY + 5, 0, LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(print_lp).Password$ + g_LOGIN_UserID_Build$
        else
          d3d_text 2, r_Width1 + 170, l_PrintY + 5, 0, LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(print_lp).Password$
        endif
      else
        d3d_text 2, r_Width1 + 170, l_PrintY + 5, 0, LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(print_lp).Password$
      endif
      inc l_PrintY, 20
    next print_lp
  
    l_PrintY = 529
    `SPECIAL SECTION - UNIVERSAL PASSWORDS
    for print_lp = 1 to c_LOGIN_ID_Universal_MaxArr
      `Print ID Number
      d3d_text 2, r_Width1 + 10, l_PrintY + 5, 0, str$(print_lp)
      
      `Print Username
      if g_LOGIN_UserID_ActiveColumnNum = 1
        if g_LOGIN_UserID_ActiveRowNum = print_lp and g_LOGIN_UserID_ID_Type = 2
          d3d_text 2, r_Width1 + 50, l_PrintY + 5, 0, LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(print_lp).Username$ + g_LOGIN_UserID_Build$
        else
          d3d_text 2, r_Width1 + 50, l_PrintY + 5, 0, LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(print_lp).Username$
        endif
      else
        d3d_text 2, r_Width1 + 50, l_PrintY + 5, 0, LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(print_lp).Username$
      endif
      `Print Password
      if g_LOGIN_UserID_ActiveColumnNum = 2
        if g_LOGIN_UserID_ActiveRowNum = print_lp and g_LOGIN_UserID_ID_Type = 2
          d3d_text 2, r_Width1 + 170, l_PrintY + 5, 0, LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(print_lp).Password$ + g_LOGIN_UserID_Build$
        else
          d3d_text 2, r_Width1 + 170, l_PrintY + 5, 0, LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(print_lp).Password$
        endif
      else
        d3d_text 2, r_Width1 + 170, l_PrintY + 5, 0, LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(print_lp).Password$
      endif
      inc l_PrintY, 20
    next print_lp
    
    `------ DISPLAY DOWNLOADED AUTHORISED CLIENT LOGIN TABLE ------
      `STANDARD USER IDS
      l_PrintY = r_YPOS + 58
      for print_lp = 1 to c_LOGIN_ID_MaxArr
        `Print ID Number
        d3d_text 2, r_Width2 + 10, l_PrintY + 5, 0, str$(print_lp)
        `Print Username
        d3d_text 2, r_Width2 + 50, l_PrintY + 5, 0, LOGIN_ID_CF2_2001_RemoteEdit_AuClient(print_lp).Username$
        `Print Password
        d3d_text 2, r_Width2 + 170, l_PrintY + 5, 0, LOGIN_ID_CF2_2001_RemoteEdit_AuClient(print_lp).Password$
        inc l_PrintY, 20
      next print_lp
      `UNIVERSAL USER IDS
      l_PrintY = 529
      for print_lp = 1 to c_LOGIN_ID_Universal_MaxArr
        `Print ID Number
        d3d_text 2, r_Width2 + 10, l_PrintY + 5, 0, str$(print_lp)
        `Print Username
        d3d_text 2, r_Width2 + 50, l_PrintY + 5, 0, LOGIN_ID_Universal_CF2_2001_RemoteEdit_AuClient(print_lp).Username$
        `Print Password
        d3d_text 2, r_Width2 + 170, l_PrintY + 5, 0, LOGIN_ID_Universal_CF2_2001_RemoteEdit_AuClient(print_lp).Password$
        inc l_PrintY, 20
      next print_lp
      
    `------ DISPLAY DOWNLOADED SERVER LOGIN TABLE ------
      `STANDARD USER IDS
      l_PrintY = r_YPOS + 58
      for print_lp = 1 to c_LOGIN_ID_MaxArr
        `Print ID Number
        d3d_text 2, r_Width3 + 10, l_PrintY + 5, 0, str$(print_lp)
        `Print Username
        d3d_text 2, r_Width3 + 50, l_PrintY + 5, 0, LOGIN_ID_CF2_2001_RemoteEdit_Server(print_lp).Username$
        `Print Password
        d3d_text 2, r_Width3 + 170, l_PrintY + 5, 0, LOGIN_ID_CF2_2001_RemoteEdit_Server(print_lp).Password$
        inc l_PrintY, 20
      next print_lp
      `UNIVERSAL USER IDS
      l_PrintY = 529
      for print_lp = 1 to c_LOGIN_ID_Universal_MaxArr
        `Print ID Number
        d3d_text 2, r_Width3 + 10, l_PrintY + 5, 0, str$(print_lp)
        `Print Username
        d3d_text 2, r_Width3 + 50, l_PrintY + 5, 0, LOGIN_ID_Universal_CF2_2001_RemoteEdit_Server(print_lp).Username$
        `Print Password
        d3d_text 2, r_Width3 + 170, l_PrintY + 5, 0, LOGIN_ID_Universal_CF2_2001_RemoteEdit_Server(print_lp).Password$
        inc l_PrintY, 20
      next print_lp

  d3d_endtext

endfunction


function SPYMODE_INPUT()

  `If no data is being entered into any cells in the Editable Login Table
  if g_LOGIN_UserID_InputToggle = -1
    `[1] - Screen Type - Login Tables Screen (Editable table, Server Table, Authorised Client Table)
    if keystate(2)= 1 and key_state(2,0)= 0
      g_SPYM_Login_Screentype = 1
      key_state(2,0)=1
    endif
    if keystate(2)=0 and key_state(2,0)=1 then key_state(2,0)=0
    `[2] - Screen Type - List of users logged into the Server
    if keystate(3)= 1 and key_state(61,0)= 0
      g_SPYM_Login_Screentype = 2
      key_state(3,0)=1
    endif
    if keystate(3)=0 and key_state(3,0)=1 then key_state(3,0)=0
  endif

  `[F5] - Request Status from server (and via server to other authorised client)
  if keystate(63)= 1 and key_state(63,0)= 0
    key_state(63,0)=1
    if g_CMND_CONSL_AUClient_Diagnostic_RouteToLoginScreen = -1
      MENUS_Update_SERVER_AUClient_CrntSettings()
    else
      if net connected() = 1
        lib_SPYMODE_LOGIN_Reset_ViewingArrays("Requested")
        lib_SPYMODE_LOGIN_RequestServerLoginTable()
        lib_SPYMODE_LOGIN_Get_AUClientLoginTable()
      else
        lib_SPYMODE_LOGIN_Reset_ViewingArrays("No Connection")
      endif  
    endif
  endif
  if keystate(63)=0 and key_state(63,0)=1 then key_state(63,0)=0
  

  `[F8] - Connect to server if option available
  if keystate(66)= 1 and key_state(66,0)= 0
    if g_server_connected = 0
      g_connection_attempt_ATTEMPT_NOW = 1
      g_connection_attempt_counter = 0
    endif
    key_state(66,0)=1
  endif
  if keystate(66)=0 and key_state(66,0)=1 then key_state(66,0)=0

  `[F12] - Toggle Command Console
  if keystate(88)= 1 and key_state(88,0)= 0
    if g_COMMANDCONSOLE_Active = 1
      `Turn the command console off
      g_COMMANDCONSOLE_Active = 0
      `Reset all command console variables
      lib_CMND_CNSL_Deactivate()
    else
      g_COMMANDCONSOLE_Toggle = 1
      g_CMND_CONSL_ServerSettings_Received = -1
      g_CMNDCONSL_ServerRange_Stage = 1
      g_CMNDCONSL_ServerRange_UpperLower_Type = 1
    endif
    key_state(88,0)=1
  endif
  if keystate(88)=0 and key_state(88,0)=1
    key_state(88,0)=0
    g_COMMANDCONSOLE_Toggle = 0
  endif
  
  `[ESC] - EXITS SPYMODE
    if keystate(1)= 1 and key_state(1,0)= 0
      key_state(1,0)=1
      `Turn SPYMODE off
      lib_SPYMODE_ShutDown(1)
    endif
    if keystate(1)=0 and key_state(1,0)=1 then key_state(1,0)=0

  `if g_CMNDCONSL_CommandINPUT_ToggleON = -1
    `[LEFT Cursor]
    if keystate(203)= 1 and key_state(203,0)= 0
      if g_SPYConsl_ADV_Lvl2 > 1
        dec g_SPYConsl_ADV_Lvl2, 1
      endif
      key_state(203,0)=1
    endif
    if keystate(203)=0 and key_state(203,0)=1 then key_state(203,0)=0
    `[RIGHT Cursor]
    if keystate(205)= 1 and key_state(205,0)= 0
      if g_SPYConsl_ADV_Lvl2 < 2
        inc g_SPYConsl_ADV_Lvl2, 1
        g_SPYConsl_ADV_Lvl2a = 1
      endif
      key_state(205,0)=1
    endif
    if keystate(205)=0 and key_state(205,0)=1 then key_state(205,0)=0
    `[UP Cursor]
    if keystate(200)= 1 and key_state(200,0)= 0
      if g_SPYConsl_ADV_Lvl2 = 1
        if g_SPYConsl_ADV_Lvl1 > 1
          dec g_SPYConsl_ADV_Lvl1, 1
        endif
      else
        if g_SPYConsl_ADV_Lvl2a > 1
          dec g_SPYConsl_ADV_Lvl2a, 1
        endif
      endif
      key_state(200,0)=1
    endif
    if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
    `[DOWN Cursor]
    if keystate(208)= 1 and key_state(208,0)= 0
      if g_SPYConsl_ADV_Lvl2 = 1
        if g_SPYConsl_ADV_Lvl1 < g_SPYConsl_ADV_Lvl1_TotalMenus
          inc g_SPYConsl_ADV_Lvl1, 1
        endif
      else
        if g_SPYConsl_ADV_Lvl2a < SPYConsl_ADV_Ttl(g_SPYConsl_ADV_Lvl1)
          inc g_SPYConsl_ADV_Lvl2a, 1
        endif
      endif
      key_state(208,0)=1
    endif
    if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
  `endif

endfunction


function DIAGNOSTICS_Command_Library(r_Index_1, r_Index_2)

  local l_net_connected_test as integer

  `This function contains all the command console library command functions.
  `It receives the two array index's corresponding with the position in the command console menu
  
  
  clear entry buffer

  `********** MENU GROUP 1
  if r_Index_1 = 1
    if r_Index_2 = 1
      lib_SPYMODE_ShutDown(1)
    endif
    if r_Index_2 = 2
      lib_MENUS_SET_Status_Variables("No Reply")
      lib_SPYMODE_Request_Status_ALL()
    endif  
  endif
  
  `********** MENU GROUP 2 - WITH AUTHORISED CLIENT
  if r_Index_1 = 2
    `Authorised Client - Reinitialise Serial Port
    if r_Index_2 = 1
      lib_Activate_CMNDCON_CmndInfo("[AUTH CLIENT] Serial Port: Delete and Restart >Run")
      net send 0 : net put long 4011 : net put long 95893 : net send : inc g_ENG_DataTransfer_Total, 2048
    endif
    `Authorised Client - Toggle Automatic Reconnect
    if r_Index_2 = 2
      lib_Activate_CMNDCON_CmndInfo("[AUTH CLIENT] Toggle: Automatic Reconnect >Run")
      net send 0 : net put long 4000 : net put long 27461 : net send : inc g_ENG_DataTransfer_Total, 2048
    endif
    `Authorised Client - Toggle SYNC
    if r_Index_2 = 3
      lib_Activate_CMNDCON_CmndInfo("[AUTH CLIENT] Toggle: SYNCHRONISATION ENGINE >Run")
      net send 0 : net put long 4003 : net put long 97354 : net send : inc g_ENG_DataTransfer_Total, 2048
    endif
    `Authorised Client - Toggle LOGGING
    if r_Index_2 = 4
      lib_Activate_CMNDCON_CmndInfo("[AUTH CLIENT] Toggle: DATA LOGGING ENGINE >Run")
      net send 0 : net put long 4006 : net put long 53822 : net send : inc g_ENG_DataTransfer_Total, 2048
    endif
    `Authorised Client - Backup Client HD Database File
    if r_Index_2 = 5
      lib_Activate_CMNDCON_CmndInfo("[AUTH CLIENT] BACKUP Harddisk Database >Run")
      net send 0 : net put long 4009 : net put long 49361 : net send : inc g_ENG_DataTransfer_Total, 2048
      lib_ARS_Start_New_Report("AU CLIENT: Backup Harddisk Database", -1)
      ARS_LOCAL_Add_Report("LOCAL: Backup HD Database > Running", -1)
    endif
    `Authorised Client -Format HD Database File - Create from Mem Database
    if r_Index_2 = 6
      lib_Activate_CMNDCON_CmndInfo("[AUTH CLIENT] RE-CREATE HD Database >Run")
      net send 0 : net put long 4013 : net put long 28912 : net send : inc g_ENG_DataTransfer_Total, 2048
      lib_ARS_Start_New_Report("AU CLIENT: Create HD Database (From Memory DB)", -1)
      ARS_LOCAL_Add_Report("LOCAL: Create HD DB > Running. Request sent to Server.", -1)
    endif
    `Authorised Client - Edit Login Table
    if r_Index_2 = 7
      lib_Activate_CMNDCON_CmndInfo("[AUTH CLIENT] LOGIN Table.Edit >Run")
      if g_CMND_CONSL_AUClient_Diagnostic_RouteToLoginScreen = -1
        g_CMND_CONSL_AUClient_Diagnostic_RouteToLoginScreen = 1
        g_SPYConsl_ADV_Lvl1 = 1
        g_SPYConsl_ADV_Lvl2 = 1
        g_SPYConsl_ADV_Lvl2a = 1
      else
        g_CMND_CONSL_AUClient_Diagnostic_RouteToLoginScreen = -1
      endif  
    endif
  endif


  
endfunction


function DIAGNOSTICS_LOGINSCREEN_Command_Library(r_Index_1, r_Index_2)

  local l_net_connected_test as integer

  `This function contains all the command console library command functions.
  `It receives the two array index's corresponding with the position in the command console menu
  
  
  clear entry buffer

  `********** MENU GROUP 1
  if r_Index_1 = 1
    if r_Index_2 = 1
      g_CMND_CONSL_AUClient_Diagnostic_RouteToLoginScreen = -1
      g_SPYConsl_ADV_Lvl1 = 1
      g_SPYConsl_ADV_Lvl2 = 1
      g_SPYConsl_ADV_Lvl2a = 1
    endif
  endif
  
  `********** MENU GROUP 2 - WITH AUTHORISED CLIENT
  if r_Index_1 = 2
    `Authorised Client - DOWNLOAD the login table from the Authorised Client and the Server
    if r_Index_2 = 1
      lib_SPYMODE_LOGIN_Reset_ViewingArrays("Requested")
      `Issue command to Server to transmit its current Login Table
      lib_SPYMODE_LOGIN_RequestServerLoginTable()
      `Issue command to Server to get and relay the current Authorised Client Login Table
      lib_SPYMODE_LOGIN_Get_AUClientLoginTable()
    endif
    `Authorised Client - UPLOAD the login table to the Authorised Client (Automatically updates the Server)
    if r_Index_2 = 2
      lib_SPYMODE_LOGIN_SendNewAUClient_LTable()
    endif

    
  endif


  
endfunction



function lib_SPYMODE_StartUp()

  `Set spymode active and re-define relationship with Server (i.e clear Authorised SYNC Profile etc)
  g_SPYMODE_ACTIVE = 1
  g_COMMANDCONSOLE_Active = 1

  

  `Transmit Code 2005 - Refuse SYNC relationship with the server incase it is the SYNCing client
  net send 0
  net put long 2005
  net put string g_ENGINELOGIN_Main_Username$
  net put string g_ENGINELOGIN_Main_Password$
  net send
  inc g_ENG_DataTransfer_Total, 2048
  
  MENUS_Update_SERVER_AUClient_CrntSettings()

  `Set the Client Program into SPYMODE (Disable features not supposed to run in SPYMODE)
    `Disable the SYNC Engine
      g_SPYMODE_OriginalValue_SYNC_Engine_Active = g_SYNC_Engine_Active
      g_SYNC_Engine_Active = -1
    `Disable the Logging Engine
      g_SPYMODE_OriginalValue_ENG_Logging_Active = g_ENG_Logging_Active
      g_ENG_Logging_Active = -1
    `Disable Automatic Reconnect
      g_SPYMODE_OriginalValue_AUTO_CONNECT_ON = g_AUTO_CONNECT_ON
      g_AUTO_CONNECT_ON = -1
      
    
    `Set the options so they plot from the start positions
    g_SPYConsl_ADV_Lvl1 = 1
    g_SPYConsl_ADV_Lvl2 = 1
    g_SPYConsl_ADV_Lvl2a = 1
    
    g_COMMANDCONSOLE_CommandActivatedSwitch = -1
    
    `Spymode Realtime Display Variables
    g_DISP_REALTIME_ScreenType = 1
    g_DISP_RT_Make_New_Record_Timer = g_TIMER_1

    
    
endfunction

function lib_SPYMODE_ShutDown(r_KillConnection)

  `Disable Spymode 
  g_SPYMODE_ACTIVE = -1
  
  `Disconnect from the Server if connected (this is done to make it simpler in the Prog to re-establish
  `any relationship with the Server and to give the user the option of whether they re-connect later)
  if r_KillConnection = 1
    if g_server_connected = 1
      lib_EXIT_Disconnect_Server()
    endif
  endif
    
  `Restore original settings
  g_SYNC_Engine_Active = g_SPYMODE_OriginalValue_SYNC_Engine_Active
  g_ENG_Logging_Active = g_SPYMODE_OriginalValue_ENG_Logging_Active
  g_AUTO_CONNECT_ON = g_SPYMODE_OriginalValue_AUTO_CONNECT_ON
  
  g_COMMANDCONSOLE_CommandActivatedSwitch = -1
      
endfunction





function lib_SPYMODE_Request_Status_ALL()

  `This function requests all spymode variables be refreshed. To achieve this code 1100 is sent to the
  `Server. The Server replies with it's own values, and also sends a message to the Authorised client, which
  `responds with its own spymode values, which the Server then relays to the requesting spymode client.
  
  if g_server_connected = 1
    `lib_SPYMODE_SET_Status_Variables("Information Requested")
    g_Already_Transmitted_To_Server_This_Program_Loop = 1
    net send 0
    net put long 1100
    net put long 43826
    net send
    inc g_ENG_DataTransfer_Total, 2048
  endif
  
 
endfunction

function lib_SPYMODE_LOGIN_Reset_ViewingArrays(r_Text$)

  `This function sets all the arrays used to view and edit the Authorised Client and Server Login Tables
  `(Note that only the Authorised Client is directly changed, the Authorised Client then updates the Server)

  for set_lp = 0 to c_LOGIN_ID_MaxArr
    LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(set_lp).Username$ = r_Text$
    LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(set_lp).Password$ = r_Text$
    LOGIN_ID_CF2_2001_RemoteEdit_AuClient(set_lp).Username$ = r_Text$
    LOGIN_ID_CF2_2001_RemoteEdit_AuClient(set_lp).Password$ = r_Text$
    LOGIN_ID_CF2_2001_RemoteEdit_Server(set_lp).Username$ = r_Text$
    LOGIN_ID_CF2_2001_RemoteEdit_Server(set_lp).Password$ = r_Text$
  next set_lp

  for set_lp = 0 to c_LOGIN_ID_Universal_MaxArr
    LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(set_lp).Username$ = r_Text$
    LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(set_lp).Password$ = r_Text$
    LOGIN_ID_Universal_CF2_2001_RemoteEdit_AuClient(set_lp).Username$ = r_Text$
    LOGIN_ID_Universal_CF2_2001_RemoteEdit_AuClient(set_lp).Password$ = r_Text$
    LOGIN_ID_Universal_CF2_2001_RemoteEdit_Server(set_lp).Username$ = r_Text$
    LOGIN_ID_Universal_CF2_2001_RemoteEdit_Server(set_lp).Password$ = r_Text$
  next set_lp
  
  `Reset Users logged into the Server details array
  for set_lp = 0 to c_ENG_MaxServerClients
    LOGIN_ID_Universal_CF2_2001_ServerUsernames(set_lp).Username$ = r_Text$
  next set_lp

endfunction

function lib_SPYMODE_LOGIN_RequestServerLoginTable()

  `This function sends the request to the server for it to transmit its current Login Table
  `back to this client.

  if g_server_connected = 1
    g_Already_Transmitted_To_Server_This_Program_Loop = 1
    net send 0
    net put long 4100
    net put long 32172
    net send
    inc g_ENG_DataTransfer_Total, 2048
  endif

endfunction

function lib_SPYMODE_LOGIN_ReceiveServerLoginTable()

  `This function receives the Server Login Table (server responding to code 4100)
    `Send standard User ID's
    for receive_lp = 1 to c_LOGIN_ID_MaxArr
      LOGIN_ID_CF2_2001_RemoteEdit_Server(receive_lp).Username$ = net get string()
      LOGIN_ID_CF2_2001_RemoteEdit_Server(receive_lp).Password$ = net get string()
    next receive_lp
    `Send Uninversal User ID's
    for receive_lp = 1 to c_LOGIN_ID_Universal_MaxArr
      LOGIN_ID_Universal_CF2_2001_RemoteEdit_Server(receive_lp).Username$ = net get string()
      LOGIN_ID_Universal_CF2_2001_RemoteEdit_Server(receive_lp).Password$ = net get string()
    next receive_lp
  
  `Usernames logged into the server
  for Receive_UN_lp = 1 to c_ENG_MaxServerClients
    LOGIN_ID_Universal_CF2_2001_ServerUsernames(Receive_UN_lp).Username$ = net get string()
  next Receive_UN_lp

endfunction

function lib_SPYMODE_LOGIN_Get_AUClientLoginTable()

  if g_server_connected = 1
    g_Already_Transmitted_To_Server_This_Program_Loop = 1
    net send 0
    net put long 4102
    net put long 16829
    net send
    inc g_ENG_DataTransfer_Total, 2048
  endif

endfunction

function lib_SPYMODE_LOGIN_AUClientSendLoginTable(r_SpymodeClientID)


  g_Already_Transmitted_To_Server_This_Program_Loop = 1
  net send 0
  net put long 4104
  net put long 10554
  net put long r_SpymodeClientID
  
    `Send standard User ID's
    for send_lp = 1 to c_LOGIN_ID_MaxArr
      net put string LOGIN_ID(send_lp).Username$
      net put string LOGIN_ID(send_lp).Password$
    next send_lp
    
    `Send Uninversal User ID's
    for send_lp = 1 to c_LOGIN_ID_Universal_MaxArr
      net put string LOGIN_ID_Universal(send_lp).Username$
      net put string LOGIN_ID_Universal(send_lp).Password$
    next send_lp
  
  net send
  inc g_ENG_DataTransfer_Total, 2048

endfunction

function lib_SPYMODE_LOGIN_AUClientReceive_LTable()

  `This function receives the Authorised Clients Login table relayed from the Server

  `Receive standard User ID's
  for receive_lp = 1 to c_LOGIN_ID_MaxArr
    LOGIN_ID_CF2_2001_RemoteEdit_AuClient(receive_lp).Username$ = net get string()
    LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(receive_lp).Username$ = LOGIN_ID_CF2_2001_RemoteEdit_AuClient(receive_lp).Username$
    LOGIN_ID_CF2_2001_RemoteEdit_AuClient(receive_lp).Password$ = net get string()
    LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(receive_lp).Password$ = LOGIN_ID_CF2_2001_RemoteEdit_AuClient(receive_lp).Password$
  next receive_lp
  `Receive Uninversal User ID's
  for receive_lp = 1 to c_LOGIN_ID_Universal_MaxArr
    LOGIN_ID_Universal_CF2_2001_RemoteEdit_AuClient(receive_lp).Username$ = net get string()
    LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(receive_lp).Username$ = LOGIN_ID_Universal_CF2_2001_RemoteEdit_AuClient(receive_lp).Username$
    LOGIN_ID_Universal_CF2_2001_RemoteEdit_AuClient(receive_lp).Password$ = net get string()
    LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(receive_lp).Password$ = LOGIN_ID_Universal_CF2_2001_RemoteEdit_AuClient(receive_lp).Password$
  next receive_lp
 

endfunction

function lib_SPYMODE_LOGIN_SendNewAUClient_LTable()

  `This function transmits the Editable Login Table from the Spymode Client to be relayed by the
  `Server to the Authorised Client
  
  g_Already_Transmitted_To_Server_This_Program_Loop = 1
  net send 0
  net put long 4106
  net put long 27618
  
    `Send standard User ID's
    for send_lp = 1 to c_LOGIN_ID_MaxArr
      net put string LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(send_lp).Username$
      net put string LOGIN_ID_CF2_2001_RemoteEdit_LocalEdit(send_lp).Password$
    next send_lp
    
    `Send Uninversal User ID's
    for send_lp = 1 to c_LOGIN_ID_Universal_MaxArr
      net put string LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(send_lp).Username$
      net put string LOGIN_ID_Universal_CF2_2001_RemoteEdit_LocalEdit(send_lp).Password$
    next send_lp
  
  net send
  inc g_ENG_DataTransfer_Total, 2048

endfunction

function lib_SPYMODE_LOGIN_RecieveNewAUClient_LTab()

  local l_SpyModeClientID as integer

  `This function
  `1) Receives a new Login Table from the Spymode Client (relayed through the Server).
  `   and Updates the Local (Authorised Client) Login Table
  `2) Transmits the new Login Table to the Server (function also saves to disk)
  `3) Sends a command to the Authorised Client to update itself to see the changes
  
  l_SpyModeClientID = net get long()
  
  `1) Read the data packet
    `Recieve standard User ID's
    for receive_lp = 1 to c_LOGIN_ID_MaxArr
      LOGIN_ID(receive_lp).Username$ = net get string()
      LOGIN_ID(receive_lp).Password$ = net get string()
    next receive_lp
    `Send Uninversal User ID's
    for receive_lp = 1 to c_LOGIN_ID_Universal_MaxArr
      LOGIN_ID_Universal(receive_lp).Username$ = net get string()
      LOGIN_ID_Universal(receive_lp).Password$ = net get string()
    next receive_lp
    
  `2) Transmits the new Login Table to the Server (Note: This function also saves to disk)
    lib_Login_CF2_TransmitToServer()
  
  `3) Sends a command to the Authorised Client to update itself to see the changes
    g_Already_Transmitted_To_Server_This_Program_Loop = 1
    net send 0
    net put long 4108
    net put long 17926
    net put int l_SpyModeClientID
    net send
    inc g_ENG_DataTransfer_Total, 2048
   

endfunction

function _______ADV_REPORTING_SYSTEM_____________________________hsu72352k()

  `Instructions
  
  `To start the ARS when you send a command to the Server call: lib_ARS_Start_New_Report(r_SNRCmndInfo$)
  `  with the command information as the passed string.
  
  `After the ARS has been started using the lib_Start_etc use ARS_LOCAL_Add_Report to add reports to it.

endfunction

function ARS_LOCAL_Add_Report(r_report$ as string, r_ServerCheck as integer)

  if r_ServerCheck = 1
    if g_server_connected = 1
      lib_ARS_AddReport(r_report$)
    endif
  else
    lib_ARS_AddReport(r_report$)
  endif
  
endfunction

function ARS_LOCAL_Add_Report_and_Complete(r_ARaC$ as string, r_ServerCheck as integer)

  if r_ServerCheck = 1
    if g_server_connected = 1
      lib_ARS_AddReport(r_ARaC$)
    endif
  else
    lib_ARS_AddReport(r_ARaC$)
  endif
  
  g_ENG_ARS_Completion_State = 1
  g_ENG_ARS_Timer = timer()
  
endfunction

function lib_ARS_Start_New_Report(r_SNRCmndInfo$ as string, r_ServerCheck as integer)

  `ARS - Start a new Report - clear all previous reports
  
  `r_SNRCmndInfo$ = Print line string
  `r_ServerCheck = Check server connection at end of function and report

  lib_ARS_Clear_ReportArray()
  
  g_ENG_ARS_Toggle_ON = 1
  
  `The array pointer is set to -1 as the 1st increment sets it to zero.
  g_ENG_ARS_MsgArrPntr = -1
  
  g_ENG_ARS_RunCommandInfo$ = r_SNRCmndInfo$
  
  g_ENG_ARS_Completion_State = -1
  g_ENG_ARS_CntDn_Secs = 41
  
  `Lastly check if we are connected to the Server
  if r_ServerCheck = 1
    if g_server_connected = 0
      lib_ARS_AddReport("ARS New Report Function: No Connection to Server at End Of Func.")
      lib_ARS_Initiate_Completion()
    endif
  endif
  
  lib_ARS_Create_Image()

endfunction

function lib_ARS_RequestSentMsg(r_ARSrsm$ as string)

  ARS_LOCAL_Add_Report("Command Request (" + r_ARSrsm$ + ") Sent to Server at " + get time$(), 1)

endfunction

function lib_ARS_AddReport(r_libaddrep$ as string)

  `This function sorts the array and adds the report, then creates the new image
    
  if g_ENG_ARS_MsgArrPntr < c_ARS_ArraySize
    inc g_ENG_ARS_MsgArrPntr, 1
  endif
  
  `Add Array Items
  ENG_AdvRepSys_Report$(g_ENG_ARS_MsgArrPntr).report$ = r_libaddrep$
  ENG_AdvRepSys_Report$(g_ENG_ARS_MsgArrPntr).local_creation_time$ = get time$()
  
  `Create Image
  lib_ARS_Create_Image()
  


endfunction

function lib_ARS_Clear_ReportArray()

  for clear_lp = 0 to c_ARS_ArraySize
    ENG_AdvRepSys_Report$(clear_lp).report$ = "."
    ENG_AdvRepSys_Report$(clear_lp).local_creation_time$ = "."
  next clear_lp

endfunction

function lib_ARS_Create_Image()

  make bitmap from memblock 1, 12
  
  set current bitmap 1

    l_ARS_Y = 5
    d3d_starttext
    
      `Print Command Run Information
      if g_ENG_ARS_Completion_State = 1
        d3d_text 1, c_ENG_ARS_Bkgd_Width - 140, l_ARS_Y, 0, "Click box to close (" + str$(g_ENG_ARS_CntDn_Secs) + ")"
      else
        d3d_text 1, c_ENG_ARS_Bkgd_Width - 140, l_ARS_Y, 0, "Click box to close"
      endif
      
      inc l_ARS_Y, 20
      d3d_text 3, 20, l_ARS_Y, 0, "Command Run > " + g_ENG_ARS_RunCommandInfo$
      inc l_ARS_Y, 20
    
      `Print Report Array
      for print_lp = 0 to c_ARS_ArraySize
        inc l_ARS_Y, 20
        if ENG_AdvRepSys_Report$(print_lp).report$ <> "."
          d3d_text 1, 20, l_ARS_Y, 0, "> " + ENG_AdvRepSys_Report$(print_lp).report$
        else
          d3d_text 1, 20, l_ARS_Y, 0, "."
        endif
      next print_lp
      
      `Print Command Completion Status
      inc l_ARS_Y, 40
      if g_ENG_ARS_Completion_State = 1
        d3d_text 3, 20, l_ARS_Y, 0, "Command Completed."
      endif
    
    d3d_endtext
    
  get image c_ENG_AdvConlRep_Bkgd, 0, 0, c_ENG_ARS_Bkgd_Width, c_ENG_ARS_Bkgd_Height, 1
  
  delete bitmap 1
  set current bitmap 0

endfunction

function lib_ARS_Initiate_Completion()

  g_ENG_ARS_Completion_State = 1
  g_ENG_ARS_Timer = timer()

endfunction

function lib_ARS_CloseBox()

  g_ENG_ARS_Toggle_ON = -1
  
  hide sprite c_ENG_SPRITE_AdvConlRep_Bkgd

endfunction

function _______RIGHT_CLICK_MENUS_RCM______________________________tw3r()
endfunction

function ENGINE_MSE_INPUT_RightClick_ContextMenus()

  `This is the ENGINE function for all RT Screen right click mouse context menus

    `Toggle Context Menu ON/OFF
    if mouseclick() = 1 and g_RCM_MSE_INPUT_Toggle = 1
      `If use clicked outside of the L1 Right Click Menu Background Image then turn off the context menu
      if mousex() > g_INPUT_MSE_RGHTCLICKMENU_Screen_X and mousex() < g_INPUT_MSE_RGHTCLICKMENU_Screen_X + image width(c_RGHTCLICKMENU_L1_ImgBkgd) and mousey() > g_INPUT_MSE_RGHTCLICKMENU_Screen_Y and mousey() < g_INPUT_MSE_RGHTCLICKMENU_Screen_Y + image height(c_RGHTCLICKMENU_L1_ImgBkgd)
      else
      
        `If use clicked outside of the L1 Right Click Menu Background Image then turn off the context menu
        if g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 4
          if mousex() > g_INPUT_MSE_RGHTCLICKMENU_L2_PosX and mousex() < g_INPUT_MSE_RGHTCLICKMENU_L2_PosX + image width(c_RGHTCLICKMENU_L2_ImgBkgd) and mousey() > g_INPUT_MSE_RGHTCLICKMENU_L2_PosY and mousey() < g_INPUT_MSE_RGHTCLICKMENU_L2_PosY + image height(c_RGHTCLICKMENU_L2_ImgBkgd)
          else
            `If the L2 menu is active and the user clicks outside of the L1 box (checked previously) and the L2 box (checked here) then deactivate the L1+L2 menu boxes
            lib_RCM_Deactivate()
          endif
        else
          `If the L2 menu is not active and the user clicks outside of the L1 menu box then deactivate the L1 menu box
          lib_RCM_Deactivate()
        endif
      endif
    endif
    
    if mouseclick() = 2 and mouse_click(2) = -1 and g_RCM_ACTIONMENU_GlobalToggle = -1
      g_RCM_MSE_INPUT_Toggle = 1
      g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected = -1
      g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = -1
      g_INPUT_MSE_RGHTCLICKMENU_L2_SelectedMenuItem = -1
      g_INPUT_MSE_RGHTCLICKMENU_Screen_X = mousex()
        if g_INPUT_MSE_RGHTCLICKMENU_Screen_X + image width(c_RGHTCLICKMENU_L1_ImgBkgd) > screen width()
          g_INPUT_MSE_RGHTCLICKMENU_Screen_X = screen width() - image width(c_RGHTCLICKMENU_L1_ImgBkgd)
        endif
      g_INPUT_MSE_RGHTCLICKMENU_Screen_Y = mousey()
      mouse_click(2) = 1
    endif
    
    `Handle the Context Menu if it is active
    if g_RCM_MSE_INPUT_Toggle = 1
      `Handle displaying the Context Menu
      lib_RCM_HandleDisplaying()
    endif
    
    `Continuously run the actions engine each program cycle - then if one is toggled on via the right
    `click menu it will run until finished, or cancelled by the user.
    lib_RCM_ACTIONS_ENGINE()

endfunction

function lib_RCM_Deactivate()

  `Note: The right click menu system will only deactivate, and hence unlock all the locked inputs on the
  `      underlying graphical screens, if there is no menu command action running. If a command action is
  `      running then the right click context menu CANNOT be deactivated.
  
  
  if g_RCM_ACTIONMENU_GlobalToggle = -1
  
    g_RCM_MSE_INPUT_Toggle = -1
    `
    g_RCM_ACTION_Toggle_AnActionIsActive = -1
    `
    g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected = -1
    g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = -1
    g_INPUT_MSE_RGHTCLICKMENU_L2_SelectedMenuItem = -1
    
  endif

endfunction



function lib_RCM_Update_Menu_Text()

  `This function updates the required menu text
  
  
    `Group 1 - Well Database
    
    `Group 2 - Well Data

    `Group 3 - Export Time Data

    `Group 4 - Internet Syncing
      `Toggle Automatic Reconnect
      if g_AUTO_CONNECT_ON = 1
        INPUT_MSE_RGHTCLICKMENU_MenuText$(4, 1) = "Toggle Auto-Connect (Active)" 
      else
        INPUT_MSE_RGHTCLICKMENU_MenuText$(4, 1) = "Toggle Auto-Connect (Disabled)"
      endif

    `Group 5 - Settings
      `Toggle Units ft/m
      if g_ENGINE_UNITS_FT_or_M = 1
        INPUT_MSE_RGHTCLICKMENU_MenuText$(5, 1) = "Toggle Units (ft to m)"
      else
        INPUT_MSE_RGHTCLICKMENU_MenuText$(5, 1) = "Toggle Units (m to ft)"
      endif
  

endfunction

function lib_RCM_Create_MenuLayer2_Image(r_ImageHeight as integer)

  `Create the Right Click Context Menu Background Image
    
  if image exist(c_RGHTCLICKMENU_L2_ImgBkgd) = 1
    delete image c_RGHTCLICKMENU_L2_ImgBkgd
  endif
  
  if image exist(c_RGHTCLICKMENU_L2_ImgBkgd) = 0
    lib_Create_Image(c_INPUT_MSE_RGHTCLICKMENU_L2_ImgWidth, r_ImageHeight, rgb(240, 240, 240), c_RGHTCLICKMENU_L2_ImgBkgd, 1, rgb(151, 151, 151))
  endif
  
endfunction

function lib_RCM_HandleDisplaying()

  local l_TextPos_X as integer
  local l_TextPos_Y as integer
  local l_TextPosY_Increment as integer : l_TextPosY_Increment = 25
  local l_MseCheck_ItemSelected as integer
  local l_L1_MseCheck_Y as integer
  local l_L2_MseCheck_Y as integer
  local l_L2_ItemClicked as integer : l_L2_ItemClicked = -1
  local l_L2_ItemClicked_CodeStr$ as string
  local l_L2_ItemClicked_GroupPntr as integer
  local l_L2_ItemClicked_ItemPntr as integer

  lib_RCM_Update_Menu_Text()

  paste sprite c_SPRITE_RGHTCLICKMENU_Bkgd, g_INPUT_MSE_RGHTCLICKMENU_Screen_X, g_INPUT_MSE_RGHTCLICKMENU_Screen_Y

  l_TextPos_X = g_INPUT_MSE_RGHTCLICKMENU_Screen_X + 15
  l_TextPos_Y = g_INPUT_MSE_RGHTCLICKMENU_Screen_Y + 15
  
  `Highlight Option if mouse is hovering over it
  l_L1_MseCheck_Y = l_TextPos_Y
  l_MseCheck_ItemSelected = -1
  if g_RCM_ACTIONMENU_GlobalToggle = -1
    for check_lp = 1 to c_INPUT_MSE_RGHTCLICKMENU_TotalGroups
      if mousex() > g_INPUT_MSE_RGHTCLICKMENU_Screen_X and mousex() < g_INPUT_MSE_RGHTCLICKMENU_Screen_X + image width(c_RGHTCLICKMENU_L1_ImgBkgd) and mousey() > l_L1_MseCheck_Y and mousey() < l_L1_MseCheck_Y + l_TextPosY_Increment
          l_MseCheck_ItemSelected = check_lp
          g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected = l_MseCheck_ItemSelected
          g_INPUT_MSE_RGHTCLICKMENU_L1_Print_PosX = g_INPUT_MSE_RGHTCLICKMENU_Screen_X + 3
          g_INPUT_MSE_RGHTCLICKMENU_L1_Print_PosY = l_L1_MseCheck_Y - 2
          if g_INPUT_MSE_RGHTCLICKMENU_L2_SelectedMenuItem <> l_MseCheck_ItemSelected
            g_INPUT_MSE_RGHTCLICKMENU_L2_SelectedMenuItem = l_MseCheck_ItemSelected
            g_INPUT_MSE_RGHTCLICKMENU_L2_DisplayTimer = timer() + c_INPUT_MSE_RGHTCLICKMENU_Layer2ON_Timer
            g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 1
            g_INPUT_MSE_RGHTCLICKMENU_L2_MouseYPos = l_L1_MseCheck_Y - 2
          endif
      endif
      inc l_L1_MseCheck_Y, l_TextPosY_Increment
    next check_lp
  endif
  
  `If we are waiting for the timer countdown in Stage 1 and the user moves the mouse out of the box then cancel Stage 1
  if g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 1 and l_MseCheck_ItemSelected = -1
    g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = -1
    g_INPUT_MSE_RGHTCLICKMENU_L2_SelectedMenuItem = -1
  endif
  
  if mousex() > g_INPUT_MSE_RGHTCLICKMENU_Screen_X and mousex() < g_INPUT_MSE_RGHTCLICKMENU_Screen_X + image width(c_RGHTCLICKMENU_L1_ImgBkgd) and mousey() > g_INPUT_MSE_RGHTCLICKMENU_Screen_Y and mousey() < g_INPUT_MSE_RGHTCLICKMENU_Screen_Y + image height(c_RGHTCLICKMENU_L1_ImgBkgd)
    `Only display the L1 Mouse Hovered over item background highlight image if the mouse is in the L1 box
    if g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE <> 4
      `Note: if g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 4 then the highlight image is pasted as part of that code
      if g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected <> -1
        paste image c_RGHTCLICKMENU_L1_ItemSlctBkgd, g_INPUT_MSE_RGHTCLICKMENU_L1_Print_PosX, g_INPUT_MSE_RGHTCLICKMENU_L1_Print_PosY, 1
      endif
    endif
  endif
  
  
  `Display the SubLayer 2 Menu Group
    `Stage 1 - Wait for Timer to elapse before actioning any changes
      if g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 1
        if timer() > g_INPUT_MSE_RGHTCLICKMENU_L2_DisplayTimer
          g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 2
        endif
        if mouseclick() = 1
          g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 2
        endif
      endif
    `Stage 2 - Set Startup Values / Values at Start Conditions
      if g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 2
        g_INPUT_MSE_RGHTCLICKMENU_L2_PosX = g_INPUT_MSE_RGHTCLICKMENU_Screen_X + image width(c_RGHTCLICKMENU_L1_ImgBkgd)
        if g_INPUT_MSE_RGHTCLICKMENU_L2_PosX + c_INPUT_MSE_RGHTCLICKMENU_L2_ImgWidth > screen width()
          g_INPUT_MSE_RGHTCLICKMENU_L2_PosX = g_INPUT_MSE_RGHTCLICKMENU_Screen_X - c_INPUT_MSE_RGHTCLICKMENU_L2_ImgWidth
        endif
        g_INPUT_MSE_RGHTCLICKMENU_L2_PosY = g_INPUT_MSE_RGHTCLICKMENU_L2_MouseYPos
        g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 3
      endif
    `Stage 3 - Create Sub Layer 2 Menu
      if g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 3
        lib_RCM_Create_MenuLayer2_Image(INPUT_MSE_RGHTCLICKMENU_Layer2Menu_YSize_Pixels(g_INPUT_MSE_RGHTCLICKMENU_L2_SelectedMenuItem))
        g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 4
      endif
    `Stage 4 - Display the Sub Layer 2 Menu
      if g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 4
        paste image c_RGHTCLICKMENU_L2_ImgBkgd, g_INPUT_MSE_RGHTCLICKMENU_L2_PosX, g_INPUT_MSE_RGHTCLICKMENU_L2_PosY, 1
        paste image c_RGHTCLICKMENU_L1_ItemSlctBkgd, g_INPUT_MSE_RGHTCLICKMENU_L1_Print_PosX, g_INPUT_MSE_RGHTCLICKMENU_L1_Print_PosY, 1
      endif

  `Print L1 Text
  d3d_starttext
    for print_lp = 1 to c_INPUT_MSE_RGHTCLICKMENU_TotalGroups
      d3d_text 15, l_TextPos_X, l_TextPos_Y, 0, INPUT_MSE_RGHTCLICKMENU_MenuText$(print_lp, 0), g_ENGINE_COLOUR_Black
      inc l_TextPos_Y, l_TextPosY_Increment
    next print_lp
  d3d_endtext
  `Print L1 Box Graphics
  dec l_TextPos_Y, ((l_TextPosY_Increment * c_INPUT_MSE_RGHTCLICKMENU_TotalGroups) - 4)
  for print_lp = 1 to c_INPUT_MSE_RGHTCLICKMENU_TotalGroups
    paste image c_RGHTCLICKMENU_MenuArrow, l_TextPos_X + 210, l_TextPos_Y, 1
    inc l_TextPos_Y, l_TextPosY_Increment
  next print_lp

  `PRINT ALL L2 TEXT AND GRAPHICS
  
  if g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = 4 
  
    `Display Item Hovered Over image if mouse is over an item on the L2 menu
    l_L2_MseCheck_Y = g_INPUT_MSE_RGHTCLICKMENU_L2_PosY + 15
    
    for check_lp = 1 to INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected)
    
      if mousex() > g_INPUT_MSE_RGHTCLICKMENU_L2_PosX and mousex() < g_INPUT_MSE_RGHTCLICKMENU_L2_PosX + image width(c_RGHTCLICKMENU_L2_ImgBkgd)
      
        if mousey() > l_L2_MseCheck_Y and mousey() < l_L2_MseCheck_Y + l_TextPosY_Increment
          
          if g_RCM_ACTIONMENU_GlobalToggle = -1 
            paste image c_RGHTCLICKMENU_L2_ItemSlctBkgd, g_INPUT_MSE_RGHTCLICKMENU_L2_PosX + 3, l_L2_MseCheck_Y - 2, 1
            g_MSE_RGHTCLICKMENU_MSGBOX_L2BkgdImg_OldXPos = g_INPUT_MSE_RGHTCLICKMENU_L2_PosX + 3
            g_MSE_RGHTCLICKMENU_MSGBOX_L2BkgdImg_OldYPos =  l_L2_MseCheck_Y - 2
          endif
          
          if mouseclick() = 1 and g_RCM_Left_MouseClick = -1 and g_RCM_ACTIONMENU_GlobalToggle = -1
            l_L2_ItemClicked = 1
            l_L2_ItemClicked_CodeStr$ = INPUT_MSE_RGHTCLICKMENU_MenuText_Code$(g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected, check_lp)
            l_L2_ItemClicked_GroupPntr = g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected
            l_L2_ItemClicked_ItemPntr = check_lp
            g_RCM_Left_MouseClick = 1
            `g_RCM_MSE_INPUT_Toggle = -1
            g_UserInputBox1_InitBoxPosition_X = (screen width() / 2) - (image width(c_UserInputBox1_Image) / 2)
            g_UserInputBox1_InitBoxPosition_Y = (screen height() / 2) - (image height(c_UserInputBox1_Image) / 2)
          endif
          if g_RCM_Left_MouseClick = 1 and mouseclick() = 0 then g_RCM_Left_MouseClick = -1
      
        endif
      
      endif
      
      inc l_L2_MseCheck_Y, l_TextPosY_Increment
    
    next check_lp
  
  `Not sure what this does at the moment. Hashed out when getting edit well data to work meant on second running of the RMC menu the image was displayed with the old position until it was hovered over with the mouse.
  `if g_RCM_ACTION_Toggle_AnActionIsActive = 1
  `  `paste image c_RGHTCLICKMENU_L2_ItemSlctBkgd, g_MSE_RGHTCLICKMENU_MSGBOX_L2BkgdImg_OldXPos, g_MSE_RGHTCLICKMENU_MSGBOX_L2BkgdImg_OldYPos, 1
  `endif
  
    d3d_starttext
  
      l_L2_Text_YPos = g_INPUT_MSE_RGHTCLICKMENU_L2_PosY + 15
      
      for print_lp = 1 to INPUT_MSE_RGHTCLICKMENU_MenuGroupSize(g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected)
    
        if INPUT_MSE_RGHTCLICKMENU_MenuItemEnabled(g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected, print_lp) = 1
          d3d_text 15, g_INPUT_MSE_RGHTCLICKMENU_L2_PosX + 15 , l_L2_Text_YPos, 0, INPUT_MSE_RGHTCLICKMENU_MenuText$(g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected, print_lp), g_ENGINE_COLOUR_Black
        else
          d3d_text 15, g_INPUT_MSE_RGHTCLICKMENU_L2_PosX + 15 , l_L2_Text_YPos, 0, INPUT_MSE_RGHTCLICKMENU_MenuText$(g_INPUT_MSE_RGHTCLICKMENU_L1_GroupSelected, print_lp), g_ENGINE_COLOUR_GreyedOutText
        endif
        
        inc l_L2_Text_YPos, l_TextPosY_Increment
    
      next print_lp
    
    d3d_endtext
  endif
  
  `Action any L2 Item Selected
  if l_L2_ItemClicked = 1
    if INPUT_MSE_RGHTCLICKMENU_MenuItemEnabled(l_L2_ItemClicked_GroupPntr, l_L2_ItemClicked_ItemPntr) = 1
      lib_RCM_ENG_ToggleActions(l_L2_ItemClicked_CodeStr$)
      g_RCM_ACTION_Toggle_AnActionIsActive = 1
    endif
    l_L2_ItemClicked = -1
  endif
  


endfunction

function lib_RCM_ENG_ToggleActions(r_ActionCode$ as string)

  `This function contains all the switches required for turning on the action functions. This is done
  `because we want the function to be turned on and then run being displayed on the screen until it
  `is either finished, or turned off by the user.
  
  `NOTE: g_RCM_ACTIONMENU_GlobalToggle must be turned on at the same time as the action control
  `      since it is how the code keeps the input controls for all the underlying graphical controls
  `      locked out while the action control is active.

  `Group 1 - Well Database
    if r_ActionCode$ = "RCM_BackupDatabase"
      g_RCM_ACTIONMENU_GlobalToggle = 1
      g_RCM_ACTION_Toggle_BackupDatabase = 1
      g_MSE_RGHTCLICKMENU_MSGBOX_Message1$ = lib_RCMCode_BackupDatabase("Right Click Menu")
    endif
    if r_ActionCode$ = "RCM_CreateNewWell"
      g_RCM_ACTIONMENU_GlobalToggle = 1
      g_RCM_ACTION_Toggle_CreateNewWell = 1
      g_RCM_G1_MSGBOX_StartNewWellInputStage = 1
    endif

  `Group 2 - Well Data
    if r_ActionCode$ = "RCM_EditWellData"
      g_RCM_ACTION_Toggle_EditWellData = 1
      g_RCM_G2_WellData_Stage = 1
      g_INPUTPAD_BuildValue_Final$ = ""
      g_INPUTPAD_BuildValue$ = ""
      g_INPUTPAD_MouseClick = 1
    endif
    
  `Group 3 - Export Time Data
  
  `Group 4 - Internet Syncing
    if r_ActionCode$ = "RCM_ToggleAutoConnect"
      g_RCM_ACTION_Toggle_AutoReconnect = 1
    endif
  
  `Group 5 - Program Settings
    if r_ActionCode$ = "RCM_ToggleUnits"
      g_RCM_ACTIONMENU_GlobalToggle = 1
      g_RCM_ACTION_Toggle_ToggleUnits = 1
    endif
    
  `Group 6 - Print to Image
    if r_ActionCode$ = "RCM_Print_To_Image_CmntYes"
      if g_ENG_RTPRNT2IMG_CTRLFLOW = -1 then g_ENG_RTPRNT2IMG_CTRLFLOW = 1
      g_RTPRNT2IMG_DisplayCmnts_Toggle_OFF = -1
      g_RTPRNT2IMG_AddCmntStr$ = "(With Comments)"
    endif
    if r_ActionCode$ = "RCM_Print_To_Image_CmntNo"
      if g_ENG_RTPRNT2IMG_CTRLFLOW = -1 then g_ENG_RTPRNT2IMG_CTRLFLOW = 1
      g_RTPRNT2IMG_DisplayCmnts_Toggle_OFF = 1
      g_RTPRNT2IMG_AddCmntStr$ = "(No Comments)"
    endif


endfunction

function lib_RCM_ACTIONS_ENGINE()

  `This function is the flow control engine for all context menu actions. The actions are turned on by
  `switching their toggles on. This function is running every program cycle allowing the action functions
  `to continue running one they are switched on.
  
  `------------------------------------------------------------
  `Group 1 - Well Database
    if g_RCM_ACTION_Toggle_BackupDatabase = 1
      lib_RCM_G1_Action_BackupDatabase()
    endif
    if g_RCM_ACTION_Toggle_CreateNewWell = 1
      lib_RCM_G1_Action_CreateNewWell()
    endif
    
  `Group 2 - Well Data
    if g_RCM_ACTION_Toggle_EditWellData = 1
      `Don't run the INPUT Box if the client shutdown message box is running
      if g_EXIT_Client_Toggle = -1
        lib_RCM_G2_Action_EditWellData()
      endif
    endif
    
  `Group 3 - Export Time Data
  
  `Group 4 - Internet Syncing
    if g_RCM_ACTION_Toggle_AutoReconnect = 1
      lib_RCM_G4_Action_ToggleAutoReconnect()
    endif
  
  `Group 5 - Program Settings
    if g_RCM_ACTION_Toggle_ToggleUnits = 1
      lib_RCM_G5_Action_ToggleUnits()
    endif
  `------------------------------------------------------------
    
    
  `--------------------------------------------------------------------------------------------
    `Close Actions Box: if the deactivate flag is set then all action variables are set to -1 to turn off whichever is on/everything.
    if g_RCM_ACTIONMENU_Deactivate = 1 and mouseclick() = 0
      g_RCM_ACTIONMENU_Deactivate = -1
      g_RCM_ACTIONMENU_GlobalToggle = -1
        `Group 1 Variable NULLs / Shutdown
          g_RCM_ACTION_Toggle_BackupDatabase = -1
          g_RCM_ACTION_Toggle_CreateNewWell = -1
        `Group 2 - Well Data
        `Group 3 - Export Time Data
        `Group 4 - Internet Syncing
        `Group 5 - Program Settings
          g_RCM_ACTION_Toggle_ToggleUnits = -1
      lib_RCM_Deactivate()
    endif
  `--------------------------------------------------------------------------------------------
    


endfunction

function lib_RCM_DisplayHandle_MSGBOX()

  local l_InputBox_X as integer
  local l_InputBox_Y as integer
  
  l_InputBox_X = g_UserInputBox1_InitBoxPosition_X
  l_InputBox_Y = g_UserInputBox1_InitBoxPosition_Y


  paste image c_UserInputBox1_Image, l_InputBox_X, l_InputBox_Y, 1

  `Handle dragging the box
  if mousex() > l_InputBox_X and mousex() < l_InputBox_X + 462
    if mousey() > l_InputBox_Y and mousey() < l_InputBox_Y + 29
      if mouseclick() = 1 and g_MSE_RGHTCLICKMENU_MSGBOX_MouseClick = -1
        g_MSE_RGHTCLICKMENU_MSGBOX_MouseClick = 1
        g_MSE_RGHTCLICKMENU_MSGBOX_Pos_OldX = mousex()
        g_MSE_RGHTCLICKMENU_MSGBOX_Pos_OldY = mousey()
      endif
    endif
  endif
  if g_MSE_RGHTCLICKMENU_MSGBOX_MouseClick = 1 and mouseclick() = 0 then g_MSE_RGHTCLICKMENU_MSGBOX_MouseClick = -1
  `  
  if g_MSE_RGHTCLICKMENU_MSGBOX_MouseClick = 1
    l_MouseDiff_X = g_MSE_RGHTCLICKMENU_MSGBOX_Pos_OldX - mousex()
    l_MouseDiff_Y = g_MSE_RGHTCLICKMENU_MSGBOX_Pos_OldY - mousey()
    g_UserInputBox1_InitBoxPosition_X = g_UserInputBox1_InitBoxPosition_X - l_MouseDiff_X
    g_UserInputBox1_InitBoxPosition_Y = g_UserInputBox1_InitBoxPosition_Y - l_MouseDiff_Y
    g_MSE_RGHTCLICKMENU_MSGBOX_Pos_OldX = mousex()
    g_MSE_RGHTCLICKMENU_MSGBOX_Pos_OldY = mousey()
  endif

  `Handle Close Button
  if mousex() > l_InputBox_X + 408 and mousex() < l_InputBox_X + 457 and mousey() > l_InputBox_Y + 1 and mousey() < l_InputBox_Y + 18
    paste image c_DISPLAY_CLOSEButton_LIT, l_InputBox_X + 409, l_InputBox_Y + 2
    if mouseclick() = 1
      g_RCM_ACTIONMENU_Deactivate = 1
    endif
  endif
  
  `CLOSE Button
  if mousex() > l_InputBox_X + 358 and mousex() < l_InputBox_X + 432 and mousey() > l_InputBox_Y + 196 and mousey() < l_InputBox_Y + 218
    paste image c_ENG_WinStyle_CLOSE_LitImgMain, l_InputBox_X + 359, l_InputBox_Y + 197
    if mouseclick() = 1
      g_RCM_ACTIONMENU_Deactivate = 1
    endif
  endif

endfunction

function lib_RCM_G1_Action_BackupDatabase()

  local l_MSGBOX_X as integer
  local l_MSGBOX_Y as integer
  local l_MSGBOX_TextX as integer
  local l_MSGBOX_TextY as integer

  l_MSGBOX_X = g_UserInputBox1_InitBoxPosition_X
  l_MSGBOX_Y = g_UserInputBox1_InitBoxPosition_Y
  l_MSGBOX_TextX = l_MSGBOX_X + 30
  l_MSGBOX_TextY = l_MSGBOX_Y + 50

  lib_RCM_DisplayHandle_MSGBOX()

    d3d_starttext
      d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, "LOCAL WELL BACKUP", g_ENGINE_COLOUR_Black
      inc l_MSGBOX_TextY, 30
      d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, g_MSE_RGHTCLICKMENU_MSGBOX_Message1$, g_ENGINE_COLOUR_Black
      inc l_MSGBOX_TextY, 20
      d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, g_MSE_RGHTCLICKMENU_MSGBOX_Message2$, g_ENGINE_COLOUR_Black
    
    d3d_endtext

  

endfunction

function lib_RCM_G1_Action_CreateNewWell()

  local l_MSGBOX_X as integer
  local l_MSGBOX_Y as integer
  local l_MSGBOX_TextX as integer
  local l_MSGBOX_TextY as integer
  local l_YESButtonX_Pos as integer
  local l_YESButtonX_MseOver as integer
  local l_NOButtonX_Pos as integer
  local l_NOButtonX_MseOver as integer
  local l_ButtonsY_MseOver as integer

  l_MSGBOX_X = g_UserInputBox1_InitBoxPosition_X
  l_MSGBOX_Y = g_UserInputBox1_InitBoxPosition_Y
  l_MSGBOX_TextX = l_MSGBOX_X + 30
  l_MSGBOX_TextY = l_MSGBOX_Y + 50

  lib_RCM_DisplayHandle_MSGBOX()

    d3d_starttext
      d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, "START A NEW WELL", g_ENGINE_COLOUR_Black
      inc l_MSGBOX_TextY, 20
        if g_RCM_G1_MSGBOX_StartNewWellInputStage = 1
          d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, "Are you sure you want to start a new well?", g_ENGINE_COLOUR_Black
        endif
        if g_RCM_G1_MSGBOX_StartNewWellInputStage = 2
          d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, "Are you absolutely sure you want to start a new well?", g_ENGINE_COLOUR_Black
          inc l_MSGBOX_TextY, 25
          d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, "The old well will be automatically backed up.", g_ENGINE_COLOUR_Black
          inc l_MSGBOX_TextY, 20
          d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, "Last Chance! Click YES to create a new well.", g_ENGINE_COLOUR_Black
        endif
        `Note: No text at stage 3. Stage 3 is where the action happens
        if g_RCM_G1_MSGBOX_StartNewWellInputStage = 4
          d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, "A New Well has been created!", g_ENGINE_COLOUR_Black
          inc l_MSGBOX_TextY, 25
          
          d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, g_MSE_RGHTCLICKMENU_MSGBOX_OldDBDelete$, g_ENGINE_COLOUR_Black
          inc l_MSGBOX_TextY, 20
          d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, g_MSE_RGHTCLICKMENU_MSGBOX_NewDBCreate$, g_ENGINE_COLOUR_Black
          inc l_MSGBOX_TextY, 25
          
          d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, "Old Well Backup Filename: " + g_RCM_G1_MSGBOX_BkUpPath_Filename$, g_ENGINE_COLOUR_Black
          inc l_MSGBOX_TextY, 20
          d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, "Press CLOSE to finish", g_ENGINE_COLOUR_Black
        endif
    d3d_endtext
    
    inc l_MSGBOX_TextY, 50
    l_YESButtonX_Pos = l_MSGBOX_TextX + 20
    l_YESButtonX_MseOver = l_MSGBOX_TextX + 19
    l_NOButtonX_Pos = l_MSGBOX_TextX + 130
    l_NOButtonX_MseOver = l_MSGBOX_TextX + 129
    
    l_ButtonsY_Pos = l_MSGBOX_TextY
    l_ButtonsY_MseOver = l_MSGBOX_TextY - 1
    l_Buttons2Y_Pos = l_MSGBOX_TextY + 10
    l_Buttons2Y_MseOver = l_MSGBOX_TextY + 9
    
    if g_RCM_G1_MSGBOX_StartNewWellInputStage = 1
      if mousex() > l_YesButtonX_MseOver and mousex() < l_YesButtonX_MseOver + image width(c_ENG_WinStyle_YES_UnLitImg) and mousey() > l_ButtonsY_MseOver and mousey() <  l_ButtonsY_MseOver + 25
        paste image c_ENG_WinStyle_YES_LitImg, l_YesButtonX_Pos, l_ButtonsY_Pos, 1
        if mouseclick() = 1 and g_RCM_G1_MSGBOX_StartNewWellMouseclick = -1
          g_RCM_G1_MSGBOX_StartNewWellInputStage = 2
          g_RCM_G1_MSGBOX_StartNewWellMouseclick = 1
        endif 
      else
        paste image c_ENG_WinStyle_YES_UnLitImg, l_YesButtonX_Pos, l_ButtonsY_Pos, 1
      endif
      if mousex() > l_NOButtonX_MseOver and mousex() < l_NOButtonX_MseOver + image width(c_ENG_WinStyle_NO_UnLitImg) and mousey() > l_ButtonsY_MseOver and mousey() <  l_ButtonsY_MseOver + 25
        paste image c_ENG_WinStyle_NO_LitImg, l_NOButtonX_Pos, l_ButtonsY_Pos, 1
        if mouseclick() = 1 and g_RCM_G1_MSGBOX_StartNewWellMouseclick = -1
          g_RCM_ACTIONMENU_Deactivate = 1
          g_RCM_G1_MSGBOX_StartNewWellMouseclick = 1
        endif  
      else
        paste image c_ENG_WinStyle_NO_UnLitImg, l_NOButtonX_Pos, l_ButtonsY_Pos, 1
      endif
    endif
    
    if g_RCM_G1_MSGBOX_StartNewWellInputStage = 2
      if mousex() > l_YesButtonX_MseOver and mousex() < l_YesButtonX_MseOver + image width(c_ENG_WinStyle_YES_UnLitImg) and mousey() > l_Buttons2Y_MseOver and mousey() <  l_Buttons2Y_MseOver + 25
        paste image c_ENG_WinStyle_YES_LitImg, l_YesButtonX_Pos, l_Buttons2Y_Pos, 1
        if mouseclick() = 1 and g_RCM_G1_MSGBOX_StartNewWellMouseclick = -1
          g_RCM_G1_MSGBOX_StartNewWellInputStage = 3
          g_RCM_G1_MSGBOX_StartNewWellMouseclick = 1
        endif 
      else
        paste image c_ENG_WinStyle_YES_UnLitImg, l_YesButtonX_Pos, l_Buttons2Y_Pos, 1
      endif
      if mousex() > l_NOButtonX_MseOver and mousex() < l_NOButtonX_MseOver + image width(c_ENG_WinStyle_NO_UnLitImg) and mousey() > l_Buttons2Y_MseOver and mousey() <  l_Buttons2Y_MseOver + 25
        paste image c_ENG_WinStyle_NO_LitImg, l_NOButtonX_Pos, l_Buttons2Y_Pos, 1
        if mouseclick() = 1 and g_RCM_G1_MSGBOX_StartNewWellMouseclick = -1
          g_RCM_ACTIONMENU_Deactivate = 1
          g_RCM_G1_MSGBOX_StartNewWellMouseclick = 1
        endif  
      else
        paste image c_ENG_WinStyle_NO_UnLitImg, l_NOButtonX_Pos, l_Buttons2Y_Pos, 1
      endif
    endif
    
    if g_RCM_G1_MSGBOX_StartNewWellInputStage = 3
      lib_RCMCode_StartNewWell()
      g_RCM_G1_MSGBOX_StartNewWellInputStage = 4
    endif

    if mouseclick() = 0 and g_RCM_G1_MSGBOX_StartNewWellMouseclick = 1 then g_RCM_G1_MSGBOX_StartNewWellMouseclick = -1

endfunction

function lib_RCM_G2_Action_EditWellData()

  local l_RETURN_VAL# as float
  local l_Menu_BkgdImgY as integer
  local l_MenuBox_Pos_X as integer
  local l_MenuBox_Pos_Y as integer
  local l_Exit_INPUTPAD as integer : l_Exit_INPUTPAD = -1

  `NOTE: Flow Control is controlled using [g_RCM_G2_WellData_Stage]
  `      -1 : Startup NULL Value
  `       1 : MENU: Create Background Image
  `       2 : MENU: Choose to EDIT Hole Size or Pipe OD/IDs
  `       3 : Edit HOLE SIZE, PIPE OD or PIPE ID

  

  `LOCKOUT INPUT COMMANDS
  g_LOCKOUT_INPUTPAD_ChartInfoBoxes = 1
  g_LOCKOUT_INPUTPAD_TimePeriodButtons = 1
  g_LOCKOUT_INPUTPAD_DS_ChannelRanges = 1
  g_LOCKOUT_INPUTPAD_PITS_ChannelRanges = 1
  
  `Stop displaying the input menu, but still leave the RCM system running
  g_RCM_MSE_INPUT_Toggle = -1
  `g_INPUT_MSE_RGHTCLICKMENU_L2_STAGE = -1
  
    l_MenuBox_Pos_X = g_ENG_Half_Screen_Width - (c_RGHTCLICKMENU_L2_ImgBkgd / 2)
    l_MenuBox_Pos_Y = g_ENG_Half_Screen_Height - (c_RGHTCLICKMENU_L2_ImgBkgd / 2)
  
    `STAGE 1 - MENU: Create Background Image
      if g_RCM_G2_WellData_Stage = 1
        l_Menu_BkgdImgY = 10 + (6 * 25) + 15
        lib_RCM_Create_MenuLayer2_Image(l_Menu_BkgdImgY)
        g_RCM_G2_WellData_Stage = 2
      endif

    `STAGE 2 - MENU: Choose to EDIT Hole Size or Pipe OD/IDs
      if g_RCM_G2_WellData_Stage = 2
        paste image c_RGHTCLICKMENU_L2_ImgBkgd, l_MenuBox_Pos_X, l_MenuBox_Pos_Y, 1
        `If hover mouse over text display background text selection image
        if mousex() > l_MenuBox_Pos_X and mousex() < l_MenuBox_Pos_X + image width(c_RGHTCLICKMENU_L2_ImgBkgd) and mousey() > l_MenuBox_Pos_Y and mousey() < l_MenuBox_Pos_Y + image height(c_RGHTCLICKMENU_L2_ImgBkgd)  
          for check_lp = 0 to 5
            if check_lp > 0
              l_Start_YPos = l_MenuBox_Pos_Y + 15 + (check_lp * 25)
              if mousey() > l_Start_YPos and mousey() < l_Start_YPos + 22
                paste image c_RGHTCLICKMENU_L2_ItemSlctBkgd, l_MenuBox_Pos_X + 3, l_Start_YPos - 2, 1
                if mouseclick() = 1
                  g_RCM_G2_WellData_EditType = check_lp
                  g_RCM_G2_WellData_Stage = 3
                endif
              endif
            endif
          next check_lp
        endif
        `Display Text
        d3d_starttext
          `
          d3d_text 15, l_MenuBox_Pos_X + 15, l_MenuBox_Pos_Y + 15, 0, "CHOOSE AN OPTION TO EDIT:", g_ENGINE_COLOUR_Black
          d3d_text 15, l_MenuBox_Pos_X + 15, l_MenuBox_Pos_Y + 40, 0, " HOLE: Edit Hole OD (" + str$(WELLDATA_HoleID#, 3) + ")", g_ENGINE_COLOUR_Black
          d3d_text 15, l_MenuBox_Pos_X + 15, l_MenuBox_Pos_Y + 65, 0, " PIPE: Edit Pipe OD (" + str$(WELLDATA_PipeOD#, 3) + ")", g_ENGINE_COLOUR_Black
          d3d_text 15, l_MenuBox_Pos_X + 15, l_MenuBox_Pos_Y + 90, 0, " PIPE: Edit Pipe ID (" + str$(WELLDATA_PipeID#, 3) + ")", g_ENGINE_COLOUR_Black
          d3d_text 15, l_MenuBox_Pos_X + 15, l_MenuBox_Pos_Y + 115, 0, " MM Factor revs/gal (" + str$(WELLDATA_MudMotorFactor_RevsGallon#, 3) + ")", g_ENGINE_COLOUR_Black
          `
          d3d_text 15, l_MenuBox_Pos_X + 15, l_MenuBox_Pos_Y + 140, 0, "CLOSE", g_ENGINE_COLOUR_Black
        d3d_endtext
      endif
      
      
    `d3d_text 2, l_GX + 30, l_GY + sp, 0, str$(WELLDATA_HoleID#, 4), g_ENGINE_COLOUR_Black
    `d3d_text 2, l_GX + 120, l_GY + sp, 0, str$(WELLDATA_PipeOD#, 4), g_ENGINE_COLOUR_Black
    `d3d_text 2, l_GX + 220, l_GY + sp, 0, str$(WELLDATA_PipeID#, 4), g_ENGINE_COLOUR_Black
      
      
      
    
    `STAGE 3 - EDIT Hole Size or Pipe OD/IDs
      if g_RCM_G2_WellData_Stage = 3
      
        `Edit HOLE OD - WELLDATA_HoleID#
          if g_RCM_G2_WellData_EditType = 1
            l_RETURN_VAL# = INPUTPAD_DISPLAY_Inputpad("Edit Hole OD")
          endif
        `Edit PIPE OD - WELLDATA_PipeOD#
          if g_RCM_G2_WellData_EditType = 2
            l_RETURN_VAL# = INPUTPAD_DISPLAY_Inputpad("Edit Pipe OD")
          endif
        `Edit PIPE ID - WELLDATA_PipeID#
          if g_RCM_G2_WellData_EditType = 3
            l_RETURN_VAL# = INPUTPAD_DISPLAY_Inputpad("Edit Pipe ID")
          endif
        `Edit MUDMOTOR - MUDMOTOR FACTOR
          if g_RCM_G2_WellData_EditType = 4
            l_RETURN_VAL# = INPUTPAD_DISPLAY_Inputpad("Edit Mud Motor Factor")
          endif
        `Close Input Box
          if g_RCM_G2_WellData_EditType = 5
            l_Exit_INPUTPAD = 1
          endif
          
          if l_RETURN_VAL# = -9999
            l_Exit_INPUTPAD = 1
          endif
          
          if l_RETURN_VAL# <> -1 and l_RETURN_VAL# <> -9999
          
            if g_RCM_G2_WellData_EditType = 1
              WELLDATA_HoleID# = l_RETURN_VAL#
              SAVE_WELL_DATA_File()
              l_Exit_INPUTPAD = 1
            endif
            
            if g_RCM_G2_WellData_EditType = 2
              WELLDATA_PipeOD# = l_RETURN_VAL#
              SAVE_WELL_DATA_File()
              l_Exit_INPUTPAD = 1
            endif
            
            if g_RCM_G2_WellData_EditType = 3
              WELLDATA_PipeID# = l_RETURN_VAL#
              SAVE_WELL_DATA_File()
              l_Exit_INPUTPAD = 1
            endif
            
            if g_RCM_G2_WellData_EditType = 4
              WELLDATA_MudMotorFactor_RevsGallon# = l_RETURN_VAL#
              SAVE_WELL_DATA_File()
              l_Exit_INPUTPAD = 1
            endif
          
          endif
       
          
      endif
      
      if l_Exit_INPUTPAD = 1
        INPUTPAD_Deactivate()
        g_RCM_ACTION_Toggle_EditWellData = -1
        g_LOCKOUT_INPUTPAD_ChartInfoBoxes = -1
        g_LOCKOUT_INPUTPAD_TimePeriodButtons = -1
        g_LOCKOUT_INPUTPAD_DS_ChannelRanges = -1
        g_LOCKOUT_INPUTPAD_PITS_ChannelRanges = -1
        g_INPUTPAD_Startup_Stage = -1
        g_INFOBOX_INPUT_LMB_State = 1
        g_INFOBOX_INPUT_LMB_CheckForModeState2 = -99
      endif



endfunction


function lib_RCM_G4_Action_ToggleAutoReconnect()

  if g_AUTO_CONNECT_ON = 1
    g_AUTO_CONNECT_ON = -1
  else
    g_AUTO_CONNECT_ON = 1
  endif
  
  SAVE_Engine_Setup()
  
  g_RCM_ACTION_Toggle_AutoReconnect = -1

endfunction

function lib_RCM_G5_Action_ToggleUnits()

  lib_AUClient_ToggleNetworkUnits()
  
  g_RCM_ACTIONMENU_Deactivate = 1
  g_RCM_ACTION_Toggle_ToggleUnits = -1

endfunction

function lib_RCM_G6_ENG_PrintToImage()

  if g_ENG_RTPRNT2IMG_CTRLFLOW > 1
    lib_RCM_G6_1_PrintToImage()
  endif

  if g_ENG_RTPRNT2IMG_CTRLFLOW = 1
    lib_RCM_Deactivate()
    g_RTPRNT2IMG_Start_DS_ScrollOffset = g_DS_CHART_Scroll_Array_Offset
    g_RTPRNT2IMG_Start_PITS_ScrollOffset = g_PITS_CHART_Scroll_Array_Offset
    g_ENG_RTPRNT2IMG_CTRLFLOW = 2
  endif
  

endfunction

function lib_RCM_G6_1_PrintToImage()

  `This function is designed to do as best as possible towards printing a PDF. Printing a PDF
  `is unlikely, but creating a bmp or jpg is an alternative. So this function creates a composite
  `time based image and saves it to a destination. Later on it might be possible to get it to print
  `to something useful, but creating the image file in memory is the first step anyway - simple step
  `to save it.
  
  `CONTROL FLOW DESCRIPTIONS (Numbers/Sections are as they appear in the program code)
  ` SETUP ENVIRONMENT
  ` 1 = Deactivate the RCM Menu so it doesn't show on the images (Done in lib_RCM_G6_ENG_PrintToImage() )
  ` 2 = Check FOLDER Status (Exists / Create)
  ` 3 = Get FILENAME
  ` 4 = Handle Bitmaps (Delete if existing / Create if new)
  `
  `   GET IMAGES AND COMPILE TO MASTER IMAGE
  `   8 = GRAB IMAGE - SECTION 4
  `   7 = GRAB IMAGE - SECTION 3
  `   6 = GRAB IMAGE - SECTION 2
  `   5 = GRAB IMAGE - HEADER + SECTION 1
  `
  `   9 = Handle the Final SaveFile Image Creation/Save & EXIT CONDITION
  
  
  local l_SaveImageFolder$ as string : l_SaveImageFolder$ = dir desktop() + "\GDS RDS Images"
  
  local l_FileIncrement as integer : l_FileIncrement = 0
  local l_BuildFile_FullPath$ as string
  local l_BuildFile_Filename$ as string
  local l_Prnt2Img_Filename$ as string
  '
  local l_SaveImage_FullPath$ as string 
  local l_SaveImage_Filename$ as string 
  '
  local l_ExitCondition as integer
  '
  local l_HeaderYOffset as integer : l_HeaderYOffset = 194
  
  
  `2: Handle FOLDER
  if g_ENG_RTPRNT2IMG_CTRLFLOW = 2
  	`Check Folder Exists - If not then create it
  	if path exist(l_SaveImageFolder$) = 0
    	make directory l_SaveImageFolder$
    	g_RTPRNT2IMG_Info_Folder$ = "Folder Created OK"
  	else
    	g_RTPRNT2IMG_Info_Folder$ = "Folder Already Exists"  
  	endif
    g_ENG_RTPRNT2IMG_CTRLFLOW = 3
  endif
   
  `3: Get FILENAME
  if g_ENG_RTPRNT2IMG_CTRLFLOW = 3
  	`Get Next Free File Increment Number
  	l_ExitCondition = -1
  	repeat
    	l_BuildFile_Filename$ = "\GDS_RDS_ImageExport_" + str$(l_FileIncrement) + ".bmp"
    	l_Prnt2Img_Filename$ = "GDS_RDS_ImageExport_" + str$(l_FileIncrement) + ".bmp"
    	g_RTPRNT2IMG_Filename$ = l_Prnt2Img_Filename$
    	l_BuildFile_FullPath$ = l_SaveImageFolder$ + l_BuildFile_Filename$
    	if file exist(l_BuildFile_FullPath$) = 1
      	inc l_FileIncrement, 1
    	else
      	`l_SaveImage_FullPath$ = l_BuildFile_FullPath$
      	g_RTPRNT2IMG_SaveImage_FullPath$ = l_BuildFile_FullPath$
      	l_ExitCondition = 1
    	endif
  	until l_ExitCondition = 1
  	g_ENG_RTPRNT2IMG_CTRLFLOW = 4
  endif 	
  
  `4 = Handle Bitmaps (Delete if existing / Create if new)
  if g_ENG_RTPRNT2IMG_CTRLFLOW = 4
  	`Ensure working/build bitmaps do not exist
  	if bitmap exist(c_SAVEIMAGE_BuildBitmap) = 1 then delete bitmap c_SAVEIMAGE_BuildBitmap
  	if bitmap exist(c_SAVEIMAGE_FinalBMPGrab) = 1 then delete bitmap c_SAVEIMAGE_FinalBMPGrab
  	  if g_ENGINE_HIST_DRILL_Screen_Routing = 1
  	    create bitmap c_SAVEIMAGE_BuildBitmap, 991, ((451 * 4) + l_HeaderYOffset)
  	  endif
  	  if g_ENGINE_HIST_DRILL_Screen_Routing = 3
  	    create bitmap c_SAVEIMAGE_BuildBitmap, 1306, ((451 * 4) + l_HeaderYOffset)
  	  endif
  	g_ENG_RTPRNT2IMG_CTRLFLOW = 5
  endif
  
  
  `------------------------------------------------------------------------------------------
  
 		`	if g_DISPLAY_SCREEN_TimePeriod_Button = 1 then l_TimeDiv = 1
 		`	if g_DISPLAY_SCREEN_TimePeriod_Button = 2 then l_TimeDiv = 2
 		`	if g_DISPLAY_SCREEN_TimePeriod_Button = 3 then l_TimeDiv = 8
 		`	if g_DISPLAY_SCREEN_TimePeriod_Button = 4 then l_TimeDiv = 16
  
  
  `8 = GRAB IMAGE - SECTION 4
    if g_ENG_RTPRNT2IMG_CTRLFLOW = 8
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1
      	set current bitmap 0
      	get image c_SAVEIMAGE_GetImage, 9, 197, 1000, 647, 1
      	set current bitmap c_SAVEIMAGE_BuildBitmap
      	paste image c_SAVEIMAGE_GetImage, 0, 1350 + l_HeaderYOffset
      	delete image c_SAVEIMAGE_GetImage
      endif
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3
      	set current bitmap 0
      	get image c_SAVEIMAGE_GetImage, 9, 197, 1315, 647, 1
      	set current bitmap c_SAVEIMAGE_BuildBitmap
      	paste image c_SAVEIMAGE_GetImage, 0, 1350 + l_HeaderYOffset
      	delete image c_SAVEIMAGE_GetImage
      endif
      g_ENG_RTPRNT2IMG_CTRLFLOW = 9
    endif
  
  `7 = GRAB IMAGE - SECTION 3
    if g_ENG_RTPRNT2IMG_CTRLFLOW = 7
    
      `
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1 : ` DRILLING SCREEN
        set current bitmap 0
      	get image c_SAVEIMAGE_GetImage, 9, 197, 1000, 647, 1
      	set current bitmap c_SAVEIMAGE_BuildBitmap
      	paste image c_SAVEIMAGE_GetImage, 0, 900 + l_HeaderYOffset
      	delete image c_SAVEIMAGE_GetImage
      	if g_DISPLAY_SCREEN_TimePeriod_Button = 1 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(450, 1)
      	if g_DISPLAY_SCREEN_TimePeriod_Button = 2 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(900, 1)
      	if g_DISPLAY_SCREEN_TimePeriod_Button = 3 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(3600, 1)
      	if g_DISPLAY_SCREEN_TimePeriod_Button = 4 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(7200, 1)
      endif
      `
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3 : ` PITS SCREEN
        set current bitmap 0
      	get image c_SAVEIMAGE_GetImage, 9, 197, 1315, 647, 1
      	set current bitmap c_SAVEIMAGE_BuildBitmap
      	paste image c_SAVEIMAGE_GetImage, 0, 900 + l_HeaderYOffset
      	delete image c_SAVEIMAGE_GetImage
        if g_PITS_SCREEN_TimePeriod_Button = 1 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(450, 2)
        if g_PITS_SCREEN_TimePeriod_Button = 2 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(900, 2)
      	if g_PITS_SCREEN_TimePeriod_Button = 3 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(3600, 2)
      	if g_PITS_SCREEN_TimePeriod_Button = 4 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(7200, 2)
      endif
      `
      g_ENG_RTPRNT2IMG_CTRLFLOW = 8
    endif
  
  `6 = GRAB IMAGE - SECTION 2
    if g_ENG_RTPRNT2IMG_CTRLFLOW = 6
      `
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1 : ` DRILLING SCREEN
      	set current bitmap 0
      	get image c_SAVEIMAGE_GetImage, 9, 197, 1000, 647, 1
      	set current bitmap c_SAVEIMAGE_BuildBitmap
      	paste image c_SAVEIMAGE_GetImage, 0, 450 + l_HeaderYOffset
      	delete image c_SAVEIMAGE_GetImage
      	if g_DISPLAY_SCREEN_TimePeriod_Button = 1 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(450, 1)
      	if g_DISPLAY_SCREEN_TimePeriod_Button = 2 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(900, 1)
      	if g_DISPLAY_SCREEN_TimePeriod_Button = 3 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(3600, 1)
      	if g_DISPLAY_SCREEN_TimePeriod_Button = 4 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(7200, 1)
      endif
      `
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3 : ` PITS SCREEN
      	set current bitmap 0
      	get image c_SAVEIMAGE_GetImage, 9, 197, 1315, 647, 1
      	set current bitmap c_SAVEIMAGE_BuildBitmap
      	paste image c_SAVEIMAGE_GetImage, 0, 450 + l_HeaderYOffset
      	delete image c_SAVEIMAGE_GetImage
        if g_PITS_SCREEN_TimePeriod_Button = 1 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(450, 2)
        if g_PITS_SCREEN_TimePeriod_Button = 2 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(900, 2)
      	if g_PITS_SCREEN_TimePeriod_Button = 3 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(3600, 2)
      	if g_PITS_SCREEN_TimePeriod_Button = 4 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(7200, 2)
      endif
      `
      g_ENG_RTPRNT2IMG_CTRLFLOW = 7
    endif
  
  `5 = GRAB IMAGE - HEADER + SECTION 1
  	if g_ENG_RTPRNT2IMG_CTRLFLOW = 5
  	  if g_ENGINE_HIST_DRILL_Screen_Routing = 1 : ` DRILLING SCREEN
        `HEADER
          set current bitmap 0
    			get image c_SAVEIMAGE_GetImage, 9, 0, 1000, l_HeaderYOffset, 1
    			set current bitmap c_SAVEIMAGE_BuildBitmap
    			paste image c_SAVEIMAGE_GetImage, 0, 0
    			delete image c_SAVEIMAGE_GetImage
    		`SECTION 1
    	  	set current bitmap 0
    			get image c_SAVEIMAGE_GetImage, 9, 197, 1000, 647, 1
    			set current bitmap c_SAVEIMAGE_BuildBitmap
    			paste image c_SAVEIMAGE_GetImage, 0, 0 + l_HeaderYOffset
    			delete image c_SAVEIMAGE_GetImage
      	if g_DISPLAY_SCREEN_TimePeriod_Button = 1 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(450, 1)
      	if g_DISPLAY_SCREEN_TimePeriod_Button = 2 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(900, 1)
      	if g_DISPLAY_SCREEN_TimePeriod_Button = 3 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(3600, 1)
      	if g_DISPLAY_SCREEN_TimePeriod_Button = 4 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(7200, 1)
      endif
      `
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3 : ` PITS SCREEN
        `HEADER
          set current bitmap 0
    			get image c_SAVEIMAGE_GetImage, 9, 0, 1315, l_HeaderYOffset, 1
    			set current bitmap c_SAVEIMAGE_BuildBitmap
    			paste image c_SAVEIMAGE_GetImage, 0, 0
    			delete image c_SAVEIMAGE_GetImage
    		`SECTION 1
    	  	set current bitmap 0
    			get image c_SAVEIMAGE_GetImage, 9, 197, 1315, 647, 1
    			set current bitmap c_SAVEIMAGE_BuildBitmap
    			paste image c_SAVEIMAGE_GetImage, 0, 0 + l_HeaderYOffset
    			delete image c_SAVEIMAGE_GetImage
        if g_PITS_SCREEN_TimePeriod_Button = 1 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(450, 2)
        if g_PITS_SCREEN_TimePeriod_Button = 2 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(900, 2)
      	if g_PITS_SCREEN_TimePeriod_Button = 3 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(3600, 2)
      	if g_PITS_SCREEN_TimePeriod_Button = 4 then lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(7200, 2)
      endif
    	`
    	g_ENG_RTPRNT2IMG_CTRLFLOW = 6
  	endif  
  
  
  
  `------------------------------------------------------------------------------------------
  
  `9 = Handle the Final SaveFile Image Creation and Saving
  if g_ENG_RTPRNT2IMG_CTRLFLOW = 9
  
    if g_ENGINE_HIST_DRILL_Screen_Routing = 1
      g_DS_CHART_Scroll_Array_Offset = g_RTPRNT2IMG_Start_DS_ScrollOffset
      ENGINE_DS_CHART_IMAGE_Creation()
    endif
    if g_ENGINE_HIST_DRILL_Screen_Routing = 3
      g_PITS_CHART_Scroll_Array_Offset = g_RTPRNT2IMG_Start_PITS_ScrollOffset
      ENGINE_PITS_CHART_IMAGE_Creation()
    endif
    
    set current bitmap c_SAVEIMAGE_BuildBitmap
    get image c_SAVEIMAGE_FinalBMPGrab, 0, 0, bitmap width(c_SAVEIMAGE_BuildBitmap), bitmap height(c_SAVEIMAGE_BuildBitmap), 1
    save image g_RTPRNT2IMG_SaveImage_FullPath$, c_SAVEIMAGE_FinalBMPGrab
    delete bitmap c_SAVEIMAGE_BuildBitmap
  
  	`Handle MessageBox
  		if file exist(g_RTPRNT2IMG_SaveImage_FullPath$) = 1
    		g_RTPRNT2IMG_Info_File$ = "Image File Created (" + g_RTPRNT2IMG_Filename$ + ")"
    		g_RTPRNT2IMG_Info_Process$ = "Complete."
  		else
    		g_RTPRNT2IMG_Info_File$ = "ERROR: Problem writing Image File."
    		g_RTPRNT2IMG_Info_Process$ = "Unable to Complete."
  		endif

  		`Set Message Box Variables
    		g_RTPRNT2IMG_DispMsgBox = 1
    		g_RTPRNT2IMG_MseExitCondition = 1
      `Reactivate the COMMENT SYSTEM
        g_RTPRNT2IMG_DisplayCmnts_Toggle_OFF = -1
      `EXIT CONDITION
        g_ENG_RTPRNT2IMG_CTRLFLOW = -1
         
  endif 	
    	




endfunction

function lib_RCM_G6_2_Prnt2Img_HndlImgYOffsets(r_YOffsetAmnt as integer, r_ScreenType as integer)

  `NOTE: r_ScreenType: Drill Screen = 1, Pits Screen = 2

  `DRILLING RT SCREEN
  if r_ScreenType = 1
    inc g_DS_CHART_Scroll_Array_Offset, r_YOffsetAmnt
    ENGINE_DS_CHART_IMAGE_Creation()
  endif
  
  `PITS RT SCREEN
  if r_ScreenType = 2
    inc g_PITS_CHART_Scroll_Array_Offset, r_YOffsetAmnt
    ENGINE_PITS_CHART_IMAGE_Creation()
  endif

  

endfunction

function lib_RCM_G6_2_PrintToImage_MessageBox()

  `Display the Print to Image message box to inform the user whether the print to image worked / file was created etc

  local l_X as integer : l_X = g_ENG_Half_Screen_Width - (g_RTPRNT2IMG_MsgBox_Width / 2 )
  local l_Y as integer : l_Y = g_ENG_Half_Screen_Height - (g_RTPRNT2IMG_MsgBox_Height / 2)
  
  if g_RTPRNT2IMG_MseExitCondition = 999
    g_RTPRNT2IMG_DispMsgBox = -1
  endif
  
  if mouseclick() = 1 and g_RTPRNT2IMG_MseExitCondition = 2 then g_RTPRNT2IMG_MseExitCondition = 999
  if mouseclick() = 0 and g_RTPRNT2IMG_MseExitCondition = 1 then g_RTPRNT2IMG_MseExitCondition = 2
  
  `If the Chart Info Boxes were activated by the mouse clicks then turn them off.
    g_INFOBOX_DS_ModeState = -1
    g_INFOBOX_PITS_ModeState = -1
  
  paste image c_RTPRNT2IMG_MsgBox_BkgdImg, l_X, l_Y
   
  inc l_X, 25
  inc l_Y, 5
  
  d3d_starttext
  
    inc l_Y,20 : d3d_text 7, l_X, l_Y, 0, "IMAGE PRINT " + g_RTPRNT2IMG_AddCmntStr$, g_ENGINE_COLOUR_Black
    inc l_Y,20
    inc l_Y,20 : d3d_text 2, l_X, l_Y, 0, "Desktop Folder (GDSRDS Images)", g_ENGINE_COLOUR_Black
    inc l_Y,20
    inc l_Y,20 : d3d_text 2, l_X, l_Y, 0, "Folder : " + g_RTPRNT2IMG_Info_Folder$, g_ENGINE_COLOUR_Black
    inc l_Y,20 : d3d_text 2, l_X, l_Y, 0, "File     : " + g_RTPRNT2IMG_Info_File$, g_ENGINE_COLOUR_Black
    inc l_Y,20
    inc l_Y,20 : d3d_text 2, l_X, l_Y, 0, "Process : " + g_RTPRNT2IMG_Info_Process$, g_ENGINE_COLOUR_Black
  
  d3d_endtext

endfunction

function lib_RCMCode_BackupDatabase(r_RequestedFrom$ as string)

  `BACKUP From: RCM Menu - HD DB File Copy + MEM DB Write

  `This function is run from the RCM Menu.
  `All it does is create a COPY of the HD DB File.
  `For the write of a new file using MEM DB data only see - lib_Database_MEM_WriteHDBackup (called below).

  local l_OUTPUT$ as string
  local l_LogFileBuildStr$ as string
  local l_LOG_NewHDFile_FileSize as integer
  local l_LOG_NewHDFile_TotalRecs# as float
  
  local l_day$ as string
  local l_month$ as string
  local l_year$ as string
  local l_hours$ as string
  local l_minutes$ as string
  local l_date$ as string
  local l_time$ as string
  local f_filename$ as string
  local l_dest$ as string
  


  if file exist(g_CLIENT_Database_Full_Path$) = 1
    
    l_day$ = right$(left$(get date$(), 5), 2)
    l_month$ = left$(get date$(), 2)
    l_year$ =  right$(get date$(), 2)
    l_hours$ = left$(get time$(), 2)
    l_minutes$ = right$(left$(get time$(), 5), 2)
    l_date$  = l_day$ + l_month$ + l_year$
    l_time$ = l_hours$ + l_minutes$
    f_filenamePart$ = l_date$ + "_" + l_time$ + ".dat"
    f_filename$ = "BackupDB_" + l_date$ + "_" + l_time$ + ".dat"
    
    `OLD: Delete: l_dest$ = g_autodir_full_directory_path$ + "\Database\" + f_filename$
    l_dest$ = g_autodir_full_directory_path$ + "\Database\DB Backups\" + f_filename$
    
    
    
    g_RCM_G1_MSGBOX_BkUpPath_FilenamePart$ = f_filenamePart$
    g_RCM_G1_MSGBOX_BkUpFilename$ = f_filename$
    g_RCM_G1_MSGBOX_BkUpPath$ = g_autodir_full_directory_path$ + "\Database\"
    g_RCM_G1_MSGBOX_BkUpPath_Filename$ = l_dest$
    
    `Owing to errors in the past where copying the DB has just copied errors in the DB, ie using copy
    `file risks just copying the DB file with any errors it contains, screw up (could be completely screwed
    `for all we know) or missing days of data.
    `THEREFORE - when using the manual backup menu option we will also spend the time to create
    `            a new/separate file entirely new from the MEM DB.
    
    `1. - Create a COPY of the HD BD File.
      lib_LOG_FILE_Backup_Information("  ")
      lib_LOG_FILE_Backup_Information("**** NEW BACKUP at " + get time$() + " / " + l_date$ + " ****")
      lib_LOG_FILE_Backup_Information("  + ** NEW HD BACKUP (A Copy of the HD DB file) **")
      lib_LOG_FILE_Backup_Information("  + Requested from " + r_RequestedFrom$)
    	l_LogFileBuildStr$ = "  + Variable: g_DATABASE_HD_Total_Num_Records: " + str$(g_DATABASE_HD_Total_Num_Records)
    	lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
    	
    	if file exist(l_dest$) = 0
      	copy file g_CLIENT_Database_Full_Path$, l_dest$
      	if file exist(l_dest$) = 1
      	  `
        	l_OUTPUT$ = "> Successful (Filename : " + f_filename$ + ")"
        	g_AUTO_MIDNIGHTBACKUP_InfoImg_Msg1$ = "Successful"
        	`
        	l_LogFileBuildStr$ = "  + HD DB : Successful > HD File Copy Created"
        	lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        	`
        	l_LogFileBuildStr$ = "  + Filename: " + f_filename$
        	lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
          `    	
        	l_LOG_NewHDFile_FileSize = file size(l_dest$)
        	l_LOG_NewHDFile_TotalRecs# = (l_LOG_NewHDFile_FileSize + 0.0) / c_DATABASE_Bytes_Per_Record
        	l_LogFileBuildStr$ = "  + HD DB :   - File Size: " + str$(l_LOG_NewHDFile_FileSize) + "KB     Total Records: " + str$(l_LOG_NewHDFile_TotalRecs#, 2)
        	lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        	`
      	else
        	l_OUTPUT$ = "> ERROR: Database backup failed"
        	g_AUTO_MIDNIGHTBACKUP_InfoImg_Msg1$ = "Error: 101"
        	lib_LOG_FILE_Backup_Information("   + HD DB : Failed > HD File not found after copy operation")
      	endif
    	else
      	l_OUTPUT$ = "> ERROR: The backup filename already exists"
      	g_AUTO_MIDNIGHTBACKUP_InfoImg_Msg1$ = "Error: 102"
      	lib_LOG_FILE_Backup_Information("   - HD DB : Failed > The backup filename already exists")
    	endif
    	
    `2. - Write the MEM DB to the HD
      if r_RequestedFrom$ = "Midnight Backup Code"
        l_MEMDB_From$ = "Arrived at from: 'Midnight Backup Code' Request"
      else
        l_MEMDB_From$ = "Arrived at from: 'Right Click Menu' Request"
      endif
      lib_Database_MEM_WriteHDBackup(l_MEMDB_From$)
    
  else
    l_OUTPUT$ = "> ERROR: Main Database file not found."
    g_AUTO_MIDNIGHTBACKUP_InfoImg_Msg1$ = "Error: 103"
  endif

endfunction l_OUTPUT$



function lib_RCMCode_StartNewWell()

  local l_Temp$ as string
  local l_New_Filename$ as string
  local l_New_PathFilename$ as string

  l_Temp$ = lib_RCMCode_BackupDatabase("Start a New Well - lib_RCMCode_StartNewWell")
  
  `1. Backup the Old Database File
  if file exist(g_RCM_G1_MSGBOX_BkUpPath_Filename$) = 1
    l_New_Filename$ = "OLD_WELL_Backup_" + g_RCM_G1_MSGBOX_BkUpPath_FilenamePart$
    l_New_PathFilename$ = g_RCM_G1_MSGBOX_BkUpPath$ + l_New_Filename$
    rename file g_RCM_G1_MSGBOX_BkUpPath_Filename$, l_New_PathFilename$
    g_RCM_G1_MSGBOX_BkUpPath_Filename$ = l_New_Filename$
  endif
  
  `2. Start/Create a New Database File
  if file exist(g_CLIENT_Database_Full_Path$) = 1
    delete file g_CLIENT_Database_Full_Path$
    if file exist(g_CLIENT_Database_Full_Path$) = 1
      g_MSE_RGHTCLICKMENU_MSGBOX_OldDBDelete$ = "OLD DATABASE : Error: Unable to delete Database File"
    else
      g_MSE_RGHTCLICKMENU_MSGBOX_OldDBDelete$ = "OLD DATABASE : Old File Removed."
    endif  
  endif  
  g_DATABASE_HD_Total_Num_Records = 0
  g_DATABASE_MEM_Total_Num_Records = 0
  open datafile to write 1, g_CLIENT_Database_Full_Path$
  close datafile 1
  if file exist(g_CLIENT_Database_Full_Path$) = 1
    g_MSE_RGHTCLICKMENU_MSGBOX_NewDBCreate$ = "NEW DATABASE : Created OK."
  else
    g_MSE_RGHTCLICKMENU_MSGBOX_NewDBCreate$ = "NEW DATABASE : Error: Unable to create new database file."
  endif  
  l_SYNC_Filename$ = g_autodir_full_directory_path$ + "\Database\SyncData.dat"
  if file exist(l_SYNC_Filename$) = 1
    delete file l_SYNC_Filename$
  endif
  `Order Server to create new Serverside Database
  g_INITFunc_ProgLastRun_ForceServerNewDatabase = 1  
  
  

endfunction

function _______RT_COMMENTS_SYSTEM_________________________________________tw38g8743jawr()
endfunction

function COMMENTSYSTEM_ENGINE()

  local l_ScreenID as integer : l_ScreenID = -1
  local l_ChartID as integer : l_ChartID = -1
  local l_DataView_ArrPos as integer
  local l_PreExistCmntScreenID as integer : l_PreExistCmntScreenID = -1
  local l_PreExistCmntChartID as integer : l_PreExistCmntChartID = -1
  local l_DisplayStr$ as string
  
  `1. ADD/EDIT a Comment by clicking the MOUSE WHEEL DOWN : Get ARRAY POSITION / CHART ID Variables
  if mouseclick() = 4 and g_CMNTSYS_MseStart_MseState = -1 and g_CMNTSYS_AddNewCmnt_Stage = -1
    `1.1. Set Mouse State to Clicked
      g_CMNTSYS_MseStart_MseState = 1
      g_CMNTSYS_FlashInput_Toggle = 1
      g_CMNTSYS_FlashInput_Timer = timer()
      
      g_CMNTSYS_AddNewCmnt_AutoCloseCmnt_Timer = timer() + g_CMNTSYS_AddNewCmnt_TimerMilSecs
      
    `1.2. Determine ARRAY POSITION / CHART ID
      l_ScreenID = lib_CMNTS_INPUT_MseClk_GetScreenID()
      l_ChartID = lib_CMNTS_INPUT_MseClk_GetChartID(l_ScreenID)
    `1.3. Set g_CMNTSYS_Slctd_ArrPos
      if l_ScreenID = 1
        g_CMNTSYS_Slctd_ArrPos = (g_DATABASE_MEM_Total_Num_Records - g_DS_CHART_Scroll_Array_Offset) - ((mousey() - 197) * g_ENGINE_DS_Chart_Time_Period_Adjust)  
      endif 
      if l_ScreenID = 3
        g_CMNTSYS_Slctd_ArrPos = (g_DATABASE_MEM_Total_Num_Records - g_PITS_CHART_Scroll_Array_Offset) - ((mousey() - 197) * g_ENGINE_PITS_Chart_Time_Period_Adjust) 
      endif
      
    `1.4. Set FLAG to ACTIVATE the Add Comment System using the Array Position / Chart Variables set here.
      clear entry buffer    	
    	g_CMNTSYS_AddNewCmnt_Stage = 1
    	g_CMNTSYS_AddNewCmnt_BuildStr$ = str$(l_ScreenID) + str$(l_ChartID)
    	g_CMNTSYS_StrEditCharPos = 0
  
    `1.5. Check if a pre-existing comment is being clicked on, if it is then edit it instead  
      for check_lp = 1 to g_CMNTSYS_TotalCommentsOnScreen
      
        l_CMNT_XPos = CommentSystem(check_lp).XPos
        l_CMNT_YPos = CommentSystem(check_lp).YPos
        l_CMNT_ArrPos = CommentSystem(check_lp).Array_Pos
        l_ScreenID = CommentSystem(check_lp).ScreenID
        l_ChartID = CommentSystem(check_lp).ChartID

        l_CMNTBkgd_ImgWidth = d3d_gettextwidth(2, CommentSystem(check_lp).Comment_Text$) + 30

        if mousex() > l_CMNT_XPos and mousex() < l_CMNT_XPos + l_CMNTBkgd_ImgWidth
          if mousey() > l_CMNT_YPos and mousey() < l_CMNT_YPos + 20
          	g_CMNTSYS_AddNewCmnt_Stage = 2
          	g_CMNTSYS_Edit_ArrPos = l_CMNT_ArrPos
        		`Pull the pre-existing comment from the saved string and format
        		l_DisplayStr$ = ""
        		for buildStr_lp = 3 to len(MEM_MAIN_DATABASE(g_CMNTSYS_Edit_ArrPos).Comment$)
          		l_StrChar$ = mid$(MEM_MAIN_DATABASE(g_CMNTSYS_Edit_ArrPos).Comment$, buildStr_lp)
          		if l_StrChar$ <> "|"
            		l_DisplayStr$ = l_DisplayStr$ + l_StrChar$
          		endif
        		next buildStr_lp
        		g_CMNTSYS_StrEditCharPos = 0
            g_CMNTSYS_AddNewCmnt_BuildStr$ = str$(l_ScreenID) + str$(l_ChartID) + l_DisplayStr$
          endif
        endif
      next check_lp
      
  endif
  if mouseclick() = 0 and g_CMNTSYS_MseStart_MseState = 1 then g_CMNTSYS_MseStart_MseState = -1
  
  `2. ADD NEW COMMENT
    if g_CMNTSYS_AddNewCmnt_Stage = 1
      `2.1 Add Comment 
        lib_CMNTS_Add_New_Comment(g_CMNTSYS_Slctd_ArrPos)
    endif
    
  `3. EDIT PRE-EXISTING COMMENT
    if g_CMNTSYS_AddNewCmnt_Stage = 2
      `2.1 Edit Existing Comment (by overwriting it with a new one at the same position) 
        lib_CMNTS_Add_New_Comment(g_CMNTSYS_Edit_ArrPos)
    endif

  `4. Display Comments
    `The comments array is filled when the screen charts are changed or a comment is 
    `added, then displayed by the Display Function below.
      if g_RTPRNT2IMG_DisplayCmnts_Toggle_OFF = -1
        lib_CMNTS_Display_Comment_Display_Array()
      endif

endfunction

function lib_CMNTS_Fill_Comment_Display_Array()

  `Parse the screen space and check for comments in the MEM DB. If so then display.
  
  `NOTE: This function is only run when an update has been made to a comment or the Chart Areas, i.e. mouse scroll etc
 

  local l_Pxl1_Arr as integer
  local l_DisplayStr$ as string
  local l_StrChar$ as string
  local l_ScreenID as integer
  local l_ChartID as integer
  local l_BkgdImg_Text_XPos as integer
  local l_LoopStart as integer
  local l_LoopEnd as integer
  local l_TimeDiv as integer
  local l_ScreenType_Scroll_Array_Offset as integer

  local l_FlashCursor_BuildStr$ as string
  local l_FlashCursor_OffsetX as integer
  
  local l_space_counter as integer
  local l_space_pixel_FlashCursor as integer
  local l_space_pixel_FullCommentStr as integer

  local l_XPosFC as integer
  local l_YPosFC as integer : l_YPosFC = 444

  if g_ENGINE_Screen_Resolution = 1
    l_XPosFC = 1025
  else
    l_XPosFC = 702
  endif

    `if g_ENGINE_HIST_DRILL_Screen_Routing = 1 then l_ScreenType_Scroll_Array_Offset = g_DS_CHART_Scroll_Array_Offset
    `if g_ENGINE_HIST_DRILL_Screen_Routing = 3 then l_ScreenType_Scroll_Array_Offset = g_PITS_CHART_Scroll_Array_Offset
 
    if g_ENGINE_HIST_DRILL_Screen_Routing = 1
    
      l_ScreenType_Scroll_Array_Offset = g_DS_CHART_Scroll_Array_Offset
      
 			if g_DISPLAY_SCREEN_TimePeriod_Button = 1 then l_TimeDiv = 1
 			if g_DISPLAY_SCREEN_TimePeriod_Button = 2 then l_TimeDiv = 2
 			if g_DISPLAY_SCREEN_TimePeriod_Button = 3 then l_TimeDiv = 8
 			if g_DISPLAY_SCREEN_TimePeriod_Button = 4 then l_TimeDiv = 16
    
 			if g_DISPLAY_SCREEN_TimePeriod_Button = 1
 		  	l_LoopStart = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset) - 451
 		  	l_LoopEnd = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset)
 			endif
 			if g_DISPLAY_SCREEN_TimePeriod_Button = 2
 		  	l_LoopStart = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset) - 902
 		  	l_LoopEnd = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset)
 			endif
 			if g_DISPLAY_SCREEN_TimePeriod_Button = 3
 		  	l_LoopStart = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset) - 3608
 		  	l_LoopEnd = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset)
 			endif
 			if g_DISPLAY_SCREEN_TimePeriod_Button = 4
 		  	l_LoopStart = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset) - 7216
 		  	l_LoopEnd = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset)
 			endif
 		endif
 		
    if g_ENGINE_HIST_DRILL_Screen_Routing = 3
    
      l_ScreenType_Scroll_Array_Offset = g_PITS_CHART_Scroll_Array_Offset
      
 			if g_PITS_SCREEN_TimePeriod_Button = 1 then l_TimeDiv = 1
 			if g_PITS_SCREEN_TimePeriod_Button = 2 then l_TimeDiv = 2
 			if g_PITS_SCREEN_TimePeriod_Button = 3 then l_TimeDiv = 8
 			if g_PITS_SCREEN_TimePeriod_Button = 4 then l_TimeDiv = 16
      
 			if g_PITS_SCREEN_TimePeriod_Button = 1
 		  	l_LoopStart = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset) - 451
 		  	l_LoopEnd = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset)
 			endif
 			if g_PITS_SCREEN_TimePeriod_Button = 2
 		  	l_LoopStart = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset) - 902
 		  	l_LoopEnd = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset)
 			endif
 			if g_PITS_SCREEN_TimePeriod_Button = 3
 		  	l_LoopStart = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset) - 3608
 		  	l_LoopEnd = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset)
 			endif
 			if g_PITS_SCREEN_TimePeriod_Button = 4
 		  	l_LoopStart = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset) - 7216
 		  	l_LoopEnd = (g_DATABASE_MEM_Total_Num_Records - l_ScreenType_Scroll_Array_Offset)
 			endif
 		endif
 		
 		
 		g_CMNTSYS_TotalCommentsOnScreen = 0
 		
 		if l_LoopStart > 0 and l_LoopEnd > 0
 		
    	for check_lp = l_LoopStart to l_LoopEnd
      	
      	if MEM_MAIN_DATABASE(check_lp).Comment$ <> "00||||||||||||||||||||||||||||" and check_lp <> 0
      	
        	l_Pxl1_Arr = (int(l_LoopEnd - check_lp)/l_TimeDiv) + 197
	
        	`Get the Screen and Chart IDs from the build string
          	l_ScreenID = val(mid$(MEM_MAIN_DATABASE(check_lp).Comment$, 1))
          	l_ChartID = val(mid$(MEM_MAIN_DATABASE(check_lp).Comment$, 2))
	
        	`Set the Background Image and Text display X Positions
          	if l_ChartID = 1 then l_BkgdImg_Text_XPos = g_Block1_Mouse_MinX
          	if l_ChartID = 2 then l_BkgdImg_Text_XPos = g_Block2_Mouse_MinX
          	if l_ChartID = 3 then l_BkgdImg_Text_XPos = g_Block3_Mouse_MinX
          	if g_ENGINE_HIST_DRILL_Screen_Routing = 1
            	if l_ChartID = 4 then l_BkgdImg_Text_XPos = g_Block3_Mouse_MinX
          	endif
          	if g_ENGINE_HIST_DRILL_Screen_Routing = 3
            	if l_ChartID = 4 then l_BkgdImg_Text_XPos = g_Block4_Mouse_MinX
          	endif
	
        	`Build the display string (l_DisplayStr$) to ignore any NULL characters
        		l_DisplayStr$ = ""
        		for buildStr_lp = 3 to len(MEM_MAIN_DATABASE(check_lp).Comment$)
          		l_StrChar$ = mid$(MEM_MAIN_DATABASE(check_lp).Comment$, buildStr_lp)
          		if l_StrChar$ <> "|"
            		l_DisplayStr$ = l_DisplayStr$ + l_StrChar$
          		endif
        		next buildStr_lp
        	
	
  				`Handle the Flashing Cursor Variables. NOTE: Flashing Cursor handled/displayed
  				`in Display Function: lib_CMNTS_Display_Comment_Display_Array
  				 		
					`HANDLE SPACES IN STRING - Pixel width of all spaces in the string to calc Bkgd Box XWidth
					`Spaces are not included in d3d_gettextwidth, add them ourselves.
						l_space_counter = 0
						for count_spaces_lp = 3 to len(l_DisplayStr$)
			  			if mid$(l_DisplayStr$, count_spaces_lp) = " "
			    			inc l_space_counter, 1
			  			else
			    			l_space_counter = 0 
			  			endif
						next count_spaces_lp
						l_space_pixel_FullCommentStr = 0
						if l_space_counter > 0
			  			l_space_pixel_FullCommentStr = l_space_counter * 4
						endif
  			
					`HANDLE SPACES IN STRING - Pixel Width of spaces in the edited $ for the Flash Cursor
					`Spaces are not included in d3d_gettextwidth, add them ourselves.
						l_space_counter = 0
						for count_spaces_lp = 3 to len(l_DisplayStr$) - g_CMNTSYS_StrEditCharPos
			  			if mid$(l_DisplayStr$, count_spaces_lp) = " "
			    			inc l_space_counter, 1
			  			else
			    			l_space_counter = 0
			  			endif
						next count_spaces_lp
						l_space_pixel_FlashCursor = 0
						if l_space_counter > 0
			  			l_space_pixel_FlashCursor = l_space_counter * 4
						endif
  			
  				 			
  				 				
  				if len(MEM_MAIN_DATABASE(check_lp).Comment$) < 30
			    	`Calculate Flash Cursor Position X Offset
			      	l_FlashCursor_BuildStr$ = ""
			      	for calc_lp = 3 to len(MEM_MAIN_DATABASE(check_lp).Comment$) - g_CMNTSYS_StrEditCharPos
			        	l_FlashCursor_BuildStr$ = l_FlashCursor_BuildStr$ + mid$(MEM_MAIN_DATABASE(check_lp).Comment$, calc_lp)
  			      	l_FlashCursor_OffsetX = d3d_gettextwidth(2, l_FlashCursor_BuildStr$)
  			    	next calc_lp
  			  		`
  			  		CommentSystem_FlashCursor(0).FlashToggle = g_CMNTSYS_FlashInput_Toggle
  			  		`
  			  		CommentSystem_FlashCursor(0).XPos_NoOffset = l_BkgdImg_Text_XPos
  			  		CommentSystem_FlashCursor(0).Calc_XOffset = l_FlashCursor_OffsetX
  			  		CommentSystem_FlashCursor(0).Calc_SpaceChars_XOffset = l_space_pixel_FlashCursor
  			  		`
  			  		CommentSystem_FlashCursor(0).YPos_NoOffset = l_Pxl1_Arr
  			  		`
  				endif
  				
  				`Display the Flash Cursor Variables for Debug on the RT Screen
						`d3d_starttext
  					`	inc l_YPosFC, 20:d3d_text 10, l_XPosFC, l_YPosFC, 0, "  COMMENT SYSTEM - FLASH CURSOR", g_ENGINE_COLOUR_Black
  					`	inc l_YPosFC, 20:d3d_text 10, l_XPosFC, l_YPosFC, 0, "    - FlashToggle   : " + str$(CommentSystem_FlashCursor(0).FlashToggle), g_ENGINE_COLOUR_Black
  					`	inc l_YPosFC, 20:d3d_text 10, l_XPosFC, l_YPosFC, 0, "    - XPos_NoOffset : " + str$(CommentSystem_FlashCursor(0).XPos_NoOffset), g_ENGINE_COLOUR_Black
  					`	inc l_YPosFC, 20:d3d_text 10, l_XPosFC, l_YPosFC, 0, "    - Calc_XOffset  : " + str$(CommentSystem_FlashCursor(0).Calc_XOffset), g_ENGINE_COLOUR_Black
  					`	inc l_YPosFC, 20:d3d_text 10, l_XPosFC, l_YPosFC, 0, "    - Calc_SpaceChars_XOffset : " + str$(CommentSystem_FlashCursor(0).Calc_SpaceChars_XOffset), g_ENGINE_COLOUR_Black
  					`	inc l_YPosFC, 20:d3d_text 10, l_XPosFC, l_YPosFC, 0, "    - YPos_NoOffset : " + str$(CommentSystem_FlashCursor(0).YPos_NoOffset), g_ENGINE_COLOUR_Black
						`d3d_endtext
  				  `This is the flashing cursor code, put here for DEBUG - NEVER USED HERE. USED IN lib_CMNTS_Display_Comment_Display_Array
  						``Display Flash Toggle
  						`
  		  			`	if CommentSystem_FlashCursor(0).FlashToggle = 1
  		    		`		`
  		    		`		l_FlashCursor_XPos = CommentSystem_FlashCursor(0).XPos_NoOffset 
  		    		`		l_FlashCursor_XOffset = CommentSystem_FlashCursor(0).Calc_XOffset
  		    		`		l_SpacesChar_XOffset = CommentSystem_FlashCursor(0).Calc_SpaceChars_XOffset
  		    		`		`
  		    		`		l_FlashCursor_YPos = CommentSystem_FlashCursor(0).YPos_NoOffset
  		    		`		`
  		    		`		d3d_text 3, l_FlashCursor_XPos + l_FlashCursor_XOffset + 20 + l_SpacesChar_XOffset, l_FlashCursor_YPos, 0, "|", g_ENGINE_COLOUR_Black
  		  	  	`		`
  		  			`	endif
  				
  				
  					
      	  if g_CMNTSYS_TotalCommentsOnScreen < 451
        	  inc g_CMNTSYS_TotalCommentsOnScreen, 1
        	endif
      	
        	CommentSystem(g_CMNTSYS_TotalCommentsOnScreen).Comment_Text$ = l_DisplayStr$
        	CommentSystem(g_CMNTSYS_TotalCommentsOnScreen).XPos = l_BkgdImg_Text_XPos
        	CommentSystem(g_CMNTSYS_TotalCommentsOnScreen).YPos = l_Pxl1_Arr
        	CommentSystem(g_CMNTSYS_TotalCommentsOnScreen).ScreenID = l_ScreenID
        	CommentSystem(g_CMNTSYS_TotalCommentsOnScreen).ChartID = l_ChartID
        	CommentSystem(g_CMNTSYS_TotalCommentsOnScreen).Array_Pos = check_lp
        
          CommentSystem(g_CMNTSYS_TotalCommentsOnScreen).Spaces_WidthPixels = l_space_pixel_FullCommentStr
      	
      	endif
     	
    	next check_lp
    endif
    
endfunction

function lib_CMNTS_Display_Comment_Display_Array()

  `The comments array is filled when the screen charts are changed or a comment is 
  `added, then displayed by his function.

  local l_DISP_CMNT_XPos as integer
  local l_DISP_CMNT_YPos as integer
  local l_DisplayStr$ as string
  local l_DISP_CMNT_SpaceWidthPxls as integer
  
  local l_FlashCursor_XPos as integer
  local l_FlashCursor_YPos as integer
  local l_FlashCursor_XOffset as integer
  local l_SpacesChar_XOffset as integer
  

  

  for print_lp = 1 to g_CMNTSYS_TotalCommentsOnScreen
      
    l_DisplayStr$ = CommentSystem(print_lp).Comment_Text$
    l_DISP_CMNT_XPos = CommentSystem(print_lp).XPos
    l_DISP_CMNT_YPos = CommentSystem(print_lp).YPos
    
    l_DISP_CMNT_SpaceWidthPxls = CommentSystem(print_lp).Spaces_WidthPixels
    
      
		`Handle Background Image: Create the background image on the fly
		
		if l_DISP_CMNT_YPos < 648 - 20
		
			l_CMNTBkgd_ImgWidth = d3d_gettextwidth(2, l_DisplayStr$) + 20 + l_DISP_CMNT_SpaceWidthPxls
			
			if l_CMNTBkgd_ImgWidth < 10 then l_CMNTBkgd_ImgWidth = 10
			
			lib_Create_Image(l_CMNTBkgd_ImgWidth, 20, rgb(255,255,177), c_CMNTSYS_InputNewComment_BkgdImg, 1, rgb(0,0,0)) 
			
    	sprite c_SPRITE_CMNTSYS_Comment_Background, 0, 0, c_CMNTSYS_InputNewComment_BkgdImg
			paste sprite c_SPRITE_CMNTSYS_Comment_Background, l_DISP_CMNT_XPos + 10, l_DISP_CMNT_YPos - 1
			
			d3d_starttext
			
		  	`Display Comment Text
  		  	d3d_text 2, l_DISP_CMNT_XPos + 20, l_DISP_CMNT_YPos, 0, l_DisplayStr$, g_ENGINE_COLOUR_Black
  		  	
  			`Display Flash Toggle
  		  	if CommentSystem_FlashCursor(0).FlashToggle = 1
  		    	`
  		    	l_FlashCursor_XPos = CommentSystem_FlashCursor(0).XPos_NoOffset 
  		    	l_FlashCursor_XOffset = CommentSystem_FlashCursor(0).Calc_XOffset
  		    	l_SpacesChar_XOffset = CommentSystem_FlashCursor(0).Calc_SpaceChars_XOffset
  		    	`
  		    	l_FlashCursor_YPos = CommentSystem_FlashCursor(0).YPos_NoOffset
  		    	`
  		    	d3d_text 3, l_FlashCursor_XPos + l_FlashCursor_XOffset + 20 + l_SpacesChar_XOffset, l_FlashCursor_YPos, 0, "|", g_ENGINE_COLOUR_Black
  		  	  `
  		  	endif
  		  	
			d3d_endtext
			
		endif
	
	next print_lp


endfunction

function lib_CMNTS_Add_New_Comment(r_ArrPos as integer)

  local l_FlashInputChar$ as string
  local l_PadStr$ as string

  `Flash Input Character Toggle
  if timer() > g_CMNTSYS_FlashInput_Timer + 750
    g_CMNTSYS_FlashInput_Timer = timer()
    if g_CMNTSYS_FlashInput_Toggle = -1
      g_CMNTSYS_FlashInput_Toggle = 1
    else
      g_CMNTSYS_FlashInput_Toggle = -1
    endif
  endif
  
  if scancode() = 42 or scancode() = 54
    g_CMNTSYS_ShiftKey_State = 1
  endif
  if scancode() = 0 and g_CMNTSYS_ShiftKey_State = 1 then g_CMNTSYS_ShiftKey_State = -1

  `Build the new string and assign it to the MEM DB Position
    lib_CMNTS_INPUT_BuildString(g_CMNTSYS_ShiftKey_State)
    MEM_MAIN_DATABASE(r_ArrPos).Comment$ = g_CMNTSYS_AddNewCmnt_BuildStr$
  
  
  `Handle LEFT/RIGHT CURSOR Keys for moving left/right within the build string
    `Left
      if scancode() = 203 and g_CMNTSYS_StrEditChar_CursorKeyState = -1
        g_CMNTSYS_StrEditChar_CursorKeyState = 1
        if g_CMNTSYS_StrEditCharPos < len(g_CMNTSYS_AddNewCmnt_BuildStr$) - 2
          inc g_CMNTSYS_StrEditCharPos, 1
        endif
        g_CMNTSYS_FlashInput_Toggle = 1
        g_CMNTSYS_FlashInput_Timer = timer()
        `Protection
          if g_CMNTSYS_StrEditCharPos > len(g_CMNTSYS_AddNewCmnt_BuildStr$) - 2 then g_CMNTSYS_StrEditCharPos = len(g_CMNTSYS_AddNewCmnt_BuildStr$) - 2
      endif
    `Right
      if scancode() = 205 and g_CMNTSYS_StrEditChar_CursorKeyState = -1
        g_CMNTSYS_StrEditChar_CursorKeyState = 1
        if g_CMNTSYS_StrEditCharPos > 0
          dec g_CMNTSYS_StrEditCharPos, 1
        endif
        g_CMNTSYS_FlashInput_Toggle = 1
        g_CMNTSYS_FlashInput_Timer = timer()
        `Protection
          if g_CMNTSYS_StrEditCharPos < 0 then g_CMNTSYS_StrEditCharPos = 0
      endif
      if scancode() = 0 and g_CMNTSYS_StrEditChar_CursorKeyState = 1 then g_CMNTSYS_StrEditChar_CursorKeyState = -1

  
  `Auto close comment if timer is exceeded.
    if timer() > g_CMNTSYS_AddNewCmnt_AutoCloseCmnt_Timer
      g_CMNTSYS_AddNewCmnt_Action_CloseCmnt = 1
    endif  
  
  
  `Press ENTER to SAVE Comment
    if lib_Enter_Pressed(16294) = 1 or g_CMNTSYS_AddNewCmnt_Action_CloseCmnt = 1
      `If code is run due to the comment time limit being exceeded and the comment being auto closed then
        g_CMNTSYS_AddNewCmnt_Action_CloseCmnt = -1
      `If the comment contains some text then committ the comment
        if len(g_CMNTSYS_AddNewCmnt_BuildStr$) > 2
          `Note that the record length in the HD DB File must be 30 characters long, so the build string must equal this with NULL Characters padded at the end
            lenval$ = str$(len(g_CMNTSYS_AddNewCmnt_BuildStr$))
            if len(g_CMNTSYS_AddNewCmnt_BuildStr$) < 30
              l_PadStr$ = ""
              for pad_lp = 1 to 30 - len(g_CMNTSYS_AddNewCmnt_BuildStr$)
                l_PadStr$ = l_PadStr$ + "|"
              next pad_lp
              g_CMNTSYS_AddNewCmnt_BuildStr$ = g_CMNTSYS_AddNewCmnt_BuildStr$ + l_PadStr$
              MEM_MAIN_DATABASE(r_ArrPos).Comment$ = g_CMNTSYS_AddNewCmnt_BuildStr$
            else
              MEM_MAIN_DATABASE(r_ArrPos).Comment$ = g_CMNTSYS_AddNewCmnt_BuildStr$ : `Needs this else final comment can include the flash cursor
            endif
            g_CMNTSYS_AddNewCmnt_Stage = -1
        endif
      `If the comment is empty then DISCARD it
        if len(g_CMNTSYS_AddNewCmnt_BuildStr$) = 2
          g_CMNTSYS_AddNewCmnt_Stage = -1
          MEM_MAIN_DATABASE(r_ArrPos).Comment$ = "00||||||||||||||||||||||||||||"
        else
          `Write the comment to the HD DB
          lib_CMNTS_WRITE_COMMENT_To_HD_DB(r_ArrPos, MEM_MAIN_DATABASE(r_ArrPos).Comment$)  
        endif
      g_CMNTSYS_FlashInput_Toggle = -1
      CommentSystem_FlashCursor(0).FlashToggle = -1
    endif
 
  `Press ESCAPE to DISCARD Comment
    if scancode() = 1
      g_CMNTSYS_AddNewCmnt_Stage = -1
      CommentSystem_FlashCursor(0).FlashToggle = -1
      g_CMNTSYS_StrEditCharPos = 0
      MEM_MAIN_DATABASE(r_ArrPos).Comment$ = "00||||||||||||||||||||||||||||"
      `Write the comment to the HD DB
      lib_CMNTS_WRITE_COMMENT_To_HD_DB(r_ArrPos, MEM_MAIN_DATABASE(r_ArrPos).Comment$) 
    endif
    
   lib_CMNTS_Fill_Comment_Display_Array()
   

 
endfunction



function lib_CMNTS_WRITE_COMMENT_To_HD_DB(r_ArrPos as integer, r_WriteStr$ as string)

  local l_Datafile_CalculatedPosition as integer

  open datafile to update 1, g_CLIENT_Database_Full_Path$
  
    l_Datafile_CalculatedPosition = ((r_ArrPos-1) * c_DATABASE_Bytes_Per_Record) + 121
  
    if l_Datafile_CalculatedPosition > 0 and l_Datafile_CalculatedPosition < datafile size(1)
  		`1. Set the Datafile Position
    		set datafile position 1, l_Datafile_CalculatedPosition
		
  		`2. Write to the Datafile
  			if len(r_WriteStr$) = 30
    			write datafile string 1, r_WriteStr$
  			else
    			write datafile string 1, "11LEN_ERR|||||||||||||||||||||"
  			endif
  	endif
  
  close datafile 1
  
  `Exact Record Format (This table is also present in - lib_MEM_EditBDMode_WriteDatatoHDDB )
      `01-RecStart Indicator Byte1   - 1
      `02-RecStart Indicator Byte2   - 1
      `03-RecStart Indicator Byte3   - 1
      `04-Database Arr Pos as float  - 4
      `05-Time$ as string            -   2 + (8 Characters) = 10 bytes
      `06-Date$ as string            -   2 + (8 Characters) = 10 bytes
      `07-Hole_Depth# as float       - 4
      `08-Bit_Depth# as float        - 4
      `09-ROP# as float              - 4
      `10-WOB# as float              - 4
      `11-Hookload as word           -   2
      `12-RPM as word                -   2
      `13-Torque# as float           - 4
      `14-TripTank# as float         - 4
      `15-BlockPosition# as float    - 4
      `16-PVT# as float              - 4
      `17-Pit1# as float             - 4
      `18-Pit2# as float             - 4
      `19-Pit3# as float             - 4
      `20-Pit4# as float             - 4
      `21-Pit5# as float             - 4
      `22-Pit6# as float             - 4
      `23-Pit7# as float             - 4
      `24-Pit8# as float             - 4
      `25-SPP as word                -   2
      `26-FlowIn as word             -   2
      `27-SPM1 as word               -   2
      `28-SPM2 as word               -   2
      `29-SPM3 as word               -   2
      `30-TotalGas# as float         - 4
      `31-H2S# as float              - 4
      `32-TempIN# as float           - 4
      `33-TempOUT# as float          - 4
      `34-Comments are MAXIMUM OF 30 CHARACTERS : 2 + (30 Characters) = 32 bytes
      `35-CGS as word                - 2
      `36-Flow OUT as float          - 4
      `37-Total Strokes              - 4
    
  `INDEX
  `Record Start Indicator Bytes  = 3
  `3  Strings                    = 52
  `22 Floats                     = 88
  `8  Words                      = 16
  `1  Integer                    = 4
  
  `TOTAL BYTES                   = 163
  
  
  

endfunction



function lib_CMNTS_INPUT_MseClk_GetScreenID()

  `This function returns the Screen Type (1=DS, 3=PITS)
  
  local p_OUTPUT as integer : p_OUTPUT = -1
  
  if g_ENGINE_HIST_DRILL_Screen_Routing = 1 then p_OUTPUT = 1
 `if g_ENGINE_HIST_DRILL_Screen_Routing = 2 then p_OUTPUT = 2 : `Historical Screen not needed
  if g_ENGINE_HIST_DRILL_Screen_Routing = 3 then p_OUTPUT = 3

endfunction p_OUTPUT

function lib_CMNTS_INPUT_MseClk_GetChartID(r_ScreenID as integer)

  `This function returns the Chart Number clicked on.
  
  local p_OUTPUT as integer : p_OUTPUT = -1
  
  `Drilling Screen
  if r_ScreenID = 1
    p_OUTPUT = lib_DS_CHART_MouseInChartNumber()
  endif
 
  `Pits Screen
  if r_ScreenID = 3
    p_OUTPUT = lib_PITS_CHART_MouseInChartNumber()
  endif
  
endfunction p_OUTPUT

function lib_CMNTS_INPUT_BuildString(r_ShiftKeyState)

  local l_TempBuildStr$ as string
  local l_SplitStr_1stHalf$ as string : l_SplitStr_1stHalf$ = ""
  local l_SplitStr_2ndHalf$ as string : l_SplitStr_2ndHalf$ = ""
  local l_ADD_Char$ as string
  
  local l_ScreenID$ as string
  local l_ChartID$ as string

  `Calculate Split Strings for Handling String Building
    `1st Half of Split
      l_TempBuildStr$ = right$(g_CMNTSYS_AddNewCmnt_BuildStr$, len(g_CMNTSYS_AddNewCmnt_BuildStr$) - 2)
      l_LenVal = len(l_TempBuildStr$) - g_CMNTSYS_StrEditCharPos
      l_SplitStr_1stHalf$ = left$(l_TempBuildStr$, l_LenVal)
    `2nd Half of Split
      l_SplitStr_2ndHalf$ = right$(l_TempBuildStr$, g_CMNTSYS_StrEditCharPos)

  l_ScreenID$ = mid$(g_CMNTSYS_AddNewCmnt_BuildStr$, 1)
  l_ChartID$ = mid$(g_CMNTSYS_AddNewCmnt_BuildStr$, 2)

  l_char$ = entry$()
  select asc(l_char$)
    case 8 : `Backspace
      if len(g_CMNTSYS_AddNewCmnt_BuildStr$) > 2
        g_CMNTSYS_AddNewCmnt_BuildStr$ = l_ScreenID$ + l_ChartID$ + left$(l_SplitStr_1stHalf$, len(l_SplitStr_1stHalf$) - 1) + l_SplitStr_2ndHalf$
      endif
    endcase
    
    case default
      if asc(l_char$) > 31
        `Note that the max comment length is 30 characters. We allow only 29 here so the code will keep flashing the
        `input cursor. If set to 30 then the code sees it as a full record entry and doesn't flash it. This
        `confuses the user as you cannot tell that you're still entering an item and it makes it look
        `like the comment system is jammed - you cannot create a new comment because you're still editing an
        `old one, only you cannot tell you're still editing an old one.
        if len(g_CMNTSYS_AddNewCmnt_BuildStr$) < 29
          `Allow for UPPER and LOWER CASE using either SHIFT KEY
            `
            `Allow Capslock to Capitalise the input character
            if lib_Get_CAPSLOCK_State() = 1 then r_ShiftKeyState = 1
            `
          	if r_ShiftKeyState = 1
            	l_ADD_Char$ = upper$(l_char$)
          	else
            	l_ADD_Char$ = lower$(l_char$)
          	endif
            g_CMNTSYS_AddNewCmnt_BuildStr$ = l_ScreenID$ + l_ChartID$ + l_SplitStr_1stHalf$ + l_ADD_Char$ + l_SplitStr_2ndHalf$
            `
        endif
      endif
    endcase
  endselect
      
  clear entry buffer
      
endfunction

function _______RT_GRAPHICS_DISPLAY_Engines________________________________tw38gawr()
endfunction




function DISP_RT_ENGINE_Main()

  `Only allow input if user is not changing a display chart channel
  if g_CHANNEL_ID_ChngChnl_Toggle = -1 and g_ENG_DLS_ToggleScreenON = -1 and g_LOCKOUT_INPUTPAD_DS_ChannelRanges = -1
    DISP_RT_INPUT_Universal()
    DISP_RT_Input_ScrollCharts()
  endif

  
  
  if g_ENGINE_CoreFunctionType = 1
    `Double Check that the Server/Client Relationship is set to AUTHORISED SYNC Disabled
    if g_server_relationship_code <> 3001
      net send 0
      net put long 2005
      net put string g_ENGINELOGIN_Main_Username$
      net put string g_ENGINELOGIN_Main_Password$
      net send
      inc g_ENG_DataTransfer_Total, 2048
    endif
    `If g_DISP_RT_DB_RequestChannel_State set to 1 then begin requesting channel setup variables
    if g_DISP_RT_DB_RequestChannel_State = 1
      if timer() > g_DISP_RT_DB_RequestChannel_Timer + g_DISP_RT_DB_ReqChnlInterval
        g_DISP_RT_DB_RequestChannel_Timer = timer() + g_DISP_RT_DB_ReqChnlInterval
        lib_Disp_RT_Get_Server_Channel_Settings()
      endif
    endif
    `If the client is not in a PUSH TABLE RELATIONSHIP with the Server and is Connected then ask for
    `the Push Table Relationship to be Established.
    if g_DISP_RT_DB_PUSHTABLE_State = -1
      `Set the state to 1: Requested, it will be set to 2 when data is received in lib_DRT_Receive_PUSH_Data()
      g_DISP_RT_DB_PUSHTABLE_State = 1
    endif
  endif

  `NUMPAD Display Mouse Toggle Resets  
  `Set button selection and mouseclick variables to OFF if mouse button is not clicked
  if mouseclick() = 0 and g_NUMPAD_Selected_Button_Mouseclick = 1
    g_NUMPAD_Selected_Button_Mouseclick = -1
    g_NUMPAD_Selected_Button = - 1
  endif
  if mouseclick() = 0 and g_INPUTPAD_Selected_Button_Mouseclick = 1
    g_INPUTPAD_Selected_Button_Mouseclick = -1
    g_INPUTPAD_Selected_Button = - 1
  endif
  if mouseclick() = 0 and g_NUMPAD_MOVE_MouseClickHOLD = 1
    g_NUMPAD_MOVE_MouseClickHOLD = -1
  endif
  if mouseclick() = 0 and g_INPUTPAD_MOVE_MouseClickHOLD = 1
    g_INPUTPAD_MOVE_MouseClickHOLD = -1
  endif

  `Display Screens
  if g_ENGINE_CoreFunctionType = 1
    DISP_RT_SubENGINE_CoreFunc1_VIEWER()
  endif
  if g_ENGINE_CoreFunctionType = 2
    DISP_RT_SubENGINE_CoreFunc2_MUDLOGGING()
  endif

  if g_DISP_REALTIME_SHUTDOWN_Toggle = 1
    lib_Disp_RT_SHUTDOWN()
  endif
  
  `Adjust RT Screen Chart Scroll mouse sensitivity
  if g_CMNTSYS_AddNewCmnt_Stage = -1 : `Only allow adjust if the user is not in a COMMENT (so you can use +/- without also changing the sensitivity)
    lib_GLOBAL_Adjust_MouseWheel_Sensitivity()
  endif
  
  if g_ENGINE_Display_FPS = 1
    d3d_starttext
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1
        d3d_text 2, 10, 10, 0, "FPS: " + str$(screen fps()), g_ENGINE_COLOUR_Black
        d3d_text 2, 10, 30, 0, "Limiter State: " + str$(g_ENG_EXTVAL_FPSFrameLimiter_Toggle), g_ENGINE_COLOUR_Black
        d3d_text 2, 10, 50, 0, "Limiter Value: " + str$(g_ENG_EXTVAL_FPSFrameLimiter_Value), g_ENGINE_COLOUR_Black
        d3d_text 2, 10, 80, 0, "DS Image DrawTime ms: " + str$(g_DEBUG_DSCharts_UpdateTimeInMS), g_ENGINE_COLOUR_Black
      endif
      if g_ENGINE_HIST_DRILL_Screen_Routing = 2
        d3d_text 2, 10, 200, 0, "FPS: " + str$(screen fps()), g_ENGINE_COLOUR_Black
        d3d_text 2, 10, 220, 0, "Limiter State: " + str$(g_ENG_EXTVAL_FPSFrameLimiter_Toggle), g_ENGINE_COLOUR_Black
        d3d_text 2, 10, 240, 0, "Limiter Value: " + str$(g_ENG_EXTVAL_FPSFrameLimiter_Value), g_ENGINE_COLOUR_Black
        d3d_text 2, 10, 260, 0, "DS Image DrawTime ms: " + str$(g_DEBUG_DSCharts_UpdateTimeInMS), g_ENGINE_COLOUR_Black
      endif
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3
        d3d_text 2, 10, 200, 0, "FPS: " + str$(screen fps()), g_ENGINE_COLOUR_Black
        d3d_text 2, 10, 220, 0, "Limiter State: " + str$(g_ENG_EXTVAL_FPSFrameLimiter_Toggle), g_ENGINE_COLOUR_Black
        d3d_text 2, 10, 240, 0, "Limiter Value: " + str$(g_ENG_EXTVAL_FPSFrameLimiter_Value), g_ENGINE_COLOUR_Black
        d3d_text 2, 10, 260, 0, "DS Image DrawTime ms: " + str$(g_DEBUG_PITSCharts_UpdateTimeInMS), g_ENGINE_COLOUR_Black
      endif
      
      d3d_text 2, 10, 300, 0, "g_INFOBOX_ShowButton_ActionState: " + str$(g_INFOBOX_ShowButton_ActionState), g_ENGINE_COLOUR_Black
      d3d_text 2, 10, 320, 0, "g_INFOBOX_DS_ModeState: " + str$(g_INFOBOX_DS_ModeState), g_ENGINE_COLOUR_Black
      d3d_text 2, 10, 340, 0, "g_INFOBOX_ShowButton_ActionState: " + str$(g_INFOBOX_ShowButton_ActionState), g_ENGINE_COLOUR_Black
      d3d_text 2, 10, 360, 0, "g_INFOBOX_PITS_ModeState: " + str$(g_INFOBOX_PITS_ModeState), g_ENGINE_COLOUR_Black
      
      
      
    d3d_endtext
  endif
  

  
  
    
  `Display the time and date
  d3d_starttext
    if g_UK_or_USA_Settings = 1
      day$ = right$(left$(get date$(), 5), 2)
      month$ = left$(get date$(), 2)
      year$ = right$(get date$(), 2)
      d3d_text 3, 73, 738, 1, get time$() + "  " + day$ + "/" + month$ + "/" + year$, g_ENGINE_COLOUR_TimeAndDateText
    else
      d3d_text 3, 73, 738, 1, get time$() + "  " + get date$(), g_ENGINE_COLOUR_TimeAndDateText
    endif
  d3d_endtext
    
endfunction


function DISP_RT_SubENGINE_CoreFunc1_VIEWER()

  local l_FadeSec# as float

  `Display the background image
  if g_DISP_REALTIME_ScreenType = 1
    
    `Display Drilling Screen Background in either widescreen or 1024x768 and display the DS/HS Toggle Button
    if g_ENGINE_Screen_Resolution = 1
      DISP_RT_GRAPHICS_SCREEN_Widescreen()
      if g_ENGINELOGIN_Hide_DSHS_Button = -1
        paste image c_HISTORICAL_BUTTONImgnum, 1245, 730
      endif
      `lib_DRT_RangeValues_MouseSlct_Widescreen()
    else
      DISP_RT_GRAPHICS_SCREEN_1024x768()
      if g_ENGINELOGIN_Hide_DSHS_Button = -1
        paste image c_HISTORICAL_BUTTONImgnum, 904, 730
      endif
      `lib_DRT_RangeValues_MouseSlct_1024x768()
    endif
    
    if g_ENGINE_HIST_DRILL_Screen_Routing = 1
    
      lib_Disp_RT_CF1_DISP_DrillScreen_Values()
      
      lib_Disp_RT_DISPLAY_ChartRange_Values()
      lib_Disp_RT_CF1_PLOT_TIME()
      lib_Disp_RT_DS_TimePeriod_Buttons()
      lib_Disp_RT_Display_DepthUnits()
      `Untested - turn on to activate line thickness control button for CF1?????
      `Handle_DS_Screen_LineThickness_Button()
       
      `Paste Channel Blocks 1-3 to cover over loaded background bitmap 
      	`Block 1
        	paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 52, 4
      	`Block 2
        	paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 422, 4
      	`Block 3
        	paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 745, 4

      
      if g_ENGINELOGIN_Show_Login = -1
        if g_RANGES_Chart_Selected_Num <> -1
          if CHANNEL_ID_ChannelLinkIndex(g_RANGES_Chart_Selected_Num) > 0
            DS_NUMPAD_ENGINE()
          else
            g_RANGES_Chart_Selected_Num = -1  
          endif
        else
          if g_ENGINE_Screen_Resolution = 1 and g_DLS_LOCK_UNTIL_CLOSED = -1
            lib_DRT_RangeValues_MouseSlct_Widescreen()
          else
            lib_DRT_RangeValues_MouseSlct_1024x768()
          endif
        endif
      endif
      
      if mouseclick() = 0 and g_DLS_LOCK_UNTIL_CLOSED = 1 then g_DLS_LOCK_UNTIL_CLOSED = -1
      
      `Handle Exitbox + Interfaces related to whether it is on or off.
      if g_ENGINELOGIN_Show_Login = 1
        if g_RTDispEXITBOX_TOGGLE = -1
          LOGIN_CF1_ENGINE()
        endif
        lib_Login_CF1_Display_LoginBox()
      else
        if g_RTDispEXITBOX_TOGGLE = -1
          DISP_RT_CF1_CHART_Infobox()
        endif
      endif
      

      
      `Handle the zero time button
      if mouseclick() = 1 and mouse_click(1) = -1
        if mousey() > 194 and mousey() < 226
          if g_ENGINE_Screen_Resolution = 1
            if mousex() > 1008 and mousex() < 1024
              mouse_click(1) = 1
              g_DS_ChartButton_TimeZero_Timer = timer() + 300
              g_DS_CHART_Scroll_Array_Offset = 0
              ENGINE_DS_CHART_IMAGE_Creation()
            endif
          else
            if mousex() > 685 and mousex() < 701
              mouse_click(1) = 1
              g_DS_ChartButton_TimeZero_Timer = timer() + 300
              g_DS_CHART_Scroll_Array_Offset = 0
              ENGINE_DS_CHART_IMAGE_Creation()
            endif
          endif
        endif
      endif
      `[SPACE BAR] - DS Zero Time Button
      if scancode() = 57 and g_CMNTSYS_AddNewCmnt_Stage = -1
        g_DS_ChartButton_TimeZero_Timer = timer() + 300
        g_DS_CHART_Scroll_Array_Offset = 0
        ENGINE_DS_CHART_IMAGE_Creation()
      endif
      `Flash the DS Zero Chart Position Button if it has been pressed.
      if timer() < g_DS_ChartButton_TimeZero_Timer
        if g_ENGINE_Screen_Resolution = 1
          paste image c_DS_Chart_PosZero_Img, 1009, 195
        else
          paste image c_DS_Chart_PosZero_Img, 686, 195
        endif
      endif
      `Handle the image showing if the chart time is set to zero - if the chart is plotting at 'now'
      if g_DS_CHART_Scroll_Array_Offset = 0
        if g_ENGINE_Screen_Resolution = 1
          paste image c_ChartData_ZeroTime_Yes_Imgnum, 1009, 178
        else
          paste image c_ChartData_ZeroTime_Yes_Imgnum, 686, 178
        endif
      endif
      
      `Flash the Login Box Image (from get image) if required (note: not editable)
      if g_ENGINELOGIN_IDInFileAtStartUpAffect = 1
        if timer() < g_ENGINELOGIN_IDInFileAtStartUpTimer
          if image exist(c_IMG_ENG_LOGINBox_NoDataReqGet) = 0
            lib_Login_CF1_GET_LoginBox_Image()
          endif
          paste sprite c_SPRITE_ENG_LoginBox_NoDataReq, g_ENGINELOGIN_MainBox_PosX, g_ENGINELOGIN_MainBox_PosY  
          d3d_starttext
          l_x = sprite x(c_SPRITE_ENG_LoginBox_NoDataReq) + 400
          l_y = sprite y(c_SPRITE_ENG_LoginBox_NoDataReq) + 390
          l_FadeSec# = (g_ENGINELOGIN_IDInFileAtStartUpTimer - timer()) / 1000.0
            d3d_text 2, l_x, l_y, 0, str$(l_FadeSec#, 1), g_ENGINE_COLOUR_White
          d3d_endtext
        else
          if g_ENGINE_Alpha_Available = 1
            dec g_ENGINELOGIN_IDInFileAtStartUpALPHA, 1
            if g_ENGINELOGIN_IDInFileAtStartUpALPHA < 40
              g_ENGINELOGIN_IDInFileAtStartUpAffect = -1
              g_ENGINELOGIN_Hide_DSHS_Button = -1
              if image exist(c_IMG_ENG_LOGINBox_NoDataReqGet) = 1
                delete image c_IMG_ENG_LOGINBox_NoDataReqGet
              endif
            else
              if sprite exist(c_SPRITE_ENG_LoginBox_NoDataReq) = 1
                set sprite alpha c_SPRITE_ENG_LoginBox_NoDataReq, g_ENGINELOGIN_IDInFileAtStartUpALPHA
                paste sprite c_SPRITE_ENG_LoginBox_NoDataReq, g_ENGINELOGIN_MainBox_PosX, g_ENGINELOGIN_MainBox_PosY  
              endif
            endif
          else
            g_ENGINELOGIN_IDInFileAtStartUpAffect = -1
            g_ENGINELOGIN_Hide_DSHS_Button = -1
            if image exist(c_IMG_ENG_LOGINBox_NoDataReqGet) = 1
              delete image c_IMG_ENG_LOGINBox_NoDataReqGet
            endif
          endif  
        endif  
      endif
    else
      CF1_HS_ENGINE()
    endif
    
    if g_RTDispEXITBOX_TOGGLE = 1
      lib_CF1_EXIT_YesNoBox_Handle()
    endif

    `This line controls the DS/HS button
    lib_DispRT_HistDrill_Button()

  else
    DISP_RT_DATA_SCREEN_ENGINE()
  endif

endfunction

function DISP_RT_SubENGINE_CoreFunc2_MUDLOGGING()

  `Display and grant full access to the MEM DB in the same manner as the Server Realtime Display

  `Change Channel ID: Unlock the NUMPAD and TIME PERIOD BUTTONS is Change Channel is finished and mouseclick is zero
  if mouseclick() = 0 and g_CHANNEL_ID_ChngChnl_Toggle = -1 and g_CHANNELIDChngChnl_NUMPAD_TIMEBtb_LOCK = 1
    g_CHANNELIDChngChnl_NUMPAD_TIMEBtb_LOCK = -1
  endif
  
  if mouseclick() = 0 and g_DLS_LOCK_UNTIL_CLOSED = 1 then g_DLS_LOCK_UNTIL_CLOSED = -1
    
  `Display the background image
  if g_DISP_REALTIME_ScreenType = 1
    
    `Display Drilling Screen Background in either widescreen or 1024x768
    if g_ENGINE_Screen_Resolution = 1
      DISP_RT_GRAPHICS_SCREEN_Widescreen()
      `Display Historical and Pits Buttons on the DS Screen
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1 then paste image c_HISTORICAL_BUTTONImgnum, 1245, 730
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1 then paste image c_PITS_Button_UNLIT, 1130, 686
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3 then paste image c_DRILLING_BUTTONImgnum, 1245, 730
      
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1
        if g_LAGDEPTH_AdjustValue# <> 0.0
          paste image c_LagDepth_BoxDisplayGraphic, 1148, 150
        endif
      endif
      
      `Display the CHART BLOCK 3 OR 4 CHANNELS IN BLOCK Background Image and handle switching INPUT
        `Widescreen DS Screen
          if g_ENGINE_HIST_DRILL_Screen_Routing = 1
            `Block 1
              lib_MSEINPUT_Chart_Block_Disp_3Or4_Chnls(52, 4, 1)
              if g_DS_SCREEN_Block1_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 52, 4
              if g_DS_SCREEN_Block1_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 52, 4
            `Block 2
              lib_MSEINPUT_Chart_Block_Disp_3Or4_Chnls(422, 4, 2)
              if g_DS_SCREEN_Block2_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 422, 4
              if g_DS_SCREEN_Block2_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 422, 4
            `Block 3
              lib_MSEINPUT_Chart_Block_Disp_3Or4_Chnls(745, 4, 3)
              if g_DS_SCREEN_Block3_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 745, 4
              if g_DS_SCREEN_Block3_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 745, 4
          endif
        `Widescreen PITS Screen
          if g_ENGINE_HIST_DRILL_Screen_Routing = 3
            `Block 1
              lib_MSEINPUT_Chart_Block_Disp_3Or4_Chnls(52, 4, 4)
              if g_PITS_SCREEN_Block1_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 52, 4
              if g_PITS_SCREEN_Block1_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 52, 4
            `Block 2
              lib_MSEINPUT_Chart_Block_Disp_3Or4_Chnls(422, 4, 5)
              if g_PITS_SCREEN_Block2_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 422, 4
              if g_PITS_SCREEN_Block2_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 422, 4
            `Block 3
              lib_MSEINPUT_Chart_Block_Disp_3Or4_Chnls(745, 4, 6)
              if g_PITS_SCREEN_Block3_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 745, 4
              if g_PITS_SCREEN_Block3_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 745, 4
            `Block 4
              lib_MSEINPUT_Chart_Block_Disp_3Or4_Chnls(1060, 4, 7)
              if g_PITS_SCREEN_Block4_DisplayFormat = 3 then paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 1060, 4
              if g_PITS_SCREEN_Block4_DisplayFormat = 4 then paste image c_CHART_BLOCK_DISP_4_Bkgd_Image, 1060, 4
          endif
    
    else
    
      DISP_RT_GRAPHICS_SCREEN_1024x768()
      `Display Historical and Pits Buttons on the DS Screen
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1 then paste image c_HISTORICAL_BUTTONImgnum, 904, 730
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1 then paste image c_PITS_Button_UNLIT, 788, 686
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3 then paste image c_DRILLING_BUTTONImgnum, 904, 730
      
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1
        if g_LAGDEPTH_AdjustValue# <> 0.0
          paste image c_LagDepth_BoxDisplayGraphic, 825, 150
        endif
      endif
      
      `Display the Chart Channel Block Background Image
        `DS Screen
          if g_ENGINE_HIST_DRILL_Screen_Routing = 1
            `Block 1
              paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 50, 50
          endif
        `PITS Screen
          if g_ENGINE_HIST_DRILL_Screen_Routing = 3
            `Block 1
              paste image c_CHART_BLOCK_DISP_3_Bkgd_Image, 100, 100
          endif
      
    endif
    
    `DRILL SCREEN
    if g_ENGINE_HIST_DRILL_Screen_Routing = 1
    
      if g_ENG_DLS_ToggleScreenON = -1 
      `and g_RANGES_Chart_Selected_Num = -1
        lib_CHANNEL_ID_Activate_ByMouse()
      endif
         
      lib_Disp_RT_CF2_PLOT_TIME()
      
      lib_CHANNEL_ID_PrintChannel_NAMES(1)
      if g_ENG_RTPRNT2IMG_CTRLFLOW = -1
        lib_CHANNEL_ID_PrintChannel_RTValues(1)
      endif
      lib_CHANNEL_ID_PrintChannel_RANGES(1)
        if g_ENGINE_Screen_Resolution = 1
          lib_CHANNEL_ID_PrintChannel_ChartDivs(1, 1)
        else
          lib_CHANNEL_ID_PrintChannel_ChartDivs(2, 1)
        endif
        
      `DRILLING Screen - If the WITS serial port is not active then display a graphic informing the user
      `                  Do not Display if the user has started a sync of the Sync DB
      if g_SERIALPORT_ACTIVE = -1 and g_SYNC_ReSyncALL_CL_SER_Toggle = -1
        if timer() >  g_ENG_WitsFailedRTGraphicFlashTimer
          g_ENG_WitsFailedRTGraphicFlashTimer = timer() + 1000
          if g_ENG_WitsFailedRTGraphicFlashToggle <> 1
            g_ENG_WitsFailedRTGraphicFlashToggle = 1
          else
            g_ENG_WitsFailedRTGraphicFlashToggle = -1
          endif    
        endif
        if g_ENG_WitsFailedRTGraphicFlashToggle = 1 and g_PORTABLE_ENG_RunAs_VIEWER = -1 and g_ENG_RTPRNT2IMG_CTRLFLOW = -1
          if g_ENGINE_Screen_Resolution = 1
            paste image c_WITS_Failed_InfoGraphic, 1025, 464
          else
            paste image c_WITS_Failed_InfoGraphic, 702, 464
          endif
        endif
      endif
      
      `DRILLING Screen - If Data Logging is Disabled then display a graphic informing the user
      `                  Do not Display if the user has started a sync of the Sync DB
      if g_ENG_Logging_Active = -1 and g_SYNC_ReSyncALL_CL_SER_Toggle = -1
        if timer() >  g_ENG_DataLoggingDisabledRTGraphicFlashTimer
          g_ENG_DataLoggingDisabledRTGraphicFlashTimer = timer() + 1000
          if g_ENG_DataLoggingDisabledRTGraphicFlashToggle <> 1
            g_ENG_DataLoggingDisabledRTGraphicFlashToggle = 1
          else
            g_ENG_DataLoggingDisabledRTGraphicFlashToggle = -1
          endif    
        endif
        if g_ENG_DataLoggingDisabledRTGraphicFlashToggle = 1 and g_PORTABLE_ENG_RunAs_VIEWER = -1 and g_ENG_RTPRNT2IMG_CTRLFLOW = -1
          if g_ENGINE_Screen_Resolution = 1
            paste image c_DataLogging_Disabled_InfoGraphic, 1025, 528
          else
            paste image c_DataLogging_Disabled_InfoGraphic, 702, 528
          endif
        endif
      endif
      
      
      `If SYNC (Client Code 702 > Server Code 703 etc) has been activated show a graphic
      `displaying the running variables (for Debug and User Info)
       if g_SYNC_ReSyncALL_CL_SER_Toggle = 1
         lib_DispRTGraphic_For_Code705()
       endif
        
        
      `If running as the PORTABLE Viewer Mode then an alternative Database '.dat' file has been mounted.
      `Display a graphic to show the mounted file name.
      if g_PORTABLE_ENG_RunAs_VIEWER = 1
        if g_ENGINE_Screen_Resolution = 1
          paste image c_PORTABLE_ENG_IMG_MountedDB_Name_BkGd, 1025, 464
          d3d_starttext
            d3d_text 7, 1180, 464 + 50, 1, right$(g_PORTABLE_ENG_DispClientDBName$,30), g_ENGINE_COLOUR_Black           
          d3d_endtext
        else
          paste image c_PORTABLE_ENG_IMG_MountedDB_Name_BkGd, 702, 464
        endif
      endif
      
      `if g_CHANNEL_ID_ChngChnl_Toggle = -1 then
      lib_Disp_RT_DS_TimePeriod_Buttons()
      if g_CHANNEL_ID_ChngChnl_Toggle = -1 and g_ENG_DLS_ToggleScreenON = -1 and g_LOCKOUT_INPUTPAD_DS_ChannelRanges = -1
        Handle_DS_Screen_LineThickness_Button()
        Handle_DS_Screen_DepthTick_Button()
      endif  
      
      lib_Disp_RT_Display_DepthUnits()
      
      `Run the Comment System on the Realtime Displays
      if g_ENG_CommentSystem_Active = 1
        COMMENTSYSTEM_ENGINE()
      endif
      
    	if g_CHANNELIDChngChnl_NUMPAD_TIMEBtb_LOCK = -1
      	if g_RANGES_Chart_Selected_Num <> -1
        	if CHANNEL_ID_ChannelLinkIndex(g_RANGES_Chart_Selected_Num) > 0 
          	DS_NUMPAD_ENGINE()
        	else
          	g_RANGES_Chart_Selected_Num = -1   
        	endif
      	else
        	`(Input Code Marker: 26632)
        	if g_CHANNEL_ID_ChngChnl_Toggle = -1 and g_ENG_DLS_ToggleScreenON = -1 and g_RCM_MSE_INPUT_Toggle = -1 and g_LOCKOUT_INPUTPAD_DS_ChannelRanges = -1 and g_DLS_LOCK_UNTIL_CLOSED = -1
          	if g_ENGINE_Screen_Resolution = 1
            	lib_DRT_RangeValues_MouseSlct_Widescreen()
          	else
            	lib_DRT_RangeValues_MouseSlct_1024x768()
          	endif
        	endif
      	endif
    	endif  
      
      `Handle the zero time button (Input Code Marker: 96381)    
      if mouseclick() = 1 and mouse_click(1) = -1 and g_CHANNEL_ID_ChngChnl_Toggle = -1 and g_ENG_DLS_ToggleScreenON = -1 and g_RCM_MSE_INPUT_Toggle = -1
        if mousey() > 194 and mousey() < 226
          if g_ENGINE_Screen_Resolution = 1
            if mousex() > 1008 and mousex() < 1024
              mouse_click(1) = 1
              g_DS_ChartButton_TimeZero_Timer = timer() + 300
              g_DS_CHART_Scroll_Array_Offset = 0
              ENGINE_DS_CHART_IMAGE_Creation()
            endif
          else
            if mousex() > 685 and mousex() < 701
              mouse_click(1) = 1
              g_DS_ChartButton_TimeZero_Timer = timer() + 300
              g_DS_CHART_Scroll_Array_Offset = 0
              ENGINE_DS_CHART_IMAGE_Creation()
            endif
          endif
        endif
      endif
      `[SPACE BAR] - DS Zero Time Button
      if scancode() = 57 and g_CMNTSYS_AddNewCmnt_Stage = -1
        g_DS_ChartButton_TimeZero_Timer = timer() + 300
        g_DS_CHART_Scroll_Array_Offset = 0
        ENGINE_DS_CHART_IMAGE_Creation()
      endif
      `Flash the DS Zero Chart Position Button if it has been pressed.
      if timer() < g_DS_ChartButton_TimeZero_Timer
        if g_ENGINE_Screen_Resolution = 1
          paste image c_DS_Chart_PosZero_Img, 1009, 195
        else
          paste image c_DS_Chart_PosZero_Img, 686, 195
        endif
      endif
      `Handle the image showing if the chart time is set to zero - if the chart is plotting at 'now'
      if g_DS_CHART_Scroll_Array_Offset = 0
        if g_ENGINE_Screen_Resolution = 1
          paste image c_ChartData_ZeroTime_Yes_Imgnum, 1009, 178
        else
          paste image c_ChartData_ZeroTime_Yes_Imgnum, 686, 178
        endif
      endif
      
      
      `Display and Handle button to switch to and control Data List Screen
      if g_ENG_DLS_Enabled = 1
        ENGINE_Data_List_Screen()
      endif
      
      
      `If no ranges are selected (I.e. no numpad active) and no change channel active then
      if g_RANGES_Chart_Selected_Num = -1
        if g_CHANNEL_ID_ChngChnl_Toggle = -1
          if g_ENG_DLS_ToggleScreenON = -1
            if g_ENG_RTPRNT2IMG_CTRLFLOW = -1
              if g_DS_DepthAlarm_Btn_Toggle = -1
                DS_CHART_INFOBOX_ENGINE()
              endif
            endif
          endif
        endif  
      endif
      
      `Handle the DEPTH ALARM Button
      lib_DS_DepthAlarm_Button()

      lib_TESTVAR_DisplayAll()

    endif
    
    `PITS SCREEN
    if g_ENGINE_HIST_DRILL_Screen_Routing = 3
      CF2_PITS_SCREEN_ENGINE()
      lib_TESTVAR_DisplayAll()
    endif 
    
    `HISTORICAL SCREEN
    if g_ENGINE_HIST_DRILL_Screen_Routing = 2  
      CF2_HS_ENGINE()
    endif
    
    if g_ENGINE_HIST_DRILL_Screen_Routing = 1
      if g_CHANNEL_ID_ChngChnl_Toggle = -1
        if g_ENG_DLS_ToggleScreenON = -1
          lib_DispRT_PITS_Button()
        endif
      endif  
    endif
    
    lib_DS_Reset_Plot_AfterXMins()
    if g_CHANNEL_ID_ChngChnl_Toggle = -1
      if g_ENG_DLS_ToggleScreenON = -1
        lib_DispRT_HistDrill_Button()
      endif
    endif  
    
    `Change a DS/Pits screen Channel
    if g_CHANNEL_ID_ChngChnl_Toggle = 1
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1
        lib_CHANNEL_ID_Change_A_Channel(1)
      endif
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3
        lib_CHANNEL_ID_Change_A_Channel(2)
      endif
    endif
    
    if g_DEBUG_ChartDrawTimerBreakdown_Toggle = 1
      DEBUG_Display_DrawCharts_Timers()
    endif
    
    `Network Connected Image
    if g_server_connected = 1
      paste image c_NETWORK_Connected_Image, 1217, 734, 1
    endif  
  
  else
    DISP_RT_DATA_SCREEN_ENGINE()
  endif


  `Handle the Midnight Backup Infographic Display Box
  if g_AUTO_MIDNIGHTBACKUP_DispInfoImg <> -1
    MidnightBackup_Handle_Infographic()
  endif
  
  `Handle the Export Data ToolTip Info Box
  if g_EXPORTDATA_DisplayToolTip = 1
  
  endif





endfunction


function DISP_RT_INPUT_Universal()

  `[1] - Screen Type - 1
  if keystate(2)= 1 and key_state(2,0)= 0 and g_CF1_DatabaseViewer_GotoPage_Toggle = -1
    g_DISP_RT_DatabaseScreenType = 1
    key_state(2,0)=1
  endif
  if keystate(2)=0 and key_state(2,0)=1 then key_state(2,0)=0
  
  `[2] - Screen Type - 2
  if keystate(3)= 1 and key_state(3,0)= 0 and g_CF1_DatabaseViewer_GotoPage_Toggle = -1
    g_DISP_RT_DatabaseScreenType = 2
    key_state(3,0)=1
  endif
  if keystate(3)=0 and key_state(3,0)=1 then key_state(3,0)=0
  
  `[3] - Screen Type - 2
  if keystate(4)= 1 and key_state(4,0)= 0 and g_CF1_DatabaseViewer_GotoPage_Toggle = -1
    g_DISP_RT_DatabaseScreenType = 3
    key_state(4,0)=1
  endif
  if keystate(4)=0 and key_state(4,0)=1 then key_state(4,0)=0

  `[F5] - Request Channel Setup Variables
  if keystate(63)= 1 and key_state(63,0)= 0
    key_state(63,0)=1
    g_DISP_RT_DB_RequestChannel_State = 1
  endif
  if keystate(63)=0 and key_state(63,0)=1 then key_state(63,0)=0
  
  `[F8] - Connect to server if option available
  `if keystate(66)= 1 and key_state(66,0)= 0
  `  if g_server_connected = 0
  `    g_connection_attempt_ATTEMPT_NOW = 1
  `    g_connection_attempt_counter = 0
  `    g_ENGINELOGIN_ConnectionInfoText$ = "Connecting..."
  `  endif
  `  key_state(66,0)=1
  `endif
  `if keystate(66)=0 and key_state(66,0)=1 then key_state(66,0)=0
  

  
  `[F12] - Same as ESC - Return to Command Console
  if keystate(88)= 1 and key_state(88,0)= 0
    `Turn REALTIME GRAPHICS DISPLAY off
    d3d_color 255, 255, 255, 255
    g_DISP_REALTIME_SHUTDOWN_Toggle = 1
    g_COMMANDCONSOLE_Active = 1

    key_state(88,0)=1
  endif
  if keystate(88)=0 and key_state(88,0)=1 then key_state(88,0)=0
  
  `[ESC] - EXITS REALTIME GRAPHICS DISPLAY
  if keystate(1)= 1 and key_state(1,0)= 0 and g_CHANNEL_ID_ChngChnl_Toggle = -1
    d3d_color 255, 255, 255, 255
    key_state(1,0)=1
    `CF1 Viewer - Display the Exit Program Graphic and handle it. 
    if g_ENGINE_CoreFunctionType = 1
      if g_RTDispEXITBOX_TOGGLE = -1
        `From the Front Screen - Esc pressed turn the RT Display back ON
        g_RTDispEXITBOX_TOGGLE = 1
        g_RTDispEXITBOX_PosX = g_ENG_Half_Screen_Width - g_SPRITE_ExitBox_Half_Width
        g_RTDispEXITBOX_PosY = g_ENG_Half_Screen_Height - g_SPRITE_ExitBox_Half_Height
        g_ENGINELOGIN_ESCToggle = 1
      else
        g_RTDispEXITBOX_TOGGLE = -1
        g_ENGINELOGIN_ESCToggle = -1
      endif
    endif
    `CF2 - Run the shut-program-down script
    if g_ENGINE_CoreFunctionType = 2
      `if g_EXIT_Client_Toggle = -1
        `g_DISP_REALTIME_SHUTDOWN_Toggle = 1
      `endif
    endif
  endif
  if keystate(1)=0 and key_state(1,0)=1 then key_state(1,0)=0


  `+/- Input Keys : Change mouse wheel sensitivities on Realtime / Command Console Database Viewers
  `lib_GLOBAL_Adjust_MouseWheel_Sensitivity()
  


  `Scroll Charts depending on what screen is currently running
  if g_ENGINE_HIST_DRILL_Screen_Routing = 1
    lib_RT_Input_DS_MouseZ_Scroll()
  endif
  if g_ENGINE_HIST_DRILL_Screen_Routing = 3
    lib_RT_Input_PITS_MouseZ_Scroll()
  endif


endfunction

function lib_MSEINPUT_Chart_Block_Disp_3Or4_Chnls(r_X as integer, r_Y as integer, r_VariableID as integer)

  `This function works by receiving the r_X and r_Y, checking the mouse against those coordinates for the
  `input mouse leftclick and toggling the r_VariableID variable to switch a chart/block between
  `displaying either 3 or 4 channels in that chart/block.
  
  if mouseclick() = 1 and g_MSEINPUT_TOGGLE_ChartBlock_Disp3Or4 = -1
  
    
  
  	if mousex() > r_X + 2 and mousex() < r_X + 11
    	if mousey() > r_Y + 2 and mousey() < r_Y + 17
    	
    	  g_MSEINPUT_TOGGLE_ChartBlock_Disp3Or4 = 1
    	   	
    	  `DRILL SCREEN 	
    	  	`DS Screen - CHART 1 (Toggle Variable)
    	  		if r_VariableID = 1
    	    		if g_DS_SCREEN_Block1_DisplayFormat = 3
    	      		g_DS_SCREEN_Block1_DisplayFormat = 4
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		else
    	      		g_DS_SCREEN_Block1_DisplayFormat = 3
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		endif
    	    		ENGINE_DS_CHART_IMAGE_Creation()
    	  		endif
    	  	`DS Screen - CHART 2 (Toggle Variable)
    	  		if r_VariableID = 2
    	    		if g_DS_SCREEN_Block2_DisplayFormat = 3
    	      		g_DS_SCREEN_Block2_DisplayFormat = 4
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		else
    	      		g_DS_SCREEN_Block2_DisplayFormat = 3
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		endif
    	    		ENGINE_DS_CHART_IMAGE_Creation() 
    	  		endif
    	  	`DS Screen - CHART 3 (Toggle Variable)
    	  		if r_VariableID = 3
    	    		if g_DS_SCREEN_Block3_DisplayFormat = 3
    	      		g_DS_SCREEN_Block3_DisplayFormat = 4
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		else
    	      		g_DS_SCREEN_Block3_DisplayFormat = 3
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		endif
    	    		ENGINE_DS_CHART_IMAGE_Creation()
    	  		endif
    	  		
    	  	`PITS SCREEN
    	  	  `Block 1
    	  		if r_VariableID = 4
    	    		if g_PITS_SCREEN_Block1_DisplayFormat = 3
    	      		g_PITS_SCREEN_Block1_DisplayFormat = 4
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		else
    	      		g_PITS_SCREEN_Block1_DisplayFormat = 3
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		endif
    	    		ENGINE_PITS_CHART_IMAGE_Creation()
    	  		endif
    	  		`Block 2
    	  		if r_VariableID = 5
    	    		if g_PITS_SCREEN_Block2_DisplayFormat = 3
    	      		g_PITS_SCREEN_Block2_DisplayFormat = 4
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		else
    	      		g_PITS_SCREEN_Block2_DisplayFormat = 3
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		endif
    	    		ENGINE_PITS_CHART_IMAGE_Creation() 
    	  		endif
    	  		`Block 3
    	  		if r_VariableID = 6
    	    		if g_PITS_SCREEN_Block3_DisplayFormat = 3
    	      		g_PITS_SCREEN_Block3_DisplayFormat = 4
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		else
    	      		g_PITS_SCREEN_Block3_DisplayFormat = 3
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		endif
    	    		ENGINE_PITS_CHART_IMAGE_Creation()
    	  		endif
    	  		`Block 4
    	  		if r_VariableID = 7
    	    		if g_PITS_SCREEN_Block4_DisplayFormat = 3
    	      		g_PITS_SCREEN_Block4_DisplayFormat = 4
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		else
    	      		g_PITS_SCREEN_Block4_DisplayFormat = 3
    	      		g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer() - 5000
    	    		endif
    	    		ENGINE_PITS_CHART_IMAGE_Creation()
    	  		endif
    	  		
    	  		SAVE_CHANNEL_ID_ChannelIndex()
    	  		
    	endif
  	endif
  endif
  
  if mouseclick() = 0 and g_MSEINPUT_TOGGLE_ChartBlock_Disp3Or4 = 1 then g_MSEINPUT_TOGGLE_ChartBlock_Disp3Or4 = -1
  

endfunction

function lib_RT_Input_DS_MouseZ_Scroll()

  local l_MseScrollRateAdj as integer

  `DRILL SCREEN - MouseZ Scroll Charts

    if mousez() > g_CHART_Scroll_MouseZ
      g_CHART_Scroll_MouseZ = mousez()
      g_DS_CHART_PrintOffsetReset = timer() + c_DS_CHART_PrintOffsetReset
      if g_DS_CHART_Scroll_Array_Offset > 0
        `l_MseScrollRateAdj = int((c_CHART_Scroll_Key_Speed * g_DS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
        dec g_DS_CHART_Scroll_Array_Offset, int((c_CHART_Scroll_Key_Speed * g_DS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
       `dec g_DS_CHART_Scroll_Array_Offset, (c_CHART_Scroll_Key_Speed * g_DS_ChartScroll_MseSpeed_Multiplier)
      endif
      if g_DS_CHART_Scroll_Array_Offset < 0 
        g_DS_CHART_Scroll_Array_Offset = 0
      endif
      ENGINE_DS_CHART_IMAGE_Creation()
        `HANDLE GADGET UPDATES
        `GADGET 1 - If the ADV Data View GADGET is active then update it to reflect the screen update
        if g_INFOBOX_DS_ModeState = 2 and g_ENGINE_CoreFunctionType = 2
          if g_INFOBOX_DS_Toggle = 1
            g_INFOBOX_MSEAreaDrag_EndY_ArrPntr = (g_DATABASE_MEM_Total_Num_Records - g_DS_CHART_Scroll_Array_Offset) - ((mousey() - 197) * g_ENGINE_DS_Chart_Time_Period_Adjust)
          endif
          lib_INFOBOX_HighlightArea_Update(1)
        endif
    endif
    
    if mousez() < g_CHART_Scroll_MouseZ
      g_CHART_Scroll_MouseZ = mousez()
      g_DS_CHART_PrintOffsetReset = timer() + c_DS_CHART_PrintOffsetReset
      `l_MseScrollRateAdj = int((c_CHART_Scroll_Key_Speed * g_DS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
      inc g_DS_CHART_Scroll_Array_Offset, int((c_CHART_Scroll_Key_Speed * g_DS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
     `inc g_DS_CHART_Scroll_Array_Offset, (c_CHART_Scroll_Key_Speed * g_DS_ChartScroll_MseSpeed_Multiplier)
      if g_ENGINE_CoreFunctionType = 1
        if g_DS_CHART_Scroll_Array_Offset > c_SMod_RTDis_DB_TtlRecs
          g_DS_CHART_Scroll_Array_Offset = c_SMod_RTDis_DB_TtlRecs
        endif  
      endif
      ENGINE_DS_CHART_IMAGE_Creation()
        `HANDLE GADGET UPDATES
        `GADGET 1 - If the ADV Data View GADGET is active then update it to reflect the screen update
        if g_INFOBOX_DS_ModeState = 2 and g_ENGINE_CoreFunctionType = 2
          if g_INFOBOX_DS_Toggle = 1
            g_INFOBOX_MSEAreaDrag_EndY_ArrPntr = (g_DATABASE_MEM_Total_Num_Records - g_DS_CHART_Scroll_Array_Offset) - ((mousey() - 197) * g_ENGINE_DS_Chart_Time_Period_Adjust)
          endif
          lib_INFOBOX_HighlightArea_Update(1) 
        endif
    endif
    


endfunction


Function DISP_RT_Input_ScrollCharts()

  `DS Screen Chart Scrolling
  if g_ENGINE_HIST_DRILL_Screen_Routing = 1
    `[UP Cursor] - Go up a page view
    if keystate(200)= 1 and key_state(200,0)= 0
      if g_DS_CHART_Scroll_Array_Offset > 0
        g_DS_CHART_PrintOffsetReset = timer() + c_DS_CHART_PrintOffsetReset
        dec g_DS_CHART_Scroll_Array_Offset, int((c_CHART_Scroll_Key_Speed * g_DS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
        `dec g_DS_CHART_Scroll_Array_Offset, (c_CHART_Scroll_Key_Speed * g_DS_ChartScroll_MseSpeed_Multiplier)
      endif
      ENGINE_DS_CHART_IMAGE_Creation()
      lib_INFOBOX_HighlightArea_Update(1)
      key_state(200,0)=1
    endif
    if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
    `[DOWN Cursor] - Go down a page view
    if keystate(208)= 1 and key_state(208,0)= 0
      g_DS_CHART_PrintOffsetReset = timer() + c_DS_CHART_PrintOffsetReset
      inc g_DS_CHART_Scroll_Array_Offset, int((c_CHART_Scroll_Key_Speed * g_DS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
      `inc g_DS_CHART_Scroll_Array_Offset, (c_CHART_Scroll_Key_Speed * g_DS_ChartScroll_MseSpeed_Multiplier)
      ENGINE_DS_CHART_IMAGE_Creation()
      lib_INFOBOX_HighlightArea_Update(1)
      key_state(208,0)=1
    endif
    if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
    
    `[PAGE UP Cursor] - Go up a page view
    if keystate(201)= 1 and key_state(201,0)= 0
      if g_DS_CHART_Scroll_Array_Offset > 0
        g_DS_CHART_PrintOffsetReset = timer() + c_DS_CHART_PrintOffsetReset
        dec g_DS_CHART_Scroll_Array_Offset, int(((c_CHART_Scroll_Key_Speed * 5) * g_DS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
        `dec g_DS_CHART_Scroll_Array_Offset, ((c_CHART_Scroll_Key_Speed*5) * g_DS_ChartScroll_MseSpeed_Multiplier)
      endif
      ENGINE_DS_CHART_IMAGE_Creation()
      lib_INFOBOX_HighlightArea_Update(1)
      key_state(201,0)=1
    endif
    if keystate(201)=0 and key_state(201,0)=1 then key_state(201,0)=0
    `[PAGE DOWN Cursor] - Go down a page view
    if keystate(209)= 1 and key_state(209,0)= 0
      g_DS_CHART_PrintOffsetReset = timer() + c_DS_CHART_PrintOffsetReset
      inc g_DS_CHART_Scroll_Array_Offset, int(((c_CHART_Scroll_Key_Speed * 5) * g_DS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
      `inc g_DS_CHART_Scroll_Array_Offset, ((c_CHART_Scroll_Key_Speed*5) * g_DS_ChartScroll_MseSpeed_Multiplier)
      ENGINE_DS_CHART_IMAGE_Creation()
      lib_INFOBOX_HighlightArea_Update(1)
      key_state(209,0)=1
    endif
    if keystate(209)=0 and key_state(209,0)=1 then key_state(209,0)=0
    
    `[HOME] DS Screen Home Button
      if keystate(199)= 1 and key_state(199,0)= 0
        g_DS_CHART_Scroll_Array_Offset = 0
        ENGINE_DS_CHART_IMAGE_Creation()
        lib_INFOBOX_HighlightArea_Update(1)
        key_state(199,0)=1
      endif
      if keystate(199)=0 and key_state(199,0)=1 then key_state(199,0)=0
  endif

  `Historic Screen Chart Scrolling
  if g_ENGINE_HIST_DRILL_Screen_Routing = 2
    `[LEFT Cursor] - Scroll Data Left
    if keystate(203)= 1 and key_state(203,0)= 0
      g_HS_Chart_Update_Start_Array = 1
      inc g_HS_CHART_Scroll_Array_Offset, (c_CHART_Scroll_Key_Speed * (g_HS_ChartScroll_MseSpeed_Multiplier*2))
      if g_ENGINE_CoreFunctionType = 1
        CF1_HS_PLOT_CHART_CF1_Create_Image()
      endif
      if g_ENGINE_CoreFunctionType = 2
        CF2_HS_PLOT_CHART_CF2_Create_Image()
      endif
      key_state(203,0)=1
    endif
    if keystate(203)=0 and key_state(203,0)=1 then key_state(203,0)=0
    
    `[RIGHT Cursor] - Scroll Data Right
    if keystate(205)= 1 and key_state(205,0)= 0
      if g_HS_CHART_Scroll_Array_Offset > 0
        g_HS_Chart_Update_Start_Array = 1
        dec g_HS_CHART_Scroll_Array_Offset, (c_CHART_Scroll_Key_Speed * (g_HS_ChartScroll_MseSpeed_Multiplier*2))
      endif
      if g_ENGINE_CoreFunctionType = 1
        CF1_HS_PLOT_CHART_CF1_Create_Image()
      endif
      if g_ENGINE_CoreFunctionType = 2
        CF2_HS_PLOT_CHART_CF2_Create_Image()
      endif
      key_state(205,0)=1
    endif
    if keystate(205)=0 and key_state(205,0)=1 then key_state(205,0)=0
  endif

endfunction


Function lib_Disp_RT_STARTUP()

  `Set the Drilling Screen to display 1Hr Interval
  g_DISPLAY_SCREEN_TimePeriod_Button = 2
  g_ENGINE_DS_Chart_Time_Period_Adjust = 2
  g_DS_ChartScroll_MseSpeed_Multiplier = g_DS_MouseScrollMultiplier_1Hour
  
  `Set the Historical Screen to display 4H4 Interval
  g_HS_TimePeriod_Buttons = 2
  g_ENGINE_HS_Chart_Time_Period_Adjust = 2
  g_HS_ChartScroll_MseSpeed_Multiplier = g_HS_MouseScrollMultiplier_4Hour
  
  
  g_DS_SCROLLTIME_Text_Scroll_Adjust = 8

  g_DISP_RT_STARTUPWaitForServerData = -1

  g_DISP_REALTIME_SHUTDOWN_Toggle = -1
  g_COMMANDCONSOLE_Flash_Toggle = 1
  
  g_DISP_RT_DatabaseScreenType = 1
  g_DISP_RT_DB_View_PageLeftRight = 1
  g_DISP_RT_DB_View_PageNumber = 1
  
  g_COMMANDCONSOLE_Active = 0

  
    `The database is no longer reset everytime the screen is started up. This is now a permanent
    `mode persistent from the point that the Push Table relationship is established and data
    `logging begins. The Database is only flushed when the Push Table relationship is first established.
    `lib_Disp_RT_Reset_Database()
  
  g_DISP_REALTIME_ScreenType = 1
  
  g_DISP_RT_DB_RequestChannel_State = 1
  g_DISP_RT_DB_RequestChannel_Timer = timer() + g_DISP_RT_DB_ReqChnlInterval
  
  g_DISP_RT_DB_PUSHTABLE_Timer = timer() + g_DISP_RT_PUSHTABLE_Interval
  
  g_DISP_RT_DB_Last_Good_Data_Timer = timer()
  g_DISP_RT_DB_Last_Good_Data_Received$ = "No Data Received"
  

  lib_HS_Create_ColorBox_Images()

endfunction

function INPUTPAD_Deactivate()

  g_INPUTPAD_SpritePos_x = int(g_ENG_Half_Screen_Width - 118)
  g_INPUTPAD_SpritePos_y = int(g_ENG_Half_Screen_Height - 121)

endfunction

function INPUTPAD_DISPLAY_Inputpad(r_Title$ as string)

  local l_OUTPUT# as float
  
  `THE INPUT PAD IS BASICALLY THE ORIGINAL NUMPAD, BUT THE NUMPAD WAS MADE TO CHANGE THE CHART
  `LINE PLOT RANGES AND THE FUNCTION CONTAINS ALOT OF CODE TO DO THAT FOR THE DS, HS AND PITS
  `SCREENS
  `SO THE INPUT PAD WAS MADE WHEN A CLEANER FUNCTION WAS NEEDED TO JUST INPUT A VARIABLE
  `(IN THE ORIGINAL CASE THE WELL DATA/PIPE SIZES). THE INPUT PAD IS DESIGNED TO ALLOW
  `A USER NUMBER INPUT THAT IS NOT SPECIFIC TO ANY OTHER FUNCTION, I.E CAN JUST BE CALLED
  `FROM ANY FUNCTION TO GET A SINGLE USER INPUTTED NUMBER OR STATE, I.E. CANCEL ETC 
  `THEREFORE IT USES MUCH OF THE SAME CODE AS NUMPAD, BUT IN A GENERIC FORMAT AND EITHER
  `OUTPUTS A NUMBER VALUE, OR THE CANCEL STATE VALUE OF -9999

  `This function outputs l_OUTPUT# = -1 as its NULL STATE. Monitor this value in your calling
  `function to determine any action by the InputPad
  `NOTE: The INPUT PAD can output three states: -1=NULL, -9999=Cancel, Anything else=Value
    l_OUTPUT# = -1
    
  `The is a separate mouse click / lockout available in this function - g_INPUTPAD_MouseClick
    if mouseclick() = 0 and g_INPUTPAD_MouseClick = 1
      g_INPUTPAD_MouseClick = -1
    endif    
    

  `DISPLAY SPRITE
    paste sprite c_NUMPAD_SPRITE_BaseSpriteNum, g_INPUTPAD_SpritePos_x, g_INPUTPAD_SpritePos_y

  `HANDLE SHOWING THE HIGHLIGHTED AND SELECTED BUTTON IMAGES
  `Highlighted Buttons
  if g_INPUTPAD_Highlighted_Button = 0 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_INPUTPAD_SpritePos_x + 16, g_INPUTPAD_SpritePos_y + 165
  if g_INPUTPAD_Highlighted_Button = 1 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 14, g_INPUTPAD_SpritePos_y + 131
  if g_INPUTPAD_Highlighted_Button = 2 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 57, g_INPUTPAD_SpritePos_y + 131
  if g_INPUTPAD_Highlighted_Button = 3 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 131
  if g_INPUTPAD_Highlighted_Button = 4 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 14, g_INPUTPAD_SpritePos_y + 97
  if g_INPUTPAD_Highlighted_Button = 5 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 57, g_INPUTPAD_SpritePos_y + 97
  if g_INPUTPAD_Highlighted_Button = 6 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 97
  if g_INPUTPAD_Highlighted_Button = 7 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 14, g_INPUTPAD_SpritePos_y + 64
  if g_INPUTPAD_Highlighted_Button = 8 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 57, g_INPUTPAD_SpritePos_y + 64
  if g_INPUTPAD_Highlighted_Button = 9 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 64
  if g_INPUTPAD_Highlighted_Button = 10 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 165 : `Minus
  if g_INPUTPAD_Highlighted_Button = 11 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 64 : `Back
  if g_INPUTPAD_Highlighted_Button = 12 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 97 : `Clear
  if g_INPUTPAD_Highlighted_Button = 13 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 131 : `Enter
  if g_INPUTPAD_Highlighted_Button = 14 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 165 : `Cancel
  if g_INPUTPAD_Highlighted_Button = 15 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 199 : `Decimal place
  
  `Selected Buttons
  if g_INPUTPAD_Selected_Button <> - 1 and g_INPUTPAD_Selected_Button_Mouseclick = 1
    if g_INPUTPAD_Selected_Button = 0 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_INPUTPAD_SpritePos_x + 16, g_INPUTPAD_SpritePos_y + 165
    if g_INPUTPAD_Selected_Button = 1 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 14, g_INPUTPAD_SpritePos_y + 131
    if g_INPUTPAD_Selected_Button = 2 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 57, g_INPUTPAD_SpritePos_y + 131
    if g_INPUTPAD_Selected_Button = 3 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 131
    if g_INPUTPAD_Selected_Button = 4 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 14, g_INPUTPAD_SpritePos_y + 97
    if g_INPUTPAD_Selected_Button = 5 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 57, g_INPUTPAD_SpritePos_y + 97
    if g_INPUTPAD_Selected_Button = 6 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 97
    if g_INPUTPAD_Selected_Button = 7 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 14, g_INPUTPAD_SpritePos_y + 64
    if g_INPUTPAD_Selected_Button = 8 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 57, g_INPUTPAD_SpritePos_y + 64
    if g_INPUTPAD_Selected_Button = 9 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 64
    if g_INPUTPAD_Selected_Button = 10 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 165 : `Minus
    if g_INPUTPAD_Selected_Button = 11 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 64 : `Back
    if g_INPUTPAD_Selected_Button = 12 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 97 : `Clear
    if g_INPUTPAD_Selected_Button = 13 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 131 : `Enter
    if g_INPUTPAD_Selected_Button = 14 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 165 : `Cancel
    if g_INPUTPAD_Selected_Button = 15 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 199 : `Decimal place
  endif

  `HANDLE DRAGGING THE RANGE INPUT BOX AROUND THE SCREEN
    if mouseclick() = 1
      if g_INPUTPAD_MOVE_MouseClickHOLD = -1 and mouse_click(1) = -1
        if mousex() > g_INPUTPAD_SpritePos_x + 0 and mousex() < g_INPUTPAD_SpritePos_x + 235
          if mousey() > g_INPUTPAD_SpritePos_y + 0 and mousey() < g_INPUTPAD_SpritePos_y + 21
            g_INPUTPAD_MOVE_MouseClickHOLD = 1
            g_INPUTPAD_MOVE_Old_MseX = mousex()
            g_INPUTPAD_MOVE_Old_MseY = mousey()
          endif
        endif    
      endif
      if g_INPUTPAD_MOVE_MouseClickHOLD = 1
        g_INPUTPAD_SpritePos_x = g_INPUTPAD_SpritePos_x + (mousex() - g_INPUTPAD_MOVE_Old_MseX)
        g_INPUTPAD_SpritePos_y = g_INPUTPAD_SpritePos_y + (mousey() - g_INPUTPAD_MOVE_Old_MseY)
        g_INPUTPAD_MOVE_Old_MseX = mousex()
        g_INPUTPAD_MOVE_Old_MseY = mousey()
      endif
    endif  

  `HANDLE THE KEYBOARD NUMBER INPUTS
    if scancode() > 1 and scancode() < 12
      l_INPUTPAD_Keyboard_Input = scancode()
      if keystate(l_INPUTPAD_Keyboard_Input)= 1 and key_state(l_INPUTPAD_Keyboard_Input,0)= 0
        if scancode() = 11
          g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "0"
        else
          g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + str$(l_INPUTPAD_Keyboard_Input - 1)
        endif
        key_state(l_INPUTPAD_Keyboard_Input,0) = 1
      endif
    endif
    if scancode() = 0
      for check_lp = 2 to 11
        if keystate(check_lp) = 0 and key_state(check_lp, 0) = 1
          key_state(check_lp,0) = 0
        endif
      next check_lp
    endif
    
    `Dirty NUMPAD Code - Just do it this way to make it work and not mess with other code.
    if scancode() > 70 and scancode() < 83
      l_INPUTPAD_Keyboard_Input = scancode()
      if keystate(l_INPUTPAD_Keyboard_Input)= 1 and key_state(l_INPUTPAD_Keyboard_Input,0)= 0
        if l_INPUTPAD_Keyboard_Input = 79 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "1"
        if l_INPUTPAD_Keyboard_Input = 80 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "2"
        if l_INPUTPAD_Keyboard_Input = 81 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "3"

        if l_INPUTPAD_Keyboard_Input = 75 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "4"
        if l_INPUTPAD_Keyboard_Input = 76 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "5"
        if l_INPUTPAD_Keyboard_Input = 77 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "6"
        
        if l_INPUTPAD_Keyboard_Input = 71 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "7"
        if l_INPUTPAD_Keyboard_Input = 72 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "8"
        if l_INPUTPAD_Keyboard_Input = 73 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "9"
        
        if l_INPUTPAD_Keyboard_Input = 82 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "0"
        
        `Numpad Negative Number ([-] Button)
        if l_INPUTPAD_Keyboard_Input = 74
          if left$(g_INPUTPAD_BuildValue$, 1) <> "-"
          	g_INPUTPAD_BuildValue$ = "-" + g_INPUTPAD_BuildValue$
        	else
          	g_INPUTPAD_BuildValue$ = right$(g_INPUTPAD_BuildValue$, (len(g_INPUTPAD_BuildValue$) - 1))
          endif
        endif
        
        
        key_state(l_INPUTPAD_Keyboard_Input,0) = 1
      endif
    endif
    if scancode() = 0
    	for check_lp = 71 to 82
      	if keystate(check_lp) = 0 and key_state(check_lp, 0) = 1
        	key_state(check_lp,0) = 0
      	endif
    	next check_lp
    endif
    
  `HANDLE THE KEYBOARD ENTER KEY
    `[ENTER] - INPUTPAD Enter Button
    if lib_Enter_Pressed(12122) = 1
      if g_INPUTPAD_Enter_Button_Pressed = -1
        g_INPUTPAD_Enter_Button_Pressed = 1
        g_INPUTPAD_BuildValue_Final$ = g_INPUTPAD_BuildValue$
      endif
    endif
    
  `HANDLE THE KEYBOARD DELETE KEY
    `[DELETE] - INPUTPAD Backspace Button
    if KEYSTATE(14)= 1 and key_state(14,0)= 0
      g_INPUTPAD_BuildValue$ = left$(g_INPUTPAD_BuildValue$, (len(g_INPUTPAD_BuildValue$)-1))
      key_state(14,0)=1
    endif
    if KEYSTATE(14)=0 and key_state(14,0)=1 then key_state(14,0)=0
    
  `HANDLE THE DECIMAL PLACE KEY
    `[.] - INPUTPAD Decimal Place on keyboard
    if KEYSTATE(52)= 1 and key_state(52,0)= 0
      l_dec_fnd = -1
      `if len(g_INPUTPAD_BuildValue$) > 0
        for dec_lp = 1 to len(g_INPUTPAD_BuildValue$)
          if mid$(g_INPUTPAD_BuildValue$, dec_lp) = "."
            l_dec_fnd = 1
          endif  
        next dec_lp
      `endif
      if l_dec_fnd = -1
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "."
      endif  
      key_state(52,0)=1
    endif
    if KEYSTATE(52)=0 and key_state(52,0)=1 then key_state(52,0)=0
    
    	`NOW DO THE EXACT SAME FOR THE NUMPAD [.]
    	if KEYSTATE(83)= 1 and key_state(83,0)= 0
      	l_dec_fnd = -1
      	`if len(g_INPUTPAD_BuildValue$) > 0
        	for dec_lp = 1 to len(g_INPUTPAD_BuildValue$)
          	if mid$(g_INPUTPAD_BuildValue$, dec_lp) = "."
            	l_dec_fnd = 1
          	endif  
        	next dec_lp
      	`endif
      	if l_dec_fnd = -1
        	g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "."
      	endif  
      	key_state(83,0)=1
    	endif
    	if KEYSTATE(83)=0 and key_state(83,0)=1 then key_state(83,0)=0
    
    
    
  `HANDLE THE BUTTON INTERACTIONS
  if mouseclick() = 1 and mouse_click(1) = -1 and g_INPUTPAD_MouseClick = -1
    
    `Close Button
    if mousex() > g_INPUTPAD_SpritePos_x + 215 and mousex() < g_INPUTPAD_SpritePos_x + 232
      if mousey() > g_INPUTPAD_SpritePos_y + 5 and mousey() < g_INPUTPAD_SpritePos_y + 20
        mouse_click(1) = 1
        l_OUTPUT# = -9999
      endif
    endif
    `Number 0
    if mousex() > g_INPUTPAD_SpritePos_x + 14 and mousex() < g_INPUTPAD_SpritePos_x + 94
      if mousey() > g_INPUTPAD_SpritePos_y + 165 and mousey() < g_INPUTPAD_SpritePos_y + 193
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "0"
        g_INPUTPAD_Highlighted_Button = 0
        g_INPUTPAD_Selected_Button = 0
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 1
    if mousex() > g_INPUTPAD_SpritePos_x + 14 and mousex() < g_INPUTPAD_SpritePos_x + 51
      if mousey() > g_INPUTPAD_SpritePos_y + 131 and mousey() < g_INPUTPAD_SpritePos_y + 159
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "1"
        g_INPUTPAD_Highlighted_Button = 1
        g_INPUTPAD_Selected_Button = 1
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 2
    if mousex() > g_INPUTPAD_SpritePos_x + 57 and mousex() < g_INPUTPAD_SpritePos_x + 94
      if mousey() > g_INPUTPAD_SpritePos_y + 131 and mousey() < g_INPUTPAD_SpritePos_y + 159
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "2"
        g_INPUTPAD_Highlighted_Button = 2
        g_INPUTPAD_Selected_Button = 2
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 3
    if mousex() > g_INPUTPAD_SpritePos_x + 100 and mousex() < g_INPUTPAD_SpritePos_x + 137
      if mousey() > g_INPUTPAD_SpritePos_y + 131 and mousey() < g_INPUTPAD_SpritePos_y + 159
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "3"
        g_INPUTPAD_Highlighted_Button = 3
        g_INPUTPAD_Selected_Button = 3
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 4
    if mousex() > g_INPUTPAD_SpritePos_x + 14 and mousex() < g_INPUTPAD_SpritePos_x + 51
      if mousey() > g_INPUTPAD_SpritePos_y + 97 and mousey() < g_INPUTPAD_SpritePos_y + 125
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "4"
        g_INPUTPAD_Highlighted_Button = 4
        g_INPUTPAD_Selected_Button = 4
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 5
    if mousex() > g_INPUTPAD_SpritePos_x + 57 and mousex() < g_INPUTPAD_SpritePos_x + 94
      if mousey() > g_INPUTPAD_SpritePos_y + 97 and mousey() < g_INPUTPAD_SpritePos_y + 125
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "5"
        g_INPUTPAD_Highlighted_Button = 5
        g_INPUTPAD_Selected_Button = 5
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 6
    if mousex() > g_INPUTPAD_SpritePos_x + 100 and mousex() < g_INPUTPAD_SpritePos_x + 137
      if mousey() > g_INPUTPAD_SpritePos_y + 97 and mousey() < g_INPUTPAD_SpritePos_y + 125
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "6"
        g_INPUTPAD_Highlighted_Button = 6
        g_INPUTPAD_Selected_Button = 6
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 7
    if mousex() > g_INPUTPAD_SpritePos_x + 14 and mousex() < g_INPUTPAD_SpritePos_x + 51
      if mousey() > g_INPUTPAD_SpritePos_y + 64 and mousey() < g_INPUTPAD_SpritePos_y + 92
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "7"
        g_INPUTPAD_Highlighted_Button = 7
        g_INPUTPAD_Selected_Button = 7
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 8
    if mousex() > g_INPUTPAD_SpritePos_x + 57 and mousex() < g_INPUTPAD_SpritePos_x + 94
      if mousey() > g_INPUTPAD_SpritePos_y + 64 and mousey() < g_INPUTPAD_SpritePos_y + 92
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "8"
        g_INPUTPAD_Highlighted_Button = 8
        g_INPUTPAD_Selected_Button = 8
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 9
    if mousex() > g_INPUTPAD_SpritePos_x + 100 and mousex() < g_INPUTPAD_SpritePos_x + 137
      if mousey() > g_INPUTPAD_SpritePos_y + 64 and mousey() < g_INPUTPAD_SpritePos_y + 92
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "9"
        g_INPUTPAD_Highlighted_Button = 9
        g_INPUTPAD_Selected_Button = 9
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Decimal Place
    if mousex() > g_INPUTPAD_SpritePos_x + 100 and mousex() < g_INPUTPAD_SpritePos_x + 137
      if mousey() > g_INPUTPAD_SpritePos_y + 199 and mousey() < g_INPUTPAD_SpritePos_y + 227
        mouse_click(1) = 1
        `Check to make sure there is not already a decimal in the string
        `if len(g_INPUTPAD_BuildValue$) > 0
          l_decimal_found = -1
          for check_lp = 1 to len(g_INPUTPAD_BuildValue$)
            if mid$(g_INPUTPAD_BuildValue$, check_lp) = "."
              l_decimal_found = 1
            endif
          next check_lp
          if l_decimal_found = -1
            g_INPUTPAD_Highlighted_Button = 15
            g_INPUTPAD_Selected_Button_Mouseclick = 1
            g_INPUTPAD_Selected_Button = 15
            g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "."
          endif
        `endif
      endif
    endif
    `Negative Sign
    if mousex() > g_INPUTPAD_SpritePos_x + 100 and mousex() < g_INPUTPAD_SpritePos_x + 137
      if mousey() > g_INPUTPAD_SpritePos_y + 160 and mousey() < g_INPUTPAD_SpritePos_y + 193
        mouse_click(1) = 1
        if left$(g_INPUTPAD_BuildValue$, 1) <> "-"
          g_INPUTPAD_BuildValue$ = "-" + g_INPUTPAD_BuildValue$
        else
          g_INPUTPAD_BuildValue$ = right$(g_INPUTPAD_BuildValue$, (len(g_INPUTPAD_BuildValue$) - 1))
        endif
        g_INPUTPAD_Highlighted_Button = 10
        g_INPUTPAD_Selected_Button = 10
        g_INPUTPAD_Selected_Button_Mouseclick = 1
      endif
    endif
    `Back Button
    if mousex() > g_INPUTPAD_SpritePos_x + 143 and mousex() < g_INPUTPAD_SpritePos_x + 219
      if mousey() > g_INPUTPAD_SpritePos_y + 64 and mousey() < g_INPUTPAD_SpritePos_y + 92
        mouse_click(1) = 1
        if len(g_INPUTPAD_BuildValue$) > 0
          g_INPUTPAD_BuildValue$ = left$(g_INPUTPAD_BuildValue$, (len(g_INPUTPAD_BuildValue$)-1))
          g_INPUTPAD_Highlighted_Button = 11
          g_INPUTPAD_Selected_Button = 11
          g_INPUTPAD_Selected_Button_Mouseclick = 1
        endif
      endif
    endif
    `Clear Button
    if mousex() > g_INPUTPAD_SpritePos_x + 143 and mousex() < g_INPUTPAD_SpritePos_x + 219
      if mousey() > g_INPUTPAD_SpritePos_y + 97 and mousey() < g_INPUTPAD_SpritePos_y + 125
        g_INPUTPAD_BuildValue$ = ""
        g_INPUTPAD_Highlighted_Button = 12
        g_INPUTPAD_Selected_Button = 12
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Enter Button
    if mousex() > g_INPUTPAD_SpritePos_x + 143 and mousex() < g_INPUTPAD_SpritePos_x + 219
      if mousey() > g_INPUTPAD_SpritePos_y + 131 and mousey() < g_INPUTPAD_SpritePos_y + 159
        if g_INPUTPAD_Enter_Button_Pressed = -1
          g_INPUTPAD_Enter_Button_Pressed = 1
          g_INPUTPAD_Enter_Button_Timer = hitimer() + 250
          g_INPUTPAD_BuildValue_Final$ = g_INPUTPAD_BuildValue$
          g_INPUTPAD_Selected_Button_Mouseclick = 1
          g_INPUTPAD_Highlighted_Button = 13
          g_INPUTPAD_Selected_Button = 13
          mouse_click(1) = 1
        endif
      endif
    endif
    `Cancel Button
    if mousex() > g_INPUTPAD_SpritePos_x + 143 and mousex() < g_INPUTPAD_SpritePos_x + 219
      if mousey() > g_INPUTPAD_SpritePos_y + 165 and mousey() < g_INPUTPAD_SpritePos_y + 193
        if g_INPUTPAD_Cancel_Button_Pressed = -1
          g_INPUTPAD_Cancel_Button_Pressed = 1
          g_INPUTPAD_Cancel_Button_Timer = hitimer() + 250
          g_INPUTPAD_Selected_Button_Mouseclick = 1
          g_INPUTPAD_Highlighted_Button = 14
          g_INPUTPAD_Selected_Button = 14
          mouse_click(1) = 1
        endif
      endif
    endif
    
  endif

  `Handle Cancel Button Pressed
  if g_INPUTPAD_Cancel_Button_Pressed = 1 and hitimer() > g_INPUTPAD_Cancel_Button_Timer
    g_INPUTPAD_Cancel_Button_Pressed = -1
    l_OUTPUT# = -9999
  endif
  
  `Handle Enter Button Pressed
  if g_INPUTPAD_Enter_Button_Pressed = 1 and hitimer() > g_INPUTPAD_Enter_Button_Timer
    g_INPUTPAD_Enter_Button_Pressed = -1
    l_OUTPUT# = val(g_INPUTPAD_BuildValue_Final$)
  endif
  
  `Print the g_INPUTPAD_BuildValue$
    d3d_starttext
      d3d_text 11, g_INPUTPAD_SpritePos_x + 80, g_INPUTPAD_SpritePos_y + 5, 0, r_Title$, g_ENGINE_COLOUR_White
      d3d_text 1, g_INPUTPAD_SpritePos_x + 19, g_INPUTPAD_SpritePos_y + 37, 0, g_INPUTPAD_BuildValue$, g_ENGINE_COLOUR_Black
    d3d_endtext
    

endfunction l_OUTPUT#

function INPUTPAD_ADD_ALARM_DISPLAY_Inputpad(r_Title$ as string)

  local l_OUTPUT# as float
  local l_INPUTPAD_Keyboard_Input as integer
  local l_decimal_found as integer
  
  local l_FlashCursor_XPos as integer
  local l_FlashCursor_YPos as integer
  local l_FlashCursor_XOffset as integer
  local l_SpacesChar_XOffset as integer
  local l_FlashCursor_BuildStr$ as string
  local l_FlashCursor_OffsetX as integer
  local l_space_counter as integer
  local l_space_pixel_FlashCursor as integer
  

  
  `NOTE: THIS FUNCTION WAS ADDED SPECIFICALLY FOR THE ADD ALARM
  `      IT USES THE OTHER INPUTPAD_DISPLAY_Inputpad function for simplicity
  `      but adds on the ability to add an alarm text label in a box under the original
  `      inputpad box. Rather than adjust the original function to do both this new
  `      function was added as an adjusted copy and paste
  
  `----------------------------------------------------------------------------
  
  `THE INPUT PAD IS BASICALLY THE ORIGINAL NUMPAD, BUT THE NUMPAD WAS MADE TO CHANGE THE CHART
  `LINE PLOT RANGES AND THE FUNCTION CONTAINS ALOT OF CODE TO DO THAT FOR THE DS, HS AND PITS
  `SCREENS
  `SO THE INPUT PAD WAS MADE WHEN A CLEANER FUNCTION WAS NEEDED TO JUST INPUT A VARIABLE
  `(IN THE ORIGINAL CASE THE WELL DATA/PIPE SIZES). THE INPUT PAD IS DESIGNED TO ALLOW
  `A USER NUMBER INPUT THAT IS NOT SPECIFIC TO ANY OTHER FUNCTION, I.E CAN JUST BE CALLED
  `FROM ANY FUNCTION TO GET A SINGLE USER INPUTTED NUMBER OR STATE, I.E. CANCEL ETC 
  `THEREFORE IT USES MUCH OF THE SAME CODE AS NUMPAD, BUT IN A GENERIC FORMAT AND EITHER
  `OUTPUTS A NUMBER VALUE, OR THE CANCEL STATE VALUE OF -9999

  `This function outputs l_OUTPUT# = -1 as its NULL STATE. Monitor this value in your calling
  `function to determine any action by the InputPad
  `NOTE: The INPUT PAD can output three states: -1=NULL, -9999=Cancel, Anything else=Value
    l_OUTPUT# = -1
    
  `The is a separate mouse click / lockout available in this function - g_INPUTPAD_MouseClick
    if mouseclick() = 0 and g_INPUTPAD_MouseClick = 1
      g_INPUTPAD_MouseClick = -1
    endif    
    

  `DISPLAY SPRITE
    paste sprite c_NUMPAD_SPRITE_ALARMS_SpriteNum, g_INPUTPAD_SpritePos_x, g_INPUTPAD_SpritePos_y

  `HANDLE SHOWING THE HIGHLIGHTED AND SELECTED BUTTON IMAGES
  `Highlighted Buttons
  if g_INPUTPAD_Highlighted_Button = 0 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_INPUTPAD_SpritePos_x + 16, g_INPUTPAD_SpritePos_y + 165
  if g_INPUTPAD_Highlighted_Button = 1 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 14, g_INPUTPAD_SpritePos_y + 131
  if g_INPUTPAD_Highlighted_Button = 2 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 57, g_INPUTPAD_SpritePos_y + 131
  if g_INPUTPAD_Highlighted_Button = 3 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 131
  if g_INPUTPAD_Highlighted_Button = 4 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 14, g_INPUTPAD_SpritePos_y + 97
  if g_INPUTPAD_Highlighted_Button = 5 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 57, g_INPUTPAD_SpritePos_y + 97
  if g_INPUTPAD_Highlighted_Button = 6 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 97
  if g_INPUTPAD_Highlighted_Button = 7 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 14, g_INPUTPAD_SpritePos_y + 64
  if g_INPUTPAD_Highlighted_Button = 8 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 57, g_INPUTPAD_SpritePos_y + 64
  if g_INPUTPAD_Highlighted_Button = 9 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 64
  if g_INPUTPAD_Highlighted_Button = 10 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 165 : `Minus
  if g_INPUTPAD_Highlighted_Button = 11 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 64 : `Back
  if g_INPUTPAD_Highlighted_Button = 12 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 97 : `Clear
  if g_INPUTPAD_Highlighted_Button = 13 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 131 : `Enter
  if g_INPUTPAD_Highlighted_Button = 14 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 165 : `Cancel
  if g_INPUTPAD_Highlighted_Button = 15 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 199 : `Decimal place
  
  `Selected Buttons
  if g_INPUTPAD_Selected_Button <> - 1 and g_INPUTPAD_Selected_Button_Mouseclick = 1
    if g_INPUTPAD_Selected_Button = 0 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_INPUTPAD_SpritePos_x + 16, g_INPUTPAD_SpritePos_y + 165
    if g_INPUTPAD_Selected_Button = 1 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 14, g_INPUTPAD_SpritePos_y + 131
    if g_INPUTPAD_Selected_Button = 2 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 57, g_INPUTPAD_SpritePos_y + 131
    if g_INPUTPAD_Selected_Button = 3 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 131
    if g_INPUTPAD_Selected_Button = 4 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 14, g_INPUTPAD_SpritePos_y + 97
    if g_INPUTPAD_Selected_Button = 5 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 57, g_INPUTPAD_SpritePos_y + 97
    if g_INPUTPAD_Selected_Button = 6 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 97
    if g_INPUTPAD_Selected_Button = 7 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 14, g_INPUTPAD_SpritePos_y + 64
    if g_INPUTPAD_Selected_Button = 8 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 57, g_INPUTPAD_SpritePos_y + 64
    if g_INPUTPAD_Selected_Button = 9 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 64
    if g_INPUTPAD_Selected_Button = 10 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 165 : `Minus
    if g_INPUTPAD_Selected_Button = 11 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 64 : `Back
    if g_INPUTPAD_Selected_Button = 12 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 97 : `Clear
    if g_INPUTPAD_Selected_Button = 13 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 131 : `Enter
    if g_INPUTPAD_Selected_Button = 14 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_INPUTPAD_SpritePos_x + 143, g_INPUTPAD_SpritePos_y + 165 : `Cancel
    if g_INPUTPAD_Selected_Button = 15 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_INPUTPAD_SpritePos_x + 100, g_INPUTPAD_SpritePos_y + 199 : `Decimal place
  endif

  `HANDLE DRAGGING THE RANGE INPUT BOX AROUND THE SCREEN
    if mouseclick() = 1
      if g_INPUTPAD_MOVE_MouseClickHOLD = -1 and mouse_click(1) = -1
        if mousex() > g_INPUTPAD_SpritePos_x + 0 and mousex() < g_INPUTPAD_SpritePos_x + 235
          if mousey() > g_INPUTPAD_SpritePos_y + 0 and mousey() < g_INPUTPAD_SpritePos_y + 21
            g_INPUTPAD_MOVE_MouseClickHOLD = 1
            g_INPUTPAD_MOVE_Old_MseX = mousex()
            g_INPUTPAD_MOVE_Old_MseY = mousey()
          endif
        endif    
      endif
      if g_INPUTPAD_MOVE_MouseClickHOLD = 1
        g_INPUTPAD_SpritePos_x = g_INPUTPAD_SpritePos_x + (mousex() - g_INPUTPAD_MOVE_Old_MseX)
        g_INPUTPAD_SpritePos_y = g_INPUTPAD_SpritePos_y + (mousey() - g_INPUTPAD_MOVE_Old_MseY)
        g_INPUTPAD_MOVE_Old_MseX = mousex()
        g_INPUTPAD_MOVE_Old_MseY = mousey()
      endif
    endif  

  `HANDLE THE KEYBOARD NUMBER INPUTS
    if scancode() > 1 and scancode() < 12
      l_INPUTPAD_Keyboard_Input = scancode()
      if keystate(l_INPUTPAD_Keyboard_Input)= 1 and key_state(l_INPUTPAD_Keyboard_Input,0)= 0
        if scancode() = 11
          g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "0"
        else
          g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + str$(l_INPUTPAD_Keyboard_Input - 1)
        endif
        key_state(l_INPUTPAD_Keyboard_Input,0) = 1
      endif
    endif
    if scancode() = 0
      for check_lp = 2 to 11
        if keystate(check_lp) = 0 and key_state(check_lp, 0) = 1
          key_state(check_lp,0) = 0
        endif
      next check_lp
    endif
    
    `Dirty NUMPAD Code - Just do it this way to make it work and not mess with other code.
    if scancode() > 70 and scancode() < 83
      l_INPUTPAD_Keyboard_Input = scancode()
      if keystate(l_INPUTPAD_Keyboard_Input)= 1 and key_state(l_INPUTPAD_Keyboard_Input,0)= 0
        if l_INPUTPAD_Keyboard_Input = 79 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "1"
        if l_INPUTPAD_Keyboard_Input = 80 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "2"
        if l_INPUTPAD_Keyboard_Input = 81 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "3"

        if l_INPUTPAD_Keyboard_Input = 75 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "4"
        if l_INPUTPAD_Keyboard_Input = 76 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "5"
        if l_INPUTPAD_Keyboard_Input = 77 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "6"
        
        if l_INPUTPAD_Keyboard_Input = 71 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "7"
        if l_INPUTPAD_Keyboard_Input = 72 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "8"
        if l_INPUTPAD_Keyboard_Input = 73 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "9"
        
        if l_INPUTPAD_Keyboard_Input = 82 then g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "0"
        
        `Numpad Negative Number ([-] Button)
        if l_INPUTPAD_Keyboard_Input = 74
          if left$(g_INPUTPAD_BuildValue$, 1) <> "-"
          	g_INPUTPAD_BuildValue$ = "-" + g_INPUTPAD_BuildValue$
        	else
          	g_INPUTPAD_BuildValue$ = right$(g_INPUTPAD_BuildValue$, (len(g_INPUTPAD_BuildValue$) - 1))
          endif
        endif
        
        
        key_state(l_INPUTPAD_Keyboard_Input,0) = 1
      endif
    endif
    if scancode() = 0
    	for check_lp = 71 to 82
      	if keystate(check_lp) = 0 and key_state(check_lp, 0) = 1
        	key_state(check_lp,0) = 0
      	endif
    	next check_lp
    endif
    
  `HANDLE THE KEYBOARD ENTER KEY
    `[ENTER] - INPUTPAD Enter Button
    if lib_Enter_Pressed(12122) = 1
      if g_INPUTPAD_Enter_Button_Pressed = -1
        g_INPUTPAD_Enter_Button_Pressed = 1
        g_INPUTPAD_BuildValue_Final$ = g_INPUTPAD_BuildValue$
      endif
    endif
    
  `HANDLE THE KEYBOARD DELETE KEY - NOTE: REMOVED SO BACKSPACE WORKS ONLY IN THE ALARM LABEL TEXT SECTION NOT NUMBERS
    `[DELETE] - INPUTPAD Backspace Button
//     if KEYSTATE(14)= 1 and key_state(14,0)= 0
//       g_INPUTPAD_BuildValue$ = left$(g_INPUTPAD_BuildValue$, (len(g_INPUTPAD_BuildValue$)-1))
//       key_state(14,0)=1
//     endif
//     if KEYSTATE(14)=0 and key_state(14,0)=1 then key_state(14,0)=0
    
  `HANDLE THE DECIMAL PLACE KEY
    `[.] - INPUTPAD Decimal Place on keyboard
    if KEYSTATE(52)= 1 and key_state(52,0)= 0
      l_dec_fnd = -1
      `if len(g_INPUTPAD_BuildValue$) > 0
        for dec_lp = 1 to len(g_INPUTPAD_BuildValue$)
          if mid$(g_INPUTPAD_BuildValue$, dec_lp) = "."
            l_dec_fnd = 1
          endif  
        next dec_lp
      `endif
      if l_dec_fnd = -1
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "."
      endif  
      key_state(52,0)=1
    endif
    if KEYSTATE(52)=0 and key_state(52,0)=1 then key_state(52,0)=0
    
    	`NOW DO THE EXACT SAME FOR THE NUMPAD [.]
    	if KEYSTATE(83)= 1 and key_state(83,0)= 0
      	l_dec_fnd = -1
      	`if len(g_INPUTPAD_BuildValue$) > 0
        	for dec_lp = 1 to len(g_INPUTPAD_BuildValue$)
          	if mid$(g_INPUTPAD_BuildValue$, dec_lp) = "."
            	l_dec_fnd = 1
          	endif  
        	next dec_lp
      	`endif
      	if l_dec_fnd = -1
        	g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "."
      	endif  
      	key_state(83,0)=1
    	endif
    	if KEYSTATE(83)=0 and key_state(83,0)=1 then key_state(83,0)=0
    
    
    
  `HANDLE THE BUTTON INTERACTIONS
  if mouseclick() = 1 and mouse_click(1) = -1 and g_INPUTPAD_MouseClick = -1
    
    `Close Button
    if mousex() > g_INPUTPAD_SpritePos_x + 215 and mousex() < g_INPUTPAD_SpritePos_x + 232
      if mousey() > g_INPUTPAD_SpritePos_y + 5 and mousey() < g_INPUTPAD_SpritePos_y + 20
        mouse_click(1) = 1
        l_OUTPUT# = -9999
      endif
    endif
    `Number 0
    if mousex() > g_INPUTPAD_SpritePos_x + 14 and mousex() < g_INPUTPAD_SpritePos_x + 94
      if mousey() > g_INPUTPAD_SpritePos_y + 165 and mousey() < g_INPUTPAD_SpritePos_y + 193
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "0"
        g_INPUTPAD_Highlighted_Button = 0
        g_INPUTPAD_Selected_Button = 0
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 1
    if mousex() > g_INPUTPAD_SpritePos_x + 14 and mousex() < g_INPUTPAD_SpritePos_x + 51
      if mousey() > g_INPUTPAD_SpritePos_y + 131 and mousey() < g_INPUTPAD_SpritePos_y + 159
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "1"
        g_INPUTPAD_Highlighted_Button = 1
        g_INPUTPAD_Selected_Button = 1
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 2
    if mousex() > g_INPUTPAD_SpritePos_x + 57 and mousex() < g_INPUTPAD_SpritePos_x + 94
      if mousey() > g_INPUTPAD_SpritePos_y + 131 and mousey() < g_INPUTPAD_SpritePos_y + 159
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "2"
        g_INPUTPAD_Highlighted_Button = 2
        g_INPUTPAD_Selected_Button = 2
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 3
    if mousex() > g_INPUTPAD_SpritePos_x + 100 and mousex() < g_INPUTPAD_SpritePos_x + 137
      if mousey() > g_INPUTPAD_SpritePos_y + 131 and mousey() < g_INPUTPAD_SpritePos_y + 159
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "3"
        g_INPUTPAD_Highlighted_Button = 3
        g_INPUTPAD_Selected_Button = 3
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 4
    if mousex() > g_INPUTPAD_SpritePos_x + 14 and mousex() < g_INPUTPAD_SpritePos_x + 51
      if mousey() > g_INPUTPAD_SpritePos_y + 97 and mousey() < g_INPUTPAD_SpritePos_y + 125
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "4"
        g_INPUTPAD_Highlighted_Button = 4
        g_INPUTPAD_Selected_Button = 4
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 5
    if mousex() > g_INPUTPAD_SpritePos_x + 57 and mousex() < g_INPUTPAD_SpritePos_x + 94
      if mousey() > g_INPUTPAD_SpritePos_y + 97 and mousey() < g_INPUTPAD_SpritePos_y + 125
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "5"
        g_INPUTPAD_Highlighted_Button = 5
        g_INPUTPAD_Selected_Button = 5
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 6
    if mousex() > g_INPUTPAD_SpritePos_x + 100 and mousex() < g_INPUTPAD_SpritePos_x + 137
      if mousey() > g_INPUTPAD_SpritePos_y + 97 and mousey() < g_INPUTPAD_SpritePos_y + 125
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "6"
        g_INPUTPAD_Highlighted_Button = 6
        g_INPUTPAD_Selected_Button = 6
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 7
    if mousex() > g_INPUTPAD_SpritePos_x + 14 and mousex() < g_INPUTPAD_SpritePos_x + 51
      if mousey() > g_INPUTPAD_SpritePos_y + 64 and mousey() < g_INPUTPAD_SpritePos_y + 92
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "7"
        g_INPUTPAD_Highlighted_Button = 7
        g_INPUTPAD_Selected_Button = 7
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 8
    if mousex() > g_INPUTPAD_SpritePos_x + 57 and mousex() < g_INPUTPAD_SpritePos_x + 94
      if mousey() > g_INPUTPAD_SpritePos_y + 64 and mousey() < g_INPUTPAD_SpritePos_y + 92
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "8"
        g_INPUTPAD_Highlighted_Button = 8
        g_INPUTPAD_Selected_Button = 8
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 9
    if mousex() > g_INPUTPAD_SpritePos_x + 100 and mousex() < g_INPUTPAD_SpritePos_x + 137
      if mousey() > g_INPUTPAD_SpritePos_y + 64 and mousey() < g_INPUTPAD_SpritePos_y + 92
        g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "9"
        g_INPUTPAD_Highlighted_Button = 9
        g_INPUTPAD_Selected_Button = 9
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Decimal Place
    if mousex() > g_INPUTPAD_SpritePos_x + 100 and mousex() < g_INPUTPAD_SpritePos_x + 137
      if mousey() > g_INPUTPAD_SpritePos_y + 199 and mousey() < g_INPUTPAD_SpritePos_y + 227
        mouse_click(1) = 1
        `Check to make sure there is not already a decimal in the string
        `if len(g_INPUTPAD_BuildValue$) > 0
          l_decimal_found = -1
          for check_lp = 1 to len(g_INPUTPAD_BuildValue$)
            if mid$(g_INPUTPAD_BuildValue$, check_lp) = "."
              l_decimal_found = 1
            endif
          next check_lp
          if l_decimal_found = -1
            g_INPUTPAD_Highlighted_Button = 15
            g_INPUTPAD_Selected_Button_Mouseclick = 1
            g_INPUTPAD_Selected_Button = 15
            g_INPUTPAD_BuildValue$ = g_INPUTPAD_BuildValue$ + "."
          endif
        `endif
      endif
    endif
    `Negative Sign
    if mousex() > g_INPUTPAD_SpritePos_x + 100 and mousex() < g_INPUTPAD_SpritePos_x + 137
      if mousey() > g_INPUTPAD_SpritePos_y + 160 and mousey() < g_INPUTPAD_SpritePos_y + 193
        mouse_click(1) = 1
        if left$(g_INPUTPAD_BuildValue$, 1) <> "-"
          g_INPUTPAD_BuildValue$ = "-" + g_INPUTPAD_BuildValue$
        else
          g_INPUTPAD_BuildValue$ = right$(g_INPUTPAD_BuildValue$, (len(g_INPUTPAD_BuildValue$) - 1))
        endif
        g_INPUTPAD_Highlighted_Button = 10
        g_INPUTPAD_Selected_Button = 10
        g_INPUTPAD_Selected_Button_Mouseclick = 1
      endif
    endif
    `Back Button
    if mousex() > g_INPUTPAD_SpritePos_x + 143 and mousex() < g_INPUTPAD_SpritePos_x + 219
      if mousey() > g_INPUTPAD_SpritePos_y + 64 and mousey() < g_INPUTPAD_SpritePos_y + 92
        mouse_click(1) = 1
        if len(g_INPUTPAD_BuildValue$) > 0
          g_INPUTPAD_BuildValue$ = left$(g_INPUTPAD_BuildValue$, (len(g_INPUTPAD_BuildValue$)-1))
          g_INPUTPAD_Highlighted_Button = 11
          g_INPUTPAD_Selected_Button = 11
          g_INPUTPAD_Selected_Button_Mouseclick = 1
        endif
      endif
    endif
    `Clear Button
    if mousex() > g_INPUTPAD_SpritePos_x + 143 and mousex() < g_INPUTPAD_SpritePos_x + 219
      if mousey() > g_INPUTPAD_SpritePos_y + 97 and mousey() < g_INPUTPAD_SpritePos_y + 125
        g_INPUTPAD_BuildValue$ = ""
        g_INPUTPAD_Highlighted_Button = 12
        g_INPUTPAD_Selected_Button = 12
        g_INPUTPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Enter Button
    if mousex() > g_INPUTPAD_SpritePos_x + 143 and mousex() < g_INPUTPAD_SpritePos_x + 219
      if mousey() > g_INPUTPAD_SpritePos_y + 131 and mousey() < g_INPUTPAD_SpritePos_y + 159
        if g_INPUTPAD_Enter_Button_Pressed = -1
          g_INPUTPAD_Enter_Button_Pressed = 1
          g_INPUTPAD_Enter_Button_Timer = hitimer() + 250
          g_INPUTPAD_BuildValue_Final$ = g_INPUTPAD_BuildValue$
          g_INPUTPAD_Selected_Button_Mouseclick = 1
          g_INPUTPAD_Highlighted_Button = 13
          g_INPUTPAD_Selected_Button = 13
          mouse_click(1) = 1
        endif
      endif
    endif
    `Cancel Button
    if mousex() > g_INPUTPAD_SpritePos_x + 143 and mousex() < g_INPUTPAD_SpritePos_x + 219
      if mousey() > g_INPUTPAD_SpritePos_y + 165 and mousey() < g_INPUTPAD_SpritePos_y + 193
        if g_INPUTPAD_Cancel_Button_Pressed = -1
          g_INPUTPAD_Cancel_Button_Pressed = 1
          g_INPUTPAD_Cancel_Button_Timer = hitimer() + 250
          g_INPUTPAD_Selected_Button_Mouseclick = 1
          g_INPUTPAD_Highlighted_Button = 14
          g_INPUTPAD_Selected_Button = 14
          mouse_click(1) = 1
        endif
      endif
    endif
    
  endif

  `Handle Cancel Button Pressed
  if g_INPUTPAD_Cancel_Button_Pressed = 1 and hitimer() > g_INPUTPAD_Cancel_Button_Timer
    g_INPUTPAD_Cancel_Button_Pressed = -1
    l_OUTPUT# = -9999
  endif
  
  `Handle Enter Button Pressed
  if g_INPUTPAD_Enter_Button_Pressed = 1 and hitimer() > g_INPUTPAD_Enter_Button_Timer
    g_INPUTPAD_Enter_Button_Pressed = -1
    l_OUTPUT# = val(g_INPUTPAD_BuildValue_Final$)
    
    `Assign ALARM LABEL to correct alarm type
      if g_DS_DepthAlarm_Btn_Toggle = 1 : `DEPTH ALARM
        g_ALARM_DS_DepthAlarm_Label$ = g_ALARM_ENG_INPUTPAD_LabelText$
      endif
    
  endif
  
  `Print the g_INPUTPAD_BuildValue$
    d3d_starttext
      d3d_text 11, g_INPUTPAD_SpritePos_x + 80, g_INPUTPAD_SpritePos_y + 5, 0, r_Title$, g_ENGINE_COLOUR_White
      d3d_text 1, g_INPUTPAD_SpritePos_x + 19, g_INPUTPAD_SpritePos_y + 37, 0, g_INPUTPAD_BuildValue$, g_ENGINE_COLOUR_Black
    d3d_endtext
    
  `------------ ADDITION TO THIS FUNCTION > ALARM LABEL TEXT INPUT
  
  
//   
//   `INPUT Alarm Label on INPUT BOX Variables
//     global g_ALARMSYS_FlashInput_Timer as integer : g_ALARMSYS_FlashInput_Timer = timer()
//     global g_ALARMSYS_FlashInput_Toggle as integer : g_ALARMSYS_FlashInput_Toggle = -1
//     
//     global g_ALARMSYS_ShiftKey_State as integer : g_ALARMSYS_ShiftKey_State = -1
//     global g_ALARMSYS_StrEditCharPos as integer : g_ALARMSYS_StrEditCharPos = 0
//     global g_ALARMSYS_StrEditChar_CursorKeyState as integer : g_ALARMSYS_StrEditChar_CursorKeyState = -1
  
  
 
  `Get g_ALARM_DS_DepthAlarm_Label$
    lib_INPUT_GetString_Alarm_Label()
    
  `Flash Input Character Toggle
  	if timer() > g_ALARMSYS_FlashInput_Timer + 750
    	g_ALARMSYS_FlashInput_Timer = timer()
    	if g_ALARMSYS_FlashInput_Toggle = -1
      	g_ALARMSYS_FlashInput_Toggle = 1
    	else
      	g_ALARMSYS_FlashInput_Toggle = -1
    	endif
  	endif
    
  `Calculate Flash Cursor Position X Offset
   	if len(g_ALARM_ENG_INPUTPAD_LabelText$) < 30
			`
			`HANDLE SPACES IN STRING - Pixel Width of spaces in the edited $ for the Flash Cursor
			`Spaces are not included in d3d_gettextwidth, add them ourselves.
				l_space_counter = 0
				for count_spaces_lp = 1 to len(g_ALARM_ENG_INPUTPAD_LabelText$) - g_ALARMSYS_StrEditCharPos
			  	if mid$(g_ALARM_ENG_INPUTPAD_LabelText$, count_spaces_lp) = " "
			    	inc l_space_counter, 1
			  	else
			    	l_space_counter = 0
			  	endif
				next count_spaces_lp
				l_space_pixel_FlashCursor = 0
				if l_space_counter > 0
			  	l_space_pixel_FlashCursor = l_space_counter * 4
				endif
			`
			l_FlashCursor_BuildStr$ = ""
			for calc_lp = 1 to len(g_ALARM_ENG_INPUTPAD_LabelText$) - g_ALARMSYS_StrEditCharPos
			  l_FlashCursor_BuildStr$ = l_FlashCursor_BuildStr$ + mid$(g_ALARM_ENG_INPUTPAD_LabelText$, calc_lp)
  			l_FlashCursor_OffsetX = d3d_gettextwidth(1, l_FlashCursor_BuildStr$)
  		next calc_lp
  		`
  		AlarmLabelSystem_FlashCursor(0).FlashToggle = g_ALARMSYS_FlashInput_Toggle
  		`
  		AlarmLabelSystem_FlashCursor(0).XPos_NoOffset = g_INPUTPAD_SpritePos_x + 19
  		AlarmLabelSystem_FlashCursor(0).Calc_XOffset = l_FlashCursor_OffsetX
  		AlarmLabelSystem_FlashCursor(0).Calc_SpaceChars_XOffset = l_space_pixel_FlashCursor
  		`
  		AlarmLabelSystem_FlashCursor(0).YPos_NoOffset = g_INPUTPAD_SpritePos_y + 257
  		`
  	endif
    

    
  `Handle LEFT/RIGHT CURSOR Keys for moving left/right within the g_ALARM_ENG_INPUTPAD_LabelText$ build string
    `Left
      if scancode() = 203 and g_ALARMSYS_StrEditChar_CursorKeyState = -1
        g_ALARMSYS_StrEditChar_CursorKeyState = 1
        if g_ALARMSYS_StrEditCharPos < len(g_ALARM_ENG_INPUTPAD_LabelText$) - 2
          inc g_ALARMSYS_StrEditCharPos, 1
        endif
        g_ALARMSYS_FlashInput_Toggle = 1
        g_ALARMSYS_FlashInput_Timer = timer()
        `Protection
          if g_ALARMSYS_StrEditCharPos > len(g_ALARM_ENG_INPUTPAD_LabelText$) - 2 then g_ALARMSYS_StrEditCharPos = len(g_ALARM_ENG_INPUTPAD_LabelText$) - 2
      endif
    `Right
      if scancode() = 205 and g_ALARMSYS_StrEditChar_CursorKeyState = -1
        g_ALARMSYS_StrEditChar_CursorKeyState = 1
        if g_ALARMSYS_StrEditCharPos > 0
          dec g_ALARMSYS_StrEditCharPos, 1
        endif
        g_ALARMSYS_FlashInput_Toggle = 1
        g_ALARMSYS_FlashInput_Timer = timer()
        `Protection
          if g_ALARMSYS_StrEditCharPos < 0 then g_ALARMSYS_StrEditCharPos = 0
      endif
      if scancode() = 0 and g_ALARMSYS_StrEditChar_CursorKeyState = 1 then g_ALARMSYS_StrEditChar_CursorKeyState = -1


  `Display Alarm Label Input Flash Toggle
  	if AlarmLabelSystem_FlashCursor(0).FlashToggle = 1
  		`
  		l_FlashCursor_XPos = AlarmLabelSystem_FlashCursor(0).XPos_NoOffset 
  		l_FlashCursor_XOffset = AlarmLabelSystem_FlashCursor(0).Calc_XOffset
  		l_SpacesChar_XOffset = AlarmLabelSystem_FlashCursor(0).Calc_SpaceChars_XOffset
  		`
  		l_FlashCursor_YPos = AlarmLabelSystem_FlashCursor(0).YPos_NoOffset
  		`
  		d3d_starttext
  		  d3d_text 1, l_FlashCursor_XPos + l_FlashCursor_XOffset + 0 + l_SpacesChar_XOffset, l_FlashCursor_YPos, 0, "|", g_ENGINE_COLOUR_Black
  		  `d3d_text 1, l_FlashCursor_XPos + l_FlashCursor_XOffset + 20 + l_SpacesChar_XOffset, l_FlashCursor_YPos, 0, "|", g_ENGINE_COLOUR_Black
  		d3d_endtext
  		`
  	endif
    
  `Print the g_ALARM_DS_DepthAlarm_Label$
    d3d_starttext
      d3d_text 1, g_INPUTPAD_SpritePos_x + 19, g_INPUTPAD_SpritePos_y + 257, 0, g_ALARM_ENG_INPUTPAD_LabelText$, g_ENGINE_COLOUR_Black
    d3d_endtext
    


endfunction l_OUTPUT#

function DS_NUMPAD_ENGINE()
  
 NUMPAD_DISPLAY_Numpad()
  
endfunction

function HS_NUMPAD_ENGINE()
  
  NUMPAD_DISPLAY_Numpad()
  
endfunction

function PITS_NUMPAD_ENGINE()

  NUMPAD_DISPLAY_Numpad()

endfunction

function NUMPAD_DISPLAY_Numpad()

  `THIS IS THE NUMPAD THAT IS USED TO CHANGE THE RANGES FOR THE PLOTTED/LINE CHANNELS ON THE
  `DS, HS OR PITS SCREENS

  local l_decimal_found as integer
  local l_NumPad_Chnl_UserInfo$ as string
  local l_BuildStr_InputFlash$ as string
  
  local l_NUMPAD_Keyboard_Input as integer
  local l_User_Info_HS_Array_Indictor as integer

  `PASTE THE MAIN NUMPAD IMAGE ONTO THE SCREEN
  paste sprite c_NUMPAD_SPRITE_BaseSpriteNum, g_NUMPAD_SpritePos_x, g_NUMPAD_SpritePos_y
  
  `HANDLE SHOWING THE HIGHLIGHTED AND SELECTED BUTTON IMAGES
  `Highlighted Buttons
  if g_NUMPAD_Highlighted_Button = 0 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_NUMPAD_SpritePos_x + 16, g_NUMPAD_SpritePos_y + 165
  if g_NUMPAD_Highlighted_Button = 1 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_NUMPAD_SpritePos_x + 14, g_NUMPAD_SpritePos_y + 131
  if g_NUMPAD_Highlighted_Button = 2 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_NUMPAD_SpritePos_x + 57, g_NUMPAD_SpritePos_y + 131
  if g_NUMPAD_Highlighted_Button = 3 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_NUMPAD_SpritePos_x + 100, g_NUMPAD_SpritePos_y + 131
  if g_NUMPAD_Highlighted_Button = 4 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_NUMPAD_SpritePos_x + 14, g_NUMPAD_SpritePos_y + 97
  if g_NUMPAD_Highlighted_Button = 5 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_NUMPAD_SpritePos_x + 57, g_NUMPAD_SpritePos_y + 97
  if g_NUMPAD_Highlighted_Button = 6 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_NUMPAD_SpritePos_x + 100, g_NUMPAD_SpritePos_y + 97
  if g_NUMPAD_Highlighted_Button = 7 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_NUMPAD_SpritePos_x + 14, g_NUMPAD_SpritePos_y + 64
  if g_NUMPAD_Highlighted_Button = 8 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_NUMPAD_SpritePos_x + 57, g_NUMPAD_SpritePos_y + 64
  if g_NUMPAD_Highlighted_Button = 9 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_NUMPAD_SpritePos_x + 100, g_NUMPAD_SpritePos_y + 64
  if g_NUMPAD_Highlighted_Button = 10 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_NUMPAD_SpritePos_x + 100, g_NUMPAD_SpritePos_y + 165 : `Minus
  if g_NUMPAD_Highlighted_Button = 11 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_NUMPAD_SpritePos_x + 143, g_NUMPAD_SpritePos_y + 64 : `Back
  if g_NUMPAD_Highlighted_Button = 12 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_NUMPAD_SpritePos_x + 143, g_NUMPAD_SpritePos_y + 97 : `Clear
  if g_NUMPAD_Highlighted_Button = 13 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_NUMPAD_SpritePos_x + 143, g_NUMPAD_SpritePos_y + 131 : `Enter
  if g_NUMPAD_Highlighted_Button = 14 then paste sprite c_NUMPAD_SPRITE_LargeButton_Highlighted, g_NUMPAD_SpritePos_x + 143, g_NUMPAD_SpritePos_y + 165 : `Cancel
  if g_NUMPAD_Highlighted_Button = 15 then paste sprite c_NUMPAD_SPRITE_SmallButton_Highlighted, g_NUMPAD_SpritePos_x + 100, g_NUMPAD_SpritePos_y + 199 : `Decimal place
  
  `Selected Buttons
  if g_NUMPAD_Selected_Button <> - 1 and g_NUMPAD_Selected_Button_Mouseclick = 1
    if g_NUMPAD_Selected_Button = 0 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_NUMPAD_SpritePos_x + 16, g_NUMPAD_SpritePos_y + 165
    if g_NUMPAD_Selected_Button = 1 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_NUMPAD_SpritePos_x + 14, g_NUMPAD_SpritePos_y + 131
    if g_NUMPAD_Selected_Button = 2 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_NUMPAD_SpritePos_x + 57, g_NUMPAD_SpritePos_y + 131
    if g_NUMPAD_Selected_Button = 3 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_NUMPAD_SpritePos_x + 100, g_NUMPAD_SpritePos_y + 131
    if g_NUMPAD_Selected_Button = 4 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_NUMPAD_SpritePos_x + 14, g_NUMPAD_SpritePos_y + 97
    if g_NUMPAD_Selected_Button = 5 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_NUMPAD_SpritePos_x + 57, g_NUMPAD_SpritePos_y + 97
    if g_NUMPAD_Selected_Button = 6 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_NUMPAD_SpritePos_x + 100, g_NUMPAD_SpritePos_y + 97
    if g_NUMPAD_Selected_Button = 7 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_NUMPAD_SpritePos_x + 14, g_NUMPAD_SpritePos_y + 64
    if g_NUMPAD_Selected_Button = 8 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_NUMPAD_SpritePos_x + 57, g_NUMPAD_SpritePos_y + 64
    if g_NUMPAD_Selected_Button = 9 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_NUMPAD_SpritePos_x + 100, g_NUMPAD_SpritePos_y + 64
    if g_NUMPAD_Selected_Button = 10 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_NUMPAD_SpritePos_x + 100, g_NUMPAD_SpritePos_y + 165 : `Minus
    if g_NUMPAD_Selected_Button = 11 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_NUMPAD_SpritePos_x + 143, g_NUMPAD_SpritePos_y + 64 : `Back
    if g_NUMPAD_Selected_Button = 12 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_NUMPAD_SpritePos_x + 143, g_NUMPAD_SpritePos_y + 97 : `Clear
    if g_NUMPAD_Selected_Button = 13 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_NUMPAD_SpritePos_x + 143, g_NUMPAD_SpritePos_y + 131 : `Enter
    if g_NUMPAD_Selected_Button = 14 then paste sprite c_NUMPAD_SPRITE_LargeButton_Selected, g_NUMPAD_SpritePos_x + 143, g_NUMPAD_SpritePos_y + 165 : `Cancel
    if g_NUMPAD_Selected_Button = 15 then paste sprite c_NUMPAD_SPRITE_SmallButton_Selected, g_NUMPAD_SpritePos_x + 100, g_NUMPAD_SpritePos_y + 199 : `Decimal place
  endif
  
 
  
  `HANDLE DRAGGING THE RANGE INPUT BOX AROUND THE SCREEN
  if mouseclick() = 1
    if g_NUMPAD_MOVE_MouseClickHOLD = -1 and mouse_click(1) = -1
      if mousex() > g_NUMPAD_SpritePos_x + 0 and mousex() < g_NUMPAD_SpritePos_x + 235
        if mousey() > g_NUMPAD_SpritePos_y + 0 and mousey() < g_NUMPAD_SpritePos_y + 21
          g_NUMPAD_MOVE_MouseClickHOLD = 1
          g_NUMPAD_MOVE_Old_MseX = mousex()
          g_NUMPAD_MOVE_Old_MseY = mousey()
        endif
      endif    
    endif
    if g_NUMPAD_MOVE_MouseClickHOLD = 1
      g_NUMPAD_SpritePos_x = g_NUMPAD_SpritePos_x + (mousex() - g_NUMPAD_MOVE_Old_MseX)
      g_NUMPAD_SpritePos_y = g_NUMPAD_SpritePos_y + (mousey() - g_NUMPAD_MOVE_Old_MseY)
      g_NUMPAD_MOVE_Old_MseX = mousex()
      g_NUMPAD_MOVE_Old_MseY = mousey()
    endif
  endif    
  
  `HANDLE THE KEYBOARD NUMBER INPUTS
  if scancode() > 1 and scancode() < 12
    l_NUMPAD_Keyboard_Input = scancode()
    if keystate(l_NUMPAD_Keyboard_Input)= 1 and key_state(l_NUMPAD_Keyboard_Input,0)= 0
      if scancode() = 11
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "0"
      else
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + str$(l_NUMPAD_Keyboard_Input - 1)
      endif
      key_state(l_NUMPAD_Keyboard_Input,0) = 1
    endif
  endif
  if scancode() = 0
    for check_lp = 2 to 11
      if keystate(check_lp) = 0 and key_state(check_lp, 0) = 1
        key_state(check_lp,0) = 0
      endif
    next check_lp
  endif
    `Dirty NUMPAD Code - Just do it this way to make it work and not mess with other code.
    if scancode() > 70 and scancode() < 83
      l_NUMPAD_Keyboard_Input = scancode()
      if keystate(l_NUMPAD_Keyboard_Input)= 1 and key_state(l_NUMPAD_Keyboard_Input,0)= 0
        if l_NUMPAD_Keyboard_Input = 79 then g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "1"
        if l_NUMPAD_Keyboard_Input = 80 then g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "2"
        if l_NUMPAD_Keyboard_Input = 81 then g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "3"

        if l_NUMPAD_Keyboard_Input = 75 then g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "4"
        if l_NUMPAD_Keyboard_Input = 76 then g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "5"
        if l_NUMPAD_Keyboard_Input = 77 then g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "6"
        
        if l_NUMPAD_Keyboard_Input = 71 then g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "7"
        if l_NUMPAD_Keyboard_Input = 72 then g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "8"
        if l_NUMPAD_Keyboard_Input = 73 then g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "9"
        
        if l_NUMPAD_Keyboard_Input = 82 then g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "0"
        
        key_state(l_NUMPAD_Keyboard_Input,0) = 1
      endif
    endif
    if scancode() = 0
    	for check_lp = 71 to 82
      	if keystate(check_lp) = 0 and key_state(check_lp, 0) = 1
        	key_state(check_lp,0) = 0
      	endif
    	next check_lp
    endif
  
  `HANDLE THE KEYBOARD ENTER KEY
    `[ENTER] - Numpad Enter Button
    if lib_Enter_Pressed(12122) = 1
      if g_NUMPAD_Enter_Button_Pressed = -1
        g_NUMPAD_Enter_Button_Pressed = 1
        g_NUMPAD_BuildValue_Final$ = g_NUMPAD_BuildValue$
      endif
    endif
    
  `HANDLE THE KEYBOARD DELETE KEY
  
  `[DELETE] - Numpad Enter Button
    if KEYSTATE(1)= 1 and key_state(1,0)= 0
 
      g_NUMPAD_Cancel_Button_Pressed = 1
      g_NUMPAD_Selected_Button_Mouseclick = 1
      g_NUMPAD_Highlighted_Button = 14
      g_NUMPAD_Selected_Button = 14

      key_state(1,0)=1
    endif
    if KEYSTATE(1)=0 and key_state(1,0)=1 then key_state(1,0)=0  
  
  `[DELETE] - Numpad Enter Button
    if KEYSTATE(14)= 1 and key_state(14,0)= 0
      g_NUMPAD_BuildValue$ = left$(g_NUMPAD_BuildValue$, (len(g_NUMPAD_BuildValue$)-1))
      key_state(14,0)=1
    endif
    if KEYSTATE(14)=0 and key_state(14,0)=1 then key_state(14,0)=0
    
  `HANDLE THE DECIMAL PLACE KEY
    `[.] - Numpad Decimal Place on keyboard
    if KEYSTATE(52)= 1 and key_state(52,0)= 0
      l_dec_fnd = -1
      `if len(g_NUMPAD_BuildValue$) > 0
        for dec_lp = 1 to len(g_NUMPAD_BuildValue$)
          if mid$(g_NUMPAD_BuildValue$, dec_lp) = "."
            l_dec_fnd = 1
          endif  
        next dec_lp
      `endif
      if l_dec_fnd = -1
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "."
      endif  
      key_state(52,0)=1
    endif
    if KEYSTATE(52)=0 and key_state(52,0)=1 then key_state(52,0)=0
  		`HANDLE THE DECIMAL PLACE KEY - ON THE KEYBOARD NUM PAD
    		`[.] - Numpad Decimal Place on keyboard numpad
    		if KEYSTATE(83)= 1 and key_state(83,0)= 0
      		l_dec_fnd = -1
      		`if len(g_NUMPAD_BuildValue$) > 0
        		for dec_lp = 1 to len(g_NUMPAD_BuildValue$)
          		if mid$(g_NUMPAD_BuildValue$, dec_lp) = "."
            		l_dec_fnd = 1
          		endif  
        		next dec_lp
      		`endif
      		if l_dec_fnd = -1
        		g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "."
      		endif  
      		key_state(83,0)=1
    		endif
    		if KEYSTATE(83)=0 and key_state(83,0)=1 then key_state(83,0)=0
 
  `HANDLE THE BUTTON INTERACTIONS
  if mouseclick() = 1 and mouse_click(1) = -1
    
    `Close Button
    if mousex() > g_NUMPAD_SpritePos_x + 215 and mousex() < g_NUMPAD_SpritePos_x + 232
      if mousey() > g_NUMPAD_SpritePos_y + 5 and mousey() < g_NUMPAD_SpritePos_y + 20
        mouse_click(1) = 1
        
        lib_ALL_NUMPADS_Close_NUMPAD()
        
      endif
    endif
    
    `Number 0
    if mousex() > g_NUMPAD_SpritePos_x + 14 and mousex() < g_NUMPAD_SpritePos_x + 94
      if mousey() > g_NUMPAD_SpritePos_y + 165 and mousey() < g_NUMPAD_SpritePos_y + 193
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "0"
        g_NUMPAD_Highlighted_Button = 0
        g_NUMPAD_Selected_Button = 0
        g_NUMPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 1
    if mousex() > g_NUMPAD_SpritePos_x + 14 and mousex() < g_NUMPAD_SpritePos_x + 51
      if mousey() > g_NUMPAD_SpritePos_y + 131 and mousey() < g_NUMPAD_SpritePos_y + 159
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "1"
        g_NUMPAD_Highlighted_Button = 1
        g_NUMPAD_Selected_Button = 1
        g_NUMPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 2
    if mousex() > g_NUMPAD_SpritePos_x + 57 and mousex() < g_NUMPAD_SpritePos_x + 94
      if mousey() > g_NUMPAD_SpritePos_y + 131 and mousey() < g_NUMPAD_SpritePos_y + 159
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "2"
        g_NUMPAD_Highlighted_Button = 2
        g_NUMPAD_Selected_Button = 2
        g_NUMPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 3
    if mousex() > g_NUMPAD_SpritePos_x + 100 and mousex() < g_NUMPAD_SpritePos_x + 137
      if mousey() > g_NUMPAD_SpritePos_y + 131 and mousey() < g_NUMPAD_SpritePos_y + 159
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "3"
        g_NUMPAD_Highlighted_Button = 3
        g_NUMPAD_Selected_Button = 3
        g_NUMPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 4
    if mousex() > g_NUMPAD_SpritePos_x + 14 and mousex() < g_NUMPAD_SpritePos_x + 51
      if mousey() > g_NUMPAD_SpritePos_y + 97 and mousey() < g_NUMPAD_SpritePos_y + 125
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "4"
        g_NUMPAD_Highlighted_Button = 4
        g_NUMPAD_Selected_Button = 4
        g_NUMPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 5
    if mousex() > g_NUMPAD_SpritePos_x + 57 and mousex() < g_NUMPAD_SpritePos_x + 94
      if mousey() > g_NUMPAD_SpritePos_y + 97 and mousey() < g_NUMPAD_SpritePos_y + 125
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "5"
        g_NUMPAD_Highlighted_Button = 5
        g_NUMPAD_Selected_Button = 5
        g_NUMPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 6
    if mousex() > g_NUMPAD_SpritePos_x + 100 and mousex() < g_NUMPAD_SpritePos_x + 137
      if mousey() > g_NUMPAD_SpritePos_y + 97 and mousey() < g_NUMPAD_SpritePos_y + 125
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "6"
        g_NUMPAD_Highlighted_Button = 6
        g_NUMPAD_Selected_Button = 6
        g_NUMPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 7
    if mousex() > g_NUMPAD_SpritePos_x + 14 and mousex() < g_NUMPAD_SpritePos_x + 51
      if mousey() > g_NUMPAD_SpritePos_y + 64 and mousey() < g_NUMPAD_SpritePos_y + 92
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "7"
        g_NUMPAD_Highlighted_Button = 7
        g_NUMPAD_Selected_Button = 7
        g_NUMPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 8
    if mousex() > g_NUMPAD_SpritePos_x + 57 and mousex() < g_NUMPAD_SpritePos_x + 94
      if mousey() > g_NUMPAD_SpritePos_y + 64 and mousey() < g_NUMPAD_SpritePos_y + 92
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "8"
        g_NUMPAD_Highlighted_Button = 8
        g_NUMPAD_Selected_Button = 8
        g_NUMPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Number 9
    if mousex() > g_NUMPAD_SpritePos_x + 100 and mousex() < g_NUMPAD_SpritePos_x + 137
      if mousey() > g_NUMPAD_SpritePos_y + 64 and mousey() < g_NUMPAD_SpritePos_y + 92
        g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "9"
        g_NUMPAD_Highlighted_Button = 9
        g_NUMPAD_Selected_Button = 9
        g_NUMPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Decimal Place
    if mousex() > g_NUMPAD_SpritePos_x + 100 and mousex() < g_NUMPAD_SpritePos_x + 137
      if mousey() > g_NUMPAD_SpritePos_y + 199 and mousey() < g_NUMPAD_SpritePos_y + 227
        mouse_click(1) = 1
        `Check to make sure there is not already a decimal in the string
        `if len(g_NUMPAD_BuildValue$) > 0
          l_decimal_found = -1
          for check_lp = 1 to len(g_NUMPAD_BuildValue$)
            if mid$(g_NUMPAD_BuildValue$, check_lp) = "."
              l_decimal_found = 1
            endif
          next check_lp
          if l_decimal_found = -1
            g_NUMPAD_Highlighted_Button = 15
            g_NUMPAD_Selected_Button_Mouseclick = 1
            g_NUMPAD_Selected_Button = 15
            g_NUMPAD_BuildValue$ = g_NUMPAD_BuildValue$ + "."
          endif
        `endif
      endif
    endif
    `Negative Sign
    if mousex() > g_NUMPAD_SpritePos_x + 100 and mousex() < g_NUMPAD_SpritePos_x + 137
      if mousey() > g_NUMPAD_SpritePos_y + 160 and mousey() < g_NUMPAD_SpritePos_y + 193
        mouse_click(1) = 1
        if left$(g_NUMPAD_BuildValue$, 1) <> "-"
          g_NUMPAD_BuildValue$ = "-" + g_NUMPAD_BuildValue$
        else
          g_NUMPAD_BuildValue$ = right$(g_NUMPAD_BuildValue$, (len(g_NUMPAD_BuildValue$) - 1))
        endif
        g_NUMPAD_Highlighted_Button = 10
        g_NUMPAD_Selected_Button = 10
        g_NUMPAD_Selected_Button_Mouseclick = 1
      endif
    endif
    `Back Button
    if mousex() > g_NUMPAD_SpritePos_x + 143 and mousex() < g_NUMPAD_SpritePos_x + 219
      if mousey() > g_NUMPAD_SpritePos_y + 64 and mousey() < g_NUMPAD_SpritePos_y + 92
        mouse_click(1) = 1
        if len(g_NUMPAD_BuildValue$) > 0
          g_NUMPAD_BuildValue$ = left$(g_NUMPAD_BuildValue$, (len(g_NUMPAD_BuildValue$)-1))
          g_NUMPAD_Highlighted_Button = 11
          g_NUMPAD_Selected_Button = 11
          g_NUMPAD_Selected_Button_Mouseclick = 1
        endif
      endif
    endif
    `Clear Button
    if mousex() > g_NUMPAD_SpritePos_x + 143 and mousex() < g_NUMPAD_SpritePos_x + 219
      if mousey() > g_NUMPAD_SpritePos_y + 97 and mousey() < g_NUMPAD_SpritePos_y + 125
        g_NUMPAD_BuildValue$ = ""
        g_NUMPAD_Highlighted_Button = 12
        g_NUMPAD_Selected_Button = 12
        g_NUMPAD_Selected_Button_Mouseclick = 1
        mouse_click(1) = 1
      endif
    endif
    `Enter Button
    if mousex() > g_NUMPAD_SpritePos_x + 143 and mousex() < g_NUMPAD_SpritePos_x + 219
      if mousey() > g_NUMPAD_SpritePos_y + 131 and mousey() < g_NUMPAD_SpritePos_y + 159
        if g_NUMPAD_Enter_Button_Pressed = -1
          g_NUMPAD_Enter_Button_Pressed = 1
          g_NUMPAD_BuildValue_Final$ = g_NUMPAD_BuildValue$
          g_NUMPAD_Selected_Button_Mouseclick = 1
          g_NUMPAD_Highlighted_Button = 13
          g_NUMPAD_Selected_Button = 13
          mouse_click(1) = 1
        endif
      endif
    endif
    `Cancel Button
    if mousex() > g_NUMPAD_SpritePos_x + 143 and mousex() < g_NUMPAD_SpritePos_x + 219
      if mousey() > g_NUMPAD_SpritePos_y + 165 and mousey() < g_NUMPAD_SpritePos_y + 193
        if g_NUMPAD_Cancel_Button_Pressed = -1
          g_NUMPAD_Cancel_Button_Pressed = 1
          g_NUMPAD_Selected_Button_Mouseclick = 1
          g_NUMPAD_Highlighted_Button = 14
          g_NUMPAD_Selected_Button = 14
          mouse_click(1) = 1
        endif
      endif
    endif
    
  endif
  
  `Handle Enter Button Pressed
  if g_NUMPAD_Enter_Button_Pressed = 1 and mouseclick() = 0
  
    if g_ENGINE_HIST_DRILL_Screen_Routing = 1 : `Numpad in use on Drilling Screen
      g_NUMPAD_Enter_Button_Pressed = -1
      DS_lib_NUMPAD_Set_Range_Value(g_NUMPAD_BuildValue_Final$, g_NUMPAD_High_Low_Choice_Selection)
      g_NUMPAD_High_Low_Choice_Selection = -1
      g_RANGES_Chart_Selected_Num = -1
      g_INFOBOX_INPUT_LMB_State = 1
      ENGINE_DS_CHART_IMAGE_Creation()
      SAVE_CHANNEL_ID_Ranges()
    endif
    
    if g_ENGINE_HIST_DRILL_Screen_Routing = 2 : `Numpad in use on Historical Screen
      g_HS_NUMPAD_Toggle = -1
      g_INFOBOX_INPUT_LMB_State = 1
      HS_lib_NUMPAD_Set_Range_Value(g_NUMPAD_BuildValue_Final$)
      g_NUMPAD_Enter_Button_Pressed = -1
      if g_ENGINE_CoreFunctionType = 1
        CF1_HS_PLOT_CHART_CF1_Create_Image()
      endif
      if g_ENGINE_CoreFunctionType = 2
        CF2_HS_PLOT_CHART_CF2_Create_Image()
      endif
      SAVE_CHANNEL_ID_Ranges()
    endif
    
    if g_ENGINE_HIST_DRILL_Screen_Routing = 3 : `Numpad in use on Pits Screen
      if g_ENGINE_CoreFunctionType = 2
        l_IndexPos = g_PITS_NUMPAD_Selected_ChannelID
        if CHANNEL_ID_ChannelLinkIndex(l_IndexPos) > -1
          if g_PITS_NUMPAD_Selected_LowerUpperChnl = 1
            CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(l_IndexPos) * 2) - 1) = val(g_NUMPAD_BuildValue_Final$)
          endif
          
          if g_PITS_NUMPAD_Selected_LowerUpperChnl = 2
            CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(l_IndexPos) * 2)) = val(g_NUMPAD_BuildValue_Final$)
          endif
        endif
      endif
      `
      ENGINE_PITS_CHART_IMAGE_Creation()
      SAVE_CHANNEL_ID_Ranges()
      `
      g_PITS_NUMPAD_Selected_ChannelID = -1
      g_PITS_NUMPAD_Selected_LowerUpperChnl = -1
      g_PITS_NUMPAD_DISPLAY_NUMPAD = -1
      g_NUMPAD_Enter_Button_Pressed = -1
      g_NUMPAD_High_Low_Choice_Selection = -1
      g_RANGES_Chart_Selected_Num = -1
      g_INFOBOX_INPUT_LMB_State = 1
      g_NUMPAD_BuildValue_Final$ = ""
      g_NUMPAD_BuildValue$ = ""
      g_PITS_ChartData_MouseState = 1
    endif
    
  endif 
  
  `Handle Cancel Button Pressed
  if g_NUMPAD_Cancel_Button_Pressed = 1
    g_NUMPAD_Cancel_Button_Pressed = -1
    if g_ENGINE_HIST_DRILL_Screen_Routing = 1 : `Numpad in use on Drilling Screen
      g_NUMPAD_High_Low_Choice_Selection = -1
      g_RANGES_Chart_Selected_Num = -1
      g_INFOBOX_INPUT_LMB_State = 1
    endif
    if g_ENGINE_HIST_DRILL_Screen_Routing = 2 : `Numpad in use on Historical Screen
      g_HS_NUMPAD_Toggle = -1
      g_INFOBOX_INPUT_LMB_State = 1
    endif
    if g_ENGINE_HIST_DRILL_Screen_Routing = 3 : `Numpad in use on Pits Screen
      g_PITS_NUMPAD_Selected_ChannelID = -1
      g_PITS_NUMPAD_Selected_LowerUpperChnl = -1
      g_PITS_NUMPAD_DISPLAY_NUMPAD = -1
      g_NUMPAD_High_Low_Choice_Selection = -1
      g_RANGES_Chart_Selected_Num = -1
      g_INFOBOX_INPUT_LMB_State = 1
      g_NUMPAD_BuildValue_Final$ = ""
      g_NUMPAD_BuildValue$ = ""
      g_PITS_ChartData_MouseState = 1
    endif
  endif
  

  
  
  `Build the DS Numpad string to inform the user what they are editing
  if g_ENGINE_HIST_DRILL_Screen_Routing = 1

    if g_RANGES_Chart_Selected_Num = 1 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(1))
    if g_RANGES_Chart_Selected_Num = 2 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(2))
    if g_RANGES_Chart_Selected_Num = 3 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(3))
    if g_RANGES_Chart_Selected_Num = 4 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(4))
    if g_RANGES_Chart_Selected_Num = 5 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(5))
    if g_RANGES_Chart_Selected_Num = 6 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(6))
    if g_RANGES_Chart_Selected_Num = 7 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(7))
    if g_RANGES_Chart_Selected_Num = 8 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(8))
    if g_RANGES_Chart_Selected_Num = 9 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(9))
    if g_RANGES_Chart_Selected_Num = 10 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(10))
    if g_RANGES_Chart_Selected_Num = 11 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(11))
    if g_RANGES_Chart_Selected_Num = 12 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(12))
       
       
       
    if g_NUMPAD_High_Low_Choice_Selection = 1 then l_NumPad_Chnl_UserInfo$ = l_NumPad_Chnl_UserInfo$ + " (Upper Range)"
    if g_NUMPAD_High_Low_Choice_Selection = 2 then l_NumPad_Chnl_UserInfo$ = l_NumPad_Chnl_UserInfo$ + " (Lower Range)"
  endif
  
  if g_ENGINE_HIST_DRILL_Screen_Routing = 2
    if g_HS_RangeSelect_Box = 1
      l_User_Info_HS_Array_Indictor = (g_HS_RangeSelect_Channel * 2) - 1 + (g_HS_RangeSelect_UpperLower - 1)
    endif
    if g_HS_RangeSelect_Box = 2
      l_User_Info_HS_Array_Indictor = (g_HS_RangeSelect_Channel * 2) + 9 + (g_HS_RangeSelect_UpperLower - 1)
    endif
    if g_HS_RangeSelect_Box = 3
      l_User_Info_HS_Array_Indictor = (g_HS_RangeSelect_Channel * 2) + 19 + (g_HS_RangeSelect_UpperLower - 1)
    endif
    if g_HS_RangeSelect_Box = 4
      l_User_Info_HS_Array_Indictor = (g_HS_RangeSelect_Channel * 2) + 29 + (g_HS_RangeSelect_UpperLower - 1)
    endif
    
    if l_User_Info_HS_Array_Indictor = 1 then l_NumPad_Chnl_UserInfo$ = "- Hole Depth (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 2 then l_NumPad_Chnl_UserInfo$ = "- Hole Depth (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 3 then l_NumPad_Chnl_UserInfo$ = "- Bit Depth (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 4 then l_NumPad_Chnl_UserInfo$ = "- Bit Depth (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 5 then l_NumPad_Chnl_UserInfo$ = "- ROP (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 6 then l_NumPad_Chnl_UserInfo$ = "- ROP (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 7 then l_NumPad_Chnl_UserInfo$ = "- WOB (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 8 then l_NumPad_Chnl_UserInfo$ = "- WOB (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 9 then l_NumPad_Chnl_UserInfo$ = "- Hookload (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 10 then l_NumPad_Chnl_UserInfo$ = "- Hookload (Lower Range)"
    
    if l_User_Info_HS_Array_Indictor = 11 then l_NumPad_Chnl_UserInfo$ = "- RPM (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 12 then l_NumPad_Chnl_UserInfo$ = "- RPM (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 13 then l_NumPad_Chnl_UserInfo$ = "- Triptank (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 14 then l_NumPad_Chnl_UserInfo$ = "- Triptank (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 15 then l_NumPad_Chnl_UserInfo$ = "- Block Height (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 16 then l_NumPad_Chnl_UserInfo$ = "- Block Height (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 17 then l_NumPad_Chnl_UserInfo$ = "- PVT (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 18 then l_NumPad_Chnl_UserInfo$ = "- PVT (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 19 then l_NumPad_Chnl_UserInfo$ = "- SPP (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 20 then l_NumPad_Chnl_UserInfo$ = "- SPP (Lower Range)"
    
    if l_User_Info_HS_Array_Indictor = 21 then l_NumPad_Chnl_UserInfo$ = "- Flow In (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 22 then l_NumPad_Chnl_UserInfo$ = "- Flow In (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 23 then l_NumPad_Chnl_UserInfo$ = "- SPM 1 (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 24 then l_NumPad_Chnl_UserInfo$ = "- SPM 1 (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 25 then l_NumPad_Chnl_UserInfo$ = "- SPM 2 (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 26 then l_NumPad_Chnl_UserInfo$ = "- SPM 2 (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 27 then l_NumPad_Chnl_UserInfo$ = "- SPM 3 (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 28 then l_NumPad_Chnl_UserInfo$ = "- SPM 3 (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 29 then l_NumPad_Chnl_UserInfo$ = "- TG % (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 30 then l_NumPad_Chnl_UserInfo$ = "- TG % (Lower Range)"
    
    if l_User_Info_HS_Array_Indictor = 31 then l_NumPad_Chnl_UserInfo$ = "- H2S (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 32 then l_NumPad_Chnl_UserInfo$ = "- H2S (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 33 then l_NumPad_Chnl_UserInfo$ = "- Temp IN (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 34 then l_NumPad_Chnl_UserInfo$ = "- Temp IN (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 35 then l_NumPad_Chnl_UserInfo$ = "- Temp OUT (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 36 then l_NumPad_Chnl_UserInfo$ = "- Temp OUT (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 37 then l_NumPad_Chnl_UserInfo$ = "- CSG (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 38 then l_NumPad_Chnl_UserInfo$ = "- CSG (Lower Range)"
    if l_User_Info_HS_Array_Indictor = 39 then l_NumPad_Chnl_UserInfo$ = "- Total Strokes (Upper Range)"
    if l_User_Info_HS_Array_Indictor = 40 then l_NumPad_Chnl_UserInfo$ = "- Total Strokes (Lower Range)"
    
  endif
      
      
  if g_ENGINE_HIST_DRILL_Screen_Routing = 3
    `if g_RANGES_Chart_Selected_Num = 1 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(1))
    `if g_RANGES_Chart_Selected_Num = 2 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(2))
    `if g_RANGES_Chart_Selected_Num = 3 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(3))
    `if g_RANGES_Chart_Selected_Num = 4 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(4))
    `if g_RANGES_Chart_Selected_Num = 5 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(5))
    `if g_RANGES_Chart_Selected_Num = 6 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(6))
    `if g_RANGES_Chart_Selected_Num = 7 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(7))
    `if g_RANGES_Chart_Selected_Num = 8 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(8))
    `if g_RANGES_Chart_Selected_Num = 9 then l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(9))
    if g_PITS_NUMPAD_Selected_ChannelID > -1
      l_NumPad_Chnl_UserInfo$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(g_PITS_NUMPAD_Selected_ChannelID))
      if g_PITS_NUMPAD_Selected_LowerUpperChnl = 1 then l_NumPad_Chnl_UserInfo$ = l_NumPad_Chnl_UserInfo$ + " (Lower Range)"
      if g_PITS_NUMPAD_Selected_LowerUpperChnl = 2 then l_NumPad_Chnl_UserInfo$ = l_NumPad_Chnl_UserInfo$ + " (Upper Range)"
    endif
  endif
  
  `Flashing Input |
    if timer() > g_NUMPAD_InputFlashTimer
      g_NUMPAD_InputFlashTimer = timer() + 750
      if g_NUMPAD_InputFlashToggle = -1
        g_NUMPAD_InputFlashToggle = 1
      else
        g_NUMPAD_InputFlashToggle = -1
      endif
    endif
    if g_NUMPAD_InputFlashToggle = 1
      l_BuildStr_InputFlash$ = g_NUMPAD_BuildValue$ + "|"
    else
      l_BuildStr_InputFlash$ = g_NUMPAD_BuildValue$ + ""
    endif
  
  `Print the g_NUMPAD_BuildValue$
  d3d_starttext
    d3d_text 11, g_NUMPAD_SpritePos_x + 80, g_NUMPAD_SpritePos_y + 5, 0, l_NumPad_Chnl_UserInfo$, g_ENGINE_COLOUR_White
    d3d_text 1, g_NUMPAD_SpritePos_x + 19, g_NUMPAD_SpritePos_y + 37, 0, l_BuildStr_InputFlash$, g_ENGINE_COLOUR_Black
  d3d_endtext

endfunction

function lib_ALL_NUMPADS_Close_NUMPAD()

  if g_ENGINE_HIST_DRILL_Screen_Routing = 1 : `Close Button: Numpad in use on Drilling Screen
    g_NUMPAD_High_Low_Choice_Selection = -1
    g_NUMPAD_Selected_Button_Mouseclick = 1
    g_RANGES_Chart_Selected_Num = -1
    g_INFOBOX_INPUT_LMB_State = 1
  endif
  if g_ENGINE_HIST_DRILL_Screen_Routing = 2 : `Close Button: Numpad in use on Historical Screen
    g_HS_NUMPAD_Toggle = -1
    g_INFOBOX_INPUT_LMB_State = 1
  endif
  if g_ENGINE_HIST_DRILL_Screen_Routing = 3 : `Close Button: Numpad in use on Pits Screen
    g_PITS_NUMPAD_Selected_ChannelID = -1
    g_PITS_NUMPAD_Selected_LowerUpperChnl = -1
    g_PITS_NUMPAD_DISPLAY_NUMPAD = -1
    g_NUMPAD_High_Low_Choice_Selection = -1
    g_RANGES_Chart_Selected_Num = -1
    g_NUMPAD_BuildValue_Final$ = ""
    g_NUMPAD_BuildValue$ = ""
    g_PITS_ChartData_MouseState = 1
    g_INFOBOX_INPUT_LMB_State = 1
  endif

endfunction


function DS_lib_NUMPAD_Set_Range_Value(r_RANGEEDIT_IncomingValue$, r_RANGEEDIT_HighOrLow_Val)

  l_ArrPos = (CHANNEL_ID_ChannelLinkIndex(g_RANGES_Chart_Selected_Num) * 2)

  if r_RANGEEDIT_HighOrLow_Val = 1 : ` 1 = Lower Value
   CHANNEL_ID_ChannelRanges(l_ArrPos - 1) = val(r_RANGEEDIT_IncomingValue$)
  endif
  if r_RANGEEDIT_HighOrLow_Val = 2 : ` 1 = Upper Value
   CHANNEL_ID_ChannelRanges(l_ArrPos) = val(r_RANGEEDIT_IncomingValue$)
  endif

endfunction


function lib_SetDS_RangeValue_AgainstIndex()

  `This function checks the range values. If any are set to -1 then it will use the server value

  if g_Block1_Line1_Lower_Value = -1 then g_Block1_Line1_Lower_Value = CF1_CHARTIndex_BlockLine_Val(1)
  if g_Block1_Line1_Upper_Value = -1 then g_Block1_Line1_Upper_Value = CF1_CHARTIndex_BlockLine_Val(2)
  if g_Block1_Line2_Lower_Value = -1 then g_Block1_Line2_Lower_Value = CF1_CHARTIndex_BlockLine_Val(3)
  if g_Block1_Line2_Upper_Value = -1 then g_Block1_Line2_Upper_Value = CF1_CHARTIndex_BlockLine_Val(4)
  if g_Block1_Line3_Lower_Value = -1 then g_Block1_Line3_Lower_Value = CF1_CHARTIndex_BlockLine_Val(5)
  if g_Block1_Line3_Upper_Value = -1 then g_Block1_Line3_Upper_Value = CF1_CHARTIndex_BlockLine_Val(6)
  `
  if g_Block2_Line1_Lower_Value = -1 then g_Block2_Line1_Lower_Value = CF1_CHARTIndex_BlockLine_Val(7)
  if g_Block2_Line1_Upper_Value = -1 then g_Block2_Line1_Upper_Value = CF1_CHARTIndex_BlockLine_Val(8)
  if g_Block2_Line2_Lower_Value = -1 then g_Block2_Line2_Lower_Value = CF1_CHARTIndex_BlockLine_Val(9)
  if g_Block2_Line2_Upper_Value = -1 then g_Block2_Line2_Upper_Value = CF1_CHARTIndex_BlockLine_Val(10)
  if g_Block2_Line3_Lower_Value = -1 then g_Block2_Line3_Lower_Value = CF1_CHARTIndex_BlockLine_Val(11)
  if g_Block2_Line3_Upper_Value = -1 then g_Block2_Line3_Upper_Value = CF1_CHARTIndex_BlockLine_Val(12)
  `
  if g_Block3_Line1_Lower_Value = -1 then g_Block3_Line1_Lower_Value = CF1_CHARTIndex_BlockLine_Val(13)
  if g_Block3_Line1_Upper_Value = -1 then g_Block3_Line1_Upper_Value = CF1_CHARTIndex_BlockLine_Val(14)
  if g_Block3_Line2_Lower_Value = -1 then g_Block3_Line2_Lower_Value = CF1_CHARTIndex_BlockLine_Val(15)
  if g_Block3_Line2_Upper_Value = -1 then g_Block3_Line2_Upper_Value = CF1_CHARTIndex_BlockLine_Val(16)
  if g_Block3_Line3_Lower_Value = -1 then g_Block3_Line3_Lower_Value = CF1_CHARTIndex_BlockLine_Val(17)
  if g_Block3_Line3_Upper_Value = -1 then g_Block3_Line3_Upper_Value = CF1_CHARTIndex_BlockLine_Val(18)


endfunction

function lib_WITS_RT_QuickView_Display()

  `This function displays the WITS QuickView RT Overlay

  paste sprite c_SPRITE_WITS_RTQuickView, 100, 100
  
  `paste image c_WITSVIEW_QuickWITS_ImageBkgd, 400, 400, 1
  
  d3d_starttext
  
   ` lib_PrintString_IntoSections(g_SERIALPORT_Port_Output_String$, wdth_prnt, sp, 310, g_ENGINE_COLOUR_Black)
    
   ` lib_PrintString_IntoSections(g_SERIALPORT_Previous_Port_Output_String$, wdth_prnt + 400, sp, 310, g_ENGINE_COLOUR_Black)
  
    d3d_text 1, 120, 110, 0, "RAW WITS Data:", g_ENGINE_COLOUR_Black
  
    lib_PrintString_IntoSections(g_SERIALPORT_Port_Output_String$, 120, 120, 300, g_ENGINE_COLOUR_Black)
    
  d3d_endtext  
  

endfunction

function lib_DS_DepthAlarm_Button()

  local l_RETURN_VAL# as float
  local l_Exit_INPUTPAD as integer
  
  local l_AlarmButton_XPos as integer : l_AlarmButton_XPos = 590 
  local l_AlarmButton_YPos as integer : l_AlarmButton_YPos = 730
  
  local l_AlarmBox_XPos as integer
  local l_AlarmBox_YPos as integer
  
  
  `----- HANDLE ALARM ACTION -----
  
  `Handle Alarm Info Graphic
    if g_ALARM_DS_DepthAlarm_Value# <> -1 and g_COMMPORT_Receive_HoleDepth# => g_ALARM_DS_DepthAlarm_Value#
    
      l_AlarmBox_XPos = g_ENG_Half_Screen_Width - (image width(c_ALARM_ON_Background_Img) / 2)
      l_AlarmBox_YPos = g_ENG_Half_Screen_Height - (image height(c_ALARM_ON_Background_Img) / 2)
    
      `Paste Box Background Image
        paste image c_ALARM_ON_Background_Img, l_AlarmBox_XPos, l_AlarmBox_YPos 
    
    
      `Handle Text Information
      	d3d_starttext
        	d3d_text 4, l_AlarmBox_XPos + (image width(c_ALARM_ON_Background_Img) / 2), l_AlarmBox_YPos + 30, 1, "ALARM ACTIVE", g_ENGINE_COLOUR_White
        	d3d_text 7, l_AlarmBox_XPos + (image width(c_ALARM_ON_Background_Img) / 2), l_AlarmBox_YPos + 60, 1, "DEPTH", g_ENGINE_COLOUR_White
        	d3d_text 7, l_AlarmBox_XPos + (image width(c_ALARM_ON_Background_Img) / 2), l_AlarmBox_YPos + 90, 1, "Set at : " + str$(g_ALARM_DS_DepthAlarm_Value#, 1), g_ENGINE_COLOUR_White
        	
        	d3d_text 7, l_AlarmBox_XPos + (image width(c_ALARM_ON_Background_Img) / 2), l_AlarmBox_YPos + 130, 1, "> " + g_ALARM_ENG_INPUTPAD_LabelText$, g_ENGINE_COLOUR_White
        	
      	d3d_endtext
      
      `Handle Close Button
        if mousey() > l_AlarmBox_YPos + 2 and mousey() < l_AlarmBox_YPos + 20
          if mousex() > l_AlarmBox_XPos + 315 and mousex() < l_AlarmBox_XPos + 362
            paste image c_DISPLAY_CLOSEButton_LIT, l_AlarmBox_XPos + 315, l_AlarmBox_YPos + 3
      			if mouseclick() = 1 and mouse_click(1) = -1
        			mouse_click(1) = 1
        			g_DS_DepthAlarm_Btn_Toggle = -2
        			g_ALARM_DS_DepthAlarm_Value# = -1
        			g_ALARM_DS_DepthAlarm_Label$ = ""
  	          SAVE_ALARMS_TXT_File()
      			endif
          else
            paste image c_DISPLAY_CLOSEButton_UNLIT, l_AlarmBox_XPos + 315, l_AlarmBox_YPos + 3
          endif
        else
          paste image c_DISPLAY_CLOSEButton_UNLIT, l_AlarmBox_XPos + 315, l_AlarmBox_YPos + 3
        endif
    endif
    if mouseclick() = 0 and mouse_click(1) = -1
      if g_DS_DepthAlarm_Btn_Toggle = -2 then g_DS_DepthAlarm_Btn_Toggle = -1
    endif  
    if mouseclick() = 0 and mouse_click(1) = 1 then mouse_click(1) = -1
  
  `----- HANDLE BUTTON & INPUT CONTROL -----

  `Display the Depth Alarm Button & Handle
  if g_ALARM_DS_DepthAlarm_Value# = -1
    `Use the BLACK ICON / BUTTON
  	if mousey() > l_AlarmButton_YPos - 1 and mousey() < l_AlarmButton_YPos + image height(c_DS_DEPTH_ALARM_Green_Button_Img) + 1
    	if mousex() > l_AlarmButton_XPos - 1 and mousex() < l_AlarmButton_XPos + image width(c_DS_DEPTH_ALARM_Green_Button_Img) + 1
      	paste sprite c_SPRITE_DS_DepthAlarmBtn_Lit, l_AlarmButton_XPos, l_AlarmButton_YPos
      	lib_DS_DepthAlarm_Button_DispValue()
      	if mouseclick() = 1 and mouse_click(1) = -1
        	mouse_click(1) = 1
        	g_DS_DepthAlarm_Btn_Toggle = 1
        	g_INPUTPAD_BuildValue$ = ""
        	g_ALARM_ENG_INPUTPAD_LabelText$ = ""
        	g_ALARMSYS_StrEditCharPos = 0
      	endif
    	else
      	paste sprite c_SPRITE_DS_DepthAlarmBtn_Unlit, l_AlarmButton_XPos, l_AlarmButton_YPos  
    	endif
  	else
    	paste sprite c_SPRITE_DS_DepthAlarmBtn_Unlit, l_AlarmButton_XPos, l_AlarmButton_YPos
  	endif
  else
    `USE THE GREEN ICON / BUTTON
  	if mousey() > l_AlarmButton_YPos - 1 and mousey() < l_AlarmButton_YPos + image height(c_DS_DEPTH_ALARM_Green_Button_Img) + 1
    	if mousex() > l_AlarmButton_XPos - 1 and mousex() < l_AlarmButton_XPos + image width(c_DS_DEPTH_ALARM_Green_Button_Img) + 1
      	paste sprite c_SPRITE_DS_DepthAlarmBtn_Green_Lit, l_AlarmButton_XPos, l_AlarmButton_YPos
      	lib_DS_DepthAlarm_Button_DispValue()
      	if mouseclick() = 1 and mouse_click(1) = -1
        	mouse_click(1) = 1
        	`Turn Depth Alarm OFF
        	g_ALARM_DS_DepthAlarm_Value# = -1
  	      g_ALARM_DS_DepthAlarm_Label$ = ""
  	      SAVE_ALARMS_TXT_File()
      	endif
    	else
      	paste sprite c_SPRITE_DS_DepthAlarmBtn_Green_Unlit, l_AlarmButton_XPos, l_AlarmButton_YPos  
    	endif
  	else
    	paste sprite c_SPRITE_DS_DepthAlarmBtn_Green_Unlit, l_AlarmButton_XPos, l_AlarmButton_YPos
  	endif
  endif

  if g_DS_DepthAlarm_Btn_Toggle = 1
  
    l_RETURN_VAL# = INPUTPAD_ADD_ALARM_DISPLAY_Inputpad("ALARM - Depth")
    
    if l_RETURN_VAL# = -9999
      l_Exit_INPUTPAD = 1
    endif
    
    if l_RETURN_VAL# <> -1 and l_RETURN_VAL# <> -9999
      g_ALARM_DS_DepthAlarm_Value# = l_RETURN_VAL#
      l_Exit_INPUTPAD = 1
      SAVE_ALARMS_TXT_File()
    endif
    
      if l_Exit_INPUTPAD = 1
        `
        g_DS_DepthAlarm_Btn_Toggle = -1
        `
        INPUTPAD_Deactivate()
        g_RCM_ACTION_Toggle_EditWellData = -1
        g_LOCKOUT_INPUTPAD_ChartInfoBoxes = -1
        g_LOCKOUT_INPUTPAD_TimePeriodButtons = -1
        g_LOCKOUT_INPUTPAD_DS_ChannelRanges = -1
        g_LOCKOUT_INPUTPAD_PITS_ChannelRanges = -1
        g_INPUTPAD_Startup_Stage = -1
        g_INFOBOX_INPUT_LMB_State = 1
        g_INFOBOX_INPUT_LMB_CheckForModeState2 = -99
      endif
  
  endif

endfunction

function lib_DS_DepthAlarm_Button_DispValue()

  local l_CMNTBkgd_ImgWidth as integer : l_CMNTBkgd_ImgWidth = 80
  local l_BuildStr$ as string : l_BuildStr$ = ""
  local l_space_counter as integer
  local l_ValueWidth_Pixels as integer
  
  local l_StringWidth_Pixels as integer : l_StringWidth_Pixels = 0

      	  `l_CMNTBkgd_ImgWidth = d3d_gettextwidth(2, l_BuildCmntStr$) + 20 + l_DISP_CMNT_SpaceWidthPxls
      	
      	  `if l_CMNTBkgd_ImgWidth < 10 then l_CMNTBkgd_ImgWidth = 10
  
  if g_ALARM_DS_DepthAlarm_Value# <> -1
  
  
			`HANDLE SPACES IN STRING - Pixel Width of spaces in the edited $ for the Flash Cursor
			`Spaces are not included in d3d_gettextwidth, add them ourselves.
			  `Get the Alarm TEXT LABEL full String Length (wont include spaces as d3d_gettextwidth doesnt)
			    l_StringWidth_Pixels = d3d_gettextwidth(2, g_ALARM_DS_DepthAlarm_Label$)
			  `Add the - Alarm TEXT LABEL Number of Spaces String Length
				  inc l_StringWidth_Pixels, (lib_Count_Num_Spaces_In_A_String(g_ALARM_DS_DepthAlarm_Label$) * 4)
	      `Add the - Alarm VALUE length as a string and add it to l_StringLength
	        l_ValueWidth_Pixels = d3d_gettextwidth(2, str$(g_ALARM_DS_DepthAlarm_Value#, 1))
	        inc l_StringWidth_Pixels, l_ValueWidth_Pixels
      	`Add and offset to give the background image a bit more width than just the text width
      	  inc l_StringWidth_Pixels, 20
      	`Add 12 pixels for the " : " in the string
      	  `inc l_StringWidth_Pixels, 12
      	  
    lib_Create_Image(l_StringWidth_Pixels, 20, rgb(255,255,177), c_CMNTSYS_InputNewComment_BkgdImg, 1, rgb(0,0,0)) 

    paste image c_CMNTSYS_InputNewComment_BkgdImg, mousex() + 15, mousey() + 5
    
    d3d_starttext
      d3d_text 2, mousex() + 20, mousey() + 7, 0, str$(g_ALARM_DS_DepthAlarm_Value#, 1) + " - " + g_ALARM_DS_DepthAlarm_Label$, g_ENGINE_COLOUR_Black
    d3d_endtext

  endif



endfunction

function _______RT_GRAPHICS_DISPLAY_Chart_Plot_Creation_____________________jifftjuf63()
endfunction

function ENGINE_DS_CHART_IMAGE_Creation()

  local l_DEBUG_Timer as integer

  `Note that CF1 and CF2 use different arrays, so need different function calls.

  g_DEBUG_DSCharts_UpdateTime_Start = hitimer()
  
  lock pixels
  
  if g_ENGINE_CoreFunctionType = 1
    `
    l_DEBUG_Timer = hitimer()
    DS_CHART_IMAGE_CF1_Draw_Block1()
    g_DEBUG_DSCharts_UpdateTime_Block1 = hitimer() - l_DEBUG_Timer
    `
    l_DEBUG_Timer = hitimer()  
    DS_CHART_IMAGE_CF1_Draw_Block2()
    g_DEBUG_DSCharts_UpdateTime_Block2 = hitimer() - l_DEBUG_Timer
    `
    l_DEBUG_Timer = hitimer()
    DS_CHART_IMAGE_CF1_Draw_Block3()
    g_DEBUG_DSCharts_UpdateTime_Block3 = hitimer() - l_DEBUG_Timer
    `
  endif

  if g_ENGINE_CoreFunctionType = 2
    `
    l_DEBUG_Timer = hitimer()
    DS_CHART_IMAGE_CF2_Draw_Block1()
    g_DEBUG_DSCharts_UpdateTime_Block1 = hitimer() - l_DEBUG_Timer
    `
    l_DEBUG_Timer = hitimer()
    DS_CHART_IMAGE_CF2_Draw_Block2()
    g_DEBUG_DSCharts_UpdateTime_Block2 = hitimer() - l_DEBUG_Timer
    `
    l_DEBUG_Timer = hitimer()
    DS_CHART_IMAGE_CF2_Draw_Block3()
    g_DEBUG_DSCharts_UpdateTime_Block3 = hitimer() - l_DEBUG_Timer
    `  
  endif
  
  unlock pixels  
  
  
  d3d_color 255, 255, 255, 255
  
  set current bitmap 0
  
  g_DEBUG_DSCharts_UpdateTimeInMS = hitimer() - g_DEBUG_DSCharts_UpdateTime_Start
  
  if g_ENGINE_CoreFunctionType = 2
    lib_CMNTS_Fill_Comment_Display_Array()
  endif

endfunction

function DS_CHART_IMAGE_CF1_Draw_Block1()

  local l_Block1Line1_TotalRange# as float
  local l_Block1Line2_TotalRange# as float
  local l_Block1Line3_TotalRange# as float
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float



  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

    l_Block1Line1_TotalRange# = (g_Block1_Line1_Upper_Value - g_Block1_Line1_Lower_Value) + 0.0
    l_Block1Line2_TotalRange# = (g_Block1_Line2_Upper_Value - g_Block1_Line2_Lower_Value) + 0.0
    l_Block1Line3_TotalRange# = (g_Block1_Line3_Upper_Value - g_Block1_Line3_Lower_Value) + 0.0
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    `l_Chart_Start_ArrayPos = DS_CHART_Get_First_Valid_Record_Array()

    make bitmap from memblock 1, 10
    set current bitmap 1
    
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = g_DS_CHART_Scroll_Array_Offset + print_pixel_lp
        l_MEM_DB_Pos2 = l_MEM_DB_Pos + 1
        
        if l_MEM_DB_Pos > c_SMod_RTDis_DB_TtlRecs
          l_MEM_DB_Pos = c_SMod_RTDis_DB_TtlRecs
        endif  
        if l_MEM_DB_Pos2 > c_SMod_RTDis_DB_TtlRecs
          l_MEM_DB_Pos2 = c_SMod_RTDis_DB_TtlRecs
        endif
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 1
          `ROP
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).ROP# - g_Block1_Line1_Lower_Value) / l_Block1Line1_TotalRange#
          X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).ROP# - g_Block1_Line1_Lower_Value) / l_Block1Line1_TotalRange#
          X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
          p_DataA_Val# = VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).ROP#
          p_DataB_Val# = VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).ROP#
          lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, g_Block1_Line1_Upper_Value, g_Block1_Line1_Lower_Value, g_N_Block1_MinX, g_N_Block1_MaxX, 1)
            
          `WOB
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).WOB# - g_Block1_Line2_Lower_Value) / l_Block1Line2_TotalRange#
          X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).WOB# - g_Block1_Line2_Lower_Value) / l_Block1Line2_TotalRange#
          X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
          p_DataA_Val# = VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).WOB#
          p_DataB_Val# = VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).WOB#
          lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, g_Block1_Line2_Upper_Value, g_Block1_Line2_Lower_Value, g_N_Block1_MinX, g_N_Block1_MaxX, 2)
     
         `HKLD
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).Hookload - g_Block1_Line3_Lower_Value) / l_Block1Line3_TotalRange#
          X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).Hookload - g_Block1_Line3_Lower_Value) / l_Block1Line3_TotalRange#
          X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
          p_DataA_Val# = int(VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).Hookload)
          p_DataB_Val# = int(VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).Hookload)
          lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, g_Block1_Line3_Upper_Value, g_Block1_Line3_Lower_Value, g_N_Block1_MinX, g_N_Block1_MaxX, 3)
              
  
    next print_pixel_lp
  
    get image c_CHT_PLOT_Img_Block1, 0, 0, bitmap width(1), bitmap height(1), 1
    delete bitmap 1
    
endfunction

function DS_CHART_IMAGE_CF1_Draw_Block2()

  local l_Block1Line1_TotalRange# as float
  local l_Block1Line2_TotalRange# as float
  local l_Block1Line3_TotalRange# as float
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float



  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.


    l_Block2Line1_TotalRange# = (g_Block2_Line1_Upper_Value - g_Block2_Line1_Lower_Value) + 0.0
    l_Block2Line2_TotalRange# = (g_Block2_Line2_Upper_Value - g_Block2_Line2_Lower_Value) + 0.0
    l_Block2Line3_TotalRange# = (g_Block2_Line3_Upper_Value - g_Block2_Line3_Lower_Value) + 0.0

    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    `l_Chart_Start_ArrayPos = DS_CHART_Get_First_Valid_Record_Array()

    make bitmap from memblock 1, 10
    set current bitmap 1
    
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = g_DS_CHART_Scroll_Array_Offset + print_pixel_lp
        l_MEM_DB_Pos2 = l_MEM_DB_Pos + 1
        
        if l_MEM_DB_Pos > c_SMod_RTDis_DB_TtlRecs
          l_MEM_DB_Pos = c_SMod_RTDis_DB_TtlRecs
        endif  
        if l_MEM_DB_Pos2 > c_SMod_RTDis_DB_TtlRecs
          l_MEM_DB_Pos2 = c_SMod_RTDis_DB_TtlRecs
        endif
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 2
          `RPM
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).RPM - g_Block2_Line1_Lower_Value) / l_Block2Line1_TotalRange#
          X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).RPM - g_Block2_Line1_Lower_Value) / l_Block2Line1_TotalRange#
          X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
          p_DataA_Val# = int(VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).RPM)
          p_DataB_Val# = int(VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).RPM)
          lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, g_Block2_Line1_Upper_Value, g_Block2_Line1_Lower_Value, g_N_Block2_MinX, g_N_Block2_MaxX, 4)
              
          `TripTank
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).TripTank# - g_Block2_Line2_Lower_Value) / l_Block2Line2_TotalRange#
          X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).TripTank# - g_Block2_Line2_Lower_Value) / l_Block2Line2_TotalRange#
          X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
          p_DataA_Val# = VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).TripTank#
          p_DataB_Val# = VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).TripTank#
          lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, g_Block2_Line2_Upper_Value, g_Block2_Line2_Lower_Value, g_N_Block2_MinX, g_N_Block2_MaxX, 5)
             
          
          `Block position
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).BlockPosition# - g_Block2_Line3_Lower_Value) / l_Block2Line3_TotalRange#
          X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).BlockPosition# - g_Block2_Line3_Lower_Value) / l_Block2Line3_TotalRange#
          X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
          p_DataA_Val# = VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).BlockPosition#
          p_DataB_Val# = VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).BlockPosition#
          lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, g_Block2_Line3_Upper_Value, g_Block2_Line3_Lower_Value, g_N_Block2_MinX, g_N_Block2_MaxX, 6)
             
  
    next print_pixel_lp
  
    get image c_CHT_PLOT_Img_Block2, 0, 0, bitmap width(1), bitmap height(1), 1
    delete bitmap 1

endfunction

function DS_CHART_IMAGE_CF1_Draw_Block3()

  local l_Block1Line1_TotalRange# as float
  local l_Block1Line2_TotalRange# as float
  local l_Block1Line3_TotalRange# as float
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float



  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

    l_Block3Line1_TotalRange# = (g_Block3_Line1_Upper_Value - g_Block3_Line1_Lower_Value) + 0.0
    l_Block3Line2_TotalRange# = (g_Block3_Line2_Upper_Value - g_Block3_Line2_Lower_Value) + 0.0
    l_Block3Line3_TotalRange# = (g_Block3_Line3_Upper_Value - g_Block3_Line3_Lower_Value) + 0.0
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    `l_Chart_Start_ArrayPos = DS_CHART_Get_First_Valid_Record_Array()

    make bitmap from memblock 1, 10
    set current bitmap 1
    
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = g_DS_CHART_Scroll_Array_Offset + print_pixel_lp
        l_MEM_DB_Pos2 = l_MEM_DB_Pos + 1
        
        if l_MEM_DB_Pos > c_SMod_RTDis_DB_TtlRecs
          l_MEM_DB_Pos = c_SMod_RTDis_DB_TtlRecs
        endif  
        if l_MEM_DB_Pos2 > c_SMod_RTDis_DB_TtlRecs
          l_MEM_DB_Pos2 = c_SMod_RTDis_DB_TtlRecs
        endif
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 3
          `Total Volume
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).PVT# - g_Block3_Line1_Lower_Value) / l_Block3Line1_TotalRange#
          X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).PVT# - g_Block3_Line1_Lower_Value) / l_Block3Line1_TotalRange#
          X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
          p_DataA_Val# = VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).PVT#
          p_DataB_Val# = VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).PVT#
          lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, g_Block3_Line1_Upper_Value, g_Block3_Line1_Lower_Value, g_N_Block3_MinX, g_N_Block3_MaxX, 7)
             
          `SPP
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).SPP - g_Block3_Line2_Lower_Value) / l_Block3Line2_TotalRange#
          X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).SPP - g_Block3_Line2_Lower_Value) / l_Block3Line2_TotalRange#
          X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
          p_DataA_Val# = int(VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).SPP)
          p_DataB_Val# = int(VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).SPP)
          lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, g_Block3_Line2_Upper_Value, g_Block3_Line2_Lower_Value, g_N_Block3_MinX, g_N_Block3_MaxX, 8)
             
          `Flow IN
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).FlowIn - g_Block3_Line3_Lower_Value) / l_Block3Line3_TotalRange#
          X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
          l_ratio# = (VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).FlowIn - g_Block3_Line3_Lower_Value) / l_Block3Line3_TotalRange#
          X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
          p_DataA_Val# = int(VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos).FlowIn)
          p_DataB_Val# = int(VIEWERMODE_RTDisplay_DB(l_MEM_DB_Pos2).FlowIn)
          lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, g_Block3_Line3_Upper_Value, g_Block3_Line3_Lower_Value, g_N_Block3_MinX, g_N_Block3_MaxX, 9)
             
  
    next print_pixel_lp
  
    get image c_CHT_PLOT_Img_Block3, 0, 0, bitmap width(1), bitmap height(1), 1
    delete bitmap 1

endfunction

function DS_CHART_IMAGE_CF2_Draw_Block1()

  local l_Block1Line1_TotalRange# as float
  local l_Block1Line2_TotalRange# as float
  local l_Block1Line3_TotalRange# as float
  local l_Block1Line4_TotalRange# as float
  
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float
  
  local l_Line1_TotalRange# as float
  local l_Line2_TotalRange# as float
  local l_Line3_TotalRange# as float
  local l_Line4_TotalRange# as float
  
  local l_Line1_UpperRange as integer
  local l_Line1_LowerRange as integer
  local l_Line2_UpperRange as integer
  local l_Line2_LowerRange as integer
  local l_Line3_UpperRange as integer
  local l_Line3_LowerRange as integer
  local l_Line4_UpperRange as integer
  local l_Line4_LowerRange as integer
  
  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

  if g_DATABASE_MEM_Total_Num_Records > 5
    if CHANNEL_ID_ChannelLinkIndex(1) > 0
      l_Line1_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(1) * 2) - 1 + 1) + 0.0
      l_Line1_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(1) * 2) - 1) + 0.0
      l_Line1_TotalRange# = l_Line1_UpperRange - l_Line1_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(2) > 0
      l_Line2_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(2) * 2) - 1 + 1) + 0.0
      l_Line2_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(2) * 2) - 1) + 0.0
      l_Line2_TotalRange# = l_Line2_UpperRange - l_Line2_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(3) > 0
      l_Line3_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(3) * 2) - 1 + 1) + 0.0
      l_Line3_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(3) * 2) - 1) + 0.0
      l_Line3_TotalRange# = l_Line3_UpperRange - l_Line3_LowerRange + 0.0
    endif
    
    if g_DS_SCREEN_Block1_DisplayFormat = 4
    	if CHANNEL_ID_ChannelLinkIndex(4) > 0
      	l_Line4_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(4) * 2) - 1 + 1) + 0.0
      	l_Line4_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(4) * 2) - 1) + 0.0
      	l_Line4_TotalRange# = l_Line4_UpperRange - l_Line4_LowerRange + 0.0
    	endif
    endif
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    l_Chart_Start_ArrayPos = DS_CHART_Get_First_Valid_Record_Array()

    l_DEBUG_Timer = hitimer()
    
    if image exist(c_CHT_PLOT_Img_Block1) = 1 then delete image c_CHT_PLOT_Img_Block1
    make image from memblock 1, 10
    
    MAKE IMAGE c_CHT_PLOT_Img_Block1, g_ENG_RTChart_Width, g_ENG_RTChart_Height
    DRAW TO IMAGE c_CHT_PLOT_Img_Block1
    
    paste image 1, 0, 0
    
    delete image 1
    
    g_DEBUG_DSCharts_UpdateTime_Block1_Memblock = hitimer() - l_DEBUG_Timer
    
 
    l_DEBUG_Timer = hitimer()
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (l_Chart_Start_ArrayPos) - (print_pixel_lp * g_ENGINE_DS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_DS_Chart_Time_Period_Adjust)
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 1
          
          `CHANNEL 1
          if CHANNEL_ID_ChannelLinkIndex(1) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(1), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(1), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line1_UpperRange, l_Line1_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 1)
          endif
              
          `CHANNEL 2
          if CHANNEL_ID_ChannelLinkIndex(2) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(2), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(2), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line2_UpperRange, l_Line2_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 2)
          endif 
          
          `CHANNEL 3
          if CHANNEL_ID_ChannelLinkIndex(3) > 0  
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(3), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(3), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line3_UpperRange, l_Line3_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 3)
          endif
          
          `CHANNEL 4
          if g_DS_SCREEN_Block1_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(4) > 0 
            	p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(4), l_MEM_DB_Pos)
            	p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(4), l_MEM_DB_Pos2)
            	l_ratio# = (p_DataA_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	l_ratio# = (p_DataB_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line4_UpperRange, l_Line4_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 4)
          	endif
          endif
            
    next print_pixel_lp
    
    g_DEBUG_DSCharts_UpdateTime_Block1_WriteData = hitimer() - l_DEBUG_Timer
  
    
  endif
  
endfunction

function DS_CHART_IMAGE_CF2_Draw_Block2()

  local l_Block2Line1_TotalRange# as float
  local l_Block2Line2_TotalRange# as float
  local l_Block2Line3_TotalRange# as float
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float

  local l_Line1_TotalRange# as float
  local l_Line2_TotalRange# as float
  local l_Line3_TotalRange# as float
  local l_Line4_TotalRange# as float
  
  local l_Line1_UpperRange as integer
  local l_Line1_LowerRange as integer
  local l_Line2_UpperRange as integer
  local l_Line2_LowerRange as integer
  local l_Line3_UpperRange as integer
  local l_Line3_LowerRange as integer
  local l_Line4_UpperRange as integer
  local l_Line4_LowerRange as integer

  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

  if g_DATABASE_MEM_Total_Num_Records > 5
    
    if CHANNEL_ID_ChannelLinkIndex(5) > 0
      l_Line1_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(5) * 2) - 1 + 1) + 0.0
      l_Line1_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(5) * 2) - 1) + 0.0
      l_Line1_TotalRange# = l_Line1_UpperRange - l_Line1_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(6) > 0
      l_Line2_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(6) * 2) - 1 + 1) + 0.0
      l_Line2_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(6) * 2) - 1) + 0.0
      l_Line2_TotalRange# = l_Line2_UpperRange - l_Line2_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(7) > 0
      l_Line3_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(7) * 2) - 1 + 1) + 0.0
      l_Line3_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(7) * 2) - 1) + 0.0
      l_Line3_TotalRange# = l_Line3_UpperRange - l_Line3_LowerRange + 0.0
    endif
    
    if g_DS_SCREEN_Block2_DisplayFormat = 4
    	if CHANNEL_ID_ChannelLinkIndex(8) > 0
      	l_Line4_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(8) * 2) - 1 + 1) + 0.0
      	l_Line4_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(8) * 2) - 1) + 0.0
      	l_Line4_TotalRange# = l_Line4_UpperRange - l_Line4_LowerRange + 0.0
    	endif
    endif
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    l_Chart_Start_ArrayPos = DS_CHART_Get_First_Valid_Record_Array()

    
    l_DEBUG_Timer = hitimer()
    if image exist(c_CHT_PLOT_Img_Block2) = 1 then delete image c_CHT_PLOT_Img_Block2
    make image from memblock 1, 10
    
    MAKE IMAGE c_CHT_PLOT_Img_Block2, g_ENG_RTChart_Width, g_ENG_RTChart_Height
    DRAW TO IMAGE c_CHT_PLOT_Img_Block2
    
    paste image 1, 0, 0
    delete image 1
    g_DEBUG_DSCharts_UpdateTime_Block2_Memblock = hitimer() - l_DEBUG_Timer
    
    
    
    
    `l_DEBUG_Timer = hitimer()
    `make bitmap from memblock 1, 10
    `set current bitmap 1
    `g_DEBUG_DSCharts_UpdateTime_Block2_Memblock = hitimer() - l_DEBUG_Timer
    
    
    
    
    
    
    l_DEBUG_Timer = hitimer()
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (l_Chart_Start_ArrayPos) - (print_pixel_lp * g_ENGINE_DS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_DS_Chart_Time_Period_Adjust)
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 2
          
          `CHANNEL 1
          if CHANNEL_ID_ChannelLinkIndex(5) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(5), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(5), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line1_UpperRange, l_Line1_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 5)
          endif
            
          `CHANNEL 2
          if CHANNEL_ID_ChannelLinkIndex(6) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(6), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(6), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line2_UpperRange, l_Line2_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 6)
          endif
          
          `CHANNEL 3
          if CHANNEL_ID_ChannelLinkIndex(7) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(7), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(7), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line3_UpperRange, l_Line3_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 7)
          endif   
          
          `CHANNEL 4
          if g_DS_SCREEN_Block2_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(8) > 0
            	p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(8), l_MEM_DB_Pos)
            	p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(8), l_MEM_DB_Pos2)
            	l_ratio# = (p_DataA_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	l_ratio# = (p_DataB_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line4_UpperRange, l_Line4_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 8)
          	endif
          endif
            
    next print_pixel_lp
    g_DEBUG_DSCharts_UpdateTime_Block2_WriteData = hitimer() - l_DEBUG_Timer
  
    `l_DEBUG_Timer = hitimer()
    `get image c_CHT_PLOT_Img_Block2, 0, 0, bitmap width(1), bitmap height(1), 1
    `delete bitmap 1
    `g_DEBUG_DSCharts_UpdateTime_Block2_GetImage = hitimer() - l_DEBUG_Timer
    
  endif

endfunction

function DS_CHART_IMAGE_CF2_Draw_Block3()

  local l_Block3Line1_TotalRange# as float
  local l_Block3Line2_TotalRange# as float
  local l_Block3Line3_TotalRange# as float
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float

  local l_Line1_TotalRange# as float
  local l_Line2_TotalRange# as float
  local l_Line3_TotalRange# as float
  local l_Line4_TotalRange# as float
  
  local l_Line1_UpperRange as integer
  local l_Line1_LowerRange as integer
  local l_Line2_UpperRange as integer
  local l_Line2_LowerRange as integer
  local l_Line3_UpperRange as integer
  local l_Line3_LowerRange as integer
  local l_Line4_UpperRange as integer
  local l_Line4_LowerRange as integer

  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

  if g_DATABASE_MEM_Total_Num_Records > 5
    
    if CHANNEL_ID_ChannelLinkIndex(9) > 0
      l_Line1_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(9) * 2) - 1 + 1) + 0.0
      l_Line1_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(9) * 2) - 1) + 0.0
      l_Line1_TotalRange# = l_Line1_UpperRange - l_Line1_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(10) > 0  
      l_Line2_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(10) * 2) - 1 + 1) + 0.0
      l_Line2_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(10) * 2) - 1) + 0.0
      l_Line2_TotalRange# = l_Line2_UpperRange - l_Line2_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(11) > 0  
      l_Line3_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(11) * 2) - 1 + 1) + 0.0
      l_Line3_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(11) * 2) - 1) + 0.0
      l_Line3_TotalRange# = l_Line3_UpperRange - l_Line3_LowerRange + 0.0
    endif
    
    if g_DS_SCREEN_Block3_DisplayFormat = 4
    	if CHANNEL_ID_ChannelLinkIndex(12) > 0  
      	l_Line4_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(12) * 2) - 1 + 1) + 0.0
      	l_Line4_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(12) * 2) - 1) + 0.0
      	l_Line4_TotalRange# = l_Line4_UpperRange - l_Line4_LowerRange + 0.0
    	endif
    endif
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    l_Chart_Start_ArrayPos = DS_CHART_Get_First_Valid_Record_Array()


    l_DEBUG_Timer = hitimer()
    if image exist(c_CHT_PLOT_Img_Block3) = 1 then delete image c_CHT_PLOT_Img_Block3
    make image from memblock 1, 10
    
    MAKE IMAGE c_CHT_PLOT_Img_Block3, g_ENG_RTChart_Width, g_ENG_RTChart_Height
    DRAW TO IMAGE c_CHT_PLOT_Img_Block3
    
    paste image 1, 0, 0
    delete image 1
    
    `If Time <> Now (not plotting from latest DB record) then add a hashed area to the screen to highlight this.
      if g_DS_CHART_Scroll_Array_Offset <> 0 and g_ENG_RTPRNT2IMG_CTRLFLOW = -1
        paste image c_PLOT_BKGD_TimeIsNotNow_HashedArea, 283, 0
      endif
      
    g_DEBUG_DSCharts_UpdateTime_Block3_Memblock = hitimer() - l_DEBUG_Timer



    `l_DEBUG_Timer = hitimer()
    `make bitmap from memblock 1, 10
    `set current bitmap 1
    `g_DEBUG_DSCharts_UpdateTime_Block3_Memblock = hitimer() - l_DEBUG_Timer
    
    
    
    l_DEBUG_Timer = hitimer()
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (l_Chart_Start_ArrayPos) - (print_pixel_lp * g_ENGINE_DS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_DS_Chart_Time_Period_Adjust)
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 3
        
          `CHANNEL 1
          if CHANNEL_ID_ChannelLinkIndex(9) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(9), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(9), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line1_UpperRange, l_Line1_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 9)
          endif
              
          `CHANNEL 2
          if CHANNEL_ID_ChannelLinkIndex(10) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(10), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(10), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line2_UpperRange, l_Line2_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 10)
         endif
         
          `CHANNEL 3
          if CHANNEL_ID_ChannelLinkIndex(11) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(11), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(11), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line3_UpperRange, l_Line3_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 11)
          endif
          
          `CHANNEL 4
          if g_DS_SCREEN_Block3_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(12) > 0
            	p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(12), l_MEM_DB_Pos)
            	p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(12), l_MEM_DB_Pos2)
            	l_ratio# = (p_DataA_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	l_ratio# = (p_DataB_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line4_UpperRange, l_Line4_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 12)
          	endif
          endif
          
    next print_pixel_lp
    g_DEBUG_DSCharts_UpdateTime_Block3_WriteData = hitimer() - l_DEBUG_Timer
  
    `l_DEBUG_Timer = hitimer()
    `get image c_CHT_PLOT_Img_Block3, 0, 0, bitmap width(1), bitmap height(1), 1
    `delete bitmap 1
    `g_DEBUG_DSCharts_UpdateTime_Block3_GetImage = hitimer() - l_DEBUG_Timer
    
  endif

endfunction

function ENGINE_PITS_CHART_IMAGE_Creation()

  local l_DebugTimer as integer

  `Note that CF1 and CF2 use different arrays, so need different function calls.

  g_DEBUG_PITSCharts_UpdateTime_Start = hitimer()

  
  lock pixels
  
  `if g_ENGINE_CoreFunctionType = 1
  `  DS_CHART_IMAGE_CF1_Draw_Block1()
  `  DS_CHART_IMAGE_CF1_Draw_Block2()
  `  DS_CHART_IMAGE_CF1_Draw_Block3()
  `endif

  if g_ENGINE_CoreFunctionType = 2
    `
    l_DEBUG_Timer = hitimer()
    PITS_CHART_IMAGE_CF2_Draw_Block1()
    g_DEBUG_PITSCharts_UpdateTime_Block1 = hitimer() - l_DEBUG_Timer
    `
    l_DEBUG_Timer = hitimer()
    PITS_CHART_IMAGE_CF2_Draw_Block2()
    g_DEBUG_PITSCharts_UpdateTime_Block2 = hitimer() - l_DEBUG_Timer
    `
    l_DEBUG_Timer = hitimer()
    PITS_CHART_IMAGE_CF2_Draw_Block3()
    g_DEBUG_PITSCharts_UpdateTime_Block3 = hitimer() - l_DEBUG_Timer
    `
    l_DEBUG_Timer = hitimer()
    PITS_CHART_IMAGE_CF2_Draw_Block4()
    g_DEBUG_PITSCharts_UpdateTime_Block4 = hitimer() - l_DEBUG_Timer
    `
    lib_CMNTS_Fill_Comment_Display_Array()
    `
  endif
  
  unlock pixels  
  `set current bitmap 0
  d3d_color 255, 255, 255, 255
  
  set current bitmap 0
  
  g_DEBUG_PITSCharts_UpdateTimeInMS = hitimer() - g_DEBUG_PITSCharts_UpdateTime_Start

endfunction

function PITS_CHART_IMAGE_CF2_Draw_Block1()

  local l_Block1Line1_TotalRange# as float
  local l_Block1Line2_TotalRange# as float
  local l_Block1Line3_TotalRange# as float
  
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float
  
  local l_Line1_TotalRange# as float
  local l_Line2_TotalRange# as float
  local l_Line3_TotalRange# as float
  local l_Line4_TotalRange# as float
  
  local l_Line1_UpperRange as integer
  local l_Line1_LowerRange as integer
  local l_Line2_UpperRange as integer
  local l_Line2_LowerRange as integer
  local l_Line3_UpperRange as integer
  local l_Line3_LowerRange as integer
  local l_Line4_UpperRange as integer
  local l_Line4_LowerRange as integer

  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

  if g_DATABASE_MEM_Total_Num_Records > 5
    if CHANNEL_ID_ChannelLinkIndex(13) > 0
      l_Line1_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(13) * 2) - 1 + 1) + 0.0
      l_Line1_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(13) * 2) - 1) + 0.0
      l_Line1_TotalRange# = l_Line1_UpperRange - l_Line1_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(14) > 0
      l_Line2_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(14) * 2) - 1 + 1) + 0.0
      l_Line2_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(14) * 2) - 1) + 0.0
      l_Line2_TotalRange# = l_Line2_UpperRange - l_Line2_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(15) > 0
      l_Line3_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(15) * 2) - 1 + 1) + 0.0
      l_Line3_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(15) * 2) - 1) + 0.0
      l_Line3_TotalRange# = l_Line3_UpperRange - l_Line3_LowerRange + 0.0
    endif
    
    if g_PITS_SCREEN_Block1_DisplayFormat = 4
    	if CHANNEL_ID_ChannelLinkIndex(16) > 0
      	l_Line4_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(16) * 2) - 1 + 1) + 0.0
      	l_Line4_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(16) * 2) - 1) + 0.0
      	l_Line4_TotalRange# = l_Line4_UpperRange - l_Line4_LowerRange + 0.0
    	endif
    endif
     
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    l_Chart_Start_ArrayPos = PITS_CHART_Get_First_Valid_Record_Array()

    l_DEBUG_Timer = hitimer()
    if image exist(c_CHT_PLOT_Img_Block1) = 1 then delete image c_CHT_PLOT_Img_Block1
    make image from memblock 1, 10
    
    MAKE IMAGE c_CHT_PLOT_Img_Block1, g_ENG_RTChart_Width, g_ENG_RTChart_Height
    DRAW TO IMAGE c_CHT_PLOT_Img_Block1
    
    paste image 1, 0, 0
    delete image 1
    g_DEBUG_PITSCharts_UpdateTime_Block1_Memblock = hitimer() - l_DEBUG_Timer

    `l_DEBUG_Timer = hitimer()
    `make bitmap from memblock 1, 10
    `set current bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block1_Memblock = hitimer() - l_DEBUG_Timer
    
    l_DEBUG_Timer = hitimer()
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (l_Chart_Start_ArrayPos) - (print_pixel_lp * g_ENGINE_PITS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_PITS_Chart_Time_Period_Adjust)
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 1
          
          `CHANNEL 1
          if CHANNEL_ID_ChannelLinkIndex(13) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(13), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(13), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line1_UpperRange, l_Line1_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 1)
          endif
              
          `CHANNEL 2
          if CHANNEL_ID_ChannelLinkIndex(14) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(14), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(14), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line2_UpperRange, l_Line2_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 2)
          endif 

          `CHANNEL 3
          if CHANNEL_ID_ChannelLinkIndex(15) > 0  
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(15), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(15), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line3_UpperRange, l_Line3_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 3)
          endif
            
          `CHANNEL 4
          if g_PITS_SCREEN_Block1_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(16) > 0  
            	p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(16), l_MEM_DB_Pos)
            	p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(16), l_MEM_DB_Pos2)
            	l_ratio# = (p_DataA_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	l_ratio# = (p_DataB_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line4_UpperRange, l_Line4_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 4)
          	endif
          endif
            
    next print_pixel_lp
    g_DEBUG_PITSCharts_UpdateTime_Block1_WriteData = hitimer() - l_DEBUG_Timer
  
    
    
  endif
  
endfunction


function PITS_CHART_IMAGE_CF2_Draw_Block2()

  local l_Block1Line1_TotalRange# as float
  local l_Block1Line2_TotalRange# as float
  local l_Block1Line3_TotalRange# as float
  
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float
  
  local l_Line1_TotalRange# as float
  local l_Line2_TotalRange# as float
  local l_Line3_TotalRange# as float
  local l_Line4_TotalRange# as float
  
  local l_Line1_UpperRange as integer
  local l_Line1_LowerRange as integer
  local l_Line2_UpperRange as integer
  local l_Line2_LowerRange as integer
  local l_Line3_UpperRange as integer
  local l_Line3_LowerRange as integer
  local l_Line4_UpperRange as integer
  local l_Line4_LowerRange as integer
  


  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

  if g_DATABASE_MEM_Total_Num_Records > 5
    if CHANNEL_ID_ChannelLinkIndex(17) > 0
      l_Line1_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(17) * 2) - 1 + 1) + 0.0
      l_Line1_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(17) * 2) - 1) + 0.0
      l_Line1_TotalRange# = l_Line1_UpperRange - l_Line1_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(18) > 0
      l_Line2_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(18) * 2) - 1 + 1) + 0.0
      l_Line2_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(18) * 2) - 1) + 0.0
      l_Line2_TotalRange# = l_Line2_UpperRange - l_Line2_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(19) > 0
      l_Line3_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(19) * 2) - 1 + 1) + 0.0
      l_Line3_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(19) * 2) - 1) + 0.0
      l_Line3_TotalRange# = l_Line3_UpperRange - l_Line3_LowerRange + 0.0
    endif
    
    if g_PITS_SCREEN_Block2_DisplayFormat = 4
    	if CHANNEL_ID_ChannelLinkIndex(20) > 0
      	l_Line4_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(20) * 2) - 1 + 1) + 0.0
      	l_Line4_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(20) * 2) - 1) + 0.0
      	l_Line4_TotalRange# = l_Line4_UpperRange - l_Line4_LowerRange + 0.0
    	endif
    endif
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    l_Chart_Start_ArrayPos = PITS_CHART_Get_First_Valid_Record_Array()

    l_DEBUG_Timer = hitimer()
    if image exist(c_CHT_PLOT_Img_Block2) = 1 then delete image c_CHT_PLOT_Img_Block2
    make image from memblock 1, 10
    
    MAKE IMAGE c_CHT_PLOT_Img_Block2, g_ENG_RTChart_Width, g_ENG_RTChart_Height
    DRAW TO IMAGE c_CHT_PLOT_Img_Block2
    
    paste image 1, 0, 0
    delete image 1
    g_DEBUG_PITSCharts_UpdateTime_Block2_Memblock = hitimer() - l_DEBUG_Timer

    `l_DEBUG_Timer = hitimer()
    `make bitmap from memblock 1, 10
    `set current bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block2_Memblock = hitimer() - l_DEBUG_Timer
    
    l_DEBUG_Timer = hitimer()
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (l_Chart_Start_ArrayPos) - (print_pixel_lp * g_ENGINE_PITS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_PITS_Chart_Time_Period_Adjust)
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 1
          
          `CHANNEL 1
          if CHANNEL_ID_ChannelLinkIndex(17) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(17), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(17), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line1_UpperRange, l_Line1_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 1)
          endif
              
          `CHANNEL 2
          if CHANNEL_ID_ChannelLinkIndex(18) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(18), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(18), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line2_UpperRange, l_Line2_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 2)
          endif 
          
          `CHANNEL 3
          if CHANNEL_ID_ChannelLinkIndex(19) > 0  
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(19), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(19), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line3_UpperRange, l_Line3_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 3)
          endif
          
          `CHANNEL 4
          if g_PITS_SCREEN_Block2_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(20) > 0  
            	p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(20), l_MEM_DB_Pos)
            	p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(20), l_MEM_DB_Pos2)
            	l_ratio# = (p_DataA_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	l_ratio# = (p_DataB_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line4_UpperRange, l_Line4_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 4)
          	endif
          endif
            
    next print_pixel_lp
    g_DEBUG_PITSCharts_UpdateTime_Block2_WriteData = hitimer() - l_DEBUG_Timer
  
    `l_DEBUG_Timer = hitimer()
    `get image c_CHT_PLOT_Img_Block2, 0, 0, bitmap width(1), bitmap height(1), 1
    `delete bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block2_GetImage = hitimer() - l_DEBUG_Timer
    
  endif
  
endfunction

function PITS_CHART_IMAGE_CF2_Draw_Block3()

  local l_Block1Line1_TotalRange# as float
  local l_Block1Line2_TotalRange# as float
  local l_Block1Line3_TotalRange# as float
  
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float
  
  local l_Line1_TotalRange# as float
  local l_Line2_TotalRange# as float
  local l_Line3_TotalRange# as float
  local l_Line4_TotalRange# as float
  
  local l_Line1_UpperRange as integer
  local l_Line1_LowerRange as integer
  local l_Line2_UpperRange as integer
  local l_Line2_LowerRange as integer
  local l_Line3_UpperRange as integer
  local l_Line3_LowerRange as integer
  local l_Line4_UpperRange as integer
  local l_Line4_LowerRange as integer
  


  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

  if g_DATABASE_MEM_Total_Num_Records > 5
    if CHANNEL_ID_ChannelLinkIndex(21) > 0
      l_Line1_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(21) * 2) - 1 + 1) + 0.0
      l_Line1_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(21) * 2) - 1) + 0.0
      l_Line1_TotalRange# = l_Line1_UpperRange - l_Line1_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(22) > 0
      l_Line2_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(22) * 2) - 1 + 1) + 0.0
      l_Line2_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(22) * 2) - 1) + 0.0
      l_Line2_TotalRange# = l_Line2_UpperRange - l_Line2_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(23) > 0
      l_Line3_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(23) * 2) - 1 + 1) + 0.0
      l_Line3_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(23) * 2) - 1) + 0.0
      l_Line3_TotalRange# = l_Line3_UpperRange - l_Line3_LowerRange + 0.0
    endif
    
    if g_PITS_SCREEN_Block3_DisplayFormat = 4
    	if CHANNEL_ID_ChannelLinkIndex(24) > 0
      	l_Line4_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(24) * 2) - 1 + 1) + 0.0
      	l_Line4_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(24) * 2) - 1) + 0.0
      	l_Line4_TotalRange# = l_Line4_UpperRange - l_Line4_LowerRange + 0.0
    	endif
    endif
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    l_Chart_Start_ArrayPos = PITS_CHART_Get_First_Valid_Record_Array()

    l_DEBUG_Timer = hitimer()
    if image exist(c_CHT_PLOT_Img_Block3) = 1 then delete image c_CHT_PLOT_Img_Block3
    make image from memblock 1, 10
    
    MAKE IMAGE c_CHT_PLOT_Img_Block3, g_ENG_RTChart_Width, g_ENG_RTChart_Height
    DRAW TO IMAGE c_CHT_PLOT_Img_Block3
    
    paste image 1, 0, 0
    delete image 1
    g_DEBUG_PITSCharts_UpdateTime_Block3_Memblock = hitimer() - l_DEBUG_Timer

    `l_DEBUG_Timer = hitimer()
    `make bitmap from memblock 1, 10
    `set current bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block3_Memblock = hitimer() - l_DEBUG_Timer
    
    l_DEBUG_Timer = hitimer()
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (l_Chart_Start_ArrayPos) - (print_pixel_lp * g_ENGINE_PITS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_PITS_Chart_Time_Period_Adjust)
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 1
          
          `CHANNEL 1
          if CHANNEL_ID_ChannelLinkIndex(21) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(21), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(21), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line1_UpperRange, l_Line1_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 1)
          endif
              
          `CHANNEL 2
          if CHANNEL_ID_ChannelLinkIndex(22) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(22), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(22), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line2_UpperRange, l_Line2_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 2)
          endif 
          
          `CHANNEL 3
          if CHANNEL_ID_ChannelLinkIndex(23) > 0  
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(23), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(23), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line3_UpperRange, l_Line3_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 3)
          endif
           
          `CHANNEL 4
          if g_PITS_SCREEN_Block3_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(24) > 0  
            	p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(24), l_MEM_DB_Pos)
            	p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(24), l_MEM_DB_Pos2)
            	l_ratio# = (p_DataA_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	l_ratio# = (p_DataB_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line4_UpperRange, l_Line4_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 4)
          	endif
          endif
            
    next print_pixel_lp
    g_DEBUG_PITSCharts_UpdateTime_Block3_WriteData = hitimer() - l_DEBUG_Timer
  
    `l_DEBUG_Timer = hitimer()
    `get image c_CHT_PLOT_Img_Block3, 0, 0, bitmap width(1), bitmap height(1), 1
    `delete bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block3_GetImage = hitimer() - l_DEBUG_Timer
    
  endif
  
endfunction

function PITS_CHART_IMAGE_CF2_Draw_Block4()

  local l_Block1Line1_TotalRange# as float
  local l_Block1Line2_TotalRange# as float
  local l_Block1Line3_TotalRange# as float
  
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float
  
  local l_Line1_TotalRange# as float
  local l_Line2_TotalRange# as float
  local l_Line3_TotalRange# as float
  local l_Line4_TotalRange# as float
  
  local l_Line1_UpperRange as integer
  local l_Line1_LowerRange as integer
  local l_Line2_UpperRange as integer
  local l_Line2_LowerRange as integer
  local l_Line3_UpperRange as integer
  local l_Line3_LowerRange as integer
  local l_Line4_UpperRange as integer
  local l_Line4_LowerRange as integer
  


  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

  if g_DATABASE_MEM_Total_Num_Records > 5
    if CHANNEL_ID_ChannelLinkIndex(25) > 0
      l_Line1_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(25) * 2) - 1 + 1) + 0.0
      l_Line1_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(25) * 2) - 1) + 0.0
      l_Line1_TotalRange# = l_Line1_UpperRange - l_Line1_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(26) > 0
      l_Line2_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(26) * 2) - 1 + 1) + 0.0
      l_Line2_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(26) * 2) - 1) + 0.0
      l_Line2_TotalRange# = l_Line2_UpperRange - l_Line2_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(27) > 0
      l_Line3_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(27) * 2) - 1 + 1) + 0.0
      l_Line3_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(27) * 2) - 1) + 0.0
      l_Line3_TotalRange# = l_Line3_UpperRange - l_Line3_LowerRange + 0.0
    endif
    
    if g_PITS_SCREEN_Block4_DisplayFormat = 4
    	if CHANNEL_ID_ChannelLinkIndex(28) > 0
      	l_Line4_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(28) * 2) - 1 + 1) + 0.0
      	l_Line4_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(28) * 2) - 1) + 0.0
      	l_Line4_TotalRange# = l_Line4_UpperRange - l_Line4_LowerRange + 0.0
    	endif
    endif
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    l_Chart_Start_ArrayPos = PITS_CHART_Get_First_Valid_Record_Array()

    l_DEBUG_Timer = hitimer()
    if image exist(c_CHT_PLOT_Img_Block4) = 1 then delete image c_CHT_PLOT_Img_Block4
    make image from memblock 1, 10
    
    MAKE IMAGE c_CHT_PLOT_Img_Block4, g_ENG_RTChart_Width, g_ENG_RTChart_Height
    DRAW TO IMAGE c_CHT_PLOT_Img_Block4
    
    paste image 1, 0, 0
    delete image 1
    
    `If Time <> Now (not plotting from latest DB record) then add a hashed area to the screen to highlight this.
      if g_PITS_CHART_Scroll_Array_Offset <> 0 and g_ENG_RTPRNT2IMG_CTRLFLOW = -1  
        paste image c_PLOT_BKGD_TimeIsNotNow_HashedArea, 283, 0
      endif
    
    g_DEBUG_PITSCharts_UpdateTime_Block4_Memblock = hitimer() - l_DEBUG_Timer

    `l_DEBUG_Timer = hitimer()
    `make bitmap from memblock 1, 10
    `set current bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block4_Memblock = hitimer() - l_DEBUG_Timer
    
  
 
    l_DEBUG_Timer = hitimer()
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (l_Chart_Start_ArrayPos) - (print_pixel_lp * g_ENGINE_PITS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_PITS_Chart_Time_Period_Adjust)
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 1
          
          `CHANNEL 1
          if CHANNEL_ID_ChannelLinkIndex(25) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(25), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(25), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line1_UpperRange, l_Line1_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 1)
          endif
              
          `CHANNEL 2
          if CHANNEL_ID_ChannelLinkIndex(26) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(26), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(26), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line2_UpperRange, l_Line2_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 2)
          endif 
          
          `CHANNEL 3
          if CHANNEL_ID_ChannelLinkIndex(27) > 0  
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(27), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(27), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line3_UpperRange, l_Line3_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 3)
          endif
          
          `CHANNEL 4
          if g_PITS_SCREEN_Block4_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(28) > 0
            	p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(28), l_MEM_DB_Pos)
            	p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(28), l_MEM_DB_Pos2)
            	l_ratio# = (p_DataA_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	l_ratio# = (p_DataB_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line4_UpperRange, l_Line4_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 4)
          	endif
          endif
            
    next print_pixel_lp
    g_DEBUG_PITSCharts_UpdateTime_Block4_WriteData = hitimer() - l_DEBUG_Timer
  
    `l_DEBUG_Timer = hitimer()
    `get image c_CHT_PLOT_Img_Block4, 0, 0, bitmap width(1), bitmap height(1), 1
    `delete bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block4_GetImage = hitimer() - l_DEBUG_Timer
    
  endif
  
endfunction


function _______RT_GRAPHICS_SAVE_TO_IMAGE___________________________________askdhjiur8374()
endfunction


function ENGINE_SAVE_TO_IMAGE_CF2_PITS()

  local l_DebugTimer as integer

  `This function has to recieve a start and end array position and then create image files of the charts/screens
  `to be saved as a composite image of all the joined together screen images.


  `Note that CF1 and CF2 use different arrays, so need different function calls.

  g_DEBUG_PITSCharts_UpdateTime_Start = hitimer()

  
  lock pixels
  

  if g_ENGINE_CoreFunctionType = 2
    `
    l_DEBUG_Timer = hitimer()
    PITS_CHART_IMAGE_CF2_Draw_Block1()
    g_DEBUG_PITSCharts_UpdateTime_Block1 = hitimer() - l_DEBUG_Timer
    `
    l_DEBUG_Timer = hitimer()
    PITS_CHART_IMAGE_CF2_Draw_Block2()
    g_DEBUG_PITSCharts_UpdateTime_Block2 = hitimer() - l_DEBUG_Timer
    `
    l_DEBUG_Timer = hitimer()
    PITS_CHART_IMAGE_CF2_Draw_Block3()
    g_DEBUG_PITSCharts_UpdateTime_Block3 = hitimer() - l_DEBUG_Timer
    `
    l_DEBUG_Timer = hitimer()
    PITS_CHART_IMAGE_CF2_Draw_Block4()
    g_DEBUG_PITSCharts_UpdateTime_Block4 = hitimer() - l_DEBUG_Timer
    `
    lib_CMNTS_Fill_Comment_Display_Array()
    `
  endif
  
  unlock pixels  
  `set current bitmap 0
  d3d_color 255, 255, 255, 255
  
  set current bitmap 0
  
  g_DEBUG_PITSCharts_UpdateTimeInMS = hitimer() - g_DEBUG_PITSCharts_UpdateTime_Start

endfunction

function SAVE_TO_IMAGE_CF2_PITS_Draw_Block1()

  local l_Block1Line1_TotalRange# as float
  local l_Block1Line2_TotalRange# as float
  local l_Block1Line3_TotalRange# as float
  
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float
  
  local l_Line1_TotalRange# as float
  local l_Line2_TotalRange# as float
  local l_Line3_TotalRange# as float
  local l_Line4_TotalRange# as float
  
  local l_Line1_UpperRange as integer
  local l_Line1_LowerRange as integer
  local l_Line2_UpperRange as integer
  local l_Line2_LowerRange as integer
  local l_Line3_UpperRange as integer
  local l_Line3_LowerRange as integer
  local l_Line4_UpperRange as integer
  local l_Line4_LowerRange as integer

  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

  if g_DATABASE_MEM_Total_Num_Records > 5
    if CHANNEL_ID_ChannelLinkIndex(13) > 0
      l_Line1_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(13) * 2) - 1 + 1) + 0.0
      l_Line1_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(13) * 2) - 1) + 0.0
      l_Line1_TotalRange# = l_Line1_UpperRange - l_Line1_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(14) > 0
      l_Line2_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(14) * 2) - 1 + 1) + 0.0
      l_Line2_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(14) * 2) - 1) + 0.0
      l_Line2_TotalRange# = l_Line2_UpperRange - l_Line2_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(15) > 0
      l_Line3_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(15) * 2) - 1 + 1) + 0.0
      l_Line3_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(15) * 2) - 1) + 0.0
      l_Line3_TotalRange# = l_Line3_UpperRange - l_Line3_LowerRange + 0.0
    endif
    
    if g_PITS_SCREEN_Block1_DisplayFormat = 4
    	if CHANNEL_ID_ChannelLinkIndex(16) > 0
      	l_Line4_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(16) * 2) - 1 + 1) + 0.0
      	l_Line4_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(16) * 2) - 1) + 0.0
      	l_Line4_TotalRange# = l_Line4_UpperRange - l_Line4_LowerRange + 0.0
    	endif
    endif
     
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    l_Chart_Start_ArrayPos = PITS_CHART_Get_First_Valid_Record_Array()

    l_DEBUG_Timer = hitimer()
    if image exist(c_CHT_PLOT_Img_Block1) = 1 then delete image c_CHT_PLOT_Img_Block1
    make image from memblock 1, 10
    
    MAKE IMAGE c_CHT_PLOT_Img_Block1, g_ENG_RTChart_Width, g_ENG_RTChart_Height
    DRAW TO IMAGE c_CHT_PLOT_Img_Block1
    
    paste image 1, 0, 0
    delete image 1
    g_DEBUG_PITSCharts_UpdateTime_Block1_Memblock = hitimer() - l_DEBUG_Timer

    `l_DEBUG_Timer = hitimer()
    `make bitmap from memblock 1, 10
    `set current bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block1_Memblock = hitimer() - l_DEBUG_Timer
    
    l_DEBUG_Timer = hitimer()
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (l_Chart_Start_ArrayPos) - (print_pixel_lp * g_ENGINE_PITS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_PITS_Chart_Time_Period_Adjust)
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 1
          
          `CHANNEL 1
          if CHANNEL_ID_ChannelLinkIndex(13) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(13), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(13), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line1_UpperRange, l_Line1_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 1)
          endif
              
          `CHANNEL 2
          if CHANNEL_ID_ChannelLinkIndex(14) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(14), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(14), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line2_UpperRange, l_Line2_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 2)
          endif 

          `CHANNEL 3
          if CHANNEL_ID_ChannelLinkIndex(15) > 0  
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(15), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(15), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line3_UpperRange, l_Line3_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 3)
          endif
            
          `CHANNEL 4
          if g_PITS_SCREEN_Block1_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(16) > 0  
            	p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(16), l_MEM_DB_Pos)
            	p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(16), l_MEM_DB_Pos2)
            	l_ratio# = (p_DataA_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	l_ratio# = (p_DataB_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line4_UpperRange, l_Line4_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 4)
          	endif
          endif
            
    next print_pixel_lp
    g_DEBUG_PITSCharts_UpdateTime_Block1_WriteData = hitimer() - l_DEBUG_Timer
  
    
    
  endif
  
endfunction


function SAVE_TO_IMAGE_CF2_PITS_Draw_Block2()

  local l_Block1Line1_TotalRange# as float
  local l_Block1Line2_TotalRange# as float
  local l_Block1Line3_TotalRange# as float
  
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float
  
  local l_Line1_TotalRange# as float
  local l_Line2_TotalRange# as float
  local l_Line3_TotalRange# as float
  local l_Line4_TotalRange# as float
  
  local l_Line1_UpperRange as integer
  local l_Line1_LowerRange as integer
  local l_Line2_UpperRange as integer
  local l_Line2_LowerRange as integer
  local l_Line3_UpperRange as integer
  local l_Line3_LowerRange as integer
  local l_Line4_UpperRange as integer
  local l_Line4_LowerRange as integer
  


  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

  if g_DATABASE_MEM_Total_Num_Records > 5
    if CHANNEL_ID_ChannelLinkIndex(17) > 0
      l_Line1_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(17) * 2) - 1 + 1) + 0.0
      l_Line1_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(17) * 2) - 1) + 0.0
      l_Line1_TotalRange# = l_Line1_UpperRange - l_Line1_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(18) > 0
      l_Line2_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(18) * 2) - 1 + 1) + 0.0
      l_Line2_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(18) * 2) - 1) + 0.0
      l_Line2_TotalRange# = l_Line2_UpperRange - l_Line2_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(19) > 0
      l_Line3_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(19) * 2) - 1 + 1) + 0.0
      l_Line3_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(19) * 2) - 1) + 0.0
      l_Line3_TotalRange# = l_Line3_UpperRange - l_Line3_LowerRange + 0.0
    endif
    
    if g_PITS_SCREEN_Block2_DisplayFormat = 4
    	if CHANNEL_ID_ChannelLinkIndex(20) > 0
      	l_Line4_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(20) * 2) - 1 + 1) + 0.0
      	l_Line4_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(20) * 2) - 1) + 0.0
      	l_Line4_TotalRange# = l_Line4_UpperRange - l_Line4_LowerRange + 0.0
    	endif
    endif
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    l_Chart_Start_ArrayPos = PITS_CHART_Get_First_Valid_Record_Array()

    l_DEBUG_Timer = hitimer()
    if image exist(c_CHT_PLOT_Img_Block2) = 1 then delete image c_CHT_PLOT_Img_Block2
    make image from memblock 1, 10
    
    MAKE IMAGE c_CHT_PLOT_Img_Block2, g_ENG_RTChart_Width, g_ENG_RTChart_Height
    DRAW TO IMAGE c_CHT_PLOT_Img_Block2
    
    paste image 1, 0, 0
    delete image 1
    g_DEBUG_PITSCharts_UpdateTime_Block2_Memblock = hitimer() - l_DEBUG_Timer

    `l_DEBUG_Timer = hitimer()
    `make bitmap from memblock 1, 10
    `set current bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block2_Memblock = hitimer() - l_DEBUG_Timer
    
    l_DEBUG_Timer = hitimer()
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (l_Chart_Start_ArrayPos) - (print_pixel_lp * g_ENGINE_PITS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_PITS_Chart_Time_Period_Adjust)
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 1
          
          `CHANNEL 1
          if CHANNEL_ID_ChannelLinkIndex(17) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(17), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(17), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line1_UpperRange, l_Line1_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 1)
          endif
              
          `CHANNEL 2
          if CHANNEL_ID_ChannelLinkIndex(18) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(18), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(18), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line2_UpperRange, l_Line2_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 2)
          endif 
          
          `CHANNEL 3
          if CHANNEL_ID_ChannelLinkIndex(19) > 0  
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(19), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(19), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line3_UpperRange, l_Line3_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 3)
          endif
          
          `CHANNEL 4
          if g_PITS_SCREEN_Block2_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(20) > 0  
            	p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(20), l_MEM_DB_Pos)
            	p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(20), l_MEM_DB_Pos2)
            	l_ratio# = (p_DataA_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	l_ratio# = (p_DataB_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line4_UpperRange, l_Line4_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 4)
          	endif
          endif
            
    next print_pixel_lp
    g_DEBUG_PITSCharts_UpdateTime_Block2_WriteData = hitimer() - l_DEBUG_Timer
  
    `l_DEBUG_Timer = hitimer()
    `get image c_CHT_PLOT_Img_Block2, 0, 0, bitmap width(1), bitmap height(1), 1
    `delete bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block2_GetImage = hitimer() - l_DEBUG_Timer
    
  endif
  
endfunction

function SAVE_TO_IMAGE_CF2_PITS_Draw_Block3()

  local l_Block1Line1_TotalRange# as float
  local l_Block1Line2_TotalRange# as float
  local l_Block1Line3_TotalRange# as float
  
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float
  
  local l_Line1_TotalRange# as float
  local l_Line2_TotalRange# as float
  local l_Line3_TotalRange# as float
  local l_Line4_TotalRange# as float
  
  local l_Line1_UpperRange as integer
  local l_Line1_LowerRange as integer
  local l_Line2_UpperRange as integer
  local l_Line2_LowerRange as integer
  local l_Line3_UpperRange as integer
  local l_Line3_LowerRange as integer
  local l_Line4_UpperRange as integer
  local l_Line4_LowerRange as integer
  


  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

  if g_DATABASE_MEM_Total_Num_Records > 5
    if CHANNEL_ID_ChannelLinkIndex(21) > 0
      l_Line1_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(21) * 2) - 1 + 1) + 0.0
      l_Line1_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(21) * 2) - 1) + 0.0
      l_Line1_TotalRange# = l_Line1_UpperRange - l_Line1_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(22) > 0
      l_Line2_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(22) * 2) - 1 + 1) + 0.0
      l_Line2_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(22) * 2) - 1) + 0.0
      l_Line2_TotalRange# = l_Line2_UpperRange - l_Line2_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(23) > 0
      l_Line3_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(23) * 2) - 1 + 1) + 0.0
      l_Line3_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(23) * 2) - 1) + 0.0
      l_Line3_TotalRange# = l_Line3_UpperRange - l_Line3_LowerRange + 0.0
    endif
    
    if g_PITS_SCREEN_Block3_DisplayFormat = 4
    	if CHANNEL_ID_ChannelLinkIndex(24) > 0
      	l_Line4_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(24) * 2) - 1 + 1) + 0.0
      	l_Line4_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(24) * 2) - 1) + 0.0
      	l_Line4_TotalRange# = l_Line4_UpperRange - l_Line4_LowerRange + 0.0
    	endif
    endif
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    l_Chart_Start_ArrayPos = PITS_CHART_Get_First_Valid_Record_Array()

    l_DEBUG_Timer = hitimer()
    if image exist(c_CHT_PLOT_Img_Block3) = 1 then delete image c_CHT_PLOT_Img_Block3
    make image from memblock 1, 10
    
    MAKE IMAGE c_CHT_PLOT_Img_Block3, g_ENG_RTChart_Width, g_ENG_RTChart_Height
    DRAW TO IMAGE c_CHT_PLOT_Img_Block3
    
    paste image 1, 0, 0
    delete image 1
    g_DEBUG_PITSCharts_UpdateTime_Block3_Memblock = hitimer() - l_DEBUG_Timer

    `l_DEBUG_Timer = hitimer()
    `make bitmap from memblock 1, 10
    `set current bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block3_Memblock = hitimer() - l_DEBUG_Timer
    
    l_DEBUG_Timer = hitimer()
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (l_Chart_Start_ArrayPos) - (print_pixel_lp * g_ENGINE_PITS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_PITS_Chart_Time_Period_Adjust)
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 1
          
          `CHANNEL 1
          if CHANNEL_ID_ChannelLinkIndex(21) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(21), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(21), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line1_UpperRange, l_Line1_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 1)
          endif
              
          `CHANNEL 2
          if CHANNEL_ID_ChannelLinkIndex(22) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(22), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(22), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line2_UpperRange, l_Line2_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 2)
          endif 
          
          `CHANNEL 3
          if CHANNEL_ID_ChannelLinkIndex(23) > 0  
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(23), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(23), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line3_UpperRange, l_Line3_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 3)
          endif
           
          `CHANNEL 4
          if g_PITS_SCREEN_Block3_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(24) > 0  
            	p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(24), l_MEM_DB_Pos)
            	p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(24), l_MEM_DB_Pos2)
            	l_ratio# = (p_DataA_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	l_ratio# = (p_DataB_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line4_UpperRange, l_Line4_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 4)
          	endif
          endif
            
    next print_pixel_lp
    g_DEBUG_PITSCharts_UpdateTime_Block3_WriteData = hitimer() - l_DEBUG_Timer
  
    `l_DEBUG_Timer = hitimer()
    `get image c_CHT_PLOT_Img_Block3, 0, 0, bitmap width(1), bitmap height(1), 1
    `delete bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block3_GetImage = hitimer() - l_DEBUG_Timer
    
  endif
  
endfunction

function SAVE_TO_IMAGE_CF2_PITS_Draw_Block4()

  local l_Block1Line1_TotalRange# as float
  local l_Block1Line2_TotalRange# as float
  local l_Block1Line3_TotalRange# as float
  
  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float
  
  local l_Line1_TotalRange# as float
  local l_Line2_TotalRange# as float
  local l_Line3_TotalRange# as float
  local l_Line4_TotalRange# as float
  
  local l_Line1_UpperRange as integer
  local l_Line1_LowerRange as integer
  local l_Line2_UpperRange as integer
  local l_Line2_LowerRange as integer
  local l_Line3_UpperRange as integer
  local l_Line3_LowerRange as integer
  local l_Line4_UpperRange as integer
  local l_Line4_LowerRange as integer
  


  ` Line Theory
  ` a = (Value - Lower Range)
  ` b = (Upper Range - Lower Range)
  ` ratio = a/b
  ` x = an integer of ratio * chart_width_constant i.e 193
  ` pixel position = x + chart position (chart1 = 10, 2=276, 3=483)
  

  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.

  if g_DATABASE_MEM_Total_Num_Records > 5
    if CHANNEL_ID_ChannelLinkIndex(25) > 0
      l_Line1_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(25) * 2) - 1 + 1) + 0.0
      l_Line1_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(25) * 2) - 1) + 0.0
      l_Line1_TotalRange# = l_Line1_UpperRange - l_Line1_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(26) > 0
      l_Line2_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(26) * 2) - 1 + 1) + 0.0
      l_Line2_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(26) * 2) - 1) + 0.0
      l_Line2_TotalRange# = l_Line2_UpperRange - l_Line2_LowerRange + 0.0
    endif
    if CHANNEL_ID_ChannelLinkIndex(27) > 0
      l_Line3_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(27) * 2) - 1 + 1) + 0.0
      l_Line3_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(27) * 2) - 1) + 0.0
      l_Line3_TotalRange# = l_Line3_UpperRange - l_Line3_LowerRange + 0.0
    endif
    
    if g_PITS_SCREEN_Block4_DisplayFormat = 4
    	if CHANNEL_ID_ChannelLinkIndex(28) > 0
      	l_Line4_UpperRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(28) * 2) - 1 + 1) + 0.0
      	l_Line4_LowerRange = CHANNEL_ID_ChannelRanges((CHANNEL_ID_ChannelLinkIndex(28) * 2) - 1) + 0.0
      	l_Line4_TotalRange# = l_Line4_UpperRange - l_Line4_LowerRange + 0.0
    	endif
    endif
    
    `**** Determine the start array position relative to the time period selected at this point in the code.
    l_Chart_Start_ArrayPos = PITS_CHART_Get_First_Valid_Record_Array()

    l_DEBUG_Timer = hitimer()
    if image exist(c_CHT_PLOT_Img_Block4) = 1 then delete image c_CHT_PLOT_Img_Block4
    make image from memblock 1, 10
    
    MAKE IMAGE c_CHT_PLOT_Img_Block4, g_ENG_RTChart_Width, g_ENG_RTChart_Height
    DRAW TO IMAGE c_CHT_PLOT_Img_Block4
    
    paste image 1, 0, 0
    delete image 1
    
    `If Time <> Now (not plotting from latest DB record) then add a hashed area to the screen to highlight this.
      if g_PITS_CHART_Scroll_Array_Offset <> 0 and g_ENG_RTPRNT2IMG_CTRLFLOW = -1  
        paste image c_PLOT_BKGD_TimeIsNotNow_HashedArea, 283, 0
      endif
    
    g_DEBUG_PITSCharts_UpdateTime_Block4_Memblock = hitimer() - l_DEBUG_Timer

    `l_DEBUG_Timer = hitimer()
    `make bitmap from memblock 1, 10
    `set current bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block4_Memblock = hitimer() - l_DEBUG_Timer
    
  
 
    l_DEBUG_Timer = hitimer()
    for print_pixel_lp = 0 to 450

        `DRILL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (l_Chart_Start_ArrayPos) - (print_pixel_lp * g_ENGINE_PITS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_PITS_Chart_Time_Period_Adjust)
 
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        `BLOCK 1
          
          `CHANNEL 1
          if CHANNEL_ID_ChannelLinkIndex(25) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(25), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(25), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line1_LowerRange) / l_Line1_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line1_UpperRange, l_Line1_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 1)
          endif
              
          `CHANNEL 2
          if CHANNEL_ID_ChannelLinkIndex(26) > 0
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(26), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(26), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line2_LowerRange) / l_Line2_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line2_UpperRange, l_Line2_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 2)
          endif 
          
          `CHANNEL 3
          if CHANNEL_ID_ChannelLinkIndex(27) > 0  
            p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(27), l_MEM_DB_Pos)
            p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(27), l_MEM_DB_Pos2)
            l_ratio# = (p_DataA_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            l_ratio# = (p_DataB_Val# - l_Line3_LowerRange) / l_Line3_TotalRange#
            X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line3_UpperRange, l_Line3_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 3)
          endif
          
          `CHANNEL 4
          if g_PITS_SCREEN_Block4_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(28) > 0
            	p_DataA_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(28), l_MEM_DB_Pos)
            	p_DataB_Val# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(28), l_MEM_DB_Pos2)
            	l_ratio# = (p_DataA_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_A = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	l_ratio# = (p_DataB_Val# - l_Line4_LowerRange) / l_Line4_TotalRange#
            	X_POSITION_B = int((l_ratio# * g_N_Chart_Width) + 0.5)
            	lib_PLOT_CHART_Format_Line(X_POSITION_A, X_POSITION_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, l_Line4_UpperRange, l_Line4_LowerRange, g_N_Block1_MinX, g_N_Block1_MaxX, 4)
          	endif
          endif
            
    next print_pixel_lp
    g_DEBUG_PITSCharts_UpdateTime_Block4_WriteData = hitimer() - l_DEBUG_Timer
  
    `l_DEBUG_Timer = hitimer()
    `get image c_CHT_PLOT_Img_Block4, 0, 0, bitmap width(1), bitmap height(1), 1
    `delete bitmap 1
    `g_DEBUG_PITSCharts_UpdateTime_Block4_GetImage = hitimer() - l_DEBUG_Timer
    
  endif
  
endfunction






function _______RT_GRAPHICS_DISPLAY_CoreFunc1_Viewer________________________jifftjuf63()
endfunction

function lib_STARTUP_CoreFunctionType1_ViewerOnly()

  `Create/Load Test Data - Option 1 Creates from the database file so compile and run (1) first
  `                        Option 2 Loads to the array.
  `Delete / Hash this out for release compile
  `lib_FakeData_COPY_PUSH_Data(2)

  if g_ENGINE_Screen_Resolution = 1
    g_BlockAll_Mouse_MinY = 197
    g_BlockAll_Mouse_MaxY = 647
    g_Block1_Mouse_MinX = 10
    g_Block1_Mouse_MaxX = 311
    g_Block2_Mouse_MinX = 384
    g_Block2_Mouse_MaxX = 685
    g_Block3_Mouse_MinX = 699
    g_Block3_Mouse_MaxX = 1000
    g_Block4_Mouse_MinX = 1014
    g_Block4_Mouse_MaxX = 1315
  else
    g_BlockAll_Mouse_MinY = 197
    g_BlockAll_Mouse_MaxY = 647
    g_Block1_Mouse_MinX = 10
    g_Block1_Mouse_MaxX = 203
    g_Block2_Mouse_MinX = 276
    g_Block2_Mouse_MaxX = 469
    g_Block3_Mouse_MinX = 483
    g_Block3_Mouse_MaxX = 676
    g_Block4_Mouse_MinX = 687
    g_Block4_Mouse_MaxX = 880
  endif
  
  Lib_Disp_RT_SET_ScreenPos_Colour_Vars()
  `LOAD_PLOT_Local_RangesData()

  ENGINE_DS_CHART_IMAGE_Creation()

endfunction


function DISP_RT_CF1_CHART_Infobox()

  local l_DataView_ArrPos as integer
  
  `SHOW THE DATA AT THE MOUSE POSITION ON EACH CHART
    `Check whether the mouse is over any chart, if it is then wait for a mouse click then
    `turn on the toggle to display the values. If the mouse is not over a chart then turn
    `the toggle off again. - g_PLOTCHART_display_values_click_toggle
    if g_RANGES_Chart_Selected_Num = -1
      if g_PLOTCHART_display_values_click_toggle = -1
        if mousey() > g_BlockAll_Mouse_MinY and mousey() < g_BlockAll_Mouse_MaxY
          if mousex() > g_N_Block1_MinX and mousex() < g_Block1_Mouse_MaxX
            if mouseclick() = 1 and mouse_click(1) = -1
              mouse_click(1) = 1
              g_PLOTCHART_display_values_click_toggle = 1
            endif  
          endif
          if mousex() > g_N_Block2_MinX and mousex() < g_Block2_Mouse_MaxX
            if mouseclick() = 1 and mouse_click(1) = -1
              mouse_click(1) = 1
              g_PLOTCHART_display_values_click_toggle = 1
            endif 
          endif
          if mousex() > g_N_Block3_MinX and mousex() < g_Block3_Mouse_MaxX
            if mouseclick() = 1 and mouse_click(1) = -1
              mouse_click(1) = 1
              g_PLOTCHART_display_values_click_toggle = 1
            endif
          endif
        endif
      else
        if mousey() > g_BlockAll_Mouse_MinY and mousey() < g_BlockAll_Mouse_MaxY
          if mousex() > g_Block3_Mouse_MaxX
            g_PLOTCHART_display_values_click_toggle = -1
          endif
        else
          g_PLOTCHART_display_values_click_toggle = -1
        endif
        if mouseclick() = 1 and mouse_click(1) = -1
          mouse_click(1) = 1
          g_PLOTCHART_display_values_click_toggle = -1
        endif
      endif
    endif
    
    `CHART DATA ON
    if g_PLOTCHART_display_values_click_toggle = 1
      g_DS_CHART_PrintOffsetReset = timer() + c_DS_CHART_PrintOffsetReset
      if mousey() > g_BlockAll_Mouse_MinY and mousey() < g_BlockAll_Mouse_MaxY
        `Array position of the data at the mouse position
        l_DataView_ArrPos = (g_DS_CHART_Scroll_Array_Offset) + (mousey() - g_BlockAll_Mouse_MinY)
        if l_DataView_ArrPos < 0
          l_DataView_ArrPos = 0
        endif
        if l_DataView_ArrPos > c_SMod_RTDis_DB_TtlRecs
          l_DataView_ArrPos = c_SMod_RTDis_DB_TtlRecs
        endif    
        `l_DataView_ArrPos = (g_DATABASE_MEM_Total_Num_Records - g_DS_CHART_Scroll_Array_Offset)- ((mousey() - 197) * g_ENGINE_DS_Chart_Time_Period_Adjust)
        
          `Chart 1 - ROP, WOB, HKLD
          if mousex() > 0 and mousex() < g_Block1_Mouse_MaxX : `Note chart starts at 9, not 0, but its annoying when set to 9
            if g_ENGINE_Alpha_Available = 1
              d3d_line 10, mousey()-1, g_Block1_Mouse_MaxX, mousey()-1, RGB(100,255,255,255)
              d3d_line 10, mousey()+1, g_Block1_Mouse_MaxX, mousey()+1, RGB(100,255,255,255)
            endif
            d3d_line 10, mousey(), g_Block1_Mouse_MaxX, mousey(), g_ENGINE_COLOUR_Black

              `Display data box coordinates
              `if g_DS_MAGNIFYER_Toggle = 1
              `  l_Chart_Values_X = sprite x(c_SPRITE_MAGNIFYING_GLASS_Bkgrd) + sprite width(c_SPRITE_MAGNIFYING_GLASS_Bkgrd)
              `  l_Chart_Values_Y = mousey() - (sprite height(c_SPRITE_MAGNIFYING_GLASS_Bkgrd)/2)
              `else
                l_Chart_Values_X = g_Block1_Mouse_MaxX
                l_Chart_Values_Y = mousey()
              `endif
              
            paste sprite c_SPRITE_DS_Chart_Values, l_Chart_Values_X, l_Chart_Values_Y
            
              if VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Time$ <> ""
                if g_ENGINE_SwapDayMonthFormat = 1
                  l_date$ = right$(left$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Date$, 5), 2) + "/" + left$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Date$, 2)
                else
                  l_date$ = left$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Date$, 5)
                endif
                l_time1$ = VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Time$ + " (" + l_date$ + ")"
                l_bitHP$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Hole_Depth#, 1)
                l_bitDP$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Bit_Depth#, 1)
                l_data1$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).ROP#, 1)
                l_data2$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).WOB#, 1)
                l_data3$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Hookload, 0)
              else
                l_time1$ = "No Data"
                l_bitHP$ = "No Data"
                l_bitDP$ = "No Data"
                l_data1$ = "No Data"
                l_data2$ = "No Data"
                l_data3$ = "No Data"
              endif
              
            d3d_starttext
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 10, 0, "Time", g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 30, 0, "Hole Depth", g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 50, 0, "Bit Depth", g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 70, 0, "ROP", g_Block1_Line1_Colour
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 90, 0, "WOB", g_Block1_Line2_Colour
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 110, 0, "HKLD", g_Block1_Line3_Colour
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 10, 0, ": " + l_time1$, g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 30, 0, ": " + l_bitHP$, g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 50, 0, ": " + l_bitDP$, g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 70, 0, ": " + l_data1$, g_Block1_Line1_Colour
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 90, 0, ": " + l_data2$, g_Block1_Line2_Colour
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 110, 0, ": " + l_data3$, g_Block1_Line3_Colour
            d3d_endtext
          endif
          
          `Chart 2 - RPM, TT, Block Pos
          if mousex() > g_Block2_Mouse_MinX and mousex() < g_Block2_Mouse_MaxX
            if g_ENGINE_Alpha_Available = 1
              d3d_line g_Block2_Mouse_MinX, mousey()-1, g_Block2_Mouse_MaxX, mousey()-1, RGB(100,255,255,255)
              d3d_line g_Block2_Mouse_MinX, mousey()+1, g_Block2_Mouse_MaxX, mousey()+1, RGB(100,255,255,255)
            endif
            d3d_line g_Block2_Mouse_MinX, mousey(), g_Block2_Mouse_MaxX, mousey(), g_ENGINE_COLOUR_Black
            
              `Display data box coordinates
              `if g_DS_MAGNIFYER_Toggle = 1
              `  l_Chart_Values_X = sprite x(c_SPRITE_MAGNIFYING_GLASS_Bkgrd) + sprite width(c_SPRITE_MAGNIFYING_GLASS_Bkgrd)
              `  l_Chart_Values_Y = mousey() - (sprite height(c_SPRITE_MAGNIFYING_GLASS_Bkgrd)/2)
              `else
                l_Chart_Values_X = g_Block2_Mouse_MaxX
                l_Chart_Values_Y = mousey()
              `endif
            
            paste sprite c_SPRITE_DS_Chart_Values, l_Chart_Values_X, l_Chart_Values_Y
            
              if VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Time$ <> ""
                if g_ENGINE_SwapDayMonthFormat = 1
                  l_date$ = right$(left$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Date$, 5), 2) + "/" + left$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Date$, 2)
                else
                  l_date$ = left$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Date$, 5)
                endif
                l_time1$ = VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Time$ + " (" + l_date$ + ")"
                l_bitHP$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Hole_Depth#, 1)
                l_bitDP$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Bit_Depth#, 1)
                l_data1$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).RPM, 0)
                l_data2$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).TripTank#, 1)
                l_data3$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).BlockPosition#, 1)
              else
                l_time1$ = "No Data"
                l_bitHP$ = "No Data"
                l_bitDP$ = "No Data"
                l_data1$ = "No Data"
                l_data2$ = "No Data"
                l_data3$ = "No Data"
              endif
              
            d3d_starttext
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 10, 0, "Time", g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 30, 0, "Hole Depth", g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 50, 0, "Bit Depth", g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 70, 0, "RPM", g_Block1_Line1_Colour
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 90, 0, "TT", g_Block1_Line2_Colour
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 110, 0, "Block", g_Block1_Line3_Colour
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 10, 0, ": " + l_time1$, g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 30, 0, ": " + l_bitHP$, g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 50, 0, ": " + l_bitDP$, g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 70, 0, ": " + l_data1$, g_Block1_Line1_Colour
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 90, 0, ": " + l_data2$, g_Block1_Line2_Colour
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 110, 0, ": " + l_data3$, g_Block1_Line3_Colour
            d3d_endtext
          endif    
          
          `Chart 3 - PVT, SPP, Flow IN
          if mousex() > g_Block3_Mouse_MinX and mousex() < g_Block3_Mouse_MaxX
          
            if g_ENGINE_Alpha_Available = 1
              d3d_line g_Block3_Mouse_MinX, mousey()-1, g_Block3_Mouse_MaxX, mousey()-1, RGB(100,255,255,255)
              d3d_line g_Block3_Mouse_MinX, mousey()+1, g_Block3_Mouse_MaxX, mousey()+1, RGB(100,255,255,255)
            endif
            d3d_line g_Block3_Mouse_MinX, mousey(), g_Block3_Mouse_MaxX, mousey(), g_ENGINE_COLOUR_Black
            
            `Display data box coordinates
            `if g_DS_MAGNIFYER_Toggle = 1
            `  l_Chart_Values_X = sprite x(c_SPRITE_MAGNIFYING_GLASS_Bkgrd) + sprite width(c_SPRITE_MAGNIFYING_GLASS_Bkgrd)
            `  l_Chart_Values_Y = mousey() - (sprite height(c_SPRITE_MAGNIFYING_GLASS_Bkgrd)/2)
            `else
              l_Chart_Values_X = g_Block3_Mouse_MaxX
              l_Chart_Values_Y = mousey()
            `endif
            paste sprite c_SPRITE_DS_Chart_Values, l_Chart_Values_X, l_Chart_Values_Y
            
            if VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Time$ <> ""
              if g_ENGINE_SwapDayMonthFormat = 1
                l_date$ = right$(left$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Date$, 5), 2) + "/" + left$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Date$, 2)
              else
                l_date$ = left$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Date$, 5)
              endif
              l_time1$ = VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Time$ + " (" + l_date$ + ")"
              l_bitHP$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Hole_Depth#, 1)
              l_bitDP$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).Bit_Depth#, 1)
              l_data1$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).PVT#, 1)
              l_data2$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).SPP, 0)
              l_data3$ = str$(VIEWERMODE_RTDisplay_DB(l_DataView_ArrPos).FlowIn, 0)
            else
              l_time1$ = "No Data"
              l_bitHP$ = "No Data"
              l_bitDP$ = "No Data"
              l_data1$ = "No Data"
              l_data2$ = "No Data"
              l_data3$ = "No Data"
            endif
            
            d3d_starttext
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 10, 0, "Time", g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 30, 0, "Hole Depth", g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 50, 0, "Bit Depth", g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 70, 0, "PVT", g_Block1_Line1_Colour
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 90, 0, "SPP", g_Block1_Line2_Colour
              d3d_text 2, l_Chart_Values_X + 10, l_Chart_Values_Y + 110, 0, "Flow", g_Block1_Line3_Colour
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 10, 0, ": " + l_time1$, g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 30, 0, ": " + l_bitHP$, g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 50, 0, ": " + l_bitDP$, g_ENGINE_COLOUR_Black
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 70, 0, ": " + l_data1$, g_Block1_Line1_Colour
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 90, 0, ": " + l_data2$, g_Block1_Line2_Colour
              d3d_text 2, l_Chart_Values_X + 90, l_Chart_Values_Y + 110, 0, ": " + l_data3$, g_Block1_Line3_Colour
            d3d_endtext
          endif
        
      endif
    endif
  
  d3d_color 255, 255, 255, 255

endfunction



function DISP_RT_CF1_DATABASE_ENGINE()

  `Add a record every 8 seconds (makes 450 records per hour, which is the plot area height)
  if g_TIMER_1 > g_DISP_RT_Make_New_Record_Timer + c_DISP_RT_CreateRecordInterval
    g_DISP_RT_Make_New_Record_Timer = g_TIMER_1
    lib_Disp_RT_CF1_DATABASE_ADD_MEM_Record()
    ENGINE_DS_CHART_IMAGE_Creation()
  endif

endfunction

function lib_Disp_RT_CF1_DATABASE_ADD_MEM_Record()

  `This function Adds a Client Realtime DB MEM Record and shuffles the others down
  
  `1st move all data down one position
    Lib_Disp_RT_CF1_DATABASE_SORT_Records()
  
  `2nd write new data to the first position in the database
    VIEWERMODE_RTDisplay_DB(0).Time$ = g_DISP_RT_DB_Time$
    VIEWERMODE_RTDisplay_DB(0).Date$ = g_DISP_RT_DB_Date$
    VIEWERMODE_RTDisplay_DB(0).Hole_Depth# = g_DISP_RT_DB_Hole_Depth#
    VIEWERMODE_RTDisplay_DB(0).Bit_Depth# = g_DISP_RT_DB_Bit_Depth#
    VIEWERMODE_RTDisplay_DB(0).ROP# = g_DISP_RT_DB_ROP#
    VIEWERMODE_RTDisplay_DB(0).WOB# = g_DISP_RT_DB_WOB#
    VIEWERMODE_RTDisplay_DB(0).Hookload = g_DISP_RT_DB_Hookload
    VIEWERMODE_RTDisplay_DB(0).RPM = g_DISP_RT_DB_RPM
    VIEWERMODE_RTDisplay_DB(0).TripTank# = g_DISP_RT_DB_TripTank#
    VIEWERMODE_RTDisplay_DB(0).BlockPosition# = g_DISP_RT_DB_BlockPosition#
    VIEWERMODE_RTDisplay_DB(0).PVT# = g_DISP_RT_DB_PVT#
    VIEWERMODE_RTDisplay_DB(0).SPP = g_DISP_RT_DB_SPP
    VIEWERMODE_RTDisplay_DB(0).FlowIn = g_DISP_RT_DB_FlowIn
    VIEWERMODE_RTDisplay_DB(0).SPM1 = g_DISP_RT_DB_SPM1
    VIEWERMODE_RTDisplay_DB(0).SPM2 = g_DISP_RT_DB_SPM2
    VIEWERMODE_RTDisplay_DB(0).TotalGas# = g_DISP_RT_DB_TotalGas#
    VIEWERMODE_RTDisplay_DB(0).H2S# = g_DISP_RT_DB_H2S#

endfunction

function lib_Disp_RT_CF1_DATABASE_SORT_Records()

  for sort_lp = c_SMod_RTDis_DB_TtlRecs to 1 step -1
  
    VIEWERMODE_RTDisplay_DB(sort_lp).Time$ = VIEWERMODE_RTDisplay_DB(sort_lp - 1).Time$
    VIEWERMODE_RTDisplay_DB(sort_lp).Date$ = VIEWERMODE_RTDisplay_DB(sort_lp - 1).Date$
    VIEWERMODE_RTDisplay_DB(sort_lp).Hole_Depth# = VIEWERMODE_RTDisplay_DB(sort_lp - 1).Hole_Depth#
    VIEWERMODE_RTDisplay_DB(sort_lp).Bit_Depth# = VIEWERMODE_RTDisplay_DB(sort_lp - 1).Bit_Depth#
    VIEWERMODE_RTDisplay_DB(sort_lp).ROP# = VIEWERMODE_RTDisplay_DB(sort_lp - 1).ROP#
    VIEWERMODE_RTDisplay_DB(sort_lp).WOB# = VIEWERMODE_RTDisplay_DB(sort_lp - 1).WOB#
    VIEWERMODE_RTDisplay_DB(sort_lp).Hookload = VIEWERMODE_RTDisplay_DB(sort_lp - 1).Hookload
    VIEWERMODE_RTDisplay_DB(sort_lp).RPM = VIEWERMODE_RTDisplay_DB(sort_lp - 1).RPM
    VIEWERMODE_RTDisplay_DB(sort_lp).TripTank# = VIEWERMODE_RTDisplay_DB(sort_lp - 1).TripTank#
    VIEWERMODE_RTDisplay_DB(sort_lp).BlockPosition# = VIEWERMODE_RTDisplay_DB(sort_lp - 1).BlockPosition#
    VIEWERMODE_RTDisplay_DB(sort_lp).PVT# = VIEWERMODE_RTDisplay_DB(sort_lp - 1).PVT#
    VIEWERMODE_RTDisplay_DB(sort_lp).SPP = VIEWERMODE_RTDisplay_DB(sort_lp - 1).SPP
    VIEWERMODE_RTDisplay_DB(sort_lp).FlowIn = VIEWERMODE_RTDisplay_DB(sort_lp - 1).FlowIn
    VIEWERMODE_RTDisplay_DB(sort_lp).SPM1 = VIEWERMODE_RTDisplay_DB(sort_lp - 1).SPM1
    VIEWERMODE_RTDisplay_DB(sort_lp).SPM2 = VIEWERMODE_RTDisplay_DB(sort_lp - 1).SPM2
    VIEWERMODE_RTDisplay_DB(sort_lp).TotalGas# = VIEWERMODE_RTDisplay_DB(sort_lp - 1).TotalGas#
    VIEWERMODE_RTDisplay_DB(sort_lp).H2S# = VIEWERMODE_RTDisplay_DB(sort_lp - 1).H2S#
  
  next sort_lp

endfunction

function lib_Disp_RT_CF1_PLOT_TIME()

  local l_time$ as string
  local l_date$ as string

  d3d_starttext
    for print_lp = 0 to (c_SCROLLING_Time_Array_Size - 1)
      
      if g_ENGINE_Screen_Resolution = 1
        l_xpos = 349
      else
        l_xpos = 241
      endif 
       
      l_ypos = 197 + (print_lp * (450 / c_SCROLLING_Time_Array_Size)) + 15
      l_data_array = (l_ypos - 197) + g_DS_CHART_Scroll_Array_Offset
      
        if l_data_array > c_SMod_RTDis_DB_TtlRecs
          l_data_array = c_SMod_RTDis_DB_TtlRecs
        endif  
        if l_data_array > c_SMod_RTDis_DB_TtlRecs
          l_data_array = c_SMod_RTDis_DB_TtlRecs
        endif
 
        if l_data_array < 1
          l_data_array = 1
        endif
        if l_data_array < 1
          l_data_array = 1
        endif

      l_time$ = left$(VIEWERMODE_RTDisplay_DB(l_data_array).Time$, 5)
      
      if l_time$ <> ""
        d3d_text 2, l_xpos, l_ypos - (d3d_gettextheight(2, l_time$)/2), 1, l_time$, RGB(0,255,0)
      else
        d3d_text 2, l_xpos, l_ypos - (d3d_gettextheight(2, l_time$)/2), 1, "No Data", RGB(0,255,0)
      endif  
    
    next print_lp
  d3d_endtext

endfunction

function lib_Disp_RT_CF1_Reset_Database()

  for set_lp = 0 to c_SMod_RTDis_DB_TtlRecs
    VIEWERMODE_RTDisplay_DB(set_lp).Record_Used = 0
    VIEWERMODE_RTDisplay_DB(set_lp).Record_Syncd = 0
    VIEWERMODE_RTDisplay_DB(set_lp).Time$ = ""
    VIEWERMODE_RTDisplay_DB(set_lp).Date$ = ""
    VIEWERMODE_RTDisplay_DB(set_lp).Hole_Depth# = 0.0
    VIEWERMODE_RTDisplay_DB(set_lp).Bit_Depth# = 0.0
    VIEWERMODE_RTDisplay_DB(set_lp).ROP# = 0.0
    VIEWERMODE_RTDisplay_DB(set_lp).WOB# = 0.0
    VIEWERMODE_RTDisplay_DB(set_lp).Hookload = 0
    VIEWERMODE_RTDisplay_DB(set_lp).RPM = 0
    VIEWERMODE_RTDisplay_DB(set_lp).TripTank# = 0.0
    VIEWERMODE_RTDisplay_DB(set_lp).BlockPosition# = 0.0
    VIEWERMODE_RTDisplay_DB(set_lp).PVT# = 0.0
    VIEWERMODE_RTDisplay_DB(set_lp).SPP = 0
    VIEWERMODE_RTDisplay_DB(set_lp).FlowIn = 0
    VIEWERMODE_RTDisplay_DB(set_lp).SPM1 = 0
    VIEWERMODE_RTDisplay_DB(set_lp).SPM2 = 0
    VIEWERMODE_RTDisplay_DB(set_lp).TotalGas# = 0.0
    VIEWERMODE_RTDisplay_DB(set_lp).H2S# = 0.0
  next set_lp
  
  g_DISP_RT_DB_Total_Record_Num = 0

endfunction

function lib_Disp_RT_CF1_DISP_DrillScreen_Values()

  `This function prints the Server's Drillscreen Realtime data PUSH over the drillscreen background.
  
  if g_DISP_RT_DB_RequestChannel_State <> 2
    if g_DS_InfoBox_WaitforDataFromServer_Toggle = -1
      `Handle Clicking on the Info Box
      if mouseclick() = 1
        sprite c_SPRITE_NoDataReceived, (g_ENG_Half_Screen_Width - 300), (g_ENG_Half_Screen_Height - 20), c_ENGINE_NoDataRec_Imgnum
        `show sprite c_SPRITE_NoDataReceived
        if sprite collision(c_SPRITE_NoDataReceived, 2) = 1
          g_PLOTCHART_display_values_click_toggle = -1
          g_DS_InfoBox_WaitforDataFromServer_Toggle = 1
          mouse_click(1) = 1
        endif
      endif
      paste sprite c_SPRITE_NoDataReceived, (g_ENG_Half_Screen_Width - 300), (g_ENG_Half_Screen_Height - 20)
      d3d_color 255, 0, 0, 255
      d3d_starttext
        d3d_text 5, g_ENG_Half_Screen_Width, g_ENG_Half_Screen_Height - 4, 1, "Waiting for Data from the Server"
      d3d_endtext
    else
      `Handle Clicking on the Lower Information Area
      `d3d_color 255, 0, 0, 255
      d3d_starttext
        if g_ENGINE_Screen_Resolution = 1
          if mouseclick() = 1
            if mousey() > 726 and mousey() < 764 and mousex() > 142 and mousex() < 604
              g_DS_InfoBox_WaitforDataFromServer_Toggle = -1
            endif
          endif
          d3d_text 4, 190, 734, 0, "Waiting for Data from the Server", rgb(255, 0, 0)
        else
          if mouseclick() = 1
            if mousey() > 726 and mousey() < 764 and mousex() > 142 and mousex() < 433
              g_DS_InfoBox_WaitforDataFromServer_Toggle = -1
            endif
          endif
          d3d_text 3, 180, 737, 0, "Waiting for Data from the Server", rgb(255, 0, 0)
        endif
      d3d_endtext
    endif
  else  
    d3d_starttext
      d3d_color 0, 255, 0, 255 : `Hole and Bit Depth
      d3d_text 5, g_DISPLAY_HOLE_DEPTH_x, g_DISPLAY_HOLE_DEPTH_y, 1, str$(g_DISP_RT_DB_Hole_Depth#, 1)
      d3d_text 5, g_DISPLAY_BIT_DEPTH_x, g_DISPLAY_BIT_DEPTH_y, 1, str$(g_DISP_RT_DB_Bit_Depth#, 1)
      
      d3d_color 0, 0, 128, 255
      `ROP, WOB, HKLD
      d3d_text 7, g_DISPLAY_ROP_x, g_DISPLAY_ROP_y, 1, str$(g_DISP_RT_DB_ROP#, 1)
      d3d_text 7, g_DISPLAY_WOB_x, g_DISPLAY_WOB_y, 1, str$(g_DISP_RT_DB_WOB#, 1)
      d3d_text 7, g_DISPLAY_HKLD_x, g_DISPLAY_HKLD_y, 1, str$(g_DISP_RT_DB_Hookload, 0)
      `RPM, TT, Block Height
      d3d_text 7, g_DISPLAY_RPM_x, g_DISPLAY_RPM_y, 1, str$(g_DISP_RT_DB_RPM, 0)
      d3d_text 7, g_DISPLAY_TT_x, g_DISPLAY_TT_y, 1, str$(g_DISP_RT_DB_TripTank#, 1)
      d3d_text 7, g_DISPLAY_BLKPOS_x, g_DISPLAY_BLKPOS_y, 1, str$(g_DISP_RT_DB_BlockPosition#, 1)
      `PVT, SPP, Flow In
      d3d_text 7, g_DISPLAY_PVT_x, g_DISPLAY_PVT_y, 1, str$(g_DISP_RT_DB_PVT#, 1)
      d3d_text 7, g_DISPLAY_SPP_x, g_DISPLAY_SPP_y, 1, str$(g_DISP_RT_DB_SPP, 0)
      d3d_text 7, g_DISPLAY_FLOWIN_x, g_DISPLAY_FLOWIN_y, 1, str$(g_DISP_RT_DB_FlowIn, 0)
      
      `Total SPM
      l_total_SPM_math = g_DISP_RT_DB_SPM1 + g_DISP_RT_DB_SPM2 + g_DISP_RT_DB_SPM3
      d3d_text 7, g_DISPLAY_TOTAL_SPM_x, g_DISPLAY_TOTAL_SPM_y, 1, str$(l_total_SPM_math)
      `Total Strokes
      `d3d_text 7, g_DISPLAY_TOTAL_STROKES_x, g_DISPLAY_TOTAL_STROKES_y, 1, str$()
      `SPM1
      d3d_text 7, g_DISPLAY_SPM1_x, g_DISPLAY_SPM1_y, 1, str$(g_DISP_RT_DB_SPM1, 0)
      `SPM2
      d3d_text 7, g_DISPLAY_SPM2_x, g_DISPLAY_SPM2_y, 1, str$(g_DISP_RT_DB_SPM2, 0)
      `SPM3
      d3d_text 7, g_DISPLAY_SPM3_x, g_DISPLAY_SPM3_y, 1, str$(g_DISP_RT_DB_SPM3, 0)
      `TG
      d3d_text 7, g_DISPLAY_TOTAL_GAS_x, g_DISPLAY_TOTAL_GAS_y, 1, str$(g_DISP_RT_DB_TotalGas#, 2)
      `H2S
      d3d_text 7, g_DISPLAY_H2S_x, g_DISPLAY_H2S_y, 1, str$(g_DISP_RT_DB_H2S#, 0)
    d3d_endtext
    `If no good data has been received for X seconds then show warning
    if timer() > g_DISP_RT_DB_Last_Good_Data_Timer + c_DISP_RT_DB_Last_Good_Data_Interval
      paste sprite c_SPRITE_NoDataReceived, (g_ENG_Half_Screen_Width - 300), (g_ENG_Half_Screen_Height - 20)
      d3d_starttext
        d3d_color 255, 0, 0, 255
        d3d_text 5, g_ENG_Half_Screen_Width, g_ENG_Half_Screen_Height - 4, 1, "Connection Lost at : " + g_DISP_RT_DB_Last_Good_Data_Received$
        `Automatic Reconnection
        if g_AUTO_CONNECT_ON = 1
          if g_connection_attempt_ATTEMPT_NOW = 1
            inc sp,19 : d3d_text 2, g_ENG_Half_Screen_Width, g_ENG_Half_Screen_Height + 23, 1, "    ATTEMPTING CONNECTION NOW - Please Wait..."
          else
            inc sp,19 : d3d_text 2, g_ENG_Half_Screen_Width, g_ENG_Half_Screen_Height + 23, 1, "    Automatic Connection Attempt in: " + str$(g_connection_attempt_counter) + " seconds"
          endif
        else
          inc sp,19 : d3d_text 2, g_ENG_Half_Screen_Width, g_ENG_Half_Screen_Height + 23, 1, "    Automatic Re-Connection Disabled"
        endif
        d3d_color 255, 255, 255, 255
      d3d_endtext
    endif
  endif  

endfunction

function lib_CF1_EXIT_YesNoBox_Handle()

  if g_ENGINE_Alpha_Available = 1
    paste sprite c_SPRITE_ExitBox_L1, g_RTDispEXITBOX_PosX + 10, g_RTDispEXITBOX_PosY +10
  endif  
  
  paste sprite c_SPRITE_ExitBox_L2, g_RTDispEXITBOX_PosX, g_RTDispEXITBOX_PosY
  paste sprite c_SPRITE_ExitBox_L3, g_RTDispEXITBOX_PosX, g_RTDispEXITBOX_PosY
  
  `Handle Yes/No Highlighting
  if mousey() > g_RTDispEXITBOX_PosY + 83 and mousey() < g_RTDispEXITBOX_PosY + 108
    `Yes Button
    if mousex() > g_RTDispEXITBOX_PosX + 124 and mousex() < g_RTDispEXITBOX_PosX + 188
      g_RTDispEXITBOX_HighlightYorN = 1
    endif
    `No Button
    if mousex() > g_RTDispEXITBOX_PosX + 204 and mousex() < g_RTDispEXITBOX_PosX + 268
      g_RTDispEXITBOX_HighlightYorN = 2
    endif
  endif
  if g_RTDispEXITBOX_HighlightYorN = 1 : `Option YES
    paste sprite c_SPRITE_Exitbox_YNhighlight, g_RTDispEXITBOX_PosX + 125, g_RTDispEXITBOX_PosY + 84
  endif
  if g_RTDispEXITBOX_HighlightYorN = 2 : `Option NO
    paste sprite c_SPRITE_Exitbox_YNhighlight, g_RTDispEXITBOX_PosX + 205, g_RTDispEXITBOX_PosY + 84
  endif
  
  `Handle Close Box Image
  if mousey() > g_RTDispEXITBOX_PosY and mousey() < g_RTDispEXITBOX_PosY + 18
    if mousex() > g_RTDispEXITBOX_PosX + 336 and mousex() < g_RTDispEXITBOX_PosX + 385
      paste image c_DISPLAY_CLOSEButton_LIT, g_RTDispEXITBOX_PosX + 337, g_RTDispEXITBOX_PosY + 2
      if mouseclick() = 1 and mouse_click(1) = -1
        mouse_click(1) = 1
        g_RTDispEXITBOX_TOGGLE = -1
      endif  
    else
      paste image c_DISPLAY_CLOSEButton_UNLIT, g_RTDispEXITBOX_PosX + 337, g_RTDispEXITBOX_PosY + 2
    endif
  else
    paste image c_DISPLAY_CLOSEButton_UNLIT, g_RTDispEXITBOX_PosX + 337, g_RTDispEXITBOX_PosY + 2
  endif
  
  `Handle the Yes/No Buttons
  if mouseclick() = 1 and mouse_click(1) = -1
    if mousey() > g_RTDispEXITBOX_PosY + 84 and mousey() < g_RTDispEXITBOX_PosY + 108
      `Yes Button
      if mousex() > g_RTDispEXITBOX_PosX + 125 and mousex() < g_RTDispEXITBOX_PosX + 189
        mouse_click(1) = 1
        lib_EXIT_Program(1, 1)
      endif
      `No Button
      if mousex() > g_RTDispEXITBOX_PosX + 205 and mousex() < g_RTDispEXITBOX_PosX + 268
        mouse_click(1) = 1
        g_RTDispEXITBOX_TOGGLE = -1
      endif
    endif
  endif
  
  `Handle Yes/No/Esc Buttons
    `[Y] - Exit Program
    if keystate(21)= 1 and key_state(21,0)= 0
      lib_EXIT_Program(1, 1)
      key_state(21,0)=1
    endif
    if keystate(21)=0 and key_state(21,0)=1 then key_state(21,0)=0
    `[N] - Exit Program
    if keystate(49)= 1 and key_state(49,0)= 0
      g_RTDispEXITBOX_TOGGLE = -1
      key_state(49,0)=1
    endif
    if keystate(49)=0 and key_state(49,0)=1 then key_state(49,0)=0
    
  
  d3d_starttext
    `Display Box Header
    d3d_text 2, g_RTDispEXITBOX_PosX + 20, g_RTDispEXITBOX_PosY + 10, 0, "GDS Client", g_ENGINE_COLOUR_Black
    `Display Caption
    d3d_text 2, g_RTDispEXITBOX_PosX + 80, g_RTDispEXITBOX_PosY + 50, 0, "Do you wish to exit the program?", g_ENGINE_COLOUR_Black
  d3d_endtext
  
  lib_Drag_ExitBoxGraphic()
  
endfunction

function _______RT_GRAPHICS_DISPLAY_CoreFunc2_Mudlogging_Suite______________jifftg64dr()
endfunction



function lib_STARTUP_CoreFunctionType2_Mudlogging()

  if g_ENGINE_Screen_Resolution = 1
    g_BlockAll_Mouse_MinY = 197
    g_BlockAll_Mouse_MaxY = 647
    g_Block1_Mouse_MinX = 10
    g_Block1_Mouse_MaxX = 311
    g_Block2_Mouse_MinX = 384
    g_Block2_Mouse_MaxX = 685
    g_Block3_Mouse_MinX = 699
    g_Block3_Mouse_MaxX = 1000
    g_Block4_Mouse_MinX = 1014
    g_Block4_Mouse_MaxX = 1315
  else
    g_BlockAll_Mouse_MinY = 197
    g_BlockAll_Mouse_MaxY = 647
    g_Block1_Mouse_MinX = 10
    g_Block1_Mouse_MaxX = 203
    g_Block2_Mouse_MinX = 276
    g_Block2_Mouse_MaxX = 469
    g_Block3_Mouse_MinX = 483
    g_Block3_Mouse_MaxX = 676
    g_Block4_Mouse_MinX = 687
    g_Block4_Mouse_MaxX = 880
  endif

  `Program Variables to activate full mudlogging functionality
  g_DATABASE_MEM_GotoPage_Toggle = -1

  Lib_Disp_RT_SET_ScreenPos_Colour_Vars()
  
  if g_PORTABLE_ENG_RunAs_VIEWER = -1
    LOAD_CHANNEL_ID_Ranges()
  endif


endfunction

function lib_CF2_EXIT_YesNoBox_Handle()

  if g_ENGINE_Alpha_Available = 1
    paste sprite c_SPRITE_ExitBox_L1, g_RTDispEXITBOX_PosX + 10, g_RTDispEXITBOX_PosY +10
  endif  
  
  paste sprite c_SPRITE_ExitBox_L2, g_RTDispEXITBOX_PosX, g_RTDispEXITBOX_PosY
  paste sprite c_SPRITE_ExitBox_L3, g_RTDispEXITBOX_PosX, g_RTDispEXITBOX_PosY
  
  paste sprite c_SPRITE_CF2_ExitButton_TextQ_Img, g_RTDispEXITBOX_PosX + 79, g_RTDispEXITBOX_PosY + 52
  
  `Handle Yes/No Highlighting
  g_RTDispEXITBOX_HighlightYorN = -1
  if mousey() > g_RTDispEXITBOX_PosY + 83 and mousey() < g_RTDispEXITBOX_PosY + 108
    `Yes Button
    if mousex() > g_RTDispEXITBOX_PosX + 124 and mousex() < g_RTDispEXITBOX_PosX + 188
      g_RTDispEXITBOX_HighlightYorN = 1
    endif
    `No Button
    if mousex() > g_RTDispEXITBOX_PosX + 204 and mousex() < g_RTDispEXITBOX_PosX + 268
      g_RTDispEXITBOX_HighlightYorN = 2
    endif
  endif
  if g_RTDispEXITBOX_HighlightYorN = 1 : `Option YES
    paste sprite c_SPRITE_Exitbox_YNhighlight, g_RTDispEXITBOX_PosX + 125, g_RTDispEXITBOX_PosY + 84
  endif
  if g_RTDispEXITBOX_HighlightYorN = 2 : `Option NO
    paste sprite c_SPRITE_Exitbox_YNhighlight, g_RTDispEXITBOX_PosX + 205, g_RTDispEXITBOX_PosY + 84
  endif
  
  `Handle Close Box Image
  if mousey() > g_RTDispEXITBOX_PosY and mousey() < g_RTDispEXITBOX_PosY + 18
    if mousex() > g_RTDispEXITBOX_PosX + 336 and mousex() < g_RTDispEXITBOX_PosX + 385
      paste image c_DISPLAY_CLOSEButton_LIT, g_RTDispEXITBOX_PosX + 337, g_RTDispEXITBOX_PosY + 2
      if mouseclick() = 1 and mouse_click(1) = -1
        mouse_click(1) = 1
        g_EXITBOX_NoButtonClicked_Toggle = 1
      endif  
    else
      paste image c_DISPLAY_CLOSEButton_UNLIT, g_RTDispEXITBOX_PosX + 337, g_RTDispEXITBOX_PosY + 2
    endif
  else
    paste image c_DISPLAY_CLOSEButton_UNLIT, g_RTDispEXITBOX_PosX + 337, g_RTDispEXITBOX_PosY + 2
  endif
  
  `Handle the Yes/No Buttons
  if mouseclick() = 1 and mouse_click(1) = -1
    if mousey() > g_RTDispEXITBOX_PosY + 84 and mousey() < g_RTDispEXITBOX_PosY + 108
      `Yes Button
      if mousex() > g_RTDispEXITBOX_PosX + 125 and mousex() < g_RTDispEXITBOX_PosX + 189
        mouse_click(1) = 1
        g_EXITBOX_YesButtonClicked_Toggle = 1
        g_EXITBOX_ButtonTimer = timer()
      endif
      `No Button
      if mousex() > g_RTDispEXITBOX_PosX + 205 and mousex() < g_RTDispEXITBOX_PosX + 268
        mouse_click(1) = 1
        g_EXITBOX_NoButtonClicked_Toggle = 1
        g_EXITBOX_ButtonTimer = timer()
      endif
    endif
  endif
  
  `Handle Yes/No/Esc Buttons
    `[Y] - Exit Program
    if keystate(21)= 1 and key_state(21,0)= 0
      lib_EXIT_Program(-1, 1)
      key_state(21,0)=1
    endif
    if keystate(21)=0 and key_state(21,0)=1 then key_state(21,0)=0
    `[N] - Exit Program
    if keystate(49)= 1 and key_state(49,0)= 0
      g_EXIT_Client_Toggle = -1
      g_RCM_ACTION_Toggle_EditWellData = -1
      g_LOCKOUT_INPUTPAD_ChartInfoBoxes = -1
      g_LOCKOUT_INPUTPAD_TimePeriodButtons = -1
      g_LOCKOUT_INPUTPAD_DS_ChannelRanges = -1
      g_LOCKOUT_INPUTPAD_PITS_ChannelRanges = -1
      g_INFOBOX_INPUT_LMB_State = 1
      key_state(49,0)=1
    endif
    if keystate(49)=0 and key_state(49,0)=1 then key_state(49,0)=0
    
    `[ESC] - Exit Program
    if keystate(1)= 1 and g_ENGINELOGIN_ESCToggle = -1
      g_EXIT_Client_Toggle = -1
      g_RCM_ACTION_Toggle_EditWellData = -1
      g_LOCKOUT_INPUTPAD_ChartInfoBoxes = -1
      g_LOCKOUT_INPUTPAD_TimePeriodButtons = -1
      g_LOCKOUT_INPUTPAD_DS_ChannelRanges = -1
      g_LOCKOUT_INPUTPAD_PITS_ChannelRanges = -1
      g_INFOBOX_INPUT_LMB_State = 1
    endif
    if keystate(1)=0 and g_ENGINELOGIN_ESCToggle = 1 then g_ENGINELOGIN_ESCToggle = -1
  
    `Yes/No Button Actions
      `YES BUTTON ACTIONS
  		if g_EXITBOX_YesButtonClicked_Toggle = 1
  		  paste image c_CF2_ExitButton_YESClicked_Img, g_RTDispEXITBOX_PosX + 125, g_RTDispEXITBOX_PosY + 84
  		  if g_EXITBOX_YesButtonClicked_Toggle = 1 and mouseclick() = 0 or timer() > g_EXITBOX_ButtonTimer + 150
    			g_EXITBOX_YesButtonClicked_Toggle = -1
        	lib_EXIT_Program(-1, 1)
        endif
  		endif
  		`NO BUTTON ACTIONS: Make NO Button react on unclicking the mouse button so the NO Button graphic is visible to the user.
  		if g_EXITBOX_NoButtonClicked_Toggle = 1
  		  paste image c_CF2_ExitButton_NOClicked_Img, g_RTDispEXITBOX_PosX + 125 + 80, g_RTDispEXITBOX_PosY + 84
  		  if g_EXITBOX_NoButtonClicked_Toggle = 1 and mouseclick() = 0 or timer() > g_EXITBOX_ButtonTimer + 150
    			g_EXITBOX_NoButtonClicked_Toggle = -1
    			g_EXIT_Client_Toggle = -1
    			g_RCM_ACTION_Toggle_EditWellData = -1
    			g_LOCKOUT_INPUTPAD_ChartInfoBoxes = -1
    			g_LOCKOUT_INPUTPAD_TimePeriodButtons = -1
    			g_LOCKOUT_INPUTPAD_DS_ChannelRanges = -1
    			g_LOCKOUT_INPUTPAD_PITS_ChannelRanges = -1
    			g_INFOBOX_INPUT_LMB_State = 1
    		endif
  		endif
  
  `d3d_starttext
    `Display Box Header
    `d3d_text 2, g_RTDispEXITBOX_PosX + 20, g_RTDispEXITBOX_PosY + 10, 0, "GDS Client", g_ENGINE_COLOUR_Black
    `Display Caption
    `paste image c_CF2_ExitButton_TextQ_Img, g_RTDispEXITBOX_PosX + 79, g_RTDispEXITBOX_PosY + 52, 1
    
    
    
    `d3d_text 2, g_RTDispEXITBOX_PosX + 80, g_RTDispEXITBOX_PosY + 50, 0, "Do you wish to exit the program?", g_ENGINE_COLOUR_Black
  `d3d_endtext
  
  lib_Drag_ExitBoxGraphic()
  
endfunction


function lib_Disp_RT_CF2_PLOT_TIME()

  local l_time$ as string
  local l_date$ as string
  local l_xpos as integer
  
  if g_ENGINE_Screen_Resolution = 1
    l_xpos = 349
  else
    l_xpos = 241
  endif
  
  if g_DS_Display_DepthTicks = 1 then lib_DS_RT_Display_DEPTH_TICKS()

  d3d_starttext
  
    `If midnight is on screen then display the date change line and information (DS & PITS SCREENS)
  
    `Handle 'MIDNIGHT' LINE / DATE LINE
    if g_ENGINE_HIST_DRILL_Screen_Routing = 1
      l_Chart_Start_ArrayPos = DS_CHART_Get_First_Valid_Record_Array()
    endif
    if g_ENGINE_HIST_DRILL_Screen_Routing = 3
      l_Chart_Start_ArrayPos = PITS_CHART_Get_First_Valid_Record_Array()
    endif
    
    for check_lp = 0 to 451
      
      l_ypos = 197 + check_lp
 
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1
        l_Pxl1_Arr = (l_Chart_Start_ArrayPos) - ((l_ypos - 197) * g_ENGINE_DS_Chart_Time_Period_Adjust)
        l_Pxl2_Arr = (l_Chart_Start_ArrayPos) - ((l_ypos - 196) * g_ENGINE_DS_Chart_Time_Period_Adjust)
      endif
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3
        l_Pxl1_Arr = (l_Chart_Start_ArrayPos) - ((l_ypos - 197) * g_ENGINE_PITS_Chart_Time_Period_Adjust)
        l_Pxl2_Arr = (l_Chart_Start_ArrayPos) - ((l_ypos - 196) * g_ENGINE_PITS_Chart_Time_Period_Adjust)
      endif
      if l_Pxl1_Arr > 0 and l_Pxl1_Arr < g_DATABASE_MEM_Total_Num_Records
        l_Date1$ = MEM_MAIN_DATABASE(l_Pxl1_Arr).Date$
      endif
      if l_Pxl2_Arr > 0 and l_Pxl2_Arr < g_DATABASE_MEM_Total_Num_Records
        l_Date2$ = MEM_MAIN_DATABASE(l_Pxl2_Arr).Date$
      endif
      if l_Pxl1_Arr > 0 and l_Pxl2_Arr > 0 and l_Pxl1_Arr < g_DATABASE_MEM_Total_Num_Records and l_Pxl2_Arr < g_DATABASE_MEM_Total_Num_Records
        if l_Date1$ <> l_Date2$
          if g_ENGINE_HIST_DRILL_Screen_Routing = 1
            `Print the dates above and below the lines
            if l_ypos - 20 > g_BlockAll_Mouse_MinY then d3d_text 2, g_Block2_Mouse_MinX + 10, l_ypos - 20, 0, lib_CONVERT_DATE_US_to_UK_Format(l_Date1$), g_ENGINE_COLOUR_Black
            if l_ypos + 15 < g_BlockAll_Mouse_MaxY then d3d_text 2, g_Block2_Mouse_MinX + 10, l_ypos + 5, 0, lib_CONVERT_DATE_US_to_UK_Format(l_Date2$), g_ENGINE_COLOUR_Black
            `Draw the midnight lines on each chart
            d3d_line g_Block1_Mouse_MinX, l_ypos, g_Block1_Mouse_MaxX, l_ypos, g_ENGINE_COLOUR_Black
            d3d_line g_Block2_Mouse_MinX, l_ypos, g_Block2_Mouse_MaxX, l_ypos, g_ENGINE_COLOUR_Black
            d3d_line g_Block3_Mouse_MinX, l_ypos, g_Block3_Mouse_MaxX, l_ypos, g_ENGINE_COLOUR_Black
          endif
          if g_ENGINE_HIST_DRILL_Screen_Routing = 3
            `Print the dates above and below the lines
            if l_ypos - 20 > g_BlockAll_Mouse_MinY then d3d_text 2, g_Block2_Mouse_MinX + 10, l_ypos - 20, 0, lib_CONVERT_DATE_US_to_UK_Format(l_Date1$), g_ENGINE_COLOUR_Black
            if l_ypos + 15 < g_BlockAll_Mouse_MaxY then d3d_text 2, g_Block2_Mouse_MinX + 10, l_ypos + 5, 0, lib_CONVERT_DATE_US_to_UK_Format(l_Date2$), g_ENGINE_COLOUR_Black
            `Draw the midnight lines on each chart
            d3d_line g_Block1_Mouse_MinX, l_ypos, g_Block1_Mouse_MaxX, l_ypos, g_ENGINE_COLOUR_Black
            d3d_line g_Block2_Mouse_MinX, l_ypos, g_Block2_Mouse_MaxX, l_ypos, g_ENGINE_COLOUR_Black
            d3d_line g_Block3_Mouse_MinX, l_ypos, g_Block3_Mouse_MaxX, l_ypos, g_ENGINE_COLOUR_Black
            d3d_line g_Block4_Mouse_MinX, l_ypos, g_Block4_Mouse_MaxX, l_ypos, g_ENGINE_COLOUR_Black
          endif
        endif
      endif

    next check_lp
  
    `Print TIME INTERVALS (Green time text vertically down the time bar)
    for print_lp = 0 to (c_SCROLLING_Time_Array_Size - 1)
      
      l_ypos = 197 + (print_lp * (450 / c_SCROLLING_Time_Array_Size)) + 15
      
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1
        l_Chart_Start_ArrayPos = DS_CHART_Get_First_Valid_Record_Array()
        l_data_array = (l_Chart_Start_ArrayPos) - ((l_ypos - 197) * g_ENGINE_DS_Chart_Time_Period_Adjust)
      endif
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3
        l_Chart_Start_ArrayPos = PITS_CHART_Get_First_Valid_Record_Array()
        l_data_array = (l_Chart_Start_ArrayPos) - ((l_ypos - 197) * g_ENGINE_PITS_Chart_Time_Period_Adjust)
      endif
      
      if l_data_array > 0
        l_time$ = left$(MEM_MAIN_DATABASE(l_data_array).Time$, 5)
      else
        l_time$ = "No Data"
      endif
      
      d3d_text 2, l_xpos, l_ypos - (d3d_gettextheight(2, l_time$)/2), 1, l_time$, RGB(0,255,0)
    
    next print_lp
    
  d3d_endtext

endfunction

function lib_Disp_RT_CF2_DISP_DrillScreen_Values()

  local l_LagDepth_Adjusted_Val# as float

  `This function prints the Server's Drillscreen Realtime data PUSH over the drillscreen background.
  d3d_starttext
    d3d_color 0, 255, 0, 255 : `Hole and Bit Depth
    d3d_text 5, g_DISPLAY_HOLE_DEPTH_x, g_DISPLAY_HOLE_DEPTH_y, 1, str$(g_COMMPORT_Receive_HoleDepth#, 1)
    d3d_text 5, g_DISPLAY_BIT_DEPTH_x, g_DISPLAY_BIT_DEPTH_y, 1, str$(g_COMMPORT_Receive_BitDepth#, 1)
    
    d3d_color 0, 0, 128, 255
    `ROP, WOB, HKLD
    d3d_text 7, g_DISPLAY_ROP_x, g_DISPLAY_ROP_y, 1, str$(g_CALCULATED_Received_ROP#, 1)
    d3d_text 7, g_DISPLAY_WOB_x, g_DISPLAY_WOB_y, 1, str$(g_COMMPORT_Receive_WOB#, 1)
    d3d_text 7, g_DISPLAY_HKLD_x, g_DISPLAY_HKLD_y, 1, str$(g_COMMPORT_Receive_Hookload, 0)
    `RPM, TT, Block Height
    d3d_text 7, g_DISPLAY_RPM_x, g_DISPLAY_RPM_y, 1, str$(g_COMMPORT_Receive_RPM, 0)
    d3d_text 7, g_DISPLAY_TT_x, g_DISPLAY_TT_y, 1, str$(g_COMMPORT_Receive_TripTank#, 1)
    d3d_text 7, g_DISPLAY_BLKPOS_x, g_DISPLAY_BLKPOS_y, 1, str$(g_COMMPORT_Receive_BlockPosition#, 1)
    `PVT, SPP, Flow In
    d3d_text 7, g_DISPLAY_PVT_x, g_DISPLAY_PVT_y, 1, str$(g_COMMPORT_Receive_PVT#, 1)
    d3d_text 7, g_DISPLAY_SPP_x, g_DISPLAY_SPP_y, 1, str$(g_COMMPORT_Receive_SPP, 0)
    d3d_text 7, g_DISPLAY_FLOWIN_x, g_DISPLAY_FLOWIN_y, 1, str$(g_COMMPORT_Receive_FlowIN, 0)
    
    `Total SPM
    l_total_SPM_math = g_COMMPORT_Receive_SPM1 + g_COMMPORT_Receive_SPM2 + g_COMMPORT_Receive_SPM3
    d3d_text 7, g_DISPLAY_TOTAL_SPM_x, g_DISPLAY_TOTAL_SPM_y, 1, str$(l_total_SPM_math)
    `SPM1
    d3d_text 7, g_DISPLAY_SPM1_x, g_DISPLAY_SPM1_y, 1, str$(g_COMMPORT_Receive_SPM1, 0)
    `SPM2
    d3d_text 7, g_DISPLAY_SPM2_x, g_DISPLAY_SPM2_y, 1, str$(g_COMMPORT_Receive_SPM2, 0)
    `SPM3
    d3d_text 7, g_DISPLAY_SPM3_x, g_DISPLAY_SPM3_y, 1, str$(g_COMMPORT_Receive_SPM3, 0)
    `TG
    d3d_text 7, g_DISPLAY_TOTAL_GAS_x, g_DISPLAY_TOTAL_GAS_y, 1, str$(g_COMMPORT_Receive_TotalGas#, 2)
    `H2S
    d3d_text 7, g_DISPLAY_H2S_x, g_DISPLAY_H2S_y, 1, str$(g_COMMPORT_Receive_H2S#, 0)
    `LAG DEPTH
      if g_LAGDEPTH_AdjustValue# <> 0.0
        l_LagDepth_Adjusted_Val# = g_COMMPORT_Receive_LagDepth# * g_LAGDEPTH_AdjustValue#
        d3d_text 7, g_DISPLAY_LAGDEPTH_x, g_DISPLAY_LAGDEPTH_y, 1, str$(l_LagDepth_Adjusted_Val#, 1)
      endif
  d3d_endtext

endfunction

function lib_DispRT_PITS_Button()

  Local l_PitsButton_XPos as integer

  if g_ENGINE_Screen_Resolution = 1
    l_PitsButton_XPos = 1130
  else
    l_PitsButton_XPos = 788
  endif

  `ACTIVATE PITS SCREEN
  if mousex() > l_PitsButton_XPos and mousex() < l_PitsButton_XPos + 56 + 1
    if mousey() > 686 and mousey() < 720
      `(Input Code Marker: 95542)
      if mouseclick() = 1 and mouse_click(1) = -1 and g_RCM_MSE_INPUT_Toggle = -1
        mouse_click(1) = 1
        g_ENGINE_HIST_DRILL_Screen_Routing = 3
        g_PITS_CHART_Scroll_MouseZ = mousez()
        ENGINE_PITS_CHART_IMAGE_Creation()
        `Update the INFOBOX Highlight Box Position
        if g_INFOBOX_PITS_ModeState = 2 and g_ENGINE_CoreFunctionType = 2
          lib_INFOBOX_HighlightArea_Update(2)
        endif
      endif
    endif
  endif

endfunction

function lib_DispRT_HistDrill_Button()

  `Handle the Historical/Drilling Button (Input Code Marker: 34423)
  if mouseclick() = 1 and mouse_click(1) = -1 and g_RCM_MSE_INPUT_Toggle = -1
    
      
    if g_ENGINE_Screen_Resolution = 1
      `Widescreen
      if mousex() > 1243 and mousey() > 729
        if mousex() < 1243 + image width(c_HISTORICAL_BUTTONImgnum) and mousey() < 729 + image height(c_HISTORICAL_BUTTONImgnum)
          mouse_click(1) = 1
          if g_ENGINE_HIST_DRILL_Screen_Routing = 1
            g_ENGINE_HIST_DRILL_Screen_Routing = 2
            g_HS_Chart_Update_Start_Array = 1
              if g_ENGINE_CoreFunctionType = 1
                lib_HS_Format_CF1HS_DisplayArray()
                CF1_HS_PLOT_CHART_CF1_Create_Image()
              endif
              if g_ENGINE_CoreFunctionType = 2
                CF2_HS_PLOT_CHART_CF2_Create_Image()
              endif
          else
            g_ENGINE_HIST_DRILL_Screen_Routing = 1
            g_CHART_Scroll_MouseZ = mousez()
            ENGINE_DS_CHART_IMAGE_Creation()
            `Update the INFOBOX Highlight Box Position
            if g_INFOBOX_DS_ModeState = 2 and g_ENGINE_CoreFunctionType = 2
              lib_INFOBOX_HighlightArea_Update(1)
            endif
          endif

        endif
      endif
    else
      `1024x768
      if mousex() > 902 and mousey() > 729
        if mousex() < 902 + image width(c_HISTORICAL_BUTTONImgnum) and mousey() < 729 + image height(c_HISTORICAL_BUTTONImgnum)         
          mouse_click(1) = 1
          if g_ENGINE_HIST_DRILL_Screen_Routing = 1
            g_ENGINE_HIST_DRILL_Screen_Routing = 2
            g_HS_Chart_Update_Start_Array = 1
              if g_ENGINE_CoreFunctionType = 1
                lib_HS_Format_CF1HS_DisplayArray()
              endif
              if g_ENGINE_CoreFunctionType = 2
                CF2_HS_PLOT_CHART_CF2_Create_Image()
              endif
          else
            g_ENGINE_HIST_DRILL_Screen_Routing = 1
            g_CHART_Scroll_MouseZ = mousez()
            ENGINE_DS_CHART_IMAGE_Creation()
            `Update the INFOBOX Highlight Box Position
            if g_INFOBOX_DS_ModeState = 2 and g_ENGINE_CoreFunctionType = 2
              lib_INFOBOX_HighlightArea_Update(1)
            endif
          endif
        endif
      endif
      
    endif
    
  endif
 
 

endfunction

function _______DS_and_PITS_INFOBOX_Functions_______________________________jifftg64dr()
endfunction

function DS_CHART_INFOBOX_ENGINE()

  `INFOBOX has 2 Modes - g_INFOBOX_DS_ModeState = 1 or 2
  `  1: Simple: Click mouse on any chart to turn on. Move mouse around charts to display data at mousey position. Click mouse anywhere on chart to turn off
  `  2: Adv: From Mode 1 drag a box to turn on Mode 2. The box is then fixed in that chart. Keep dragging to size. Release mouse button to keep that size. Click again to deactivate.
  
  
  DS_CHART_INFOBOX_INPUT_Mouse()
  
  `DS - MODE 1
  if g_INFOBOX_DS_ModeState = 1
    lib_DS_CHART_INFOBOX_DrawLine()
    if g_INFOBOX_DS_GADGET_BlockActive <> -1
      CHART_INFOBOX_PRINT_DATA(g_INFOBOX_DS_GADGET_BlockActive, mousey(), 1, g_INFOBOX_DS_ModeState)
    endif
  endif

  `DS - MODE 2
  if g_INFOBOX_DS_ModeState = 2
    if g_INFOBOX_INPUT_LMB_State = 1 : `Handle drag box ON
      g_INFOBOX_MSEAreaDrag_EndY_ArrPntr = (g_DATABASE_MEM_Total_Num_Records - g_DS_CHART_Scroll_Array_Offset) - ((mousey() - 197) * g_ENGINE_DS_Chart_Time_Period_Adjust)
        `Scroll Charts if mouse is at the upper/lower edge of the charts
          `Note: Scrolling the charts is done by simulating movement of the mouse wheel (which activates that code to scroll the charts)
          if timer() > g_ChartScroll_MouseOutOfChart_Timer + c_ChartScrollMouseOutOfChart_Sensitivity
            g_ChartScroll_MouseOutOfChart_Timer = timer()
            if mousey() < 197
              dec g_CHART_Scroll_MouseZ, 1
            endif
            if mousey() > 647
              inc g_CHART_Scroll_MouseZ, 1
            endif
          endif
      lib_INFOBOX_HighlightArea_CreateBox(1)
      mouse_click(1) = 1 :`Set mouse_click(1) = 1 so that other inputs are disabled while dragging the box
    endif
    lib_INFOBOX_HighlightArea_DisplayBox(1)
    if g_INFOBOX_Databox_IsOnScreen = 1
      CHART_INFOBOX_PRINT_DATA(g_INFOBOX_DS_GADGET_BlockActive, mousey(), 1, g_INFOBOX_DS_ModeState)
    endif
  endif

endfunction

function DS_CHART_INFOBOX_INPUT_Mouse()

  `Toggle DS Chart InfoBox ON/OFF (Set MouseButton States)
  if mouseclick() = 0 and g_INFOBOX_INPUT_LMB_State = 1
    g_INFOBOX_INPUT_LMB_State = -1
    g_INFOBOX_INPUT_LMB_CheckForModeState2 = -1
  endif  
  if mouseclick() = 0 and g_INFOBOX_INPUT_RMB_State = 1 then g_INFOBOX_INPUT_RMB_State = -1
  
  
  `MODE 1 (Toggle Activate Mode 1 / Deactivate (All Modes))
  if mouseclick() = 1 and lib_DS_CHART_MouseInChartNumber() <> -1 and g_INFOBOX_ShowButton_ActionState = -1
    
    `Drag State to Activate ModeState 2 (Input Code Marker: 66473, see also ModeState = -1)
    if g_INFOBOX_INPUT_LMB_CheckForModeState2 = -1 and g_LOCKOUT_ChartInfoBoxes = -1 and g_LOCKOUT_INPUTPAD_ChartInfoBoxes = -1 and g_RCM_MSE_INPUT_Toggle = -1 
      g_INFOBOX_INPUT_LMB_CheckForModeState2 = 1
      g_INFOBOX_DS_GADGET_StartY = mousey()
      g_INFOBOX_MSEAreaDrag_StartY_ArrPntr = (g_DATABASE_MEM_Total_Num_Records - g_DS_CHART_Scroll_Array_Offset) - ((mousey() - 197) * g_ENGINE_DS_Chart_Time_Period_Adjust)
      if g_INFOBOX_MSEAreaDrag_StartY_ArrPntr < 0
        g_INFOBOX_MSEAreaDrag_StartY_ArrPntr = 0
      endif
      g_INFOBOX_DS_GADGET_BlockActive = lib_DS_CHART_MouseInChartNumber()
    endif
    
    `ModeState = 1
    if g_INFOBOX_DS_ModeState = 1 and g_INFOBOX_INPUT_LMB_State = -1  
      lib_DS_CHART_INFOBOX_Deactivate()
      g_INFOBOX_INPUT_LMB_State = 1
    endif
    
    `ModeState = -1
    if g_INFOBOX_DS_ModeState = -1 and g_INFOBOX_INPUT_LMB_State = -1 and g_LOCKOUT_ChartInfoBoxes = -1 and g_LOCKOUT_INPUTPAD_ChartInfoBoxes = -1 and g_RCM_MSE_INPUT_Toggle = -1
      g_INFOBOX_INPUT_LMB_State = 1
      l_MouseInChartNum = lib_DS_CHART_MouseInChartNumber()
      if l_MouseInChartNum > 0 and l_MouseInChartNum < 4
        g_INFOBOX_DS_ModeState = 1
        lib_DS_CHART_INFOBOX_ACTIVATE(l_MouseInChartNum)
      endif
    endif
  
    `ModeState = 2
    `Deactivate box grab (freeze box size) on LMB release
    if g_INFOBOX_DS_ModeState = 2 and g_INFOBOX_INPUT_LMB_State = -1 
      lib_DS_CHART_INFOBOX_Deactivate()
      g_INFOBOX_INPUT_LMB_State = 1
    endif
    
  endif
  
  
  if mouseclick() = 2 and g_INFOBOX_INPUT_RMB_State = -1
    lib_DS_CHART_INFOBOX_Deactivate()
    g_INFOBOX_INPUT_LMB_CheckForModeState2 = -1
    g_INFOBOX_INPUT_RMB_State = 1
    g_INFOBOX_INPUT_LMB_State = 1
  endif
  
  `SWITCH FROM MODE 1 TO MODE 2
  if g_INFOBOX_INPUT_LMB_State = 1 and g_INFOBOX_INPUT_LMB_CheckForModeState2 = 1 and lib_DS_CHART_MouseInChartNumber() <> -1
    if mousey() < (g_INFOBOX_DS_GADGET_StartY - c_ENG_RTDisp_GADGET_Mse_Sensitivity) or mousey() > (g_INFOBOX_DS_GADGET_StartY + c_ENG_RTDisp_GADGET_Mse_Sensitivity)
      g_INFOBOX_DS_ModeState = 2
    endif
  endif
  

endfunction


function lib_DS_CHART_INFOBOX_DrawLine()

  g_INFOBOX_DS_GADGET_BlockActive = -1

  if mousey() > g_BlockAll_Mouse_MinY and mousey() < g_BlockAll_Mouse_MaxY
   
    `CHART 1
    if mousex() > 0 and mousex() < g_Block1_Mouse_MaxX : `Note chart starts at 9, not 0, but its annoying when set to 9 g_BlockAll_Mouse_MinY
      d3d_line g_Block1_Mouse_MinX, mousey(), g_Block1_Mouse_MaxX, mousey(), g_ENGINE_COLOUR_Black
      g_INFOBOX_DS_GADGET_BlockActive = 1
    endif
    
    `CHART 2
    if mousex() > g_Block2_Mouse_MinX and mousex() < g_Block2_Mouse_MaxX
      d3d_line g_Block2_Mouse_MinX, mousey(), g_Block2_Mouse_MaxX, mousey(), g_ENGINE_COLOUR_Black
      g_INFOBOX_DS_GADGET_BlockActive = 2
    endif        
    
    `CHART 3
    if mousex() > g_Block3_Mouse_MinX and mousex() < g_Block3_Mouse_MaxX
      d3d_line g_Block3_Mouse_MinX, mousey(), g_Block3_Mouse_MaxX, mousey(), g_ENGINE_COLOUR_Black
      g_INFOBOX_DS_GADGET_BlockActive = 3
    endif        
  
  endif

endfunction

function lib_DS_CHART_INFOBOX_Draw_ALL_Lines(r_YPos as integer)

  d3d_line g_Block1_Mouse_MinX, r_YPos, g_Block1_Mouse_MaxX, r_YPos, g_ENGINE_COLOUR_Black
  
  d3d_line g_Block2_Mouse_MinX, r_YPos, g_Block2_Mouse_MaxX, r_YPos, g_ENGINE_COLOUR_Black
  
  d3d_line g_Block3_Mouse_MinX, r_YPos, g_Block3_Mouse_MaxX, r_YPos, g_ENGINE_COLOUR_Black

endfunction

function lib_DS_CHART_INFOBOX_ACTIVATE(r_ActiveBlock)

  g_INFOBOX_DS_GADGET_BlockActive = r_ActiveBlock
  
  `Handle Area Dragging
  g_INFOBOX_DS_Stage = 1
  
  ENG_RTDisp_GADGET_ImgCreatedAtMseY = -999
  

endfunction

function lib_DS_CHART_INFOBOX_Deactivate()

  if g_INFOBOX_ShowButton_ActionState <> 1
    g_INFOBOX_DS_ModeState = -1
    lib_Set_CHART_INFOBOX_ShowButtonState(-1)
  endif

endfunction

function lib_DS_CHART_MouseInChartNumber()

  local p_OUTPUT as integer: p_OUTPUT = -1

  `This function determines whether the mouse is currently in a chart area
  
  if mousey() > 196 and mousey() < 648
    `Chart 1
    if mousex() > g_Block1_Mouse_MinX and mousex() < g_Block1_Mouse_MaxX
      p_OUTPUT = 1
    endif
    `Chart 2
    if mousex() > g_Block2_Mouse_MinX and mousex() < g_Block2_Mouse_MaxX
      p_OUTPUT = 2
    endif
    `Chart 3
    if mousex() > g_Block3_Mouse_MinX and mousex() < g_Block3_Mouse_MaxX
      p_OUTPUT = 3
    endif
  endif
  
endfunction p_OUTPUT


function a_____()
endfunction

function PITS_CHART_INFOBOX_ENGINE()


  `INFOBOX has 2 Modes - g_INFOBOX_DS_ModeState = 1 or 2
  `  1: Simple: Click mouse on any chart to turn on. Move mouse around charts to display data at mousey position. Click mouse anywhere on chart to turn off
  `  2: Adv: From Mode 1 drag a box to turn on Mode 2. The box is then fixed in that chart. Keep dragging to size. Release mouse button to keep that size. Click again to deactivate.
  
  
  PITS_CHART_INFOBOX_INPUT_Mouse()
  

  
  `PITS - MODE 1
  if g_INFOBOX_PITS_ModeState = 1
    lib_PITS_CHART_INFOBOX_DrawLine()
    `if mousey() > g_BlockAll_Mouse_MinY and mousey() < g_BlockAll_Mouse_MaxY
    if g_INFOBOX_PITS_GADGET_BlockActive <> -1
      CHART_INFOBOX_PRINT_DATA(g_INFOBOX_PITS_GADGET_BlockActive, mousey(), 2, g_INFOBOX_PITS_ModeState)
    endif
  endif

  `PITS - MODE 2
  if g_INFOBOX_PITS_ModeState = 2
    if g_INFOBOX_INPUT_LMB_State = 1
      g_INFOBOX_MSEAreaDrag_EndY_ArrPntr = (g_DATABASE_MEM_Total_Num_Records - g_PITS_CHART_Scroll_Array_Offset) - ((mousey() - 197) * g_ENGINE_PITS_Chart_Time_Period_Adjust)
      `Scroll Charts if mouse is at the upper/lower edge of the charts
        `Note: Scrolling the charts is done by simulating movement of the mouse wheel (which activates that code to scroll the charts)
        if timer() > g_ChartScroll_MouseOutOfChart_Timer + c_ChartScrollMouseOutOfChart_Sensitivity
          g_ChartScroll_MouseOutOfChart_Timer = timer()
          if mousey() < 197
            dec g_PITS_CHART_Scroll_MouseZ, 1
          endif
          if mousey() > 647
            inc g_PITS_CHART_Scroll_MouseZ, 1
          endif
        endif
      lib_INFOBOX_HighlightArea_CreateBox(2)
    endif
    lib_INFOBOX_HighlightArea_DisplayBox(2)
    if g_INFOBOX_Databox_IsOnScreen = 1
      CHART_INFOBOX_PRINT_DATA(g_INFOBOX_PITS_GADGET_BlockActive, mousey(), 2, g_INFOBOX_PITS_ModeState)
    endif
  endif
   

endfunction

function PITS_CHART_INFOBOX_INPUT_Mouse()



  `Toggle PITS Chart InfoBox ON/OFF
  if mouseclick() = 0 and g_INFOBOX_INPUT_LMB_State = 1
    g_INFOBOX_INPUT_LMB_State = -1
    g_INFOBOX_INPUT_LMB_CheckForModeState2 = -1
  endif  
  if mouseclick() = 0 and g_INFOBOX_INPUT_RMB_State = 1 then g_INFOBOX_INPUT_RMB_State = -1
  
  `MODE 1 (Toggle Activate Mode 1 / Deactivate (All Modes))
  if mouseclick() = 1 and lib_PITS_CHART_MouseInChartNumber() <> -1 and g_INFOBOX_ShowButton_ActionState = -1
    
    `Drag State to Activate ModeState 2 (Input Code Marker: 83263, see also ModeState = -1)
    if g_INFOBOX_INPUT_LMB_CheckForModeState2 = -1 and g_LOCKOUT_ChartInfoBoxes = -1 and g_LOCKOUT_INPUTPAD_ChartInfoBoxes = -1 and g_RCM_MSE_INPUT_Toggle = -1
      g_INFOBOX_INPUT_LMB_CheckForModeState2 = 1
      g_INFOBOX_PITS_GADGET_StartY = mousey()
      g_INFOBOX_MSEAreaDrag_StartY_ArrPntr = (g_DATABASE_MEM_Total_Num_Records - g_PITS_CHART_Scroll_Array_Offset) - ((mousey() - 197) * g_ENGINE_PITS_Chart_Time_Period_Adjust)
      if g_INFOBOX_MSEAreaDrag_StartY_ArrPntr < 0
        g_INFOBOX_MSEAreaDrag_StartY_ArrPntr = 0
      endif
      g_INFOBOX_PITS_GADGET_BlockActive = lib_PITS_CHART_MouseInChartNumber()
    endif
    `ModeState = 1
    if g_INFOBOX_PITS_ModeState = 1 and g_INFOBOX_INPUT_LMB_State = -1 and g_LOCKOUT_ChartInfoBoxes = -1 and g_LOCKOUT_INPUTPAD_ChartInfoBoxes = -1
      lib_PITS_CHART_INFOBOX_Deactivate()
      g_INFOBOX_INPUT_LMB_State = 1
    endif
    `ModeState = -1
    if g_INFOBOX_PITS_ModeState = -1 and g_INFOBOX_INPUT_LMB_State = -1 and g_RCM_MSE_INPUT_Toggle = -1
      g_INFOBOX_INPUT_LMB_State = 1
      l_MouseInChartNum = lib_PITS_CHART_MouseInChartNumber()
      if l_MouseInChartNum > 0 and l_MouseInChartNum < 5
        g_INFOBOX_PITS_ModeState = 1
        lib_PITS_CHART_INFOBOX_ACTIVATE(l_MouseInChartNum)
      endif
    endif
  
    `ModeState = 2
    if g_INFOBOX_PITS_ModeState = 2 and g_INFOBOX_INPUT_LMB_State = -1
      lib_PITS_CHART_INFOBOX_Deactivate()
      g_INFOBOX_INPUT_LMB_State = 1
    endif
    
  endif  
   
  if mouseclick() = 2 and g_INFOBOX_INPUT_RMB_State = -1
    lib_PITS_CHART_INFOBOX_Deactivate()
    g_INFOBOX_INPUT_LMB_CheckForModeState2 = -1
    g_INFOBOX_INPUT_RMB_State = 1
    g_INFOBOX_INPUT_LMB_State = 1
  endif  
  
  `SWITCH FROM MODE 1 TO MODE 2
  if g_INFOBOX_INPUT_LMB_State = 1 and g_INFOBOX_INPUT_LMB_CheckForModeState2 = 1 and lib_PITS_CHART_MouseInChartNumber() <> -1
    if mousey() < (g_INFOBOX_PITS_GADGET_StartY - c_ENG_RTDisp_GADGET_Mse_Sensitivity) or mousey() > (g_INFOBOX_PITS_GADGET_StartY + c_ENG_RTDisp_GADGET_Mse_Sensitivity)
      g_INFOBOX_PITS_ModeState = 2
    endif
  endif
  
  `Handle_DS_Screen_DepthTick_Button() Strange its here, now moved to a main display function
  
  `Handle the PITS SCREEN zero time button (Input Code Marker: 45321)   
  if mouseclick() = 1 and mouse_click(1) = -1 and g_RCM_MSE_INPUT_Toggle = -1
    if mousey() > 194 and mousey() < 226
      if g_ENGINE_Screen_Resolution = 1
        if mousex() > 1321 and mousex() < 1337
          mouse_click(1) = 1
          g_PITS_ChartButton_TimeZero_Timer = timer() + 300
          g_PITS_CHART_Scroll_Array_Offset = 0
          ENGINE_PITS_CHART_IMAGE_Creation()
        endif
      else
        if mousex() > 888 and mousex() < 904
          mouse_click(1) = 1
          g_PITS_ChartButton_TimeZero_Timer = timer() + 300
          g_PITS_CHART_Scroll_Array_Offset = 0
          ENGINE_PITS_CHART_IMAGE_Creation()
        endif
      endif
    endif
  endif
  
  `[SPACE BAR] - PITS Zero Time Button
  if scancode() = 57 and g_CMNTSYS_AddNewCmnt_Stage = -1
    g_PITS_ChartButton_TimeZero_Timer = timer() + 300
    g_PITS_CHART_Scroll_Array_Offset = 0
    ENGINE_PITS_CHART_IMAGE_Creation()
  endif
  
  `Flash the PITS SCREEN DS Zero Chart Position Button if it has been pressed.
  if timer() < g_PITS_ChartButton_TimeZero_Timer
    if g_ENGINE_Screen_Resolution = 1
      paste image c_DS_Chart_PosZero_Img, 1322, 192
    else
      paste image c_DS_Chart_PosZero_Img, 889, 192
    endif
  endif
  
  

endfunction

function lib_PITS_CHART_INFOBOX_DrawLine()

  g_INFOBOX_PITS_GADGET_BlockActive = -1


  if mousey() > g_BlockAll_Mouse_MinY and mousey() < g_BlockAll_Mouse_MaxY
  
    `CHART 1
    if mousex() > 0 and mousex() < g_Block1_Mouse_MaxX : `Note chart starts at 9, not 0, but its annoying when set to 9 g_BlockAll_Mouse_MinY
      d3d_line g_Block1_Mouse_MinX, mousey(), g_Block1_Mouse_MaxX, mousey(), g_ENGINE_COLOUR_Black
      g_INFOBOX_PITS_GADGET_BlockActive = 1
    endif
    
    `CHART 2
    if mousex() > g_Block2_Mouse_MinX and mousex() < g_Block2_Mouse_MaxX
      d3d_line g_Block2_Mouse_MinX, mousey(), g_Block2_Mouse_MaxX, mousey(), g_ENGINE_COLOUR_Black
      g_INFOBOX_PITS_GADGET_BlockActive = 2
    endif        
    
    `CHART 3
    if mousex() > g_Block3_Mouse_MinX and mousex() < g_Block3_Mouse_MaxX
      d3d_line g_Block3_Mouse_MinX, mousey(), g_Block3_Mouse_MaxX, mousey(), g_ENGINE_COLOUR_Black
      g_INFOBOX_PITS_GADGET_BlockActive = 3
    endif
    
    `CHART 4       
    if mousex() > g_Block4_Mouse_MinX and mousex() < g_Block4_Mouse_MaxX
      d3d_line g_Block4_Mouse_MinX, mousey(), g_Block4_Mouse_MaxX, mousey(), g_ENGINE_COLOUR_Black
      g_INFOBOX_PITS_GADGET_BlockActive = 4
    endif
    
  endif


endfunction


function lib_PITS_CHART_INFOBOX_Draw_ALL_Lines(r_Ypos as integer)

  d3d_line g_Block1_Mouse_MinX, r_Ypos, g_Block1_Mouse_MaxX, r_Ypos, g_ENGINE_COLOUR_Black

  d3d_line g_Block2_Mouse_MinX, r_Ypos, g_Block2_Mouse_MaxX, r_Ypos, g_ENGINE_COLOUR_Black

  d3d_line g_Block3_Mouse_MinX, r_Ypos, g_Block3_Mouse_MaxX, r_Ypos, g_ENGINE_COLOUR_Black
  
  d3d_line g_Block4_Mouse_MinX, r_Ypos, g_Block4_Mouse_MaxX, r_Ypos, g_ENGINE_COLOUR_Black

endfunction



function lib_PITS_CHART_INFOBOX_ACTIVATE(r_ActiveBlock)

  g_INFOBOX_PITS_GADGET_BlockActive = r_ActiveBlock
  
  `Handle Area Dragging
  g_INFOBOX_PITS_Stage = 1
  
  ENG_RTDisp_GADGET_ImgCreatedAtMseY = -999
  

endfunction

function lib_PITS_CHART_INFOBOX_Deactivate()

  if g_INFOBOX_ShowButton_ActionState <> 1
    g_INFOBOX_PITS_ModeState = -1
    lib_Set_CHART_INFOBOX_ShowButtonState(-1)
  endif

endfunction

function lib_PITS_CHART_MouseInChartNumber()

  local p_OUTPUT as integer: p_OUTPUT = -1

  `This function determines whether the mouse is currently in a chart area
  
  if mousey() > 196 and mousey() < 648
    `Chart 1
    if mousex() > g_Block1_Mouse_MinX and mousex() < g_Block1_Mouse_MaxX
      p_OUTPUT = 1
    endif
    `Chart 2
    if mousex() > g_Block2_Mouse_MinX and mousex() < g_Block2_Mouse_MaxX
      p_OUTPUT = 2
    endif
    `Chart 3
    if mousex() > g_Block3_Mouse_MinX and mousex() < g_Block3_Mouse_MaxX
      p_OUTPUT = 3
    endif
    `Chart 4
    if mousex() > g_Block4_Mouse_MinX and mousex() < g_Block4_Mouse_MaxX
      p_OUTPUT = 4
    endif
  endif
  
endfunction p_OUTPUT

function b_____________()
endfunction

function lib_DS_PITS_CHART_INFOBOX_DeactivateBoth()

    lib_DS_CHART_INFOBOX_Deactivate()
    lib_PITS_CHART_INFOBOX_Deactivate()
    g_INFOBOX_INPUT_LMB_CheckForModeState2 = -1
    g_INFOBOX_INPUT_RMB_State = 1
    g_INFOBOX_INPUT_LMB_State = 1

endfunction

function CHART_INFOBOX_PRINT_DATA(r_ChartID as integer, r_PrintPos_Y as integer, r_ScreenType as integer, r_ModeState as integer)

  `Note: r_ScreenType - 1:Drilling Screen, 2:Pits Screen
  `      r_ChartID    - The selected chart - Drilling Screen:1-3, Pits:1-4
  `      r_ModeState  - Simple/Advanced (Single Click/Drag Area) Infobox Type

  local l_BoxXPos as integer
  local l_BoxYPos as integer
  local lMS_R1X as integer
  local lMS_R2X as integer
  local lMS_R3X as integer
  local lMS_R4X as integer
  local lMS_Y as integer
  
  local l_ActiveBlock_3_Or_4_Chnl as integer : l_ActiveBlock_3_Or_4_Chnl = -1
  
  local l_ShowWorkingButton as integer : l_ShowWorkingButton = 1
    
  if r_ChartID = 1 then l_BoxXPos = g_Block1_Mouse_MaxX
  if r_ChartID = 2 then l_BoxXPos = g_Block2_Mouse_MaxX
  if r_ChartID = 3 then l_BoxXPos = g_Block3_Mouse_MaxX
  if r_ChartID = 4 then l_BoxXPos = (g_Block4_Mouse_MinX - image width(c_GADGET_1_IMG_DataBox_VAR))
  
  lib_INFOBOX_CALC_DATA(r_ScreenType, r_ChartID, r_ModeState)
  
  if r_ModeState = 1 then l_BoxYPos = mousey()
  if r_ModeState = 2
    l_BoxYPos = g_INFOBOX_Databox_YPos
  endif  
  
  if mouseclick() = 1
    if r_ModeState = 2
      `Draw Realtime (Mouse Position Lines)
      if r_ScreenType = 1 
        lib_DS_CHART_INFOBOX_Draw_ALL_Lines(mousey())
      endif
      if r_ScreenType = 2
        lib_PITS_CHART_INFOBOX_Draw_ALL_Lines(mousey())
      endif
    endif
  else
    `Draw Historical (Last Mouse Y Position) Lines
    if r_ModeState = 2
      if r_ScreenType = 1 
        lib_DS_CHART_INFOBOX_Draw_ALL_Lines(l_BoxYPos)
      endif
      if r_ScreenType = 2
        lib_PITS_CHART_INFOBOX_Draw_ALL_Lines(l_BoxYPos)
      endif
    endif
  endif
  
  `Determine if the current active block has been set to show 3 channels or 4 channels of data
  l_ActiveBlock_3_Or_4_Chnl = lib_InfoBox_BlockDisp_3_Or_4_ChnlsOfData(r_ChartID, r_ScreenType)
  
  `Create the background image
  lib_INFOBOX_DATABOX_Make_BkgdImg(g_INFOBOX_DataBox_BkgdImg_Height, r_ModeState)
  
    
  if image exist(c_GADGET_1_IMG_DataBox_VAR) = 1
    if r_ModeState = 1
      if l_BoxYPos + image height(c_GADGET_1_IMG_DataBox_VAR) > screen height()
        l_BoxYPos = screen height() - image height(c_GADGET_1_IMG_DataBox_VAR)
      endif
    endif
    if r_ModeState = 2
      if l_BoxYPos + image height(c_GADGET_1_IMG_DataBox_VAR) > screen height()
        l_BoxYPos = screen height() - image height(c_GADGET_1_IMG_DataBox_VAR)
      endif
    endif
  endif
  
  paste sprite c_SPRITE_RTDisp_Gadget_1_DataBoxVAR, l_BoxXPos, l_BoxYPos


  `PRINT DATA TO INFOBOX

  `SIMPLE SMALL INFO BOX
  if r_ModeState = 1
  
    if g_PORTABLE_ENG_RunAs_VIEWER = 1
      lMS_R1X = l_BoxXPos + 9
      lMS_R2X = l_BoxXPos + 83
      lMS_R3X = l_BoxXPos + 91
      lMS_Y = l_BoxYPos 
    else
      lMS_R1X = l_BoxXPos + 10
      lMS_R2X = l_BoxXPos + 85
      lMS_R3X = l_BoxXPos + 95
      lMS_Y = l_BoxYPos  
    endif
  
    d3d_starttext
    
      inc lMS_Y, 10
      d3d_text 2, lMS_R1X, lMS_Y, 0, "Time", g_ENGINE_COLOUR_Black
      lib_PRINTColon(2, lMS_R2X, lMS_Y, g_ENGINE_COLOUR_Black)
      d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(0), g_ENGINE_COLOUR_Black
      inc lMS_Y, 20
      d3d_text 2, lMS_R1X, lMS_Y, 0, "Hole Depth", g_ENGINE_COLOUR_Black
      lib_PRINTColon(2, lMS_R2X, lMS_Y, g_ENGINE_COLOUR_Black)
      d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(1), g_ENGINE_COLOUR_Black
      inc lMS_Y, 20
      d3d_text 2, lMS_R1X, lMS_Y, 0, "Bit Depth", g_ENGINE_COLOUR_Black
      lib_PRINTColon(2, lMS_R2X, lMS_Y, g_ENGINE_COLOUR_Black)
      d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(2), g_ENGINE_COLOUR_Black
      `
      inc lMS_Y, 20
      d3d_text 2, lMS_R1X, lMS_Y, 0, INFOBOX_Text$(3), INFOBOX_TextColour(3)
      lib_PRINTColon(2, lMS_R2X, lMS_Y, INFOBOX_TextColour(3))
      d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(4), INFOBOX_TextColour(4)
      inc lMS_Y, 20
      d3d_text 2, lMS_R1X, lMS_Y, 0, INFOBOX_Text$(5), INFOBOX_TextColour(5)
      lib_PRINTColon(2, lMS_R2X, lMS_Y, INFOBOX_TextColour(5))
      d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(6), INFOBOX_TextColour(6)
      inc lMS_Y, 20
      d3d_text 2, lMS_R1X, lMS_Y, 0, INFOBOX_Text$(7), INFOBOX_TextColour(7)
      lib_PRINTColon(2, lMS_R2X, lMS_Y, INFOBOX_TextColour(7))
      d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(8), INFOBOX_TextColour(8)
      
      if l_ActiveBlock_3_Or_4_Chnl = 4
      	inc lMS_Y, 20
      	d3d_text 2, lMS_R1X, lMS_Y, 0, INFOBOX_Text$(9), INFOBOX_TextColour(9)
      	lib_PRINTColon(2, lMS_R2X, lMS_Y, INFOBOX_TextColour(9))
      	d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(10), INFOBOX_TextColour(10)
      endif
  
    d3d_endtext
  endif
  
  `LARGE DRAGGED INFO BOX
  if r_ModeState = 2
  
    lMS_R1X = l_BoxXPos + 10
    lMS_R2X = l_BoxXPos + 90
    lMS_R3X = l_BoxXPos + 160
    lMS_R4X = l_BoxXPos + 220
    lMS_Y = l_BoxYPos 
      
    d3d_starttext

      inc lMS_Y, 7
      d3d_line lMS_R2X-5, lMS_Y, l_BoxXPos + 275, lMS_Y, g_ENGINE_COLOUR_Black
      inc lMS_Y, 7
      d3d_text 2, lMS_R2X, lMS_Y, 0, "Start", g_ENGINE_COLOUR_Black
      d3d_text 2, lMS_R3X, lMS_Y, 0, "End", g_ENGINE_COLOUR_Black
      d3d_text 2, lMS_R4X, lMS_Y, 0, "Diff", g_ENGINE_COLOUR_Black

      inc lMS_Y, 20 : d3d_text 2, lMS_R1X, lMS_Y, 0, "Time", g_ENGINE_COLOUR_Black
      inc lMS_Y, 20 : d3d_text 2, lMS_R1X, lMS_Y, 0, "Hole Depth", g_ENGINE_COLOUR_Black
      inc lMS_Y, 20 : d3d_text 2, lMS_R1X, lMS_Y, 0, "Bit Depth", g_ENGINE_COLOUR_Black
      
      dec lMS_Y, 40
      `Time
      d3d_text 2, lMS_R2X, lMS_Y, 0, INFOBOX_Text$(0), g_ENGINE_COLOUR_Black
      d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(1), g_ENGINE_COLOUR_Black
      d3d_text 2, lMS_R4X, lMS_Y, 0, INFOBOX_Text$(2), g_ENGINE_COLOUR_Black
      `Hole Depth
      inc lMS_Y, 20
      d3d_text 2, lMS_R2X, lMS_Y, 0, INFOBOX_Text$(3), g_ENGINE_COLOUR_Black
      d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(4), g_ENGINE_COLOUR_Black
      d3d_text 2, lMS_R4X, lMS_Y, 0, INFOBOX_Text$(5), g_ENGINE_COLOUR_Black
      `Bit Depth
      inc lMS_Y, 20
      d3d_text 2, lMS_R2X, lMS_Y, 0, INFOBOX_Text$(6), g_ENGINE_COLOUR_Black
      d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(7), g_ENGINE_COLOUR_Black
      d3d_text 2, lMS_R4X, lMS_Y, 0, INFOBOX_Text$(8), g_ENGINE_COLOUR_Black
      `------
      `--------------------------------------------
      `Channel 1 Start/End of Selection and Difference
        inc lMS_Y, 20 : d3d_text 2, lMS_R1X, lMS_Y, 0, INFOBOX_Text$(18), INFOBOX_TextColour(9)
        inc lMS_Y, 20 : d3d_text 2, lMS_R1X, lMS_Y, 0, INFOBOX_Text$(22), INFOBOX_TextColour(13)
        inc lMS_Y, 20 : d3d_text 2, lMS_R1X, lMS_Y, 0, INFOBOX_Text$(26), INFOBOX_TextColour(17)
        if l_ActiveBlock_3_Or_4_Chnl = 4
          inc lMS_Y, 20 : d3d_text 2, lMS_R1X, lMS_Y, 0, INFOBOX_Text$(61), INFOBOX_TextColour(58)
          dec lMS_Y, 60
        else
          dec lMS_Y, 40
        endif
        
        
        `Print DATA: Channel 1
        d3d_text 2, lMS_R2X, lMS_Y, 0, INFOBOX_Text$(9), INFOBOX_TextColour(9)
        d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(10), INFOBOX_TextColour(9)
        d3d_text 2, lMS_R4X, lMS_Y, 0, INFOBOX_Text$(11), INFOBOX_TextColour(9)
        inc lMS_Y, 20
        `Print DATA: Channel 2
        d3d_text 2, lMS_R2X, lMS_Y, 0, INFOBOX_Text$(12), INFOBOX_TextColour(13)
        d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(13), INFOBOX_TextColour(13)
        d3d_text 2, lMS_R4X, lMS_Y, 0, INFOBOX_Text$(14), INFOBOX_TextColour(13)
        inc lMS_Y, 20
        `Print DATA: Channel 3
        d3d_text 2, lMS_R2X, lMS_Y, 0, INFOBOX_Text$(15), INFOBOX_TextColour(17)
        d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(16), INFOBOX_TextColour(17)
        d3d_text 2, lMS_R4X, lMS_Y, 0, INFOBOX_Text$(17), INFOBOX_TextColour(17)
        `Print DATA: Channel 4
      	if l_ActiveBlock_3_Or_4_Chnl = 4
      			inc lMS_Y, 20
        	d3d_text 2, lMS_R2X, lMS_Y, 0, INFOBOX_Text$(58), INFOBOX_TextColour(58)
        	d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(59), INFOBOX_TextColour(58)
        	d3d_text 2, lMS_R4X, lMS_Y, 0, INFOBOX_Text$(60), INFOBOX_TextColour(58)
      	endif
        
      
      `---------------------------------------------
      
      inc lMS_Y, 25
      d3d_line lMS_R1X, lMS_Y, l_BoxXPos + 275, lMS_Y, g_ENGINE_COLOUR_Black
      
      inc lMS_Y, 10
      `d3d_text 2, lMS_R1X, lMS_Y, 0, "RANGES Min/Max  (Minimum ignores zero values)", g_ENGINE_COLOUR_Black
      `d3d_text 2, lMS_R1X, lMS_Y, 0, "RANGES Min/Max  (Min ignores 0 values)", g_ENGINE_COLOUR_Black
      
      d3d_text 2, lMS_R1X, lMS_Y, 0, "RANGES Min/Max", g_ENGINE_COLOUR_Black
      d3d_text 10, lMS_R1X, lMS_Y, 0, "                                        (Minimum ignores zero values)", g_ENGINE_COLOUR_Black
      
      inc lMS_Y, 20
      d3d_text 2, lMS_R2X, lMS_Y, 0, "Min", g_ENGINE_COLOUR_Black
      d3d_text 2, lMS_R3X, lMS_Y, 0, "Max", g_ENGINE_COLOUR_Black
      d3d_text 2, lMS_R4X, lMS_Y, 0, "Diff", g_ENGINE_COLOUR_Black
      `Print CHANNEL HEADERS
      
      inc lMS_Y, 20 : d3d_text 2, lMS_R1X, lMS_Y, 0, INFOBOX_Text$(18), INFOBOX_TextColour(9)
      inc lMS_Y, 20 : d3d_text 2, lMS_R1X, lMS_Y, 0, INFOBOX_Text$(22), INFOBOX_TextColour(13)
      inc lMS_Y, 20 : d3d_text 2, lMS_R1X, lMS_Y, 0, INFOBOX_Text$(26), INFOBOX_TextColour(17)
      if l_ActiveBlock_3_Or_4_Chnl = 4
        inc lMS_Y, 20 : d3d_text 2, lMS_R1X, lMS_Y, 0, INFOBOX_Text$(61), INFOBOX_TextColour(58)
        dec lMS_Y, 60
      else
        dec lMS_Y, 40
      endif
      
      
      `Print DATA: Channel 1
      d3d_text 2, lMS_R2X, lMS_Y, 0, INFOBOX_Text$(19), INFOBOX_TextColour(9)
      d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(20), INFOBOX_TextColour(9)
      d3d_text 2, lMS_R4X, lMS_Y, 0, INFOBOX_Text$(21), INFOBOX_TextColour(9)
      inc lMS_Y, 20
      `Print DATA: Channel 2
      d3d_text 2, lMS_R2X, lMS_Y, 0, INFOBOX_Text$(23), INFOBOX_TextColour(13)
      d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(24), INFOBOX_TextColour(13)
      d3d_text 2, lMS_R4X, lMS_Y, 0, INFOBOX_Text$(25), INFOBOX_TextColour(13)
      inc lMS_Y, 20
      `Print DATA: Channel 3
      d3d_text 2, lMS_R2X, lMS_Y, 0, INFOBOX_Text$(27), INFOBOX_TextColour(17)
      d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(28), INFOBOX_TextColour(17)
      d3d_text 2, lMS_R4X, lMS_Y, 0, INFOBOX_Text$(29), INFOBOX_TextColour(17)
      
      `Print DATA: Channel 4
      if l_ActiveBlock_3_Or_4_Chnl = 4
      		inc lMS_Y, 20
        d3d_text 2, lMS_R2X, lMS_Y, 0, INFOBOX_Text$(62), INFOBOX_TextColour(58)
        d3d_text 2, lMS_R3X, lMS_Y, 0, INFOBOX_Text$(63), INFOBOX_TextColour(58)
        d3d_text 2, lMS_R4X, lMS_Y, 0, INFOBOX_Text$(64), INFOBOX_TextColour(58)
      endif
      
      inc lMS_Y, 25
      d3d_line lMS_R1X, lMS_Y, l_BoxXPos + 275, lMS_Y, g_ENGINE_COLOUR_Black
      
      `ADD ON BOTTOM TIMES
      if g_INFOBOX_AddDataToInfoBox_ROP = 1
        inc lMS_Y, 10
        d3d_text 2, lMS_R1X, lMS_Y, 0, "On Bottom Time (All) : " + INFOBOX_Text$(30), g_ENGINE_COLOUR_Black
        inc lMS_Y, 20
        d3d_text 2, lMS_R1X, lMS_Y, 0, "On Bottom Time (Rotate): " + INFOBOX_Text$(65), g_ENGINE_COLOUR_Black
        inc lMS_Y, 20
        d3d_text 2, lMS_R1X, lMS_Y, 0, "ROP Average : " + INFOBOX_Text$(31), g_ENGINE_COLOUR_Black
        inc lMS_Y, 25
        d3d_line lMS_R1X, lMS_Y, l_BoxXPos + 275, lMS_Y, g_ENGINE_COLOUR_Black
      endif
      
      `ADD TT
      if g_INFOBOX_AddDataToInfoBox_TT = 1
        inc lMS_Y, 10
        d3d_text 2, lMS_R1X, lMS_Y, 0, "Triptank Information", g_ENGINE_COLOUR_Black
        inc lMS_Y, 20
        d3d_text 2, lMS_R1X, lMS_Y, 0, "  " + INFOBOX_Text$(32), g_ENGINE_COLOUR_Black
        inc lMS_Y, 20
        d3d_text 2, lMS_R1X, lMS_Y, 0, "      " + INFOBOX_Text$(33), g_ENGINE_COLOUR_Black
        inc lMS_Y, 25
        d3d_line lMS_R1X, lMS_Y, l_BoxXPos + 275, lMS_Y, g_ENGINE_COLOUR_Black
      endif
      
      `ADD PVT
      if g_INFOBOX_AddDataToInfoBox_PVT = 1
        inc lMS_Y, 10 : lShBtnY = lMS_Y
        d3d_text 2, lMS_R1X, lMS_Y, 0, "Losses Calculator", g_ENGINE_COLOUR_Black
        inc lMS_Y, 20
        d3d_text 2, lMS_R1X, lMS_Y, 0, "  Depth Diff", g_ENGINE_COLOUR_Black
        d3d_text 2, lMS_R2X, lMS_Y, 0, "Actual", g_ENGINE_COLOUR_Black
        d3d_text 2, lMS_R3X, lMS_Y, 0, "Theoretical", g_ENGINE_COLOUR_Black
        inc lMS_Y, 20
        d3d_text 2, lMS_R1X, lMS_Y, 0, "  " + INFOBOX_Text$(34), g_ENGINE_COLOUR_Black
        d3d_text 2, lMS_R2X, lMS_Y, 0, "  " + INFOBOX_Text$(35), g_ENGINE_COLOUR_Black
        d3d_text 2, lMS_R3X, lMS_Y, 0, "  " + INFOBOX_Text$(36), g_ENGINE_COLOUR_Black
        inc lMS_Y, 25
        d3d_text 2, lMS_R1X, lMS_Y, 0, "     " + INFOBOX_Text$(37), g_ENGINE_COLOUR_Black
        inc lMS_Y, 25
        d3d_line lMS_R1X, lMS_Y, l_BoxXPos + 275, lMS_Y, g_ENGINE_COLOUR_Black
      endif
      
      `ADD TOTAL CIRCULATING TIME
      if g_INFOBOX_AddDataToInfoBox_CircHrs = 1
        inc lMS_Y, 10
        d3d_text 2, lMS_R1X, lMS_Y, 0, "Total Circ Time : " + INFOBOX_Text$(38), g_ENGINE_COLOUR_Black
        inc lMS_Y, 25
        d3d_line lMS_R1X, lMS_Y, l_BoxXPos + 275, lMS_Y, g_ENGINE_COLOUR_Black
      endif
      
      `ADD SPM 1+2+3 TIMES
      if g_INFOBOX_AddDataToInfoBox_TotalSPMsTime = 1
        inc lMS_Y, 10
        d3d_text 10, lMS_R1X, lMS_Y, 0, "ALL: SPM1: " + INFOBOX_Text$(49) + ", SPM2: " + INFOBOX_Text$(50) + ", SPM3: " + INFOBOX_Text$(51), g_ENGINE_COLOUR_Black
        inc lMS_Y, 20
        d3d_text 10, lMS_R1X, lMS_Y, 0, "ON BOTT: SPM1: " + INFOBOX_Text$(52) + ", SPM2: " + INFOBOX_Text$(53) + ", SPM3: " + INFOBOX_Text$(54), g_ENGINE_COLOUR_Black
        inc lMS_Y, 25
        d3d_line lMS_R1X, lMS_Y, l_BoxXPos + 275, lMS_Y, g_ENGINE_COLOUR_Black
      endif
      
      `ADD TOTAL ROTATING TIME
      if g_INFOBOX_AddDataToInfoBox_RotatingHrs = 1
        inc lMS_Y, 10
        d3d_text 2, lMS_R1X, lMS_Y, 0, "Total Rotating Time : " + INFOBOX_Text$(39), g_ENGINE_COLOUR_Black
        inc lMS_Y, 20
        d3d_text 2, lMS_R1X, lMS_Y, 0, "String Revolutions : " + INFOBOX_Text$(40), g_ENGINE_COLOUR_Black
        inc lMS_Y, 25
        d3d_line lMS_R1X, lMS_Y, l_BoxXPos + 275, lMS_Y, g_ENGINE_COLOUR_Black
      endif
      
      `ADD BIT REV INFORMATION
      if g_INFOBOX_AddDataToInfoBox_BIT_REVS = 1
        inc lMS_Y, 1
        d3d_text 10, lMS_R1X, lMS_Y, 0, "                                  (Mud Motor Factor: " + str$(WELLDATA_MudMotorFactor_RevsGallon#, 2) + " revs/gal)", g_ENGINE_COLOUR_Black
        inc lMS_Y, 13
        d3d_text 2, lMS_R1X, lMS_Y, 0, "ON BOTT REVS: ALL MM + RT : " + str$((val(INFOBOX_Text$(48))/1000), 1) + "k", g_ENGINE_COLOUR_Black
        inc lMS_Y, 20
        d3d_text 2, lMS_R1X, lMS_Y, 0, "RT> All: " + str$((val(INFOBOX_Text$(46))/1000), 1) + "k  On Bottom: " + str$((val(INFOBOX_Text$(47))/1000), 1) + "k", g_ENGINE_COLOUR_Black
        inc lMS_Y, 20
        d3d_text 2, lMS_R1X, lMS_Y, 0, "MM> All: " + str$((val(INFOBOX_Text$(44))/1000), 1) + "k  On Bottom: " + str$((val(INFOBOX_Text$(45))/1000), 1) + "k", g_ENGINE_COLOUR_Black
        inc lMS_Y, 25
        d3d_line lMS_R1X, lMS_Y, l_BoxXPos + 275, lMS_Y, g_ENGINE_COLOUR_Black
      endif
      
      `ADD ALL MORNING REPORT INFO (Special Infobox showing useful Morning Report channels)
      if g_INFOBOX_AddDataToInfoBox_ALL_MORNREP_INFO = 1
        
        `inc lMS_Y, 1
        inc lMS_Y, 10
        d3d_text 2, lMS_R1X, lMS_Y, 0, "Total Rotating Time : " + INFOBOX_Text$(39), g_ENGINE_COLOUR_Black
        inc lMS_Y, 20
        
        d3d_text 2, lMS_R1X, lMS_Y, 0, "Total Circ Time : " + INFOBOX_Text$(38), g_ENGINE_COLOUR_Black
        inc lMS_Y, 20
        
        d3d_text 10, lMS_R1X, lMS_Y, 0, "                                  (Mud Motor Factor: " + str$(WELLDATA_MudMotorFactor_RevsGallon#, 2) + " revs/gal)", g_ENGINE_COLOUR_Black
        inc lMS_Y, 13
        d3d_text 2, lMS_R1X, lMS_Y, 0, "On Bott Revs: MM + RT : " + str$((val(INFOBOX_Text$(48))/1000), 1) + "k", g_ENGINE_COLOUR_Black

        inc lMS_Y, 25
        d3d_line lMS_R1X, lMS_Y, l_BoxXPos + 275, lMS_Y, g_ENGINE_COLOUR_Black
      
      endif
      
      
      `Print: Number of Joints/Stands Pulled in Selected Range
      if g_INFOBOX_AddDataToInfoBox_DPNumberPulled = 1
        inc lMS_Y, 10
        d3d_text 2, lMS_R1X, lMS_Y, 0, "RIH/POOH : " + INFOBOX_Text$(55) + ". TT : " + INFOBOX_Text$(56) + " / PVT : " + INFOBOX_Text$(57) + " bbls", g_ENGINE_COLOUR_Black
        inc lMS_Y, 25
        d3d_line lMS_R1X, lMS_Y, l_BoxXPos + 275, lMS_Y, g_ENGINE_COLOUR_Black
      endif

    d3d_endtext

    
    `HANDLE SHOW WORKING BUTTON
    if g_INFOBOX_AddDataToInfoBox_PVT = 1
      `Note: This cannot be with the other PVT code as it has to be outside the d3d_text command loop.
      
      if l_ShowWorkingButton = 1
        if mousex() > lMS_R1X + 225 and mousex() < lMS_R1X + 277 and mousey() > lShBtnY -1 and mousey() < lShBtnY + 20
          paste sprite c_SPRITE_Gadget_ShowWorkButt_LIT, lMS_R1X + 225, lShBtnY
          lib_Set_CHART_INFOBOX_ShowButtonState(1)
          if mouseclick() = 1 and mouse_click(1) = -1
            mouse_click(1) = 1
            if g_GADGET_1_ShowWorking = -1
              g_GADGET_1_ShowWorking = 1
            else
              g_GADGET_1_ShowWorking = -1
            endif
          endif
        else
          paste sprite c_SPRITE_Gadget_ShowWorkButt_UNLIT, lMS_R1X + 225, lShBtnY
          lib_Set_CHART_INFOBOX_ShowButtonState(-1)
        endif
      endif
    
      `SHOW WORKING (LOSSES)
      if g_GADGET_1_ShowWorking = 1
        lib_Gadget_1_ShowWorking()
      endif
    
    endif
    

    

    
  endif
  
  
endfunction

function lib_INFOBOX_CALC_DATA(r_ScreenType as integer, r_ChartID as integer, r_ModeState as integer)

  `This function will calculate and build the output to be displayed. It can handle both the DS and Pits screens.
  
  `Note: r_ScreenType - 1:DS, 2:Pits
  `      r_ChartID    - The selected chart DS:1-3, Pits:1-4
  
  local l_RngARR_P1 as integer
  local l_RngARR_P2 as integer
  local l_HD_Diff# as float
  local l_BD_Diff# as float
  local l_CH1_Diff# as float
  local l_CH2_Diff# as float
  local l_CH3_Diff# as float
  local l_CH4_Diff# as float
  local l_Units$ as string
  local l_OnBottomROPMins as integer
  local l_TotalCirculatingMins as integer
  local l_time1$ as string
  local l_TotalSPMTime# as float
  local l_OnBottomTime# as float
  local l_AVG_ROP# as float
  local l_TT_GL_Rate# as float
  local l_TT_GL_Val# as float
  local l_TotalCircTime# as float
  local l_TotalRotatingMins as integer
  local l_TotalRotatingTime# as float
  local l_PulledPipeMidPoint# as float
  local l_PulledPipe_FinalCount as integer
  
  local l_DataView_ArrPos as integer
  
  local l_Diff# as float
  
  local l_ChnIdxArr1 as integer
  local l_ChnIdxArr2 as integer
  local l_ChnIdxArr3 as integer
  local l_ChnIdxArr4 as integer
  
  local l_bitHP$ as string
  local l_bitDP$ as string
  local l_data1$ as string
  local l_data2$ as string
  local l_data3$ as string
  local l_data4$ as string
  
  local l_ActiveBlock_3_Or_4_Chnl as integer
  
  `Clear Array
  for clear_lp = 0 to 60
     INFOBOX_Text$(clear_lp) = ""
     INFOBOX_TextColour(clear_lp) = g_ENGINE_COLOUR_Black
  next clear_lp
  g_INFOBOX_DisplayData_Counter = -1
  
  if g_ENGINE_UNITS_FT_or_M = 1
    l_Units$ = "ft"
  else
    l_Units$ = "m"
  endif
  
  l_ActiveBlock_3_Or_4_Chnl = lib_InfoBox_BlockDisp_3_Or_4_ChnlsOfData(r_ChartID, r_ScreenType)
    
  `Set Background Image Height to BASIC and resize depending on what is added
  if r_ModeState = 1
    if l_ActiveBlock_3_Or_4_Chnl = 3
      g_INFOBOX_DataBox_BkgdImg_Height = 135
    endif
    if l_ActiveBlock_3_Or_4_Chnl = 4
      g_INFOBOX_DataBox_BkgdImg_Height = 135 + 15
    endif
  endif   
  
  if r_ModeState = 2
    if l_ActiveBlock_3_Or_4_Chnl = 3
      g_INFOBOX_DataBox_BkgdImg_Height = 295
    endif
    if l_ActiveBlock_3_Or_4_Chnl = 4
      g_INFOBOX_DataBox_BkgdImg_Height = 315 + 15
    endif
  endif  
  `295  + 15
  

  `SET CHANNEL IDs
    if r_ScreenType = 1
      `Set DRILLING SCREEN Channel IDs
      if r_ChartID = 1
        l_ChnIdxArr1 = 1
        l_ChnIdxArr2 = 2
        l_ChnIdxArr3 = 3
        l_ChnIdxArr4 = 4
      endif
      if r_ChartID = 2
        l_ChnIdxArr1 = 5
        l_ChnIdxArr2 = 6
        l_ChnIdxArr3 = 7
        l_ChnIdxArr4 = 8
      endif
      if r_ChartID = 3
        l_ChnIdxArr1 = 9
        l_ChnIdxArr2 = 10
        l_ChnIdxArr3 = 11
        l_ChnIdxArr4 = 12
      endif
    endif
    
    if r_ScreenType = 2
      `Set PITS SCREEN Channel IDs
      if r_ChartID = 1
        l_ChnIdxArr1 = 13
        l_ChnIdxArr2 = 14
        l_ChnIdxArr3 = 15
        l_ChnIdxArr4 = 16
      endif
      if r_ChartID = 2
        l_ChnIdxArr1 = 17
        l_ChnIdxArr2 = 18
        l_ChnIdxArr3 = 19
        l_ChnIdxArr4 = 20
      endif
      if r_ChartID = 3
        l_ChnIdxArr1 = 21
        l_ChnIdxArr2 = 22
        l_ChnIdxArr3 = 23
        l_ChnIdxArr4 = 24
      endif
      if r_ChartID = 4
        l_ChnIdxArr1 = 25
        l_ChnIdxArr2 = 26
        l_ChnIdxArr3 = 27
        l_ChnIdxArr4 = 28
      endif
    endif
    
  `SET RANGE START AND END ARRAY POSITIONS FOR CALCULATIONS
    if g_INFOBOX_MSEAreaDrag_EndY_ArrPntr > g_INFOBOX_MSEAreaDrag_StartY_ArrPntr
      l_RngARR_P1 = g_INFOBOX_MSEAreaDrag_StartY_ArrPntr
      l_RngARR_P2 = g_INFOBOX_MSEAreaDrag_EndY_ArrPntr
    else
      l_RngARR_P1 = g_INFOBOX_MSEAreaDrag_EndY_ArrPntr
      l_RngARR_P2 = g_INFOBOX_MSEAreaDrag_StartY_ArrPntr
    endif
    
    `g_INFOBOX_HighlightBox_ScreenY_ArrPntr = l_RngARR_P1
    
    `Ensure arrays are within bounds (they should never be anyway due to checks elsewhere, but why not)
    if l_RngARR_P2 < 0 then l_RngARR_P2 = 0
    if l_RngARR_P1 < 0 then l_RngARR_P1 = 0
    if l_RngARR_P2 > g_DATABASE_MEM_Total_Num_Records then l_RngARR_P2 = g_DATABASE_MEM_Total_Num_Records
    if l_RngARR_P1 > g_DATABASE_MEM_Total_Num_Records then l_RngARR_P1 = g_DATABASE_MEM_Total_Num_Records
    
  `GET DATA
  	if r_ScreenType = 1 : `Drilling Screen array reference
    	l_DataView_ArrPos = (g_DATABASE_MEM_Total_Num_Records - g_DS_CHART_Scroll_Array_Offset)- ((mousey() - 197) * g_ENGINE_DS_Chart_Time_Period_Adjust)  
  	endif
  	if r_ScreenType = 2 : `Pits Screen array reference
    	l_DataView_ArrPos = (g_DATABASE_MEM_Total_Num_Records - g_PITS_CHART_Scroll_Array_Offset)- ((mousey() - 197) * g_ENGINE_PITS_Chart_Time_Period_Adjust)  
  	endif
  	if l_DataView_ArrPos > -1 : `Get Date in correct format
    	if g_ENGINE_SwapDayMonthFormat = 1
      	l_date$ = right$(left$(MEM_MAIN_DATABASE(l_DataView_ArrPos).Date$, 5), 2) + "/" + left$(MEM_MAIN_DATABASE(l_DataView_ArrPos).Date$, 2)
    	else
      	l_date$ = left$(MEM_MAIN_DATABASE(l_DataView_ArrPos).Date$, 5)
    	endif
    	`Time is displayed differently if running in PORTABLE Viewer Mode since the database could be from any
    	`year. So it is nice to see the year in the Date, which takes more space. There is not enough space
    	`for the year in r_ModeState=1 unless it is displayed a little differently. 
	    	if g_PORTABLE_ENG_RunAs_VIEWER = 1
        	l_time1$ = MEM_MAIN_DATABASE(l_DataView_ArrPos).Time$ + " " + l_date$ + "/" + right$(MEM_MAIN_DATABASE(l_DataView_ArrPos).Date$, 2)
      	else
        	l_time1$ = MEM_MAIN_DATABASE(l_DataView_ArrPos).Time$ + " (" + l_date$ + ")"
      	endif  
  	endif
  	`
  	if l_DataView_ArrPos < 0 then l_DataView_ArrPos = 0
  	`
  	l_bitHP$ = str$(MEM_MAIN_DATABASE(l_DataView_ArrPos).Hole_Depth#, 1)
  	l_bitDP$ = str$(MEM_MAIN_DATABASE(l_DataView_ArrPos).Bit_Depth#, 1)
  	l_data1$ = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr1), l_DataView_ArrPos), lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr1)))
  	l_data2$ = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr2), l_DataView_ArrPos), lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr2)))
  	l_data3$ = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr3), l_DataView_ArrPos), lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr3)))
  	l_data4$ = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr4), l_DataView_ArrPos), lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr4)))

  `If MODESTATE = 2 : Calculate time difference for area grabbed/selected over
  	if r_ModeState = 2  
    	`TIME DATA 
    	`Get start and end times and dates
    	g_INFOBOX_Time_Start$ = MEM_MAIN_DATABASE(l_RngARR_P1).Time$
    	g_INFOBOX_Time_End$ = MEM_MAIN_DATABASE(l_RngARR_P2).Time$
    	if g_ENGINE_SwapDayMonthFormat = 1
      	g_INFOBOX_Date_Start$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_RngARR_P1).Date$)
      	g_INFOBOX_Date_End$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_RngARR_P2).Date$)
    	else
      	g_INFOBOX_Date_Start$ = MEM_MAIN_DATABASE(l_RngARR_P1).Date$
      	g_INFOBOX_Date_End$ = MEM_MAIN_DATABASE(l_RngARR_P2).Date$
    	endif
    	lib_Get_TIME_DIFFERENCE(g_INFOBOX_Time_Start$, g_INFOBOX_Date_Start$, g_INFOBOX_Time_End$, g_INFOBOX_Date_End$)
    	g_INFOBOX_TimeDifferenceInMinutes# = g_ENGINE_TimeDiff_TotalMins# 
  	endif

  `KEY : MODESTATE 1
      ` (0) = DATA: Time (Date) 
      ` (1) = DATA: Hole Depth
      ` (2) = DATA: Bit Depth 
      ` (3) = HEADER: Channel 1
      ` (4) = DATA: Channel 1
      ` (5) = HEADER: Channel 2
      ` (6) = DATA: Channel 2
      ` (7) = HEADER: Channel 3
      ` (8) = DATA: Channel 3
      ` (9) = HEADER: Channel 3
      `(10) = DATA: Channel 3

      if r_ModeState = 1
        
        INFOBOX_Text$(0) = l_time1$ 
        INFOBOX_Text$(1) = str$(MEM_MAIN_DATABASE(l_DataView_ArrPos).Hole_Depth#, 2)
        INFOBOX_Text$(2) = str$(MEM_MAIN_DATABASE(l_DataView_ArrPos).Bit_Depth#, 2)
        
        `Channel 1  
        if CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr1) > 0
          INFOBOX_Text$(3) = lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr1))
          INFOBOX_Text$(4) = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr1), l_DataView_ArrPos), lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr1)))
        else
          INFOBOX_Text$(3) = "/"
          INFOBOX_Text$(4) = "/"
        endif
        
        `Channel 2
        if CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr2) > 0
          INFOBOX_Text$(5) = lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr2))
          INFOBOX_Text$(6) = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr2), l_DataView_ArrPos), lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr2))) 
        else
          INFOBOX_Text$(5) = "/"
          INFOBOX_Text$(6) = "/" 
        endif
        
        `Channel 3
        if CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr3) > 0
          INFOBOX_Text$(7) = lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr3))
          INFOBOX_Text$(8) = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr3), l_DataView_ArrPos), lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr3)))
        else
          INFOBOX_Text$(7) = "/"
          INFOBOX_Text$(8) = "/" 
        endif
        
        `Channel 4
        if CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr4) > 0
          INFOBOX_Text$(9) = lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr4))
          INFOBOX_Text$(10) = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr4), l_DataView_ArrPos), lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr4)))
        else
          INFOBOX_Text$(9) = "/"
          INFOBOX_Text$(10) = "/"
        endif
        
        `Channel Colours
        INFOBOX_TextColour(3) = COLOUR_ChartChannelCol(l_ChnIdxArr1)
        INFOBOX_TextColour(4) = COLOUR_ChartChannelCol(l_ChnIdxArr1)
        INFOBOX_TextColour(5) = COLOUR_ChartChannelCol(l_ChnIdxArr2)
        INFOBOX_TextColour(6) = COLOUR_ChartChannelCol(l_ChnIdxArr2)
        INFOBOX_TextColour(7) = COLOUR_ChartChannelCol(l_ChnIdxArr3)
        INFOBOX_TextColour(8) = COLOUR_ChartChannelCol(l_ChnIdxArr3)
        INFOBOX_TextColour(9) = COLOUR_ChartChannelCol(l_ChnIdxArr4)
        INFOBOX_TextColour(10) = COLOUR_ChartChannelCol(l_ChnIdxArr4)
        `Counter
        g_INFOBOX_DisplayData_Counter = 8
      endif

  `KEY : MODESTATE 2
      ` --- Data at Start point and End point of selection, and the difference between them.
      ` (0) = DATA: Start Time
      ` (1) = DATA: End Time
      ` (2) = DATA: Time Difference in Minutes
      ` (3) = DATA: Hole Depth Min
      ` (4) = DATA: Hole Depth Max
      ` (5) = DATA: Hole Depth Diff 
      ` (6) = DATA: Bit Depth Min
      ` (7) = DATA: Bit Depth Max
      ` (8) = DATA: Bit Depth Diff
      ` -
      ` (9) = DATA: Channel 1: Value Start Point
      ` (10) = DATA: Channel 1: Value End Point
      ` (11) = DATA: Channel 1: Value Start to End Difference
      ` (12) = DATA: Channel 2: Value Start Point
      ` (13) = DATA: Channel 2: Value End Point
      ` (14) = DATA: Channel 2: Value Start to End Difference
      ` (15) = DATA: Channel 3: Value Start Point
      ` (16) = DATA: Channel 3: Value End Point
      ` (17) = DATA: Channel 3: Value Start to End Difference
      ` NOTE: For DATA: Channel 4: See down - Array Positions 58, 59, 60
      ` --- Data searched within the RANGES
      ` (18) = HEADER: Channel 1
      ` (19) = DATA: Channel 1: Min in the searched range
      ` (20) = DATA: Channel 1: Max in the searched range
      ` (21) = DATA: Channel 1: Diff between min and max over searched range
      ` (22) = HEADER: Channel 2
      ` (23) = DATA: Channel 2: Min in the searched range
      ` (24) = DATA: Channel 2: Max in the searched range
      ` (25) = DATA: Channel 2: Diff between min and max over searched range
      ` (26) = HEADER: Channel 3
      ` (27) = DATA: Channel 3: Min in the searched range
      ` (28) = DATA: Channel 3: Max in the searched range
      ` (29) = DATA: Channel 3: Diff between min and max over searched range
      ` --- Contextual Data (if chart contains the channel) ---
      ` (30) = DATA: ROP On Bottom Time
      ` (31) = DATA: ROP Average (On Bottom ONLY)
      ` (32) = DATA: TT Start and Finish Values
      ` (33) = DATA: TT Gain/Loss Rate Value
      ` (34) = DATA: Losses Calculator: Depth Difference 
      ` (35) = DATA: Losses Calculator: Actual Losses
      ` (36) = DATA: Losses Calculator: Theoretical Losses
      ` (37) = DATA: Losses Calculator: Loss/Gain Rate
      ` (38) = DATA: Total Circulating Time Value
      ` (39) = DATA: Total Rotating Time Value
      ` (40) = DATA: Total String Revolutions
      ` (41) = DATA: Pipes Pulled: Total Number of Pipe Pulled
      ` (42) = DATA: Pipes Pulled: Triptank Value at Mouse Y to display alongside Total Num Pipe Pulled
      ` (43) = DATA: Combined Bit REVS (ALL - Mud Motor Revs + Rotary Table Revs)
      ` (44) = DATA: Mud Motor Revs - All
      ` (45) = DATA: Mud Motor Revs - On Bottom Only
      ` (46) = DATA: Rotary Table Revs - All
      ` (47) = DATA: Rotary Table Revs - On Bottom Only
      ` (48) = DATA: Combined Bit REVS On Bottom Only (ALL ON BOTTOM - Mud Motor Revs + Rotary Table Revs)
      ` (49) = DATA: SPM1 Total Time ON 
      ` (50) = DATA: SPM2 Total Time ON 
      ` (51) = DATA: SPM3 Total Time ON 
      ` (52) = DATA: SPM1 Total Time ON (ON BOTTOM ONLY)
      ` (53) = DATA: SPM2 Total Time ON (ON BOTTOM ONLY)
      ` (54) = DATA: SPM3 Total Time ON (ON BOTTOM ONLY)
      ` (55) = DATA: RIH/POOH Counter: Total Pipes 
      ` (56) = DATA: RIH/POOH Counter: Triptank Value at datapoint
      ` (57) = DATA: RIH/POOH Counter: PVT Value at datapoint
      ` (58) = DATA: Channel 4: Value Start Point
      ` (59) = DATA: Channel 4: Value End Point
      ` (60) = DATA: Channel 4: Value Start to End Difference
      ` (61) = HEADER: Channel 4
      ` (62) = DATA: Channel 4: Min in the searched range
      ` (63) = DATA: Channel 4: Max in the searched range
      ` (64) = DATA: Channel 4: Diff between min and max over searched range
      ` (65) = DATA: ROP On Bottom Time - ROTATING TIME ONLY
     
     
      if r_ModeState = 2
        
        `Time
        INFOBOX_Text$(0) = MEM_MAIN_DATABASE(l_RngARR_P1).Time$
        INFOBOX_Text$(1) = MEM_MAIN_DATABASE(l_RngARR_P2).Time$
        l_MinsAsHrs# = g_INFOBOX_TimeDifferenceInMinutes# / 60.0
        if l_MinsAsHrs# > 1.0
          INFOBOX_Text$(2) = str$(l_MinsAsHrs#, 2) + " Hrs"
        else
          INFOBOX_Text$(2) = str$(g_ENGINE_TimeDiff_TotalMins#, 1) + " Mins"
        endif
        
        `Hole Depth
        INFOBOX_Text$(3) = str$(MEM_MAIN_DATABASE(l_RngARR_P1).Hole_Depth#, 1)
        INFOBOX_Text$(4) = str$(MEM_MAIN_DATABASE(l_RngARR_P2).Hole_Depth#, 1)
        l_HD_Diff# = MEM_MAIN_DATABASE(l_RngARR_P2).Hole_Depth# - MEM_MAIN_DATABASE(l_RngARR_P1).Hole_Depth#
        INFOBOX_Text$(5) = str$(l_HD_Diff#, 1)
        
        `Bit Depth
        INFOBOX_Text$(6) = str$(MEM_MAIN_DATABASE(l_RngARR_P1).Bit_Depth#, 1)
        INFOBOX_Text$(7) = str$(MEM_MAIN_DATABASE(l_RngARR_P2).Bit_Depth#, 1)
        l_BD_Diff# = MEM_MAIN_DATABASE(l_RngARR_P2).Bit_Depth# - MEM_MAIN_DATABASE(l_RngARR_P1).Bit_Depth#
        INFOBOX_Text$(8) = str$(l_BD_Diff#, 1)
        
        `Channel 1
        INFOBOX_Text$(9) = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr1), l_RngARR_P1), lib_Chnl_DPs(l_ChnIdxArr1))
        INFOBOX_Text$(10) = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr1), l_RngARR_P2), lib_Chnl_DPs(l_ChnIdxArr1))
        l_CH1_Diff# = (lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr1), l_RngARR_P2)) - lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr1), l_RngARR_P1)
        INFOBOX_Text$(11) = str$(l_CH1_Diff#, lib_Chnl_DPs(l_ChnIdxArr1))
        `Channel 3
        INFOBOX_Text$(12) = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr2), l_RngARR_P1), lib_Chnl_DPs(l_ChnIdxArr2))
        INFOBOX_Text$(13) = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr2), l_RngARR_P2), lib_Chnl_DPs(l_ChnIdxArr2))
        l_CH2_Diff# = (lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr2), l_RngARR_P2)) - lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr2), l_RngARR_P1)
        INFOBOX_Text$(14) = str$(l_CH2_Diff#, lib_Chnl_DPs(l_ChnIdxArr2))
        `Channel 3
        INFOBOX_Text$(15) = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr3), l_RngARR_P1), lib_Chnl_DPs(l_ChnIdxArr3))
        INFOBOX_Text$(16) = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr3), l_RngARR_P2), lib_Chnl_DPs(l_ChnIdxArr3))
        l_CH3_Diff# = (lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr3), l_RngARR_P2)) - lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr3), l_RngARR_P1)
        INFOBOX_Text$(17) = str$(l_CH3_Diff#, lib_Chnl_DPs(l_ChnIdxArr3))
        `Channel 4
        INFOBOX_Text$(58) = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr4), l_RngARR_P1), lib_Chnl_DPs(l_ChnIdxArr4))
        INFOBOX_Text$(59) = str$(lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr4), l_RngARR_P2), lib_Chnl_DPs(l_ChnIdxArr4))
        l_CH4_Diff# = (lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr4), l_RngARR_P2)) - lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr4), l_RngARR_P1)
        INFOBOX_Text$(60) = str$(l_CH4_Diff#, lib_Chnl_DPs(l_ChnIdxArr4))
        
        `RANGES
            
        `Channel 1
        if CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr1) > 0 
          INFOBOX_Text$(18) = lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr1))
          lib_INFOBOX_Calc_Chnl_MaxMinValues(l_ChnIdxArr1, l_RngARR_P1, l_RngARR_P2)
          INFOBOX_Text$(19) = str$(g_INFOBOX_ChannelSearchRange_MinVal#, lib_Chnl_DPs(l_ChnIdxArr1))
          INFOBOX_Text$(20) = str$(g_INFOBOX_ChannelSearchRange_MaxVal#, lib_Chnl_DPs(l_ChnIdxArr1))
          l_CH1_Diff# = g_INFOBOX_ChannelSearchRange_MaxVal# - g_INFOBOX_ChannelSearchRange_MinVal#
          INFOBOX_Text$(21) = str$(l_CH1_Diff#, lib_Chnl_DPs(l_ChnIdxArr1))
        else
          INFOBOX_Text$(18) = "/"
          INFOBOX_Text$(19) = "/"
          INFOBOX_Text$(20) = "/"
          INFOBOX_Text$(21) = "/"
        endif
        
        `Channel 2
        if CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr2) > 0
          INFOBOX_Text$(22) = lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr2))
          lib_INFOBOX_Calc_Chnl_MaxMinValues(l_ChnIdxArr2, l_RngARR_P1, l_RngARR_P2)
          INFOBOX_Text$(23) = str$(g_INFOBOX_ChannelSearchRange_MinVal#, lib_Chnl_DPs(l_ChnIdxArr2))
          INFOBOX_Text$(24) = str$(g_INFOBOX_ChannelSearchRange_MaxVal#, lib_Chnl_DPs(l_ChnIdxArr2))
          l_CH2_Diff# = g_INFOBOX_ChannelSearchRange_MaxVal# - g_INFOBOX_ChannelSearchRange_MinVal#
          INFOBOX_Text$(25) = str$(l_CH2_Diff#, lib_Chnl_DPs(l_ChnIdxArr2))
        else
          INFOBOX_Text$(22) = "/"
          INFOBOX_Text$(23) = "/"
          INFOBOX_Text$(24) = "/"
          INFOBOX_Text$(25) = "/"
        endif  
        
        `Channel 3
        if CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr3) > 0
          INFOBOX_Text$(26) = lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr3))
          lib_INFOBOX_Calc_Chnl_MaxMinValues(l_ChnIdxArr3, l_RngARR_P1, l_RngARR_P2)
          INFOBOX_Text$(27) = str$(g_INFOBOX_ChannelSearchRange_MinVal#, lib_Chnl_DPs(l_ChnIdxArr3))
          INFOBOX_Text$(28) = str$(g_INFOBOX_ChannelSearchRange_MaxVal#, lib_Chnl_DPs(l_ChnIdxArr3))
          l_CH3_Diff# = g_INFOBOX_ChannelSearchRange_MaxVal# - g_INFOBOX_ChannelSearchRange_MinVal#
          INFOBOX_Text$(29) = str$(l_CH3_Diff#, lib_Chnl_DPs(l_ChnIdxArr3))
        else
          INFOBOX_Text$(26) = "/"
          INFOBOX_Text$(27) = "/"
          INFOBOX_Text$(28) = "/"
          INFOBOX_Text$(29) = "/"  
        endif
        
        `Channel 4
        if CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr4) > 0
          INFOBOX_Text$(61) = lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(l_ChnIdxArr4))
          lib_INFOBOX_Calc_Chnl_MaxMinValues(l_ChnIdxArr4, l_RngARR_P1, l_RngARR_P2)
          INFOBOX_Text$(62) = str$(g_INFOBOX_ChannelSearchRange_MinVal#, lib_Chnl_DPs(l_ChnIdxArr4))
          INFOBOX_Text$(63) = str$(g_INFOBOX_ChannelSearchRange_MaxVal#, lib_Chnl_DPs(l_ChnIdxArr4))
          l_CH4_Diff# = g_INFOBOX_ChannelSearchRange_MaxVal# - g_INFOBOX_ChannelSearchRange_MinVal#
          INFOBOX_Text$(64) = str$(l_CH4_Diff#, lib_Chnl_DPs(l_ChnIdxArr4))
        else
          INFOBOX_Text$(61) = "/"
          INFOBOX_Text$(62) = "/"
          INFOBOX_Text$(63) = "/"
          INFOBOX_Text$(64) = "/"  
        endif
        
      ` (26) = HEADER: Channel 3
      ` (27) = DATA: Channel 3: Min in the searched range
      ` (28) = DATA: Channel 3: Max in the searched range
      ` (29) = DATA: Channel 3: Diff between min and max over searched range
      
      ` (61) = HEADER: Channel 4
      ` (62) = DATA: Channel 4: Min in the searched range
      ` (63) = DATA: Channel 4: Max in the searched range
      ` (64) = DATA: Channel 4: Diff between min and max over searched range
        
        `Channel Colours
        INFOBOX_TextColour(9) = COLOUR_ChartChannelCol(l_ChnIdxArr1)
        INFOBOX_TextColour(13) = COLOUR_ChartChannelCol(l_ChnIdxArr2)
        INFOBOX_TextColour(17) = COLOUR_ChartChannelCol(l_ChnIdxArr3)
        INFOBOX_TextColour(58) = COLOUR_ChartChannelCol(l_ChnIdxArr4)

        g_INFOBOX_DisplayData_Counter = 17

        g_INFOBOX_AddDataToInfoBox_ROP = lib_INFOBOX_CHART_ChartContainsROP(r_ScreenType, r_ChartID)
        g_INFOBOX_AddDataToInfoBox_TT = lib_INFOBOX_CHART_ChartContainsTT(r_ScreenType, r_ChartID)
        g_INFOBOX_AddDataToInfoBox_PVT = lib_INFOBOX_CHART_ChartContainsPVT(r_ScreenType, r_ChartID)
        g_INFOBOX_AddDataToInfoBox_CircHrs = lib_INFOBOX_CHART_ChartContainsFLOWIN(r_ScreenType, r_ChartID)
        g_INFOBOX_AddDataToInfoBox_TotalSPMsTime = lib_INFOBOX_CHART_ChartContainsFLOWIN(r_ScreenType, r_ChartID)
        g_INFOBOX_AddDataToInfoBox_RotatingHrs = lib_INFOBOX_CHART_ChartContainsRPM(r_ScreenType, r_ChartID)
        g_INFOBOX_AddDataToInfoBox_DPNumberPulled = lib_INFOBOX_CHART_ChartContainsBLOCKPOS(r_ScreenType, r_ChartID)
        g_INFOBOX_AddDataToInfoBox_BIT_REVS = lib_INFOBOX_CHART_ChartContainsRPM(r_ScreenType, r_ChartID)
        
        g_INFOBOX_AddDataToInfoBox_ALL_MORNREP_INFO = lib_INFOBOX_CHART_ChartContainsBLOCKPOS(r_ScreenType, r_ChartID)
        
        `----- If Chart contains ROP then Add ROP Data
          `TIME ON BOTTOM: Calculate Bit on Bottom Time (ALL TIME ON BOTTOM)
          if g_INFOBOX_AddDataToInfoBox_ROP = 1
            
            inc g_INFOBOX_DataBox_BkgdImg_Height, 50
            `l_AVG_ROP# = l_HD_Diff# / (g_INFOBOX_TimeDifferenceInMinutes# / 60.0)
            
            l_OnBottomROPMins = lib_ROP_GetOnBOTTOM_MINUTES(l_RngARR_P1, l_RngARR_P2)
              if l_OnBottomROPMins < 60
                l_OnBottomTime# = 0.0 + (l_OnBottomROPMins / 60.0) :`Line also req for the INFOBOX_Text$(31) calc below
                INFOBOX_Text$(30) = str$(l_OnBottomROPMins) + "mins (" + str$(l_OnBottomTime#, 2) + " hrs)"
                
              else
                l_OnBottomTime# = 0.0 + (l_OnBottomROPMins / 60.0)
                INFOBOX_Text$(30) = str$(l_OnBottomTime#, 2) + " hrs"
              endif
              
            l_AVG_ROP# = l_HD_Diff# / l_OnBottomTime#
            INFOBOX_Text$(31) = str$(l_AVG_ROP#, 1) + " " + l_Units$ + "/hr"
          
          endif
          
          `TIME ON BOTTOM: Calculate Bit on Bottom Time (CALC ROTATING ONLY TIME ON BOTTOM)
          if g_INFOBOX_AddDataToInfoBox_ROP = 1
            inc g_INFOBOX_DataBox_BkgdImg_Height, 20
            l_OnBottomROPMins = lib_ROP_GetOnBOTTOM_MINUTES_ROTONLY(l_RngARR_P1, l_RngARR_P2)
              if l_OnBottomROPMins < 60
                l_OnBottomTime# = 0.0 + (l_OnBottomROPMins / 60.0)
                INFOBOX_Text$(65) = str$(l_OnBottomROPMins) + "mins (" + str$(l_OnBottomTime#, 2) + " hrs)"
              else
                l_OnBottomTime# = 0.0 + (l_OnBottomROPMins / 60.0)
                INFOBOX_Text$(65) = str$(l_OnBottomTime#, 2) + " hrs"
              endif
          endif
           
          `Calculate TT Values
          if g_INFOBOX_AddDataToInfoBox_TT = 1
            inc g_INFOBOX_DataBox_BkgdImg_Height, 70
            l_TT_GL_Val# = lib_INFOBOX_GetTT_GL_Rate(l_RngARR_P1, l_RngARR_P2, g_INFOBOX_TimeDifferenceInMinutes#)
            l_TT_GL_Rate# = l_TT_GL_Val# / (g_INFOBOX_TimeDifferenceInMinutes# / 60.0)
            l_Diff# = MEM_MAIN_DATABASE(l_RngARR_P1).TripTank# - MEM_MAIN_DATABASE(l_RngARR_P2).TripTank#
            INFOBOX_Text$(32) = "TT Start: " + str$(MEM_MAIN_DATABASE(l_RngARR_P1).TripTank#, 1) + "   End: " + str$(MEM_MAIN_DATABASE(l_RngARR_P2).TripTank#, 1) + "   Diff: " + str$(l_Diff#, 1)
            if l_TT_GL_Rate# > 0.0
              INFOBOX_Text$(33) = "TT Gain Rate = " + str$(l_TT_GL_Rate#, 1) + " bbls/hr"
            else
              if l_TT_GL_Rate# < 0.0
                INFOBOX_Text$(33) = "TT Loss Rate = " + str$(abs(l_TT_GL_Rate#), 1) + " bbls/hr"
              else
                INFOBOX_Text$(33) = "TT Static"
              endif
            endif
          endif
          
          `Calculate PVT Values
          if g_INFOBOX_AddDataToInfoBox_PVT = 1
           
            inc g_INFOBOX_DataBox_BkgdImg_Height, 95
            
            g_GADGET_1_Time_Start$ = MEM_MAIN_DATABASE(l_RngARR_P1).Time$
            g_GADGET_1_Time_End$ = MEM_MAIN_DATABASE(l_RngARR_P2).Time$
          
            if g_ENGINE_SwapDayMonthFormat = 1
              g_GADGET_1_Date_Start$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_RngARR_P1).Date$)
              g_GADGET_1_Date_End$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_RngARR_P2).Date$)
            else
              g_GADGET_1_Date_Start$ = MEM_MAIN_DATABASE(l_RngARR_P1).Date$
              g_GADGET_1_Date_End$ = MEM_MAIN_DATABASE(l_RngARR_P2).Date$
            endif
            
            `Get Hole Depths
            g_GADGET_1_Hole_Depth_Start# = MEM_MAIN_DATABASE(l_RngARR_P1).Hole_Depth#
            g_GADGET_1_Hole_Depth_End# = MEM_MAIN_DATABASE(l_RngARR_P2).Hole_Depth#
            g_GADGET_1_Hole_Depth_Difference# = g_GADGET_1_Hole_Depth_End# - g_GADGET_1_Hole_Depth_Start# 
          
            `Get Bit Depths
            g_GADGET_1_Bit_Depth_Start# = MEM_MAIN_DATABASE(l_RngARR_P1).Bit_Depth#
            g_GADGET_1_Bit_Depth_End# = MEM_MAIN_DATABASE(l_RngARR_P2).Bit_Depth#
            g_GADGET_1_Bit_Depth_Difference# = g_GADGET_1_Bit_Depth_Start# - g_GADGET_1_Bit_Depth_End# 
            
            `Get start and end PVTS
            g_GADGET_1_PVT_Start# =  MEM_MAIN_DATABASE(l_RngARR_P1).PVT#
            g_GADGET_1_PVT_End# =  MEM_MAIN_DATABASE(l_RngARR_P2).PVT#
            g_GADGET_1_PVT_Difference# = g_GADGET_1_PVT_End# - g_GADGET_1_PVT_Start#
            
            `WELL DATA Based Volume CONSTANTS
            g_GADGET_1_AnnularVol_ft# = ( (WELLDATA_HoleID#*WELLDATA_HoleID#) - (WELLDATA_PipeOD#*WELLDATA_PipeOD#) )/1029.42
            g_GADGET_1_PipeCapacity_ft# = (WELLDATA_PipeID#*WELLDATA_PipeID#)/1029.42
            g_GADGET_1_Theo_Volume_Diff# = g_GADGET_1_AnnularVol_ft# + g_GADGET_1_PipeCapacity_ft#
            
            if g_ENGINE_UNITS_FT_or_M = 1
              g_GADGET_1_TheoreticalTotalMudLoss# = 0 - (g_GADGET_1_Theo_Volume_Diff# * g_GADGET_1_Hole_Depth_Difference#)
            else
              g_GADGET_1_TheoreticalTotalMudLoss# = 0 - (g_GADGET_1_Theo_Volume_Diff# * (g_GADGET_1_Hole_Depth_Difference# * 3.28083))
            endif  
          
            `Check for divide by zero error
            if g_ENGINE_TimeDiff_TotalMins# <> 0
              g_GADGET_1_PVT_LOSSRATE# = (g_GADGET_1_PVT_Difference# - g_GADGET_1_TheoreticalTotalMudLoss#) * (60.0 / g_ENGINE_TimeDiff_TotalMins#)
            else
              g_GADGET_1_PVT_LOSSRATE# = -999
            endif
          
            
            if g_ENGINE_UNITS_FT_or_M = 1
              INFOBOX_Text$(34) = str$(g_GADGET_1_Hole_Depth_Difference#, 1) + " ft"
            else
              INFOBOX_Text$(34) = str$(g_GADGET_1_Hole_Depth_Difference#, 1) + " m"
            endif
            INFOBOX_Text$(35) = str$(g_GADGET_1_PVT_Difference#, 2)
            INFOBOX_Text$(36) = str$(g_GADGET_1_TheoreticalTotalMudLoss#, 2)
            if g_GADGET_1_PVT_LOSSRATE# > 0
              INFOBOX_Text$(37) = "Gain Rate = " + str$(abs(g_GADGET_1_PVT_LOSSRATE#), 1) + " bbls/hr"
            else
              INFOBOX_Text$(37) = "Loss Rate = " + str$(abs(g_GADGET_1_PVT_LOSSRATE#), 1) + " bbls/hr"
            endif
          endif
          
          `Calculate TOTAL CIRCULATING HOURS Values
          if g_INFOBOX_AddDataToInfoBox_CircHrs = 1
            inc g_INFOBOX_DataBox_BkgdImg_Height, 40
            l_TotalCirculatingMins = lib_Get_TOTAL_CIRCULATING_MINUTES(l_RngARR_P1, l_RngARR_P2, 0)
              if l_TotalCirculatingMins < 60
                l_TotalCircTime# = 0.0 + (l_TotalCirculatingMins / 60.0)
                INFOBOX_Text$(38) = str$(l_TotalCircTime#, 2) + " hrs"
                `Not used as reporting minutes is not asked for : INFOBOX_Text$(38) = str$(l_TotalCirculatingMins) + " Mins"
              else
                l_TotalCircTime# = 0.0 + (l_TotalCirculatingMins / 60.0)
                INFOBOX_Text$(38) = str$(l_TotalCircTime#, 1) + " hrs"
              endif
          endif
          
          `Calculate SPM 1+2+3 Total Minutes
          if g_INFOBOX_AddDataToInfoBox_TotalSPMsTime = 1
          
            inc g_INFOBOX_DataBox_BkgdImg_Height, 40
          
            lib_Get_TOTAL_SPMs_MINUTES(l_RngARR_P1, l_RngARR_P2)
          
            `SPMs ON
              `SPM 1
            		if g_DLS_DATA_Total_SPM1_Minutes# < 60
              		INFOBOX_Text$(49) = str$(int(g_DLS_DATA_Total_SPM1_Minutes#)) + " Mins"
            		else
              		l_TotalSPMTime# = 0.0 + (g_DLS_DATA_Total_SPM1_Minutes# / 60.0)
              		INFOBOX_Text$(49) = str$(l_TotalSPMTime#, 1) + " hrs"
            		endif
            	`SPM 2
            		if g_DLS_DATA_Total_SPM2_Minutes# < 60
              		INFOBOX_Text$(50) = str$(int(g_DLS_DATA_Total_SPM2_Minutes#)) + " Mins"
            		else
              		l_TotalSPMTime# = 0.0 + (g_DLS_DATA_Total_SPM2_Minutes# / 60.0)
              		INFOBOX_Text$(50) = str$(l_TotalSPMTime#, 1) + " hrs"
            		endif
            	`SPM 3
            		if g_DLS_DATA_Total_SPM3_Minutes# < 60
              		INFOBOX_Text$(51) = str$(int(g_DLS_DATA_Total_SPM3_Minutes#)) + " Mins"
            		else
              		l_TotalSPMTime# = 0.0 + (g_DLS_DATA_Total_SPM3_Minutes# / 60.0)
              		INFOBOX_Text$(51) = str$(l_TotalSPMTime#, 1) + " hrs"
            		endif
           `SPMs ON (ON BOTTOM ONLY) 	
              `SPM 1
            		if g_DLS_DATA_Total_SPM1_Minutes_OnBottom# < 60
              		INFOBOX_Text$(52) = str$(int(g_DLS_DATA_Total_SPM1_Minutes_OnBottom#)) + " Mins"
            		else
              		l_TotalSPMTime# = 0.0 + (g_DLS_DATA_Total_SPM1_Minutes_OnBottom# / 60.0)
              		INFOBOX_Text$(52) = str$(l_TotalSPMTime#, 1) + " hrs"
            		endif
            	`SPM 2
            		if g_DLS_DATA_Total_SPM2_Minutes_OnBottom# < 60
              		INFOBOX_Text$(53) = str$(int(g_DLS_DATA_Total_SPM2_Minutes_OnBottom#)) + " Mins"
            		else
              		l_TotalSPMTime# = 0.0 + (g_DLS_DATA_Total_SPM2_Minutes_OnBottom# / 60.0)
              		INFOBOX_Text$(53) = str$(l_TotalSPMTime#, 1) + " hrs"
            		endif
            	`SPM 3
            		if g_DLS_DATA_Total_SPM3_Minutes_OnBottom# < 60
              		INFOBOX_Text$(54) = str$(int(g_DLS_DATA_Total_SPM3_Minutes_OnBottom#)) + " Mins"
            		else
              		l_TotalSPMTime# = 0.0 + (g_DLS_DATA_Total_SPM3_Minutes_OnBottom# / 60.0)
              		INFOBOX_Text$(54) = str$(l_TotalSPMTime#, 1) + " hrs"
            		endif
          
          
          endif
          
          `Calculate TOTAL ROTATING HOURS Values
          if g_INFOBOX_AddDataToInfoBox_RotatingHrs = 1
            inc g_INFOBOX_DataBox_BkgdImg_Height, 60
            l_TotalRotatingMins = lib_Get_TOTAL_ROTATING_MINUTES(l_RngARR_P1, l_RngARR_P2)
              if l_TotalRotatingMins < 60
                INFOBOX_Text$(39) = str$(l_TotalRotatingMins) + " Mins"
              else
                l_TotalRotatingTime# = 0.0 + (l_TotalRotatingMins / 60.0)
                INFOBOX_Text$(39) = str$(l_TotalRotatingTime#, 1) + " hrs"
              endif
            INFOBOX_Text$(40) = g_DLS_DATA_Total_RT_Revs$
          endif
          
          `Calculate BIT REVS
          if g_INFOBOX_AddDataToInfoBox_BIT_REVS = 1
            inc g_INFOBOX_DataBox_BkgdImg_Height, 80
            lib_Get_TOTAL_ROTATING_MINUTES(l_RngARR_P1, l_RngARR_P2)
            lib_Get_TOTAL_BIT_REVS(l_RngARR_P1, l_RngARR_P2)
            INFOBOX_Text$(43) = g_DLS_DATA_Combined_RT_MM_Revs_ALL$
            INFOBOX_Text$(44) = g_DLS_DATA_Total_MM_Revs$
            INFOBOX_Text$(45) = g_DLS_DATA_Total_MM_Revs_ON_BOTTOM_ONLY$
            INFOBOX_Text$(46) = g_DLS_DATA_Total_RT_Revs$
            INFOBOX_Text$(47) = g_DLS_DATA_Total_RT_Revs_ON_BOTTOM_ONLY$
            INFOBOX_Text$(48) = g_DLS_DATA_Combined_RT_MM_Revs_ON_BOTTOM_ONLY$
          endif
          
          `Calculate ALL MORNING REPORT INFO (Special Infobox showing useful Morning Report channels)
          if g_INFOBOX_AddDataToInfoBox_ALL_MORNREP_INFO = 1
          
            inc g_INFOBOX_DataBox_BkgdImg_Height, 80
            
            lib_Get_TOTAL_BIT_REVS(l_RngARR_P1, l_RngARR_P2)
            INFOBOX_Text$(48) = g_DLS_DATA_Combined_RT_MM_Revs_ON_BOTTOM_ONLY$
            
            l_TotalRotatingMins = lib_Get_TOTAL_ROTATING_MINUTES(l_RngARR_P1, l_RngARR_P2)
              if l_TotalRotatingMins < 60
                INFOBOX_Text$(39) = str$(l_TotalRotatingMins) + " Mins"
              else
                l_TotalRotatingTime# = 0.0 + (l_TotalRotatingMins / 60.0)
                INFOBOX_Text$(39) = str$(l_TotalRotatingTime#, 2) + " hrs"
              endif


            l_TotalCirculatingMins = lib_Get_TOTAL_CIRCULATING_MINUTES(l_RngARR_P1, l_RngARR_P2, 0)
              if l_TotalCirculatingMins < 60
                INFOBOX_Text$(38) = str$(l_TotalCirculatingMins) + " Mins"
              else
                l_TotalCircTime# = 0.0 + (l_TotalCirculatingMins / 60.0)
                INFOBOX_Text$(38) = str$(l_TotalCircTime#, 2) + " hrs"
              endif

          
          endif
          
          `Calculate NUMBER OF PIPE PULLED
          if g_INFOBOX_AddDataToInfoBox_DPNumberPulled = 1
            inc g_INFOBOX_DataBox_BkgdImg_Height, 40
            l_PulledPipeMidPoint# = lib_Get_PIPEPULLED_BLKPOSMidPoint(l_RngARR_P1, l_RngARR_P2)
            l_PulledPipe_FinalCount = lib_Get_PIPEPULLED_NumPulled(l_RngARR_P1, l_RngARR_P2, l_PulledPipeMidPoint#)
            INFOBOX_Text$(55) = str$(l_PulledPipe_FinalCount)
            INFOBOX_Text$(56) = str$(MEM_MAIN_DATABASE(l_RngARR_P2).TripTank#, 1)
            INFOBOX_Text$(57) = str$(MEM_MAIN_DATABASE(l_RngARR_P2).PVT#, 1)
          endif
          
      endif       

endfunction

function lib_INFOBOX_HighlightArea_CreateBox(r_ScreenType as integer)

  local l_Diff as integer

    
  lib_INFOBOX_HighlightBox_Size_Position(r_ScreenType)

  if g_ENGINE_Screen_Resolution = 1
    if g_INFOBOX_HLBox_Height > 0
      lib_Create_Image(302, g_INFOBOX_HLBox_Height, rgb(229,229,229), c_ENG_IMG_RTDisp_GADGET_1_Background, 1, rgb(70, 70, 70))
    endif
  else
    if g_INFOBOX_HLBox_Height > 0
      lib_Create_Image(194, g_INFOBOX_HLBox_Height, rgb(229,229,229), c_ENG_IMG_RTDisp_GADGET_1_Background, 1, rgb(70, 70, 70))
    endif
  endif
  
endfunction

function lib_INFOBOX_HighlightArea_DisplayBox(r_ScreenType as integer)

  `Note: r_ScreenType - 1:DS, 2:Pits

  local l_MouseYPos as integer
  
  l_MouseYPos = mousey()
  if mousey() < 197
    l_MouseYPos = 197
  endif
  if mousey() > 647
    l_MouseYPos = 647
  endif
  
  `DRILLING SCREEN
  if r_ScreenType = 1
    if g_INFOBOX_DS_GADGET_BlockActive = 1
      if lib_CheckChartInfoBox_OnScreen(g_INFOBOX_HLBox_CalcYpos1, g_INFOBOX_HLBox_CalcYpos2) = 1
        sprite c_SPRITE_RTDisp_Gadget_1_Background, 0, 0, c_ENG_IMG_RTDisp_GADGET_1_Background
        paste sprite c_SPRITE_RTDisp_Gadget_1_Background, g_Block1_Mouse_MinX, g_INFOBOX_HLBox_YPos
      endif
    endif
    if g_INFOBOX_DS_GADGET_BlockActive = 2
      if lib_CheckChartInfoBox_OnScreen(g_INFOBOX_HLBox_CalcYpos1, g_INFOBOX_HLBox_CalcYpos2) = 1
        sprite c_SPRITE_RTDisp_Gadget_1_Background, 0, 0, c_ENG_IMG_RTDisp_GADGET_1_Background
        paste sprite c_SPRITE_RTDisp_Gadget_1_Background, g_Block2_Mouse_MinX, g_INFOBOX_HLBox_YPos
      endif
    endif
    if g_INFOBOX_DS_GADGET_BlockActive = 3
      if lib_CheckChartInfoBox_OnScreen(g_INFOBOX_HLBox_CalcYpos1, g_INFOBOX_HLBox_CalcYpos2) = 1
        sprite c_SPRITE_RTDisp_Gadget_1_Background, 0, 0, c_ENG_IMG_RTDisp_GADGET_1_Background
        paste sprite c_SPRITE_RTDisp_Gadget_1_Background, g_Block3_Mouse_MinX, g_INFOBOX_HLBox_YPos
      endif
    endif
  endif
  
  `PITS SCREEN
  if r_ScreenType = 2
    if g_INFOBOX_PITS_GADGET_BlockActive = 1
      if lib_CheckChartInfoBox_OnScreen(g_INFOBOX_HLBox_CalcYpos1, g_INFOBOX_HLBox_CalcYpos2) = 1
        sprite c_SPRITE_RTDisp_Gadget_1_Background, 0, 0, c_ENG_IMG_RTDisp_GADGET_1_Background
        paste sprite c_SPRITE_RTDisp_Gadget_1_Background, g_Block1_Mouse_MinX, g_INFOBOX_HLBox_YPos
      endif
    endif
    if g_INFOBOX_PITS_GADGET_BlockActive = 2
      if lib_CheckChartInfoBox_OnScreen(g_INFOBOX_HLBox_CalcYpos1, g_INFOBOX_HLBox_CalcYpos2) = 1
        sprite c_SPRITE_RTDisp_Gadget_1_Background, 0, 0, c_ENG_IMG_RTDisp_GADGET_1_Background
        paste sprite c_SPRITE_RTDisp_Gadget_1_Background, g_Block2_Mouse_MinX, g_INFOBOX_HLBox_YPos
      endif
    endif
    if g_INFOBOX_PITS_GADGET_BlockActive = 3
      if lib_CheckChartInfoBox_OnScreen(g_INFOBOX_HLBox_CalcYpos1, g_INFOBOX_HLBox_CalcYpos2) = 1
        sprite c_SPRITE_RTDisp_Gadget_1_Background, 0, 0, c_ENG_IMG_RTDisp_GADGET_1_Background
        paste sprite c_SPRITE_RTDisp_Gadget_1_Background, g_Block3_Mouse_MinX, g_INFOBOX_HLBox_YPos
      endif
    endif
    if g_INFOBOX_PITS_GADGET_BlockActive = 4
      if lib_CheckChartInfoBox_OnScreen(g_INFOBOX_HLBox_CalcYpos1, g_INFOBOX_HLBox_CalcYpos2) = 1
        sprite c_SPRITE_RTDisp_Gadget_1_Background, 0, 0, c_ENG_IMG_RTDisp_GADGET_1_Background
        paste sprite c_SPRITE_RTDisp_Gadget_1_Background, g_Block4_Mouse_MinX, g_INFOBOX_HLBox_YPos
      endif
    endif
  endif




endfunction

function lib_INFOBOX_HighlightArea_Update(r_ScreenType as integer)
  
 `Now update the box image
  lib_INFOBOX_HighlightArea_CreateBox(r_ScreenType)

endfunction

function lib_INFOBOX_HighlightBox_Size_Position(r_ScreenType as integer)

  `Note: r_ScreenType - 1:DS, 2:Pits

  local l_StartY as integer
  local l_Endy as integer
  local l_RngARR_P1 as integer
  local l_RngARR_P2 as integer
  local l_MouseLastAt_EquivPosY as integer

  `This function calculates the highlightbox dimensions and screen display coordinates.
  `It keeps all the work in one place so other functions only have to pass information to it,
  `or display the highlight box.

   ` global g_INFOBOX_HLBox_YPos as integer
   ` global g_INFOBOX_HLBox_Height as integer 

  ENG_RTDisp_GADGET_ImgCreatedAtMseY = mousey()
  

  
  `SET RANGE START AND END ARRAY POSITIONS FOR CALCULATIONS
    if g_INFOBOX_MSEAreaDrag_EndY_ArrPntr < g_INFOBOX_MSEAreaDrag_StartY_ArrPntr
      l_RngARR_P1 = g_INFOBOX_MSEAreaDrag_StartY_ArrPntr
      l_RngARR_P2 = g_INFOBOX_MSEAreaDrag_EndY_ArrPntr
    else
      l_RngARR_P1 = g_INFOBOX_MSEAreaDrag_EndY_ArrPntr
      l_RngARR_P2 = g_INFOBOX_MSEAreaDrag_StartY_ArrPntr
    endif
    
  `DRILLING  
  if r_ScreenType = 1  
    l_StartY = lib_DS_Gadget_GetSTARTArrayScreenPos(l_RngARR_P1)
    l_End_Y = lib_DS_Gadget_GetENDArrayScreenPos(l_RngARR_P2)
  endif
  `PITS
  if r_ScreenType = 2
    l_StartY = lib_PITS_Gadget_GetSTARTArrayScreenPos(l_RngARR_P1)
    l_End_Y = lib_PITS_Gadget_GetENDArrayScreenPos(l_RngARR_P2)
  endif
  
  g_INFOBOX_HLBox_CalcYpos1 = l_StartY
  g_INFOBOX_HLBox_CalcYpos2 = l_End_Y
  
  if g_INFOBOX_INPUT_LMB_State = 1
    g_INFOBOX_Databox_YPos = mousey()
  else
    if g_INFOBOX_MSEAreaDrag_EndY_ArrPntr < g_INFOBOX_MSEAreaDrag_StartY_ArrPntr
      g_INFOBOX_Databox_YPos = l_End_Y
    else
      g_INFOBOX_Databox_YPos = l_StartY
    endif
  endif
    
  g_INFOBOX_HLBox_Height = abs(l_End_Y - l_StartY)

  g_INFOBOX_HLBox_YPos = l_StartY

endfunction

function lib_INFOBOX_DATABOX_Make_BkgdImg(r_BoxHeight as integer, r_ModeState as integer)
  
  `Create the Background Image for the InfoBox for either MODE 1 or MODE 2
  
  if r_ModeState = 1
    lib_Create_Image(200, r_BoxHeight, rgb(255,255,255), c_GADGET_1_IMG_DataBox_VAR, 1, rgb(195, 195, 195))
  else
    lib_Create_Image(290, r_BoxHeight, rgb(255,255,255), c_GADGET_1_IMG_DataBox_VAR, 1, rgb(195, 195, 195))
  endif
  
  sprite c_SPRITE_RTDisp_Gadget_1_DataBoxVAR, 0, 0, c_GADGET_1_IMG_DataBox_VAR


endfunction

function lib_InfoBox_BlockDisp_3_Or_4_ChnlsOfData(r_ActiveBlock as integer, r_ScreenID as integer)

  `r_ActiveBlock: The currently active block number displaying the Infobox Data
  `r_ScreenID: Drilling = 1, Pits = 2

  local p_OUTPUT as integer
  
  `DRILLING SCREEN
    if r_ScreenID = 1
    
      if r_ActiveBlock = 1
        if g_DS_SCREEN_Block1_DisplayFormat = 3 then p_OUTPUT = 3
        if g_DS_SCREEN_Block1_DisplayFormat = 4 then p_OUTPUT = 4
      endif
      if r_ActiveBlock = 2
        if g_DS_SCREEN_Block2_DisplayFormat = 3 then p_OUTPUT = 3
        if g_DS_SCREEN_Block2_DisplayFormat = 4 then p_OUTPUT = 4
      endif 
      if r_ActiveBlock = 3
        if g_DS_SCREEN_Block3_DisplayFormat = 3 then p_OUTPUT = 3
        if g_DS_SCREEN_Block3_DisplayFormat = 4 then p_OUTPUT = 4
      endif
    
    endif
  
  `PITS SCREEN
    if r_ScreenID = 2
    
      if r_ActiveBlock = 1
        if g_PITS_SCREEN_Block1_DisplayFormat = 3 then p_OUTPUT = 3
        if g_PITS_SCREEN_Block1_DisplayFormat = 4 then p_OUTPUT = 4
      endif
      if r_ActiveBlock = 2
        if g_PITS_SCREEN_Block2_DisplayFormat = 3 then p_OUTPUT = 3
        if g_PITS_SCREEN_Block2_DisplayFormat = 4 then p_OUTPUT = 4
      endif 
      if r_ActiveBlock = 3
        if g_PITS_SCREEN_Block3_DisplayFormat = 3 then p_OUTPUT = 3
        if g_PITS_SCREEN_Block3_DisplayFormat = 4 then p_OUTPUT = 4
      endif
      if r_ActiveBlock = 4
        if g_PITS_SCREEN_Block4_DisplayFormat = 3 then p_OUTPUT = 3
        if g_PITS_SCREEN_Block4_DisplayFormat = 4 then p_OUTPUT = 4
      endif
    
    endif
    
  
endfunction p_OUTPUT

function lib_TurnOFF_AllInfoBox_Forms()

  `This function can be run to turn off all InfoBox data forms on all screens. I.e
  `it turns off Mode 1 (Just the line with the data alongside) and Mode 2 (a drag box with data)
  `on the Drilling, Pits and Historic Screens.

  `Turn off Data Infobox on the DRILLING Screen
    lib_DS_CHART_INFOBOX_Deactivate()
  
  `Turn off Data Infobox on the PITS Screen
    lib_PITS_CHART_INFOBOX_Deactivate()
  
  `Turn off Data Infobox on the HISTORICAL Screen
    g_HS_Display_Chart_Values_click_toggle = -1

endfunction

function lib_DS_Gadget_GetSTARTArrayScreenPos(r_StartArrPntr as integer)

  local p_ScreenY as integer

  p_ScreenY = ((g_DATABASE_MEM_Total_Num_Records - g_DS_CHART_Scroll_Array_Offset) - r_StartArrPntr) / g_ENGINE_DS_Chart_Time_Period_Adjust
  
  inc p_ScreenY, 197

  if p_ScreenY < g_BlockAll_Mouse_MinY
    p_ScreenY = g_BlockAll_Mouse_MinY
  endif
  
  if p_ScreenY > g_BlockAll_Mouse_MaxY
    p_ScreenY = g_BlockAll_Mouse_MaxY
  endif 
 

endfunction p_ScreenY

function lib_DS_Gadget_GetENDArrayScreenPos(r_EndArrPntr)

  local p_ScreenY as integer
  
  p_ScreenY = ((g_DATABASE_MEM_Total_Num_Records - g_DS_CHART_Scroll_Array_Offset) - r_EndArrPntr) / g_ENGINE_DS_Chart_Time_Period_Adjust
  
  inc p_ScreenY, 197
  
  if p_ScreenY < g_BlockAll_Mouse_MinY
    p_ScreenY = g_BlockAll_Mouse_MinY
  endif
  if p_ScreenY > g_BlockAll_Mouse_MaxY
    p_ScreenY = g_BlockAll_Mouse_MaxY
  endif

endfunction p_ScreenY

function lib_PITS_Gadget_GetSTARTArrayScreenPos(r_StartArrPntr as integer)

  local p_ScreenY as integer

  p_ScreenY = ((g_DATABASE_MEM_Total_Num_Records - g_PITS_CHART_Scroll_Array_Offset) - r_StartArrPntr) / g_ENGINE_PITS_Chart_Time_Period_Adjust
  
  inc p_ScreenY, 197

  if p_ScreenY < g_BlockAll_Mouse_MinY
    p_ScreenY = g_BlockAll_Mouse_MinY
  endif
  
  if p_ScreenY > g_BlockAll_Mouse_MaxY
    p_ScreenY = g_BlockAll_Mouse_MaxY
  endif 
 

endfunction p_ScreenY

function lib_PITS_Gadget_GetENDArrayScreenPos(r_EndArrPntr)

  local p_ScreenY as integer
  
  p_ScreenY = ((g_DATABASE_MEM_Total_Num_Records - g_PITS_CHART_Scroll_Array_Offset) - r_EndArrPntr) / g_ENGINE_PITS_Chart_Time_Period_Adjust
  
  inc p_ScreenY, 197
  
  if p_ScreenY < g_BlockAll_Mouse_MinY
    p_ScreenY = g_BlockAll_Mouse_MinY
  endif
  if p_ScreenY > g_BlockAll_Mouse_MaxY
    p_ScreenY = g_BlockAll_Mouse_MaxY
  endif

endfunction p_ScreenY

function lib_CheckChartInfoBox_OnScreen(r_StartPixelY, r_EndPixelY)

  local p_OUTPUT as integer : p_OUTPUT = 1

  if r_StartPixelY = 197 and r_EndPixelY = 197
    p_OUTPUT = -1
  endif
  
  if r_StartPixelY = 647 and r_EndPixelY = 647
    p_OUTPUT = -1
  endif
  
  g_INFOBOX_Databox_IsOnScreen = p_OUTPUT
  
endfunction p_OUTPUT

function lib_INFOBOX_Calc_Chnl_MaxMinValues(r_ChannelNum as integer, r_StartArr as integer, r_EndArr as integer)

  local l_DataVal# as float
  local l_MinVal_TempStore# as float

  `Set Minimum Values to start array position value and Max values to zero before searching
  g_INFOBOX_ChannelSearchRange_MaxVal# = 0.0
  g_INFOBOX_ChannelSearchRange_MinVal# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(r_ChannelNum), r_StartArr)
  `l_MinVal_TempStore# = g_INFOBOX_ChannelSearchRange_MinVal#

  if r_StartArr < r_EndArr
    l_StartLP = r_StartArr
    l_EndLP = r_EndArr
  else
    l_StartLP = r_EndArr
    l_EndLP = r_StartArr
  endif


  `Search for MAXIMUM and MINIMUM Values in the selected range
  for find_lp = l_StartLP to l_EndLP
  
    `Minimum Values
    l_DataVal# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(r_ChannelNum), find_lp)

    if l_DataVal# < g_INFOBOX_ChannelSearchRange_MinVal#
      if l_DataVal# > 0
        g_INFOBOX_ChannelSearchRange_MinVal# = l_DataVal#
      endif
    endif  
    
    `Maximum Values
    l_DataVal# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(r_ChannelNum), find_lp)
    if l_DataVal# > g_INFOBOX_ChannelSearchRange_MaxVal#
      g_INFOBOX_ChannelSearchRange_MaxVal# = l_DataVal#
    endif 
    
  next find_lp


endfunction

function lib_INFOBOX_GetTT_GL_Rate(r_StartArr as integer, r_EndArr as integer, r_TotalMinutes# as float)

  local p_OUTPUT# as float : p_OUTPUT# = -1
  local l_Diff# as float

  l_Diff# = MEM_MAIN_DATABASE(r_EndArr).TripTank# - MEM_MAIN_DATABASE(r_StartArr).TripTank#

  p_OUTPUT# = l_Diff#

endfunction p_OUTPUT#

function lib_INFOBOX_CHART_ChartContainsROP(r_ScreenID as integer, r_ChartNum as integer)

  local p_OUTPUT as integer : p_OUTPUT = -1
  
  Local l_Block1ID as integer
  Local l_Block2ID as integer
  Local l_Block3ID as integer
  Local l_Block4ID as integer
  local l_ActiveBlock_3_Or_4_Chnl as integer
   
  `This function determines whether any channel in the received chart number is displaying the ROP
  `channel, in which case the losses calculator can be displayed in the chart infobox being displayed

  
  `DRILLING SCREEN
    if r_ScreenID = 1
      if r_ChartNum = 1
        l_Block1ID = 1
        l_Block2ID = 2
        l_Block3ID = 3
        l_Block4ID = 4
      endif
      if r_ChartNum = 2
        l_Block1ID = 5
        l_Block2ID = 6
        l_Block3ID = 7
        l_Block4ID = 8
      endif
      if r_ChartNum = 3
        l_Block1ID = 9
        l_Block2ID = 10
        l_Block3ID = 11
        l_Block4ID = 12
      endif
    endif
    
  `PITS SCREEN
    if r_ScreenID = 2
      if r_ChartNum = 1
        l_Block1ID = 13
        l_Block2ID = 14
        l_Block3ID = 15
        l_Block4ID = 16
      endif
      if r_ChartNum = 2
        l_Block1ID = 17
        l_Block2ID = 18
        l_Block3ID = 19
        l_Block4ID = 20
      endif
      if r_ChartNum = 3
        l_Block1ID = 21
        l_Block2ID = 22
        l_Block3ID = 23
        l_Block4ID = 24
      endif
      if r_ChartNum = 4
        l_Block1ID = 25
        l_Block2ID = 26
        l_Block3ID = 27
        l_Block4ID = 28
      endif
    endif
  
  l_ActiveBlock_3_Or_4_Chnl = lib_InfoBox_BlockDisp_3_Or_4_ChnlsOfData(r_ChartNum, r_ScreenID)
  
  `Set If a Channel Contains the ROP Channel
  if CHANNEL_ID_ChannelLinkIndex(l_Block1ID) = 3 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block2ID) = 3 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block3ID) = 3 then p_OUTPUT = 1
  if l_ActiveBlock_3_Or_4_Chnl = 4
    if CHANNEL_ID_ChannelLinkIndex(l_Block4ID) = 3 then p_OUTPUT = 1
  endif
  
  `Additional: We kept looking for ROP in a Block containing the Block Position thinking it would
  `show it. Force it to show if BLOCK POSITION is shown as well.
  if CHANNEL_ID_ChannelLinkIndex(l_Block1ID) = 9 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block2ID) = 9 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block3ID) = 9 then p_OUTPUT = 1 
  if l_ActiveBlock_3_Or_4_Chnl = 4
    if CHANNEL_ID_ChannelLinkIndex(l_Block4ID) = 9 then p_OUTPUT = 1 
  endif
  
endfunction p_OUTPUT

function lib_INFOBOX_CHART_ChartContainsTT(r_ScreenID as integer, r_ChartNum as integer)

  local p_OUTPUT as integer : p_OUTPUT = -1
  
  Local l_Block1ID as integer
  Local l_Block2ID as integer
  Local l_Block3ID as integer
  Local l_Block4ID as integer
  local l_ActiveBlock_3_Or_4_Chnl as integer
   
  `This function determines whether any channel in the received chart number is displaying the TT
  `channel, in which case the losses calculator can be displayed in the chart infobox being displayed

  `DRILLING SCREEN
    if r_ScreenID = 1
      if r_ChartNum = 1
        l_Block1ID = 1
        l_Block2ID = 2
        l_Block3ID = 3
        l_Block4ID = 4
      endif
      if r_ChartNum = 2
        l_Block1ID = 5
        l_Block2ID = 6
        l_Block3ID = 7
        l_Block4ID = 8
      endif
      if r_ChartNum = 3
        l_Block1ID = 9
        l_Block2ID = 10
        l_Block3ID = 11
        l_Block4ID = 12
      endif
    endif
    
  `PITS SCREEN
    if r_ScreenID = 2
      if r_ChartNum = 1
        l_Block1ID = 13
        l_Block2ID = 14
        l_Block3ID = 15
        l_Block4ID = 16
      endif
      if r_ChartNum = 2
        l_Block1ID = 17
        l_Block2ID = 18
        l_Block3ID = 19
        l_Block4ID = 20
      endif
      if r_ChartNum = 3
        l_Block1ID = 21
        l_Block2ID = 22
        l_Block3ID = 23
        l_Block4ID = 24
      endif
      if r_ChartNum = 4
        l_Block1ID = 25
        l_Block2ID = 26
        l_Block3ID = 27
        l_Block4ID = 28
      endif
    endif
  
  l_ActiveBlock_3_Or_4_Chnl = lib_InfoBox_BlockDisp_3_Or_4_ChnlsOfData(r_ChartNum, r_ScreenID)
  
  if CHANNEL_ID_ChannelLinkIndex(l_Block1ID) = 8 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block2ID) = 8 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block3ID) = 8 then p_OUTPUT = 1
  if l_ActiveBlock_3_Or_4_Chnl = 4
    if CHANNEL_ID_ChannelLinkIndex(l_Block4ID) = 8 then p_OUTPUT = 1
  endif
  

endfunction p_OUTPUT

function lib_INFOBOX_CHART_ChartContainsPVT(r_ScreenID as integer, r_ChartNum as integer)

  local p_OUTPUT as integer : p_OUTPUT = -1
  
  Local l_Block1ID as integer
  Local l_Block2ID as integer
  Local l_Block3ID as integer
  Local l_Block4ID as integer
  local l_ActiveBlock_3_Or_4_Chnl as integer
   
   
  `This function determines whether any channel in the received chart number is displaying the PVT
  `channel, in which case the losses calculator can be displayed in the chart infobox being displayed


  `DRILLING SCREEN
    if r_ScreenID = 1
      if r_ChartNum = 1
        l_Block1ID = 1
        l_Block2ID = 2
        l_Block3ID = 3
        l_Block4ID = 4
      endif
      if r_ChartNum = 2
        l_Block1ID = 5
        l_Block2ID = 6
        l_Block3ID = 7
        l_Block4ID = 8
      endif
      if r_ChartNum = 3
        l_Block1ID = 9
        l_Block2ID = 10
        l_Block3ID = 11
        l_Block4ID = 12
      endif
    endif
    
  `PITS SCREEN
    if r_ScreenID = 2
      if r_ChartNum = 1
        l_Block1ID = 13
        l_Block2ID = 14
        l_Block3ID = 15
        l_Block4ID = 16
      endif
      if r_ChartNum = 2
        l_Block1ID = 17
        l_Block2ID = 18
        l_Block3ID = 19
        l_Block4ID = 20
      endif
      if r_ChartNum = 3
        l_Block1ID = 21
        l_Block2ID = 22
        l_Block3ID = 23
        l_Block4ID = 24
      endif
      if r_ChartNum = 4
        l_Block1ID = 25
        l_Block2ID = 26
        l_Block3ID = 27
        l_Block4ID = 28
      endif
    endif
  
  l_ActiveBlock_3_Or_4_Chnl = lib_InfoBox_BlockDisp_3_Or_4_ChnlsOfData(r_ChartNum, r_ScreenID)
  
  if CHANNEL_ID_ChannelLinkIndex(l_Block1ID) = 17 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block2ID) = 17 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block3ID) = 17 then p_OUTPUT = 1
  if l_ActiveBlock_3_Or_4_Chnl = 4
    if CHANNEL_ID_ChannelLinkIndex(l_Block4ID) = 17 then p_OUTPUT = 1
  endif

endfunction p_OUTPUT

function lib_INFOBOX_CHART_ChartContainsRPM(r_ScreenID as integer, r_ChartNum as integer)

  local p_OUTPUT as integer : p_OUTPUT = -1
  
  Local l_Block1ID as integer
  Local l_Block2ID as integer
  Local l_Block3ID as integer
  Local l_Block4ID as integer
  local l_ActiveBlock_3_Or_4_Chnl as integer
   
  `This function determines whether any channel in the received chart number is displaying the RPM
  `channel, in which case the losses calculator can be displayed in the chart infobox being displayed

  `DRILLING SCREEN
    if r_ScreenID = 1
      if r_ChartNum = 1
        l_Block1ID = 1
        l_Block2ID = 2
        l_Block3ID = 3
        l_Block4ID = 4
      endif
      if r_ChartNum = 2
        l_Block1ID = 5
        l_Block2ID = 6
        l_Block3ID = 7
        l_Block4ID = 8
      endif
      if r_ChartNum = 3
        l_Block1ID = 9
        l_Block2ID = 10
        l_Block3ID = 11
        l_Block4ID = 12
      endif
    endif
    
  `PITS SCREEN
    if r_ScreenID = 2
      if r_ChartNum = 1
        l_Block1ID = 13
        l_Block2ID = 14
        l_Block3ID = 15
        l_Block4ID = 16
      endif
      if r_ChartNum = 2
        l_Block1ID = 17
        l_Block2ID = 18
        l_Block3ID = 19
        l_Block4ID = 20
      endif
      if r_ChartNum = 3
        l_Block1ID = 21
        l_Block2ID = 22
        l_Block3ID = 23
        l_Block4ID = 24
      endif
      if r_ChartNum = 4
        l_Block1ID = 25
        l_Block2ID = 26
        l_Block3ID = 27
        l_Block4ID = 28
      endif
    endif
  
  l_ActiveBlock_3_Or_4_Chnl = lib_InfoBox_BlockDisp_3_Or_4_ChnlsOfData(r_ChartNum, r_ScreenID)
  
  if CHANNEL_ID_ChannelLinkIndex(l_Block1ID) = 6 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block2ID) = 6 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block3ID) = 6 then p_OUTPUT = 1
  if l_ActiveBlock_3_Or_4_Chnl = 4
    if CHANNEL_ID_ChannelLinkIndex(l_Block4ID) = 6 then p_OUTPUT = 1
  endif
  

endfunction p_OUTPUT

function lib_INFOBOX_CHART_ChartContainsFLOWIN(r_ScreenID as integer, r_ChartNum as integer)

  local p_OUTPUT as integer : p_OUTPUT = -1
  
  Local l_Block1ID as integer
  Local l_Block2ID as integer
  Local l_Block3ID as integer
  Local l_Block4ID as integer
  local l_ActiveBlock_3_Or_4_Chnl as integer
   
  `This function determines whether any channel in the received chart number is displaying the FLOW IN
  `channel, in which case the losses calculator can be displayed in the chart infobox being displayed

  `DRILLING SCREEN
    if r_ScreenID = 1
      if r_ChartNum = 1
        l_Block1ID = 1
        l_Block2ID = 2
        l_Block3ID = 3
        l_Block4ID = 4
      endif
      if r_ChartNum = 2
        l_Block1ID = 5
        l_Block2ID = 6
        l_Block3ID = 7
        l_Block4ID = 8
      endif
      if r_ChartNum = 3
        l_Block1ID = 9
        l_Block2ID = 10
        l_Block3ID = 11
        l_Block4ID = 12
      endif
    endif
    
  `PITS SCREEN
    if r_ScreenID = 2
      if r_ChartNum = 1
        l_Block1ID = 13
        l_Block2ID = 14
        l_Block3ID = 15
        l_Block4ID = 16
      endif
      if r_ChartNum = 2
        l_Block1ID = 17
        l_Block2ID = 18
        l_Block3ID = 19
        l_Block4ID = 20
      endif
      if r_ChartNum = 3
        l_Block1ID = 21
        l_Block2ID = 22
        l_Block3ID = 23
        l_Block4ID = 24
      endif
      if r_ChartNum = 4
        l_Block1ID = 25
        l_Block2ID = 26
        l_Block3ID = 27
        l_Block4ID = 28
      endif
    endif
  
  l_ActiveBlock_3_Or_4_Chnl = lib_InfoBox_BlockDisp_3_Or_4_ChnlsOfData(r_ChartNum, r_ScreenID)
  
  if CHANNEL_ID_ChannelLinkIndex(l_Block1ID) = 11 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block2ID) = 11 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block3ID) = 11 then p_OUTPUT = 1
  if l_ActiveBlock_3_Or_4_Chnl = 4
    if CHANNEL_ID_ChannelLinkIndex(l_Block4ID) = 11 then p_OUTPUT = 1
  endif
  

endfunction p_OUTPUT

function lib_INFOBOX_CHART_ChartContainsBLOCKPOS(r_ScreenID as integer, r_ChartNum as integer)

  local p_OUTPUT as integer : p_OUTPUT = -1
  
  Local l_Block1ID as integer
  Local l_Block2ID as integer
  Local l_Block3ID as integer
  Local l_Block4ID as integer
  local l_ActiveBlock_3_Or_4_Chnl as integer
   
  `This function determines whether any channel in the received chart number is displaying the BLOCK POSITION
  `channel, in which case the losses calculator can be displayed in the chart infobox being displayed

  `DRILLING SCREEN
    if r_ScreenID = 1
      if r_ChartNum = 1
        l_Block1ID = 1
        l_Block2ID = 2
        l_Block3ID = 3
        l_Block4ID = 4
      endif
      if r_ChartNum = 2
        l_Block1ID = 5
        l_Block2ID = 6
        l_Block3ID = 7
        l_Block4ID = 8
      endif
      if r_ChartNum = 3
        l_Block1ID = 9
        l_Block2ID = 10
        l_Block3ID = 11
        l_Block4ID = 12
      endif
    endif
    
  `PITS SCREEN
    if r_ScreenID = 2
      if r_ChartNum = 1
        l_Block1ID = 13
        l_Block2ID = 14
        l_Block3ID = 15
        l_Block4ID = 16
      endif
      if r_ChartNum = 2
        l_Block1ID = 17
        l_Block2ID = 18
        l_Block3ID = 19
        l_Block4ID = 20
      endif
      if r_ChartNum = 3
        l_Block1ID = 21
        l_Block2ID = 22
        l_Block3ID = 23
        l_Block4ID = 24
      endif
      if r_ChartNum = 4
        l_Block1ID = 25
        l_Block2ID = 26
        l_Block3ID = 27
        l_Block4ID = 28
      endif
    endif
  
  l_ActiveBlock_3_Or_4_Chnl = lib_InfoBox_BlockDisp_3_Or_4_ChnlsOfData(r_ChartNum, r_ScreenID)
  
  if CHANNEL_ID_ChannelLinkIndex(l_Block1ID) = 9 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block2ID) = 9 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block3ID) = 9 then p_OUTPUT = 1
  if l_ActiveBlock_3_Or_4_Chnl = 4
    if CHANNEL_ID_ChannelLinkIndex(l_Block4ID) = 9 then p_OUTPUT = 1
  endif
  

endfunction p_OUTPUT

function _______RT_GRAPHICS_DISPLAY_Universal_______________________________jifftg64dr()
endfunction

function lib_DRT_RangeValues_MouseSlct_1024x768()


  `CHANGE THE RANGES OF ANY CHART
  `UPPER RANGE / LOWER RANGE SELECTION TOGGLE
  if mouseclick() = 1 and mouse_click(1) = -1
    g_NUMPAD_BuildValue$ = ""
    `COLUMN 1
      `Chart 1
      if mousex() > 4 and mousex() < 212
        if mousey() > 44 and mousey() < 67
          g_RANGES_Chart_Selected_Num = 1
          mouse_click(1) = 1
          if mousex() > 108
            g_NUMPAD_High_Low_Choice_Selection = 1
          else
            g_NUMPAD_High_Low_Choice_Selection = 2
          endif
        endif
      endif
      `Chart 2
      if mousex() > 4 and mousex() < 212
        if mousey() > 106 and mousey() < 129
          g_RANGES_Chart_Selected_Num = 2
          mouse_click(1) = 1
          if mousex() > 108
            g_NUMPAD_High_Low_Choice_Selection = 1
          else
            g_NUMPAD_High_Low_Choice_Selection = 2
          endif
        endif
      endif
      `Chart 3
      if mousex() > 4 and mousex() < 212
        if mousey() > 168 and mousey() < 191
          g_RANGES_Chart_Selected_Num = 3
          mouse_click(1) = 1
          if mousex() > 108
            g_NUMPAD_High_Low_Choice_Selection = 1
          else
            g_NUMPAD_High_Low_Choice_Selection = 2
          endif
        endif
      endif
    `COLUMN 2
      `Chart 1
      if mousex() > 276 and mousex() < 477
        if mousey() > 44 and mousey() < 67
          g_RANGES_Chart_Selected_Num = 4
          mouse_click(1) = 1
          if mousex() > 376
            g_NUMPAD_High_Low_Choice_Selection = 1
          else
            g_NUMPAD_High_Low_Choice_Selection = 2
          endif
        endif
      endif
      `Chart 2
      if mousex() > 276 and mousex() < 477
        if mousey() > 106 and mousey() < 129
          g_RANGES_Chart_Selected_Num = 5
          mouse_click(1) = 1
          if mousex() > 376
            g_NUMPAD_High_Low_Choice_Selection = 1
          else
            g_NUMPAD_High_Low_Choice_Selection = 2
          endif
        endif
      endif
      `Chart 3
      if mousex() > 276 and mousex() < 477
        if mousey() > 168 and mousey() < 191
          g_RANGES_Chart_Selected_Num = 6
          mouse_click(1) = 1
          if mousex() > 376
            g_NUMPAD_High_Low_Choice_Selection = 1
          else
            g_NUMPAD_High_Low_Choice_Selection = 2
          endif
        endif
      endif
    `COLUMN 3
      `Chart 1
      if mousex() > 477 and mousex() < 684
        if mousey() > 44 and mousey() < 67
          g_RANGES_Chart_Selected_Num = 7
          mouse_click(1) = 1
          if mousex() > 581
            g_NUMPAD_High_Low_Choice_Selection = 1
          else
            g_NUMPAD_High_Low_Choice_Selection = 2
          endif
        endif
      endif
      `Chart 2
      if mousex() > 477 and mousex() < 684
        if mousey() > 106 and mousey() < 129
          g_RANGES_Chart_Selected_Num = 8
          mouse_click(1) = 1
          if mousex() > 581
            g_NUMPAD_High_Low_Choice_Selection = 1
          else
            g_NUMPAD_High_Low_Choice_Selection = 2
          endif
        endif
      endif
      `Chart 3
      if mousex() > 477 and mousex() < 684
        if mousey() > 168 and mousey() < 191
          g_RANGES_Chart_Selected_Num = 9
          mouse_click(1) = 1
          if mousex() > 581
            g_NUMPAD_High_Low_Choice_Selection = 1
          else
            g_NUMPAD_High_Low_Choice_Selection = 2
          endif
        endif
      endif
  endif


endfunction


function lib_DRT_RangeValues_MouseSlct_Widescreen()


  local l_MSE_X as integer
  local l_MSE_Y as integer
  local l_MSE_In_Chart_ID as integer

  `Determine Active BLOCK by mouse coordinates (Get current Chart/Block Number)
  l_MSE_X = mousex()
  l_MSE_Y = mousey()
  if l_MSE_X > 51 and l_MSE_X < 262 then l_MSE_In_Chart_ID = 1
  if l_MSE_X > 421 and l_MSE_X < 632 then l_MSE_In_Chart_ID = 2
  if l_MSE_X > 744 and l_MSE_X < 954 then l_MSE_In_Chart_ID = 3


  if mouseclick() = 1 and mouse_click(1) = -1
  
    g_NUMPAD_BuildValue$ = ""
  
    `Block 1
  	if l_MSE_In_Chart_ID = 1
    	if g_DS_SCREEN_Block1_DisplayFormat = 3
      	`Lower Range Values
        	if mousex() > 52 and mousex() < 107
            	if mousey() > 46 and mousey() < 67
            		g_RANGES_Chart_Selected_Num = 1
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 78 and mousey() < 129
            		g_RANGES_Chart_Selected_Num = 2
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 170 and mousey() < 191
            		g_RANGES_Chart_Selected_Num = 3
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
        	endif
      	`Upper Range Values
        	if mousex() > 207 and mousex() < 260
            	if mousey() > 46 and mousey() < 67
            		g_RANGES_Chart_Selected_Num = 1
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 78 and mousey() < 129
            		g_RANGES_Chart_Selected_Num = 2
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 170 and mousey() < 191
            		g_RANGES_Chart_Selected_Num = 3
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
        	endif
    	endif  
    	`
    	if g_DS_SCREEN_Block1_DisplayFormat = 4
      	`Lower Range Values
        	if mousex() > 95 and mousex() < 148
            	if mousey() > 30 and mousey() < 49
            		g_RANGES_Chart_Selected_Num = 1
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 77 and mousey() < 96
            		g_RANGES_Chart_Selected_Num = 2
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 124 and mousey() < 143
            		g_RANGES_Chart_Selected_Num = 3
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 171 and mousey() < 190
            		g_RANGES_Chart_Selected_Num = 4
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
        	endif
      	`Upper Range Values
        	if mousex() > 207 and mousex() < 260
            	if mousey() > 30 and mousey() < 49
            		g_RANGES_Chart_Selected_Num = 1
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 77 and mousey() < 96
            		g_RANGES_Chart_Selected_Num = 2
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 124 and mousey() < 143
            		g_RANGES_Chart_Selected_Num = 3
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 171 and mousey() < 190
            		g_RANGES_Chart_Selected_Num = 4
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
        	endif
    	endif 
  	endif
  
  
    `Block 2
  	if l_MSE_In_Chart_ID = 2
    	if g_DS_SCREEN_Block2_DisplayFormat = 3
      	`Lower Range Values
        	if mousex() > 422 and mousex() < 475
            	if mousey() > 46 and mousey() < 67
            		g_RANGES_Chart_Selected_Num = 5
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 78 and mousey() < 129
            		g_RANGES_Chart_Selected_Num = 6
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 170 and mousey() < 191
            		g_RANGES_Chart_Selected_Num = 7
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
        	endif
      	`Upper Range Values
        	if mousex() > 577 and mousex() < 630
            	if mousey() > 46 and mousey() < 67
            		g_RANGES_Chart_Selected_Num = 5
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 78 and mousey() < 129
            		g_RANGES_Chart_Selected_Num = 6
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 170 and mousey() < 191
            		g_RANGES_Chart_Selected_Num = 7
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
        	endif
    	endif  
    	`
    	if g_DS_SCREEN_Block2_DisplayFormat = 4
      	`Lower Range Values
        	if mousex() > 465 and mousex() < 578
            	if mousey() > 30 and mousey() < 49
            		g_RANGES_Chart_Selected_Num = 5
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 77 and mousey() < 96
            		g_RANGES_Chart_Selected_Num = 6
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 124 and mousey() < 143
            		g_RANGES_Chart_Selected_Num = 7
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 171 and mousey() < 190
            		g_RANGES_Chart_Selected_Num = 8
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
        	endif
      	`Upper Range Values
        	if mousex() > 577 and mousex() < 630
            	if mousey() > 30 and mousey() < 49
            		g_RANGES_Chart_Selected_Num = 5
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 77 and mousey() < 96
            		g_RANGES_Chart_Selected_Num = 6
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 124 and mousey() < 143
            		g_RANGES_Chart_Selected_Num = 7
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 171 and mousey() < 190
            		g_RANGES_Chart_Selected_Num = 8
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
        	endif
    	endif 
  	endif
  
  
  
    `Block 3
  	if l_MSE_In_Chart_ID = 3
    	if g_DS_SCREEN_Block3_DisplayFormat = 3
      	`Lower Range Values
        	if mousex() > 746 and mousex() < 799
            	if mousey() > 46 and mousey() < 67
            		g_RANGES_Chart_Selected_Num = 9
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 78 and mousey() < 129
            		g_RANGES_Chart_Selected_Num = 10
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 170 and mousey() < 191
            		g_RANGES_Chart_Selected_Num = 11
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
        	endif
      	`Upper Range Values
        	if mousex() > 900 and mousex() < 954
            	if mousey() > 46 and mousey() < 67
            		g_RANGES_Chart_Selected_Num = 9
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 78 and mousey() < 129
            		g_RANGES_Chart_Selected_Num = 10
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 170 and mousey() < 191
            		g_RANGES_Chart_Selected_Num = 11
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
        	endif
    	endif  
    	`
    	if g_DS_SCREEN_Block3_DisplayFormat = 4
      	`Lower Range Values
        	if mousex() > 788 and mousex() < 841
            	if mousey() > 30 and mousey() < 49
            		g_RANGES_Chart_Selected_Num = 9
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 77 and mousey() < 96
            		g_RANGES_Chart_Selected_Num = 10
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 124 and mousey() < 143
            		g_RANGES_Chart_Selected_Num = 11
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
            	if mousey() > 171 and mousey() < 190
            		g_RANGES_Chart_Selected_Num = 12
            		g_NUMPAD_High_Low_Choice_Selection = 1
            		mouse_click(1) = 1
            	endif
        	endif
      	`Upper Range Values
        	if mousex() > 900 and mousex() < 953
            	if mousey() > 30 and mousey() < 49
            		g_RANGES_Chart_Selected_Num = 9
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 77 and mousey() < 96
            		g_RANGES_Chart_Selected_Num = 10
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 124 and mousey() < 143
            		g_RANGES_Chart_Selected_Num = 11
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
            	if mousey() > 171 and mousey() < 190
            		g_RANGES_Chart_Selected_Num = 12
            		g_NUMPAD_High_Low_Choice_Selection = 2
            		mouse_click(1) = 1
            	endif
        	endif
    	endif 
  	endif
  
  
  endif





endfunction



function Handle_DS_Screen_DepthTick_Button()

  if g_DS_Display_DepthTicks = 1
    paste image c_DepthTick_ToggleImg_Lit, 4, 172
  else
    paste image c_DepthTick_ToggleImg_Unlit, 4, 172
  endif
  
  if mousex() < 48 and mousey() > 171 and mousey() < 189 and mouseclick() = 1 and mouse_click(1) = -1
    mouse_click(1) = 1
    if g_DS_Display_DepthTicks = 1
      g_DS_Display_DepthTicks = -1
    else
      g_DS_Display_DepthTicks = 1
    endif    
  endif
    
endfunction

function Handle_HS_Screen_DepthTick_Button()

  if g_HS_Display_DepthTicks = 1
    paste image c_DepthTick_ToggleImg_Lit, 12, 193, 1
  else
    paste image c_DepthTick_ToggleImg_Unlit, 12, 193, 1
  endif
  
  if mousex() > 11 and mousex() < 20 and mousey() > 192 and mousey() < 210 and mouseclick() = 1 and mouse_click(1) = -1
    mouse_click(1) = 1
    if g_HS_Display_DepthTicks = 1
      g_HS_Display_DepthTicks = -1
    else
      g_HS_Display_DepthTicks = 1
    endif    
  endif
    
endfunction

function Handle_HS_Screen_Comments_Button()

  if g_HS_Display_Comments = 1
    paste image c_HS_DispComments_ToggleImg_Lit, 12, 212, 1
  else
    paste image c_HS_DispComments_ToggleImg_Unlit, 12, 212, 1
  endif  
  
  if mousex() > 11 and mousex() < 20 and mousey() > 211 and mousey() < 229 and mouseclick() = 1 and mouse_click(1) = -1
    mouse_click(1) = 1
    if g_HS_Display_Comments = 1
      g_HS_Display_Comments = -1
    else
      g_HS_Display_Comments = 1
    endif    
  endif
    
endfunction

function Handle_DS_Screen_LineThickness_Button()

  `Display and handle the RT Graphics Screen DS Line Thickness Buttons (Input Code Marker: 16637)
  if g_ENGINE_Screen_Resolution = 1
    if mousex() > 1008 and mousex() < 1024 and mousey() > 228 and mousey() < 250 and mouseclick() = 1 and mouse_click(1) = -1 and g_RCM_MSE_INPUT_Toggle = -1
      mouse_click(1) = 1
      if g_DS_PLOTCHART_DoubleLineThickness = 1
        g_DS_PLOTCHART_DoubleLineThickness = -1
      else
        g_DS_PLOTCHART_DoubleLineThickness = 1
      endif
      ENGINE_DS_CHART_IMAGE_Creation()  
    endif
    if g_DS_PLOTCHART_DoubleLineThickness = 1
      paste image c_RTScreen_LineThickness_Double, 1009, 229
    else
      paste image c_RTScreen_LineThickness_Single, 1009, 229
    endif
  else
    if mousex() > 685 and mousey() < 701 and mousey() > 228 and mousey() < 250 and mouseclick() = 1 and mouse_click(1) = -1 and g_RCM_MSE_INPUT_Toggle = -1
      mouse_click(1) = 1
      if g_DS_PLOTCHART_DoubleLineThickness = 1
        g_DS_PLOTCHART_DoubleLineThickness = -1
      else
        g_DS_PLOTCHART_DoubleLineThickness = 1
      endif
      ENGINE_DS_CHART_IMAGE_Creation()     
    endif
    if g_DS_PLOTCHART_DoubleLineThickness = 1
      paste image c_RTScreen_LineThickness_Double, 686, 229
    else
      paste image c_RTScreen_LineThickness_Single, 686, 229
    endif
  endif
      
endfunction      

function DISP_RT_GRAPHICS_SCREEN_Widescreen()

  if g_ENGINE_HIST_DRILL_Screen_Routing = 1
    `Display Drilling Screen Background and Charts
    paste image c_DRILLING_SCREEN_Imgnum_Background, 0, 0
    if image exist(c_CHT_PLOT_Img_Block1) = 1
      paste image c_CHT_PLOT_Img_Block1, 10, 197
    endif
    if image exist(c_CHT_PLOT_Img_Block2) = 1
      paste image c_CHT_PLOT_Img_Block2, 384, 197
    endif
    if image exist(c_CHT_PLOT_Img_Block3) = 1
      paste image c_CHT_PLOT_Img_Block3, 699, 197
    endif    
  endif
  
  if g_ENGINE_HIST_DRILL_Screen_Routing = 2
    `Display Historical Screen
    paste image c_HISTORICAL_SCREEN_Imgnum_Background, 0, 0
    `Cover over the min max close buttons (they on on the bmp for use in Viewer Mode, but do nothing here)
    paste image c_CF2_HS_MinMaxClose_Cover_WideScreen, 1279, 0
  endif
  
  if g_ENGINE_HIST_DRILL_Screen_Routing = 3
    paste image c_PITS_SCREEN_Imgnum_Background, 0, 0
    if image exist(c_CHT_PLOT_Img_Block1) = 1
      paste image c_CHT_PLOT_Img_Block1, 10, 197
    endif
    if image exist(c_CHT_PLOT_Img_Block2) = 1
      paste image c_CHT_PLOT_Img_Block2, 384, 197
    endif
    if image exist(c_CHT_PLOT_Img_Block3) = 1
      paste image c_CHT_PLOT_Img_Block3, 699, 197
    endif
    if image exist(c_CHT_PLOT_Img_Block4) = 1
      paste image c_CHT_PLOT_Img_Block4, 1014, 197
    endif
  endif
  
  `Handle the CF1 Close Button and Min/Max Windowed Button on the Widescreen
  if g_ENGINE_CoreFunctionType = 1
    `Close Button
    if mousey() < 18
      if mousex() > 1310
        paste image c_DISPLAY_CLOSEButton_LIT, 1311, 2
        if mouseclick() = 1 and mouse_click(1) = -1
          mouse_click(1) = 1
          g_RTDispEXITBOX_TOGGLE = 1
          g_RTDispEXITBOX_HighlightYorN = 1
          g_RTDispEXITBOX_PosX = g_ENG_Half_Screen_Width - g_SPRITE_ExitBox_Half_Width
          g_RTDispEXITBOX_PosY = g_ENG_Half_Screen_Height - g_SPRITE_ExitBox_Half_Height
        endif
      else
        paste image c_DISPLAY_CLOSEButton_UNLIT, 1311, 2
      endif
    else
      paste image c_DISPLAY_CLOSEButton_UNLIT, 1311, 2
    endif
    `Windowed Mode Toggle
    if mousey() < 18
      if mousex() > 1281 and mousex() < 1310
        paste image c_DISPLAY_WINDOWEDButton_LIT, 1281, 2
        if mouseclick() = 1 and mouse_click(1) = -1
          mouse_click(1) = 1
          `put code here
          if g_Window_Fullscreen_Toggle = 1
            `Windowed
            lib_SetScreen_Windowed_FullScreen_p1or2(2)
          else
            `Fullscreen
            lib_SetScreen_Windowed_FullScreen_p1or2(1)
          endif
        endif 
      else  
        paste image c_DISPLAY_WINDOWEDButton_UNLIT, 1281, 2
      endif
    else
      paste image c_DISPLAY_WINDOWEDButton_UNLIT, 1281, 2
    endif
  endif

endfunction

function DISP_RT_GRAPHICS_SCREEN_1024x768()

  if g_ENGINE_HIST_DRILL_Screen_Routing = 1
    `Display Drilling Screen Background and Charts
    paste image c_DRILLING_SCREEN_Imgnum_Background, 0, 0
    if image exist(c_CHT_PLOT_Img_Block1) = 1
      paste image c_CHT_PLOT_Img_Block1, 10, 197
    endif
    if image exist(c_CHT_PLOT_Img_Block2) = 1
      paste image c_CHT_PLOT_Img_Block2, 276, 197
    endif
    if image exist(c_CHT_PLOT_Img_Block3) = 1
      paste image c_CHT_PLOT_Img_Block3, 483, 197
    endif
  endif
  
  if g_ENGINE_HIST_DRILL_Screen_Routing = 2
    `Display Historical Screen
    paste image c_HISTORICAL_SCREEN_Imgnum_Background, 0, 0
    
    
    `Cover over the min max close buttons (they on on the bmp for use in Viewer Mode, but do nothing here)
    paste image c_CF2_HS_MinMaxClose_Cover_1024, 943, 0
  endif
  
  if g_ENGINE_HIST_DRILL_Screen_Routing = 3
    paste image c_PITS_SCREEN_Imgnum_Background, 0, 0
    if image exist(c_CHT_PLOT_Img_Block1) = 1
      paste image c_CHT_PLOT_Img_Block1, 10, 197
    endif
    if image exist(c_CHT_PLOT_Img_Block2) = 1
      paste image c_CHT_PLOT_Img_Block2, 276, 197
    endif
    if image exist(c_CHT_PLOT_Img_Block3) = 1
      paste image c_CHT_PLOT_Img_Block3, 483, 197
    endif
    if image exist(c_CHT_PLOT_Img_Block4) = 1
      paste image c_CHT_PLOT_Img_Block4, 687, 197
    endif
  endif
  
  `Handle the CF1 Close Button and Min/Max Windowed Button on the 1024x768 Screen
  if g_ENGINE_CoreFunctionType = 1
    `Close Button
    if mousey() < 18
      if mousex() > 945 and mousex() < 973
        paste image c_DISPLAY_WINDOWEDButton_LIT, 945, 2
        if mouseclick() = 1 and mouse_click(1) = -1
          mouse_click(1) = 1
          `Put Code Here
          if g_Window_Fullscreen_Toggle = 1
            `Windowed
            lib_SetScreen_Windowed_FullScreen_p1or2(2)
          else
            `Fullscreen
            lib_SetScreen_Windowed_FullScreen_p1or2(1)
          endif
        endif
      else
        paste image c_DISPLAY_WINDOWEDButton_UNLIT, 945, 2
      endif
    else
      paste image c_DISPLAY_WINDOWEDButton_UNLIT, 945, 2
    endif
    `Windowed Mode Toggle
    if mousey() < 18
      if mousex() > 973
        paste image c_DISPLAY_CLOSEButton_LIT, 974, 2
        if mouseclick() = 1 and mouse_click(1) = -1
          mouse_click(1) = 1
          g_RTDispEXITBOX_TOGGLE = 1
          g_RTDispEXITBOX_HighlightYorN = 1
          g_RTDispEXITBOX_PosX = g_ENG_Half_Screen_Width - g_SPRITE_ExitBox_Half_Width
          g_RTDispEXITBOX_PosY = g_ENG_Half_Screen_Height - g_SPRITE_ExitBox_Half_Height
        endif
      else
        paste image c_DISPLAY_CLOSEButton_UNLIT, 974, 2
      endif
    else
      paste image c_DISPLAY_CLOSEButton_UNLIT, 974, 2
    endif
  endif

endfunction

function DISP_RT_DATA_SCREEN_ENGINE()

  DISP_RT_DATA_SCREEN_Inputs()

  if g_RTDispEXITBOX_TOGGLE = 1
    d3d_starttext
      sp = 0
      l_wdth_prnt = screen width() * 0.05
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
      inc l_wdth_prnt, 10
      `inc sp,19 : d3d_text 2, wdth_prnt, sp, 0, "EXIT CLIENT SOFTWARE? (Y/N) - Esc key disabled."
      inc sp, 40 : d3d_text 2, l_wdth_prnt, sp, 0, "The Client is continuing to run in the background."
      inc sp, 40 : d3d_text 6, l_wdth_prnt, sp, 0, "Do you want to Shut Down the Client?"
      inc sp, 40 : d3d_text 2, l_wdth_prnt, sp, 0, "Press a key. (Y/N)"
    d3d_endtext
      `[Y] - Exit Program
      if KEYSTATE(21)= 1 and key_state(21,0)= 0
        lib_EXIT_Program(1, 1)
        key_state(21,0)=1
      endif
      if KEYSTATE(21)=0 and key_state(21,0)=1 then key_state(21,0)=0
      `[N] - Exit Program
      if KEYSTATE(49)= 1 and key_state(49,0)= 0
        key_state(49,0)=1
        g_RTDispEXITBOX_TOGGLE = -1
      endif
      if KEYSTATE(49)=0 and key_state(49,0)=1 then key_state(49,0)=0
  else
    if g_ENGINE_CoreFunctionType = 1
      if g_DISP_RT_DatabaseScreenType = 1
        DISP_RT_DATA_SCREEN_CF1_Database()
      endif
      if g_DISP_RT_DatabaseScreenType = 2
        DISP_RT_DATA_SCREEN_CF1_ServerData()
      endif
      if g_DISP_RT_DatabaseScreenType = 3
        DISP_RT_DATA_SCREEN_CF1_UserAccount()
      endif
    endif
  endif
  
  d3d_starttext
    lib_Disp_RT_Display_Menu()
  d3d_endtext

endfunction

function DISP_RT_DATA_SCREEN_Inputs()

  `Handle [ESC] EscapeKey to open the Exit Box - what is this for?
  if keystate(1)= 1  and g_ENGINELOGIN_ESCToggle = -1 
    if g_RTDispEXITBOX_TOGGLE = -1
      g_RTDispEXITBOX_TOGGLE = 1
      g_RTDispEXITBOX_HighlightYorN = 1
      g_RTDispEXITBOX_PosX = g_ENG_Half_Screen_Width - g_SPRITE_ExitBox_Half_Width
      g_RTDispEXITBOX_PosY = g_ENG_Half_Screen_Height - g_SPRITE_ExitBox_Half_Height
    else
      g_RTDispEXITBOX_TOGGLE = -1
    endif
    g_ENGINELOGIN_ESCToggle = 1
    key_state(1,0)=1
  endif
  if keystate(1)= 0 and g_ENGINELOGIN_ESCToggle = 1 then g_ENGINELOGIN_ESCToggle = -1

  `[G] - Go to page number
  if keystate(34)= 1 and key_state(34,0)= 0
    if g_CF1_DatabaseViewer_GotoPage_Toggle = -1
      g_CF1_DatabaseViewer_GotoPage_Toggle = 1
      g_CF1_DatabaseViewer_GotoPage_BuildString$ = ""
    else
      g_CF1_DatabaseViewer_GotoPage_Toggle = -1
    endif    
    key_state(34,0)=1
  endif
  if keystate(34)=0 and key_state(34,0)=1 then key_state(34,0)=0
  
  `Build the MEM database goto number string if a number is pressed and g_DATABASE_MEM_GotoPage_Toggle = 1
    if g_CF1_DatabaseViewer_GotoPage_Toggle = 1
      if scancode() > 1 and scancode() < 12
        l_MEMDB_Keyboard_Input = scancode()
        if keystate(l_MEMDB_Keyboard_Input)= 1 and key_state(l_MEMDB_Keyboard_Input,0)= 0
          if scancode() = 11
            g_CF1_DatabaseViewer_GotoPage_BuildString$ = g_CF1_DatabaseViewer_GotoPage_BuildString$ + "0"
          else
            g_CF1_DatabaseViewer_GotoPage_BuildString$ = g_CF1_DatabaseViewer_GotoPage_BuildString$ + str$(l_MEMDB_Keyboard_Input - 1)
          endif
          key_state(l_MEMDB_Keyboard_Input, 0) = 1
        endif
      endif
      if scancode() = 0
        for check_lp = 2 to 11
          if keystate(check_lp) = 0 and key_state(check_lp, 0) = 1
            key_state(check_lp,0) = 0
          endif
        next check_lp
      endif
    		`Dirty NUMPAD Code - Just do it this way to make it work and not mess with other code.
    		if scancode() > 70 and scancode() < 83
      		l_MEMDB_Keyboard_Input = scancode()
      		if keystate(l_MEMDB_Keyboard_Input)= 1 and key_state(l_MEMDB_Keyboard_Input,0)= 0
        		if l_MEMDB_Keyboard_Input = 79 then g_CF1_DatabaseViewer_GotoPage_BuildString$ = g_CF1_DatabaseViewer_GotoPage_BuildString$ + "1"
        		if l_MEMDB_Keyboard_Input = 80 then g_CF1_DatabaseViewer_GotoPage_BuildString$ = g_CF1_DatabaseViewer_GotoPage_BuildString$ + "2"
        		if l_MEMDB_Keyboard_Input = 81 then g_CF1_DatabaseViewer_GotoPage_BuildString$ = g_CF1_DatabaseViewer_GotoPage_BuildString$ + "3"
		
        		if l_MEMDB_Keyboard_Input = 75 then g_CF1_DatabaseViewer_GotoPage_BuildString$ = g_CF1_DatabaseViewer_GotoPage_BuildString$ + "4"
        		if l_MEMDB_Keyboard_Input = 76 then g_CF1_DatabaseViewer_GotoPage_BuildString$ = g_CF1_DatabaseViewer_GotoPage_BuildString$ + "5"
        		if l_MEMDB_Keyboard_Input = 77 then g_CF1_DatabaseViewer_GotoPage_BuildString$ = g_CF1_DatabaseViewer_GotoPage_BuildString$ + "6"
        		
        		if l_MEMDB_Keyboard_Input = 71 then g_CF1_DatabaseViewer_GotoPage_BuildString$ = g_CF1_DatabaseViewer_GotoPage_BuildString$ + "7"
        		if l_MEMDB_Keyboard_Input = 72 then g_CF1_DatabaseViewer_GotoPage_BuildString$ = g_CF1_DatabaseViewer_GotoPage_BuildString$ + "8"
        		if l_MEMDB_Keyboard_Input = 73 then g_CF1_DatabaseViewer_GotoPage_BuildString$ = g_CF1_DatabaseViewer_GotoPage_BuildString$ + "9"
        		
        		if l_MEMDB_Keyboard_Input = 82 then g_CF1_DatabaseViewer_GotoPage_BuildString$ = g_CF1_DatabaseViewer_GotoPage_BuildString$ + "0"
        		
        		key_state(l_MEMDB_Keyboard_Input,0) = 1
      		endif
    		endif
    		if scancode() = 0
    			for check_lp = 71 to 82
      			if keystate(check_lp) = 0 and key_state(check_lp, 0) = 1
        			key_state(check_lp,0) = 0
      			endif
    			next check_lp
    		endif
    endif
  `[ENTER] - Accept the goto page number
  if lib_Enter_Pressed(14524) = 1
    l_max_pages = int(c_SMod_RTDis_DB_TtlRecs / c_DISP_RT_DB_View_MaxRecordsPerPage) + 1
    l_gotopage_calc = val(g_CF1_DatabaseViewer_GotoPage_BuildString$)
    if l_gotopage_calc > l_max_pages
      l_gotopage_calc = l_max_pages
    endif
    if l_gotopage_calc = 0 
      l_gotopage_calc = 1
    endif
    g_DISP_RT_DB_View_PageNumber = l_gotopage_calc
    g_CF1_DatabaseViewer_GotoPage_Toggle = -1
  endif

  
  
  `[LEFT Cursor] - Go to 1st Display page
  if keystate(203)= 1 and key_state(203,0)= 0
    g_DISP_RT_DB_View_PageLeftRight = 1
    key_state(203,0)=1
  endif
  if keystate(203)=0 and key_state(203,0)=1 then key_state(203,0)=0
  
  `[RIGHT Cursor] - Go to 2st Display page
  if keystate(205)= 1 and key_state(205,0)= 0
    g_DISP_RT_DB_View_PageLeftRight = 2
    key_state(205,0)=1
  endif
  if keystate(205)=0 and key_state(205,0)=1 then key_state(205,0)=0
  
  `[UP Cursor] - Go up a page view
  if keystate(200)= 1 and key_state(200,0)= 0
    if g_DISP_RT_DB_View_PageNumber > 1
      dec g_DISP_RT_DB_View_PageNumber, 1
    endif  
    key_state(200,0)=1
  endif
  if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
  
  `[DOWN Cursor] - Go down a page view
  if keystate(208)= 1 and key_state(208,0)= 0
    `l_max_pages = int(c_SMod_RTDis_DB_TtlRecsToDisplay / c_DISP_RT_DB_View_MaxRecordsPerPage)
    l_max_pages = 17
    if g_DISP_RT_DB_View_PageNumber < l_max_pages
      inc g_DISP_RT_DB_View_PageNumber, 1
    endif  
    key_state(208,0)=1
  endif
  if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
  
  `Scroll HS DB Command Console Viewer Screen Numbers using mouse wheel
  if mousez() > g_BDMEM_Screen_MouseZ
    g_BDMEM_Screen_MouseZ = mousez()
    if g_DISP_RT_DB_View_PageNumber > 1
      dec g_DISP_RT_DB_View_PageNumber, 1
    endif 
  endif
  if mousez() < g_BDMEM_Screen_MouseZ
    g_BDMEM_Screen_MouseZ = mousez()
    l_max_pages = int(c_SMod_RTDis_DB_TtlRecs / c_DISP_RT_DB_View_MaxRecordsPerPage)
    if g_DISP_RT_DB_View_PageNumber < l_max_pages
      inc g_DISP_RT_DB_View_PageNumber, 1
    endif
  endif  
  
endfunction  


function DISP_RT_DATA_SCREEN_CF1_Database()

  paste image c_DISPLAY_Imgnum_BlackBackground, 0, 0
  
  d3d_color 255,255,255,255

  d3d_starttext

    `lib_Display_Menu()
    
    if g_TIMER_1 > g_COMMANDCONSOLE_Flash_Timer
      g_COMMANDCONSOLE_Flash_Timer = g_TIMER_1 + 1
      if g_COMMANDCONSOLE_Flash_Toggle = -1
        g_COMMANDCONSOLE_Flash_Toggle = 1
      else
        g_COMMANDCONSOLE_Flash_Toggle = -1
      endif
    endif
    
    l_wdth_prnt = screen width() * 0.05 : sp = 0
    
    if g_COMMANDCONSOLE_Flash_Toggle = -1
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "  REALTIME GRAPHICAL DISPLAY.  - CLIENT. V." + g_CLIENT_Version_Num$ 
    else
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "  REALTIME GRAPHICAL DISPLAY.  - CLIENT. V." + g_CLIENT_Version_Num$ + "   (Press F9 to Exit)"
    endif
    inc sp,19
    inc sp,19
    d3d_text 2, l_wdth_prnt, sp, 0, "1) LOCAL Database"
    d3d_text 1, l_wdth_prnt + 140, sp, 0, "2) Server Data [Received]"
    d3d_text 1, l_wdth_prnt + 310, sp, 0, "3) LOCAL User ID Information"
  
    if g_CF1_DatabaseViewer_GotoPage_Toggle = 1
      l_GotoPage_Des$ = "- Enter page number to go to: " + g_CF1_DatabaseViewer_GotoPage_BuildString$
    else
      l_GotoPage_Des$ = ""
    endif
  
    inc sp,19
    l_total_pages = int(c_SMod_RTDis_DB_TtlRecs / c_DISP_RT_DB_View_MaxRecordsPerPage)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "Page " + str$(g_DISP_RT_DB_View_PageNumber) + " of " + str$(l_total_pages) + " (" + str$(g_DISP_RT_DB_View_PageLeftRight) + " of 2)" + "     " + l_GotoPage_Des$
    
  
    if g_DISP_RT_DB_View_PageLeftRight = 1
      `Print Headers
        l_printx = l_wdth_prnt
        inc sp, (19 * 3)
        inc l_printx, 0 : d3d_text 2, l_printx, sp, 0, "Array"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Date"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Time"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Hole Depth"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Bit Depth"
        
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "ROP"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "WOB"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Hookload"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "RPM"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Triptank"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Block Pos"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "PVT"
      `Print Data
        for arr_lp = 0 + ((g_DISP_RT_DB_View_PageNumber - 1) * c_DISP_RT_DB_View_MaxRecordsPerPage) to c_DISP_RT_DB_View_MaxRecordsPerPage + ((g_DISP_RT_DB_View_PageNumber - 1) * c_DISP_RT_DB_View_MaxRecordsPerPage)
          if arr_lp < c_SMod_RTDis_DB_TtlRecs
            inc sp, 19
            l_printx = l_wdth_prnt
            inc l_printx, 0 : d3d_text 1, l_printx, sp, 0, str$(arr_lp)
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, VIEWERMODE_RTDisplay_DB(arr_lp).Date$
            inc l_printx, 75 : d3d_text 1, l_printx, sp, 0, VIEWERMODE_RTDisplay_DB(arr_lp).Time$
            inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).Hole_Depth#, 1)
            inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).Bit_Depth#, 1)
            
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).ROP#, 1) 
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).WOB#, 1) 
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).Hookload, 0) 
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).RPM, 0) 
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).TripTank#, 1)
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).BlockPosition#, 1) 
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).PVT#, 1)
          endif
        next arr_lp  
    endif
    
    if g_DISP_RT_DB_View_PageLeftRight = 2
      `Print Headers
        l_printx = l_wdth_prnt
        inc sp, (19 * 3)
        inc l_printx, 0 : d3d_text 2, l_printx, sp, 0, "Array"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Date"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Time"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Hole Depth"
        inc l_printx, 80 : d3d_text 2, l_printx, sp, 0, "Bit Depth"

        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "SPP"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "Flow IN"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "SPM 1"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "SPM 2"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "TG %"
        inc l_printx, 70 : d3d_text 2, l_printx, sp, 0, "H2S"
      `Print Data
        for arr_lp = 0 + ((g_DISP_RT_DB_View_PageNumber - 1) * c_DISP_RT_DB_View_MaxRecordsPerPage) to c_DISP_RT_DB_View_MaxRecordsPerPage + ((g_DISP_RT_DB_View_PageNumber - 1) * c_DISP_RT_DB_View_MaxRecordsPerPage)
          if arr_lp < c_SMod_RTDis_DB_TtlRecs
            inc sp, 19
            l_printx = l_wdth_prnt
            inc l_printx, 0 : d3d_text 1, l_printx, sp, 0, str$(arr_lp)
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, VIEWERMODE_RTDisplay_DB(arr_lp).Date$
            inc l_printx, 75 : d3d_text 1, l_printx, sp, 0, VIEWERMODE_RTDisplay_DB(arr_lp).Time$ 
            inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).Hole_Depth#, 1)
            inc l_printx, 80 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).Bit_Depth#, 1) 
   
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).SPP, 0)  
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).FlowIn, 0) 
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).SPM1, 0) 
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).SPM2, 0) 
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).TotalGas#, 2) 
            inc l_printx, 70 : d3d_text 1, l_printx, sp, 0, str$(VIEWERMODE_RTDisplay_DB(arr_lp).H2S#, 0)
          endif
        next arr_lp
    endif

  d3d_endtext

endfunction

function DISP_RT_DATA_SCREEN_CF1_ServerData()

  `This screen is non-interactive and just shows the realtime data coming in from the Server
  `as well as the Servers various line range settings and line colours.
  
  paste image c_DISPLAY_Imgnum_BlackBackground, 0, 0
  
  d3d_color 255,255,255,255

  d3d_starttext

    `lib_Display_Menu()
    
    if g_TIMER_1 > g_COMMANDCONSOLE_Flash_Timer
      g_COMMANDCONSOLE_Flash_Timer = g_TIMER_1 + 1
      if g_COMMANDCONSOLE_Flash_Toggle = -1
        g_COMMANDCONSOLE_Flash_Toggle = 1
      else
        g_COMMANDCONSOLE_Flash_Toggle = -1
      endif
    endif
    
    l_wdth_prnt = screen width() * 0.05 : sp = 0
    
    if g_COMMANDCONSOLE_Flash_Toggle = -1
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "  REALTIME GRAPHICAL DISPLAY.  - CLIENT. V." + g_CLIENT_Version_Num$ 
    else
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "  REALTIME GRAPHICAL DISPLAY.  - CLIENT. V." + g_CLIENT_Version_Num$ + "   (Press F9 to Exit)"
    endif
    
    inc sp,19
    inc sp,19
    d3d_text 1, l_wdth_prnt, sp, 0, "1) LOCAL Database"
    d3d_text 2, l_wdth_prnt + 140, sp, 0, "2) Server Data [Received]"
    d3d_text 1, l_wdth_prnt + 310, sp, 0, "3) LOCAL User ID Information"
    
    `Display RANGE Variables
    inc sp,19
    inc sp,19 : d3d_text 2, l_wdth_prnt, sp, 0, "  ENGINE"
    
    if g_server_connected = 1
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Server Connection : Connected"
    else
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Server Connection : Not Connected"
    endif
    
    if g_DISP_RT_DB_PUSHTABLE_State = 1 or g_DISP_RT_DB_PUSHTABLE_State = 2
      if g_DISP_RT_DB_PUSHTABLE_State = 1
        inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Server Data Relationship : Set to 'Request'"
      endif
      if g_DISP_RT_DB_PUSHTABLE_State = 2
        inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Server Data Relationship : Confirmed"
      endif
    else
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Server Data Relationship : Not Requested"
    endif
    
    if g_DISP_RT_DB_RequestChannel_Time$ = ""
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Server Channel Data Received at : Channel Data Not Received."
    else
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Server Channel Data Received at : " + g_DISP_RT_DB_RequestChannel_Time$ + " ("+ g_DISP_RT_DB_RequestChannel_Date$ + ") (Re-request - F5)"
    endif
    inc sp,19
    

    inc sp,19
    l_startsp_y = sp
    inc sp,19 : d3d_text 2, l_wdth_prnt, sp, 0, "  Channel Upper/Lower Range Variables"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 1, Lower Range : " + str$(g_Block1_Line1_Lower_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 1, Upper Range : " + str$(g_Block1_Line1_Upper_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 2, Lower Range : " + str$(g_Block1_Line2_Lower_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 2, Upper Range : " + str$(g_Block1_Line2_Upper_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 3, Lower Range : " + str$(g_Block1_Line3_Lower_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 3, Upper Range : " + str$(g_Block1_Line3_Upper_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 1, Lower Range : " + str$(g_Block2_Line1_Lower_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 1, Upper Range : " + str$(g_Block2_Line1_Upper_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 2, Lower Range : " + str$(g_Block2_Line2_Lower_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 2, Upper Range : " + str$(g_Block2_Line2_Upper_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 3, Lower Range : " + str$(g_Block2_Line3_Lower_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 3, Upper Range : " + str$(g_Block2_Line3_Upper_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 1, Lower Range : " + str$(g_Block3_Line1_Lower_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 1, Upper Range : " + str$(g_Block3_Line1_Upper_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 2, Lower Range : " + str$(g_Block3_Line2_Lower_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 2, Upper Range : " + str$(g_Block3_Line2_Upper_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 3, Lower Range : " + str$(g_Block3_Line3_Lower_Value)
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 3, Upper Range : " + str$(g_Block3_Line3_Upper_Value)
  
    `Display COLOUR Variables
    sp = l_startsp_y : inc l_wdth_prnt, 350
    inc sp,19 : d3d_text 2, l_wdth_prnt, sp, 0, "  Channel Colour Variables"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 1, Colour : " + g_DRT_Block1_Line1_Colour$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 2, Colour : " + g_DRT_Block1_Line2_Colour$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 3, Colour : " + g_DRT_Block1_Line3_Colour$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 1, Colour : " + g_DRT_Block2_Line1_Colour$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 2, Colour : " + g_DRT_Block2_Line2_Colour$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 3, Colour : " + g_DRT_Block2_Line3_Colour$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 1, Colour : " + g_DRT_Block3_Line1_Colour$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 2, Colour : " + g_DRT_Block3_Line2_Colour$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 3, Colour : " + g_DRT_Block3_Line3_Colour$
  
    `Unit Names
    inc sp,19
    inc sp,19 : d3d_text 2, l_wdth_prnt, sp, 0, "  Unit Names"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 1, Name : " + g_DS_Units_Block1Line1_Name$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 2, Name : " + g_DS_Units_Block1Line2_Name$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 3, Name : " + g_DS_Units_Block1Line3_Name$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 1, Name : " + g_DS_Units_Block2Line1_Name$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 2, Name : " + g_DS_Units_Block2Line2_Name$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 3, Name : " + g_DS_Units_Block2Line3_Name$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 1, Name : " + g_DS_Units_Block3Line1_Name$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 2, Name : " + g_DS_Units_Block3Line2_Name$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 3, Name : " + g_DS_Units_Block3Line3_Name$

    `Unit Screen Positions
    `inc sp,19
    `inc sp,19 : d3d_text 2, l_wdth_prnt, sp, 0, "  Unit Screen Positions"
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 1, Screen X : " + str$(g_DS_Units_Block1Line1_X)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 1, Screen Y : " + str$(g_DS_Units_Block1Line1_Y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 2, Screen X : " + str$(g_DS_Units_Block1Line2_X)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 2, Screen Y : " + str$(g_DS_Units_Block1Line2_Y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 3, Screen X : " + str$(g_DS_Units_Block1Line3_X)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 1, Line 3, Screen Y : " + str$(g_DS_Units_Block1Line3_Y)
        
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 1, Screen X : " + str$(g_DS_Units_Block2Line1_X)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 1, Screen Y : " + str$(g_DS_Units_Block2Line1_Y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 2, Screen X : " + str$(g_DS_Units_Block2Line2_X)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 2, Screen Y : " + str$(g_DS_Units_Block2Line2_Y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 3, Screen X : " + str$(g_DS_Units_Block2Line3_X)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 2, Line 3, Screen Y : " + str$(g_DS_Units_Block2Line3_Y)
        
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 1, Screen X : " + str$(g_DS_Units_Block3Line1_X)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 1, Screen Y : " + str$(g_DS_Units_Block3Line1_Y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 2, Screen X : " + str$(g_DS_Units_Block3Line2_X)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 2, Screen Y : " + str$(g_DS_Units_Block3Line2_Y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 3, Screen X : " + str$(g_DS_Units_Block3Line3_X)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Chart 3, Line 3, Screen Y : " + str$(g_DS_Units_Block3Line3_Y)
    
    `Screen Text Positions 
    `sp = 38 : inc l_wdth_prnt, 300
    `inc sp,19
    `inc sp,19 : d3d_text 2, l_wdth_prnt, sp, 0, "  Drilling Variables Screen Coordinates"
    
    `sp1 = sp
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Hole Depth X : " + str$(g_DISPLAY_HOLE_DEPTH_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Hole Depth Y : " + str$(g_DISPLAY_HOLE_DEPTH_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Bit Depth X : " + str$(g_DISPLAY_BIT_DEPTH_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Bit Depth Y : " + str$(g_DISPLAY_BIT_DEPTH_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    ROP X : " + str$(g_DISPLAY_ROP_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    ROP Y : " + str$(g_DISPLAY_ROP_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    WOB X : " + str$(g_DISPLAY_WOB_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    WOB Y : " + str$(g_DISPLAY_WOB_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Hookload X : " + str$(g_DISPLAY_HKLD_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Hookload Y : " + str$(g_DISPLAY_HKLD_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    RPM X : " + str$(g_DISPLAY_RPM_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    RPM Y : " + str$(g_DISPLAY_RPM_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Trip Tank X : " + str$(g_DISPLAY_TT_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Trip Tank Y : " + str$(g_DISPLAY_TT_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Block Position X : " + str$(g_DISPLAY_BLKPOS_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Block Position Y : " + str$(g_DISPLAY_BLKPOS_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    PTV X : " + str$(g_DISPLAY_PVT_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    PVT Y : " + str$(g_DISPLAY_PVT_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    SPP X : " + str$(g_DISPLAY_SPP_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    SPP Y : " + str$(g_DISPLAY_SPP_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Flow IN X : " + str$(g_DISPLAY_FLOWIN_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Flow IN Y : " + str$(g_DISPLAY_FLOWIN_y)
    `SIDE INFORMATION
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Total SPM X : " + str$(g_DISPLAY_TOTAL_SPM_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Total SPM Y : " + str$(g_DISPLAY_TOTAL_SPM_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Total Strokes X : " + str$(g_DISPLAY_TOTAL_STROKES_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Total Strokes Y : " + str$(g_DISPLAY_TOTAL_STROKES_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    SPM 1 X : " + str$(g_DISPLAY_SPM1_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    SPM 1 Y : " + str$(g_DISPLAY_SPM1_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    SPM 2 X : " + str$(g_DISPLAY_SPM2_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    SPM 2 Y : " + str$(g_DISPLAY_SPM2_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    SPM 3 X : " + str$(g_DISPLAY_SPM3_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    SPM 3 Y : " + str$(g_DISPLAY_SPM3_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Total Gas % X : " + str$(g_DISPLAY_TOTAL_GAS_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Total Gas % Y : " + str$(g_DISPLAY_TOTAL_GAS_y)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    H2S X : " + str$(g_DISPLAY_H2S_x)
    `inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    H2S Y : " + str$(g_DISPLAY_H2S_y)
    
    `Last Drilling Data PUSH
    sp = l_startsp_y : inc l_wdth_prnt, 300
    inc sp,19 : d3d_text 2, l_wdth_prnt, sp, 0, "  Last Drilling Data From Server"
    
    sp1 = sp
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Last Record Received At : " + g_DISP_RT_DB_Last_Good_Data_Received$
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Time"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Date"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Hole Depth"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Bit Depth"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    ROP"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    WOB"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Hookload"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    RPM"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Triptank"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Block Position"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    PVT"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    SPP"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    Flow In"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    SPM 1"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    SPM 2"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    TG %"
    inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    H2S"
    
    sp = sp1 : l_xoffset = l_wdth_prnt + 150
    inc sp,19
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + g_DISP_RT_DB_Time$
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + g_DISP_RT_DB_Date$
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_Hole_Depth#)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_Bit_Depth#)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_ROP#)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_WOB#)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_Hookload)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_RPM)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_TripTank#)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_BlockPosition#)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_PVT#)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_SPP)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_FlowIn)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_SPM1)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_SPM2)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_TotalGas#)
    inc sp,19 : d3d_text 1, l_xoffset, sp, 0, ": " + str$(g_DISP_RT_DB_H2S#)
    
  d3d_endtext

endfunction

function DISP_RT_DATA_SCREEN_CF1_UserAccount()


  paste image c_DISPLAY_Imgnum_BlackBackground, 0, 0
  
  d3d_color 255,255,255,255

  d3d_starttext

    `lib_Display_Menu()
    
    if g_TIMER_1 > g_COMMANDCONSOLE_Flash_Timer
      g_COMMANDCONSOLE_Flash_Timer = g_TIMER_1 + 1
      if g_COMMANDCONSOLE_Flash_Toggle = -1
        g_COMMANDCONSOLE_Flash_Toggle = 1
      else
        g_COMMANDCONSOLE_Flash_Toggle = -1
      endif
    endif
    
    l_wdth_prnt = screen width() * 0.05 : sp = 0
    
    if g_COMMANDCONSOLE_Flash_Toggle = -1
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "  REALTIME GRAPHICAL DISPLAY.  - CLIENT. V." + g_CLIENT_Version_Num$ 
    else
      inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "  REALTIME GRAPHICAL DISPLAY.  - CLIENT. V." + g_CLIENT_Version_Num$ + "   (Press F9 to Exit)"
    endif
    
    inc sp,19
    inc sp,19
    d3d_text 1, l_wdth_prnt, sp, 0, "1) LOCAL Database"
    d3d_text 1, l_wdth_prnt + 140, sp, 0, "2) Server Data [Received]"
    d3d_text 2, l_wdth_prnt + 310, sp, 0, "3) LOCAL User ID Information"

    inc sp,19
    inc sp,19 : d3d_text 4, l_wdth_prnt, sp, 0, "LOCAL USER ID INFORMATION"
    inc sp,19
    inc sp,19 : d3d_text 3, l_wdth_prnt, sp, 0, "  Username :"
    d3d_text 3, l_wdth_prnt + 95, sp, 0, "[" + g_ENGINELOGIN_Main_Username$ + "]"
    inc sp,19 : d3d_text 3, l_wdth_prnt, sp, 0, "  Password :"
    d3d_text 3, l_wdth_prnt + 95, sp, 0, "[" + g_ENGINELOGIN_Main_Password$ + "]"
    
  d3d_endtext

endfunction

function lib_DS_RT_Display_DEPTH_TICKS()

  `NOTE: Do not call from within a d3d_starttext/d3d_endtext block
  
  local l_StartDepth_Floor# as float
  local l_Unit$ as string
  
  local l_MINOR_Interval# as float
  local l_MAJOR_Interval# as float
  
  local l_LastText_Y as integer : l_LastText_Y = -1000
  
  if g_ENGINE_UNITS_FT_or_M = 1
    l_Unit$ = " ft"
  else
    l_Unit$ = " m"
  endif

  `l_PrintDT_XPos = 100
  
    `Handle 'MIDNIGHT' LINE / DATE LINE
    if g_ENGINE_HIST_DRILL_Screen_Routing = 1
      l_Chart_Start_ArrayPos = DS_CHART_Get_First_Valid_Record_Array()
    endif
    if g_ENGINE_HIST_DRILL_Screen_Routing = 3
      l_Chart_Start_ArrayPos = PITS_CHART_Get_First_Valid_Record_Array()
    endif
    
    l_MINOR_Interval# = 0.2
    l_MAJOR_Interval# = 1.0
    if l_Chart_Start_ArrayPos > 0
      l_StartDepth_Floor# = floor((MEM_MAIN_DATABASE(l_Chart_Start_ArrayPos).Hole_Depth# + 1.0))
    else
      l_StartDepth_Floor# = 0
    endif
        
    l_NextMAJORTick_Val# = l_StartDepth_Floor# - l_MAJOR_Interval#
    l_NextMINORTick_Val# = l_StartDepth_Floor# - l_MINOR_Interval#

    `Handle Depth Ticks
    for check_lp = 0 to 451
      
      l_ypos = 197 + check_lp
      
      `Drilling Screen
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1
        l_Pxl1_Arr = (l_Chart_Start_ArrayPos) - ((l_ypos - 197) * g_ENGINE_DS_Chart_Time_Period_Adjust)
        l_Pxl2_Arr = (l_Chart_Start_ArrayPos) - ((l_ypos - 196) * g_ENGINE_DS_Chart_Time_Period_Adjust)
        if l_Pxl1_Arr > 0 and l_Pxl2_Arr > 0
          l_Depth1# = MEM_MAIN_DATABASE(l_Pxl1_Arr).Hole_Depth#
          l_Depth2# = MEM_MAIN_DATABASE(l_Pxl2_Arr).Hole_Depth#
          if l_Depth1# <> 0.0 and l_Depth2# <> 0.0
            `MAJOR INTERVAL
            if l_Depth2# < l_NextMAJORTick_Val#        
              d3d_line g_Block1_Mouse_MinX, l_ypos, g_Block1_Mouse_MinX + 10, l_ypos, g_ENGINE_COLOUR_Black
              d3d_line g_Block1_Mouse_MinX, l_ypos + 1, g_Block1_Mouse_MinX + 10, l_ypos + 1, g_ENGINE_COLOUR_Black
              dec l_NextMAJORTick_Val#, l_MAJOR_Interval#
              
              if l_ypos - 4 > l_LastText_Y + 8
                d3d_starttext
                  d3d_text 14, g_Block1_Mouse_MinX + 15, l_ypos - 4, 0, str$(l_Depth1#, 1) + l_Unit$, g_ENGINE_COLOUR_Black
                d3d_endtext
                l_LastText_Y = l_ypos - 4
              endif
            
            endif
            `MINOR INTERVAL
            if l_Depth2# < l_NextMINORTick_Val# 
              dec l_NextMINORTick_Val#, l_MINOR_Interval#
              d3d_line g_Block1_Mouse_MinX, l_ypos, g_Block1_Mouse_MinX + 5, l_ypos, g_ENGINE_COLOUR_Black
            endif
          endif
        endif
        
      endif

      `Pits Screen
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3
        l_Pxl1_Arr = (l_Chart_Start_ArrayPos) - ((l_ypos - 197) * g_ENGINE_PITS_Chart_Time_Period_Adjust)
        l_Pxl2_Arr = (l_Chart_Start_ArrayPos) - ((l_ypos - 196) * g_ENGINE_PITS_Chart_Time_Period_Adjust)
        if l_Pxl1_Arr > 0 and l_Pxl2_Arr > 0
          l_Depth1# = MEM_MAIN_DATABASE(l_Pxl1_Arr).Hole_Depth#
          l_Depth2# = MEM_MAIN_DATABASE(l_Pxl2_Arr).Hole_Depth#
          if l_Depth1# <> 0.0 and l_Depth2# <> 0.0
            `MAJOR INTERVAL
            if l_Depth2# < l_NextMAJORTick_Val#            
              d3d_line g_Block1_Mouse_MinX, l_ypos, g_Block1_Mouse_MinX + 10, l_ypos, g_ENGINE_COLOUR_Black
              d3d_line g_Block1_Mouse_MinX, l_ypos + 1, g_Block1_Mouse_MinX + 10, l_ypos + 1, g_ENGINE_COLOUR_Black
              dec l_NextMAJORTick_Val#, l_MAJOR_Interval#
              d3d_starttext
                d3d_text 14, g_Block1_Mouse_MinX + 15, l_ypos - 4, 0, str$(l_Depth1#, 1) + l_Unit$, g_ENGINE_COLOUR_Black
              d3d_endtext
            endif
            `MINOR INTERVAL
            if l_Depth2# < l_NextMINORTick_Val#
              dec l_NextMINORTick_Val#, l_MINOR_Interval#
              d3d_line g_Block1_Mouse_MinX, l_ypos, g_Block1_Mouse_MinX + 5, l_ypos, g_ENGINE_COLOUR_Black
            endif
          endif  
        endif  
      endif
    
    next check_lp
    
    
    
endfunction


function lib_HS_RT_Display_COMMENTS()

  local l_MEM_DB_Pos as integer
  local l_Chart_Start_ArrayPos as integer
  local l_BuildCmntStr$ as string
  local l_StrChar$ as string
  local l_DISP_CMNT_SpaceWidthPxls as integer
  local l_space_counter as integer
  local l_CMNTBkgd_ImgWidth as integer
  
  local l_PosX_Ratio# as float


//   local l_StartDepth_Floor# as float
//   local l_Unit$ as string
//   
//   local l_MINOR_Interval# as float
//   local l_MAJOR_Interval# as float
//   
//   local l_Chart_Start_ArrayPos as integer
//   local l_NextMAJORTick_Val# as float
//   local l_NextMINORTick_Val# as float
//   local l_MEM_DB_Pos as integer
//   local l_MEM_DB_Pos2 as integer
//   local l_Depth1# as float
//   local l_Depth2# as float
//   
//   local l_PrintText_X as integer
//   local l_LastTextAt_X as integer : l_LastTextAt_X = 1000000
//   
//   if g_ENGINE_UNITS_FT_or_M = 1
//     l_Unit$ = " ft"
//   else
//     l_Unit$ = " m"
//   endif
// 
//   `l_PrintDT_XPos = 100
//   
//     g_HS_CHARTBOX_Ttl_Width = 1248

    l_Chart_Start_ArrayPos = HS_CHART_Get_First_Valid_Record_Array()

    loop_Start_Arrpos_lp = (g_HS_Chart_Start_Array_Pos) - ((g_HS_CHARTBOX_Ttl_Width - 0) * g_ENGINE_HS_Chart_Time_Period_Adjust)
    loop_End_Arrpos_lp = (g_HS_Chart_Start_Array_Pos) - ((g_HS_CHARTBOX_Ttl_Width - 1248) * g_ENGINE_HS_Chart_Time_Period_Adjust)

    l_XPosCounter = 0

    `for print_pixel_lp = 0 to g_HS_CHARTBOX_Ttl_Width
    
    for print_pixel_lp = loop_Start_Arrpos_lp to loop_End_Arrpos_lp
    
      if (g_HS_Chart_Start_Array_Pos - print_pixel_lp) > 1

        `l_MEM_DB_Pos = (g_HS_Chart_Start_Array_Pos) - (print_pixel_lp * g_ENGINE_HS_Chart_Time_Period_Adjust)
        
        `l_MEM_DB_Pos = (g_HS_Chart_Start_Array_Pos) - ((g_HS_CHARTBOX_Ttl_Width - print_pixel_lp) * g_ENGINE_HS_Chart_Time_Period_Adjust)

        l_MEM_DB_Pos = print_pixel_lp

        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        

      	if MEM_MAIN_DATABASE(l_MEM_DB_Pos).Comment$ <> "00||||||||||||||||||||||||||||" and l_MEM_DB_Pos > 0
      	
      	
        	`Build the display string (l_DisplayStr$) to ignore any NULL characters
        		l_BuildCmntStr$ = ""
        		for buildStr_lp = 3 to len(MEM_MAIN_DATABASE(l_MEM_DB_Pos).Comment$)
          		l_StrChar$ = mid$(MEM_MAIN_DATABASE(l_MEM_DB_Pos).Comment$, buildStr_lp)
          		if l_StrChar$ <> "|"
            		l_BuildCmntStr$ = l_BuildCmntStr$ + l_StrChar$
          		endif
        		next buildStr_lp
        		
					`HANDLE SPACES IN STRING - Pixel width of all spaces in the string to calc Bkgd Box XWidth
					`Spaces are not included in d3d_gettextwidth, add them ourselves.
						l_space_counter = 0
						for count_spaces_lp = 0 to len(l_BuildCmntStr$)
			  			if mid$(l_BuildCmntStr$, count_spaces_lp) = " "
			    			inc l_space_counter, 1
			  			else
			    			l_space_counter = 0 
			  			endif
						next count_spaces_lp
						l_DISP_CMNT_SpaceWidthPxls = 0
						if l_space_counter > 0
			  			l_DISP_CMNT_SpaceWidthPxls = l_space_counter * 4
						endif
      	
      	
      	  l_CMNTBkgd_ImgWidth = d3d_gettextwidth(2, l_BuildCmntStr$) + 20 + l_DISP_CMNT_SpaceWidthPxls
      	
      	  if l_CMNTBkgd_ImgWidth < 10 then l_CMNTBkgd_ImgWidth = 10
      	
          lib_Create_Image(l_CMNTBkgd_ImgWidth, 20, rgb(255,255,177), c_CMNTSYS_InputNewComment_BkgdImg, 1, rgb(0,0,0)) 

          create bitmap 1, l_CMNTBkgd_ImgWidth, 20
          
          set current bitmap 1
          
          
          
          paste image c_CMNTSYS_InputNewComment_BkgdImg, 0, 0

      			inc l_XPosCounter, 1

      			l_PosX_Ratio# = ((print_pixel_lp * 1.0) - loop_Start_Arrpos_lp) / ((loop_End_Arrpos_lp - loop_Start_Arrpos_lp) * 1.0)
       			l_PosX_Value = int(g_HS_CHARTBOX_Ttl_Width * l_PosX_Ratio#)
       		
       	  	d3d_starttext
       	  	
       	    	`d3d_text 2, 200 + (l_XPosCounter * 75), 290, 0, str$(l_PosX_Ratio#, 4), g_ENGINE_COLOUR_Black
       	    	`d3d_text 2, 200 + (l_XPosCounter * 75), 310, 0, str$(l_PosX_Value), g_ENGINE_COLOUR_Black
       	    	`d3d_text 2, 200 + (l_XPosCounter * 75), 330, 0, str$(loop_Start_Arrpos_lp), g_ENGINE_COLOUR_Black
       	    	`d3d_text 2, 200 + (l_XPosCounter * 75), 350, 0, str$(loop_End_Arrpos_lp), g_ENGINE_COLOUR_Black
       	    	`d3d_text 2, 200 + (l_XPosCounter * 75), 370, 0, left$(l_BuildCmntStr$, 8), g_ENGINE_COLOUR_Black
       	  	
       	    	`d3d_text 2, l_PosX_Value + 75, 115, 0, l_BuildCmntStr$, g_ENGINE_COLOUR_Black
       	    	
       	    	lXPos = l_CMNTBkgd_ImgWidth / 2
       	    	
       	    	d3d_text 2, lXPos, 0+2, 1, l_BuildCmntStr$, g_ENGINE_COLOUR_Black
       	    	
       	    	`d3d_text 2, 0+2 + 5, 0+2, 1, l_BuildCmntStr$, g_ENGINE_COLOUR_Black
       	  	
       	  	d3d_endtext
       	  
       	  
          get image c_HS_DispComments_CmntBkgdImg, 0, 0, l_CMNTBkgd_ImgWidth, 20, 1
          delete bitmap 1
          set current bitmap 0
          
          
          sprite c_SPRITE_HS_Comment_BkgdImg, 0, 0, c_HS_DispComments_CmntBkgdImg
          rotate sprite c_SPRITE_HS_Comment_BkgdImg, 90
          hide sprite c_SPRITE_HS_Comment_BkgdImg
          
          paste sprite c_SPRITE_HS_Comment_BkgdImg, l_PosX_Value + 75, 115
          
          `paste image c_HS_DispComments_CmntBkgdImg, l_PosX_Value + 75, 115, 1
       	
       	
       	endif
         
         




// 			
// 			lib_Create_Image(l_CMNTBkgd_ImgWidth, 20, rgb(255,255,177), c_CMNTSYS_InputNewComment_BkgdImg, 1, rgb(0,0,0)) 
// 			
//     	sprite c_SPRITE_CMNTSYS_Comment_Background, 0, 0, c_CMNTSYS_InputNewComment_BkgdImg
// 			paste sprite c_SPRITE_CMNTSYS_Comment_Background, l_DISP_CMNT_XPos + 10, l_DISP_CMNT_YPos - 1
      	
      	
      	`l_PosX_Ratio = g_HS_CHARTBOX_Ttl_Width * (loop_End_Arrpos_lp - )  
         
         
` and l_MEM_DB_Pos2 > 0
//         
//           l_Depth1# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).Hole_Depth#
//           l_Depth2# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).Hole_Depth#
//         
//           if l_Depth1# <> 0.0 and l_Depth2# <> 0.0
//           
//             `MAJOR INTERVAL
//             if l_Depth2# < l_NextMAJORTick_Val#
//                  
//               d3d_line g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75, c_N_HS_CHARTBOX_BMP_Bottom_Y + 65, g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75, c_N_HS_CHARTBOX_BMP_Bottom_Y - 10 + 65, g_ENGINE_COLOUR_Black
//               d3d_line g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75 + 1, c_N_HS_CHARTBOX_BMP_Bottom_Y + 65, g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75 + 1, c_N_HS_CHARTBOX_BMP_Bottom_Y - 10 + 65, g_ENGINE_COLOUR_Black
//               
//               dec l_NextMAJORTick_Val#, l_MAJOR_Interval#
//               
//               l_PrintText_X = g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75
//               
//               if l_PrintText_X < l_LastTextAt_X - 45
//                 d3d_starttext
//                   d3d_text 14, l_PrintText_X, c_N_HS_CHARTBOX_BMP_Bottom_Y - 22 + 65, 1, str$(l_Depth1#, 1) + l_Unit$, g_ENGINE_COLOUR_Black
//                 d3d_endtext
//                 l_LastTextAt_X = l_PrintText_X
//               endif
//             endif
//             
//           `MINOR INTERVAL
//           if l_Depth2# < l_NextMINORTick_Val# 
//             dec l_NextMINORTick_Val#, l_MINOR_Interval#
//             d3d_line g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75, c_N_HS_CHARTBOX_BMP_Bottom_Y + 65, g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75, c_N_HS_CHARTBOX_BMP_Bottom_Y - 5 + 65, g_ENGINE_COLOUR_Black
//           endif
//           
//           endif
//           

// 
// 
       endif
//       
     next print_pixel_lp




endfunction


function lib_HS_RT_Display_DEPTH_TICKS()

  `NOTE: Do not call from within a d3d_starttext/d3d_endtext block
  
  local l_StartDepth_Floor# as float
  local l_Unit$ as string
  
  local l_MINOR_Interval# as float
  local l_MAJOR_Interval# as float
  
  local l_Chart_Start_ArrayPos as integer
  local l_NextMAJORTick_Val# as float
  local l_NextMINORTick_Val# as float
  local l_MEM_DB_Pos as integer
  local l_MEM_DB_Pos2 as integer
  local l_Depth1# as float
  local l_Depth2# as float
  
  local l_PrintText_X as integer
  local l_LastTextAt_X as integer : l_LastTextAt_X = 1000000
  
  if g_ENGINE_UNITS_FT_or_M = 1
    l_Unit$ = " ft"
  else
    l_Unit$ = " m"
  endif

  `l_PrintDT_XPos = 100
  
    
    l_Chart_Start_ArrayPos = HS_CHART_Get_First_Valid_Record_Array()
    
    l_MINOR_Interval# = 0.2
    l_MAJOR_Interval# = 1.0
    if l_Chart_Start_ArrayPos > 0
      l_StartDepth_Floor# = floor((MEM_MAIN_DATABASE(l_Chart_Start_ArrayPos).Hole_Depth# + 1.0))
    else
      l_StartDepth_Floor# = 0
    endif
        
    l_NextMAJORTick_Val# = l_StartDepth_Floor# - l_MAJOR_Interval#
    l_NextMINORTick_Val# = l_StartDepth_Floor# - l_MINOR_Interval#


    for print_pixel_lp = 0 to g_HS_CHARTBOX_Ttl_Width
    
      if (g_HS_Chart_Start_Array_Pos - print_pixel_lp) > 1

        `HISTORICAL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (g_HS_Chart_Start_Array_Pos) - (print_pixel_lp * g_ENGINE_HS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_HS_Chart_Time_Period_Adjust)
        
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
        
        if l_MEM_DB_Pos > 0 and l_MEM_DB_Pos2 > 0
        
          l_Depth1# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).Hole_Depth#
          l_Depth2# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).Hole_Depth#
        
          if l_Depth1# <> 0.0 and l_Depth2# <> 0.0
          
            `MAJOR INTERVAL
            if l_Depth2# < l_NextMAJORTick_Val#
                 
              d3d_line g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75, c_N_HS_CHARTBOX_BMP_Bottom_Y + 65, g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75, c_N_HS_CHARTBOX_BMP_Bottom_Y - 10 + 65, g_ENGINE_COLOUR_Black
              d3d_line g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75 + 1, c_N_HS_CHARTBOX_BMP_Bottom_Y + 65, g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75 + 1, c_N_HS_CHARTBOX_BMP_Bottom_Y - 10 + 65, g_ENGINE_COLOUR_Black
              
              dec l_NextMAJORTick_Val#, l_MAJOR_Interval#
              
              l_PrintText_X = g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75
              
              if l_PrintText_X < l_LastTextAt_X - 45
                d3d_starttext
                  d3d_text 14, l_PrintText_X, c_N_HS_CHARTBOX_BMP_Bottom_Y - 22 + 65, 1, str$(l_Depth1#, 1) + l_Unit$, g_ENGINE_COLOUR_Black
                d3d_endtext
                l_LastTextAt_X = l_PrintText_X
              endif
            endif
            
          `MINOR INTERVAL
          if l_Depth2# < l_NextMINORTick_Val# 
            dec l_NextMINORTick_Val#, l_MINOR_Interval#
            d3d_line g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75, c_N_HS_CHARTBOX_BMP_Bottom_Y + 65, g_HS_CHARTBOX_Ttl_Width - print_pixel_lp + 75, c_N_HS_CHARTBOX_BMP_Bottom_Y - 5 + 65, g_ENGINE_COLOUR_Black
          endif
          
          endif
          
        endif


      endif
      
    next print_pixel_lp




endfunction



function lib_GADGET_1_Initialise(r_ActiveBlock)

  ENG_RTDisp_GADGET_Toggle = 1
  ENG_RTDisp_GADGET_Stage = 1
  ENG_RTDisp_GADGET_Mse_Start_Y = mousey()
  ENG_RTDisp_GADGET_ImgCreatedAtMseY = -999
  
  g_GADGET_1_ShowWorking = -1
  g_GADGET_1_ShowFullTimeBreakdown = -1
  
  ENG_RTDisp_GADGET_BlockActive = r_ActiveBlock
  
  `g_INFOBOX_MSEAreaDrag_StartY_ArrPntr = (g_DATABASE_MEM_Total_Num_Records - g_DS_CHART_Scroll_Array_Offset) - ((mousey() - 197) * g_ENGINE_DS_Chart_Time_Period_Adjust)
  `if g_INFOBOX_MSEAreaDrag_StartY_ArrPntr < 0
  `  g_INFOBOX_MSEAreaDrag_StartY_ArrPntr = 0
  `endif

  g_GADGET_1_Time_Start$ = ""
  g_GADGET_1_Time_End$ = ""
  
  g_GADGET_1_Hole_Depth_Start# = 0.0
  g_GADGET_1_Hole_Depth_End# = 0.0
  g_GADGET_1_Bit_Depth_Start# = 0.0
  g_GADGET_1_Bit_Depth_End# = 0.0
    

 

endfunction

function lib_GADGET_1_Deactivate()

  ENG_RTDisp_GADGET_Toggle = -1

endfunction


function lib_GADGET_1_ShowWorking()

  local l_GX as integer : l_GX = g_ENGINE_GadgetSprite_ShowWorking_ScreenX
  local l_GY as integer : l_GY = g_ENGINE_GadgetSprite_ShowWorking_ScreenY
  local l_MinsAsHrs# as float
  
  local l_Units$ as string
  if g_ENGINE_UNITS_FT_or_M = 1
    l_Units$ = "ft"
  else
    l_Units$ = "m"
  endif

  `Display Background Image
  paste sprite c_SPRITE_Gadget_Showworking, l_GX, l_GY

  sp = 10
  d3d_starttext

    d3d_text 2, l_GX + 10, l_GY + sp, 0, "Mud Loss Calculations", g_ENGINE_COLOUR_Black
    inc sp, 20
    d3d_text 2, l_GX + 10, l_GY + sp, 0, "Time Data", g_ENGINE_COLOUR_Black
    inc sp, 20
    d3d_text 2, l_GX + 30, l_GY + sp, 0, "Start Time", g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 120, l_GY + sp, 0, "End Time", g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 220, l_GY + sp, 0, "Difference", g_ENGINE_COLOUR_Black
    inc sp, 15
    d3d_text 2, l_GX + 30, l_GY + sp, 0, g_GADGET_1_Time_Start$, g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 120, l_GY + sp, 0, g_GADGET_1_Time_End$, g_ENGINE_COLOUR_Black
    l_MinsAsHrs# = g_ENGINE_TimeDiff_TotalMins# / 60.0
    if l_MinsAsHrs# > 1.0
      d3d_text 2, l_GX + 220, l_GY + sp, 0, str$(l_MinsAsHrs#, 1) + " Hrs", g_ENGINE_COLOUR_Black
    else
      d3d_text 2, l_GX + 220, l_GY + sp, 0, str$(g_ENGINE_TimeDiff_TotalMins#, 1) + " Mins", g_ENGINE_COLOUR_Black
    endif  
    
    inc sp, 15
    d3d_text 2, l_GX + 30, l_GY + sp, 0, "(" + g_GADGET_1_Date_Start$ + ")", g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 120, l_GY + sp, 0, "(" + g_GADGET_1_Date_End$ + ")", g_ENGINE_COLOUR_Black
    
    inc sp, 25
    d3d_text 2, l_GX + 10, l_GY + sp, 0, "Depth Data (Hole Depth)", g_ENGINE_COLOUR_Black
    inc sp, 20
    d3d_text 2, l_GX + 30, l_GY + sp, 0, "Start Depth", g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 120, l_GY + sp, 0, "End Depth", g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 220, l_GY + sp, 0, "Difference", g_ENGINE_COLOUR_Black
    inc sp, 15
    d3d_text 2, l_GX + 30, l_GY + sp, 0, str$(g_GADGET_1_Hole_Depth_Start#, 1) + l_Units$, g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 120, l_GY + sp, 0, str$(g_GADGET_1_Hole_Depth_End#, 1) + l_Units$, g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 220, l_GY + sp, 0, str$(g_GADGET_1_Hole_Depth_Difference#, 1) + l_Units$, g_ENGINE_COLOUR_Black
    
    inc sp, 25
    d3d_text 2, l_GX + 10, l_GY + sp, 0, "Well Data", g_ENGINE_COLOUR_Black
    inc sp, 20
    d3d_text 2, l_GX + 30, l_GY + sp, 0, "Hole ID", g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 120, l_GY + sp, 0, "Pipe OD", g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 220, l_GY + sp, 0, "Pipe ID", g_ENGINE_COLOUR_Black
    inc sp, 15
    d3d_text 2, l_GX + 30, l_GY + sp, 0, str$(WELLDATA_HoleID#, 4), g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 120, l_GY + sp, 0, str$(WELLDATA_PipeOD#, 4), g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 220, l_GY + sp, 0, str$(WELLDATA_PipeID#, 4), g_ENGINE_COLOUR_Black

    inc sp, 25
    
      if g_ENGINE_UNITS_FT_or_M = 1
        `Display Mud Loss Calculated Constants in FT
        d3d_text 2, l_GX + 10, l_GY + sp, 0, "Volume Constants (bbls/ft)", g_ENGINE_COLOUR_Black
        inc sp, 20
        d3d_text 2, l_GX + 30, l_GY + sp, 0, "Annular Vol", g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 120, l_GY + sp, 0, "Pipe Cap", g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 220, l_GY + sp, 0, "Theo Loss", g_ENGINE_COLOUR_Black
        inc sp, 15
        d3d_text 2, l_GX + 30, l_GY + sp, 0, str$(g_GADGET_1_AnnularVol_ft#, 6), g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 120, l_GY + sp, 0, str$(g_GADGET_1_PipeCapacity_ft#, 6), g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 220, l_GY + sp, 0, str$(g_GADGET_1_Theo_Volume_Diff#, 6), g_ENGINE_COLOUR_Black
      else
        `Display Mud Loss Calculated Constants in M
        d3d_text 2, l_GX + 10, l_GY + sp, 0, "Volume Constants (bbls/m)", g_ENGINE_COLOUR_Black
        inc sp, 20
        d3d_text 2, l_GX + 30, l_GY + sp, 0, "Annular Vol", g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 120, l_GY + sp, 0, "Pipe Cap", g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 220, l_GY + sp, 0, "Theo Loss", g_ENGINE_COLOUR_Black
        inc sp, 15
        d3d_text 2, l_GX + 30, l_GY + sp, 0, str$((g_GADGET_1_AnnularVol_ft#*3.28083), 6), g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 120, l_GY + sp, 0, str$((g_GADGET_1_PipeCapacity_ft#*3.28083), 6), g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 220, l_GY + sp, 0, str$((g_GADGET_1_Theo_Volume_Diff#*3.28083), 6), g_ENGINE_COLOUR_Black
      endif
    inc sp, 25
    d3d_text 2, l_GX + 10, l_GY + sp, 0, "Mud Levels", g_ENGINE_COLOUR_Black
    inc sp, 20
    d3d_text 2, l_GX + 30, l_GY + sp, 0, "Start PVT", g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 160, l_GY + sp, 0, "End PVT", g_ENGINE_COLOUR_Black
    inc sp, 15
    d3d_text 2, l_GX + 30, l_GY + sp, 0, str$(g_GADGET_1_PVT_Start#, 1) + " bbls", g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 160, l_GY + sp, 0, str$(g_GADGET_1_PVT_End#, 1) + " bbls", g_ENGINE_COLOUR_Black
    inc sp, 20
    d3d_text 2, l_GX + 30, l_GY + sp, 0, "Volume: Actual", g_ENGINE_COLOUR_Black
    d3d_text 2, l_GX + 160, l_GY + sp, 0, "Volume: Theoretical", g_ENGINE_COLOUR_Black
    inc sp, 15
    
    `if g_GADGET_1_PVT_Difference# < 0
    `  d3d_text 2, l_GX + 30, l_GY + sp, 0, "+" + str$(abs(g_GADGET_1_PVT_Difference#), 2) + " bbls", g_ENGINE_COLOUR_Black
    `else
    `  d3d_text 2, l_GX + 30, l_GY + sp, 0, "-" + str$(g_GADGET_1_PVT_Difference#, 2) + " bbls", g_ENGINE_COLOUR_Black
    `endif
    d3d_text 2, l_GX + 30, l_GY + sp, 0, str$(g_GADGET_1_PVT_Difference#, 2) + " bbls", g_ENGINE_COLOUR_Black
    
    d3d_text 2, l_GX + 160, l_GY + sp, 0, str$(g_GADGET_1_TheoreticalTotalMudLoss#, 2) + " bbls", g_ENGINE_COLOUR_Black
    
    inc sp, 25
    if g_GADGET_1_PVT_Start# = g_GADGET_1_PVT_End#
      d3d_text 2, l_GX + 10, l_GY + sp, 0, "Loss Rate (Zero Losses)", g_ENGINE_COLOUR_Black
    else
      if g_GADGET_1_PVT_Start# > g_GADGET_1_PVT_End#
        d3d_text 2, l_GX + 10, l_GY + sp, 0, "Loss Rate", g_ENGINE_COLOUR_Black
      else
        d3d_text 2, l_GX + 10, l_GY + sp, 0, "Gain Rate", g_ENGINE_COLOUR_Black
      endif
    endif 
    inc sp, 20
    d3d_text 2, l_GX + 30, l_GY + sp, 0, str$(abs(g_GADGET_1_PVT_LOSSRATE#), 1) + " bbls/hr", g_ENGINE_COLOUR_Black

  d3d_endtext

endfunction

function lib_GADGET_1_CalcFullTimeBreakdown(r_ModeType as integer)

  `This function calculates the full time breakdown losses data for display by lib_GADGET_1_ShowFullTimeBreakdown

  `r_ModeType = 1: 1 Hour Breakdown
  `r_ModeType = 2: 30 Minute Breakdown

  local l_NOW_Time$ as string
  local l_NOW_Date$ as string
  

  l_NOW_Time$ = MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Time$
  l_NOW_Date$ = MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Date$
  
  g_LOSS_CALC_FTB_IntervalsFound = 1

  sp = 10
  
  `1 Hour
  
  l_Counter = g_DATABASE_MEM_Total_Num_Records
  l_TimeHrVal = val(first token$(l_NOW_Time$,":"))
  l_TimeMinVal = val(next token$(":"))
  l_HourChange_Found = -1
  
  for find_lp = 1 to 1200
    dec l_Counter, 1
    if l_Counter < 0 then l_Counter = 0
    
    if r_ModeType = 1
      if val(first token$(MEM_MAIN_DATABASE(l_Counter).Time$,":")) <> l_TimeHrVal and l_HourChange_Found = -1
        l_HourChange_Found = 1
        LOSS_CALC_FTB(1).Period_Start_ArrPos = l_Counter + 1
        LOSS_CALC_FTB(1).Period_Start_Time$ = MEM_MAIN_DATABASE(l_Counter + 1).Time$
        LOSS_CALC_FTB(1).Period_Start_Date$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_Counter + 1).Date$)
      endif
    else
      `Find to the closest half past or top of the hour
      if l_TimeMinVal < 30
        `If < 30 then find the last hour
        if val(first token$(MEM_MAIN_DATABASE(l_Counter).Time$,":")) <> l_TimeHrVal and l_HourChange_Found = -1
          l_HourChange_Found = 1
          LOSS_CALC_FTB(1).Period_Start_ArrPos = l_Counter + 1
          LOSS_CALC_FTB(1).Period_Start_Time$ = MEM_MAIN_DATABASE(l_Counter + 1).Time$
          LOSS_CALC_FTB(1).Period_Start_Date$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_Counter + 1).Date$)
        endif
      else
        `If minutes > 30 then go to half past the hour
        SearchTime_Hr = val(first token$(MEM_MAIN_DATABASE(l_Counter).Time$,":"))
        Searchtime_Min = val(next token$(":"))
        if Searchtime_Min = 30 and l_HourChange_Found = -1
          l_HourChange_Found = 1
          LOSS_CALC_FTB(1).Period_Start_ArrPos = l_Counter
          LOSS_CALC_FTB(1).Period_Start_Time$ = MEM_MAIN_DATABASE(l_Counter).Time$
          LOSS_CALC_FTB(1).Period_Start_Date$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_Counter).Date$)
        endif
      endif
    endif
  
  next find_lp
  
  LOSS_CALC_FTB(1).Period_End_ArrPos = g_DATABASE_MEM_Total_Num_Records
  LOSS_CALC_FTB(1).Period_End_Time$ = MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Time$
  LOSS_CALC_FTB(1).Period_End_Date$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(g_DATABASE_MEM_Total_Num_Records).Date$)
  lib_Get_TIME_DIFFERENCE(LOSS_CALC_FTB(1).Period_Start_Time$, LOSS_CALC_FTB(1).Period_Start_Date$, LOSS_CALC_FTB(1).Period_End_Time$, LOSS_CALC_FTB(1).Period_End_Date$) 
  LOSS_CALC_FTB(1).Time_Difference = int(g_ENGINE_TimeDiff_TotalMins#)
  
  

    `30 minutes
    `l_Start_Hr = val(first token$(l_NOW_Time$,":"))
    `l_Start_Min = val(next token$(":"))

    `if l_Start_Min < 30
    

  
  
  l_ArrPos = LOSS_CALC_FTB(1).Period_Start_ArrPos
  

  l_Time_2$ = MEM_MAIN_DATABASE(LOSS_CALC_FTB(1).Period_Start_ArrPos).Time$
  l_Date_2$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(LOSS_CALC_FTB(1).Period_Start_ArrPos).Date$)  

  if r_ModeType = 1 then l_TimeDiffSearchMinAmount = 59
  if r_ModeType = 2 then l_TimeDiffSearchMinAmount = 29
  for find_lp = 1 to 21600
  
    dec l_ArrPos, 1
      if l_ArrPos < 0 then l_ArrPos = 0
    
    l_Time_1$ = MEM_MAIN_DATABASE(l_ArrPos).Time$
    l_Date_1$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_ArrPos).Date$)
    lib_Get_TIME_DIFFERENCE(l_Time_1$, l_Date_1$, l_Time_2$, l_Date_2$) 
    lp_TimeDiff = int(g_ENGINE_TimeDiff_TotalMins#)
    
    if lp_TimeDiff > l_TimeDiffSearchMinAmount
      inc g_LOSS_CALC_FTB_IntervalsFound, 1
      if g_LOSS_CALC_FTB_IntervalsFound < c_LOSS_CALC_FTB_MaxRecords
      
        LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound).Period_End_ArrPos = LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound - 1).Period_Start_ArrPos
        LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound).Period_End_Time$ = LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound - 1).Period_Start_Time$
        LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound).Period_End_Date$ = LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound - 1).Period_Start_Date$
      
        LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound).Period_Start_ArrPos = l_ArrPos + 1
        LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound).Period_Start_Time$ = MEM_MAIN_DATABASE(l_ArrPos + 1).Time$
        LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound).Period_Start_Date$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_ArrPos + 1).Date$)

        LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound).Time_Difference = int(g_ENGINE_TimeDiff_TotalMins#)
        
        l_Time_2$ = LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound).Period_Start_Time$
        l_Date_2$ = LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound).Period_Start_Date$

      endif
    endif
  
  
  next find_lp
  
  
  
 
  

endfunction

function lib_GADGET_1_ShowFullTimeBreakdown()

  `NOTE: Data is updated by calling the library GADGET_1_CalcFullTimeBreakdown() function

  local l_GX as integer : l_GX = g_ENGINE_GadgetSprite_ShowFTB_ScreenX
  local l_GY as integer : l_GY = g_ENGINE_GadgetSprite_ShowFTB_ScreenY
  local l_BuildStr$ as string
  
  local l_Units$ as string
  if g_ENGINE_UNITS_FT_or_M = 1
    l_Units$ = "ft"
  else
    l_Units$ = "m"
  endif

  if g_GADGET_1_FTB_TimeType = 1
    paste sprite c_SPRITE_RTDisp_Gadget_1_DataBoxFTB, l_GX, l_GY
    l_D3DVertLineOffset = 340
  else
    paste sprite c_SPRITE_RTDisp_Gadget_1_DataBoxFTB_Big, l_GX, l_GY
    l_D3DVertLineOffset = 585
  endif
  
  lib_GADGET_1_FTB_HandleTimeSelect(l_GX, l_GY)
  
  sp = 15
  d3d_starttext
  
    d3d_text 2, l_GX + 660, l_GY + sp - 5, 0, "Gain", g_ENGINE_COLOUR_DataBlue
    d3d_text 2, l_GX + 700, l_GY + sp - 5, 0, "Loss", g_ENGINE_COLOUR_Red

    d3d_text 2, l_GX + 10, l_GY + sp, 0, "Mud Loss/Gain Calculations - FULL TIME BREAKDOWN", g_ENGINE_COLOUR_Black
    
    `Horizontal Lines
    d3d_line l_GX + 10, l_GY + sp + 20, l_GX + 400, l_GY + sp + 20, g_ENGINE_COLOUR_Black
    
    inc sp, 30
    
    
    
    `Vertical Lines
      `Between Time and Depth
        d3d_line l_GX + 220, l_GY + sp, l_GX + 220, l_GY + l_D3DVertLineOffset, g_ENGINE_COLOUR_Black
      `Between Depth and PVT
        d3d_line l_GX + 410, l_GY + sp, l_GX + 410, l_GY + l_D3DVertLineOffset, g_ENGINE_COLOUR_Black
      `Between PVT and Losses
        d3d_line l_GX + 510, l_GY + sp, l_GX + 510, l_GY + l_D3DVertLineOffset, g_ENGINE_COLOUR_Black
      `Between Losses and Loss Rate
        d3d_line l_GX + 650, l_GY + sp, l_GX + 650, l_GY + l_D3DVertLineOffset, g_ENGINE_COLOUR_Black  
        
    `Headers
      `Row 1
      d3d_text 2, l_GX +  10, l_GY + sp, 0,  "Time (From / To)", g_ENGINE_COLOUR_Black
      d3d_text 2, l_GX + 230, l_GY + sp, 0,  "Depth", g_ENGINE_COLOUR_Black
      d3d_text 2, l_GX + 420, l_GY + sp, 0,  "PVT", g_ENGINE_COLOUR_Black
      d3d_text 2, l_GX + 520, l_GY + sp, 0,  "Losses", g_ENGINE_COLOUR_Black
      d3d_text 2, l_GX + 660, l_GY + sp, 0,  "Loss Rate", g_ENGINE_COLOUR_Black
      inc sp, 20
      `Row 2
        `Group: Depth
          d3d_text 2, l_GX + 230, l_GY + sp, 0,  "Start", g_ENGINE_COLOUR_Black
          d3d_text 2, l_GX + 270, l_GY + sp, 0,  "End", g_ENGINE_COLOUR_Black
          d3d_text 2, l_GX + 310, l_GY + sp, 0,  "Diff", g_ENGINE_COLOUR_Black
          d3d_text 2, l_GX + 350, l_GY + sp, 0,  "Rate", g_ENGINE_COLOUR_Black
        `Group: PVT
          d3d_text 2, l_GX + 420, l_GY + sp, 0,  "Start", g_ENGINE_COLOUR_Black
          d3d_text 2, l_GX + 470, l_GY + sp, 0,  "End", g_ENGINE_COLOUR_Black
        `Group: LOSSES  
          d3d_text 2, l_GX + 520, l_GY + sp, 0,  "Theo", g_ENGINE_COLOUR_Black
          d3d_text 2, l_GX + 560, l_GY + sp, 0,  "Actual", g_ENGINE_COLOUR_Black
          d3d_text 2, l_GX + 610, l_GY + sp, 0,  "Diff", g_ENGINE_COLOUR_Black
    
    d3d_line l_GX + 10, l_GY + sp + 20, l_GX + 750, l_GY + sp + 20, g_ENGINE_COLOUR_Black
    
    inc sp, 10
    
    if g_GADGET_1_FTB_TimeType = 1
      l_DisplayNumLoops = 12
    else
      l_DisplayNumLoops = 24
    endif
    for data_lp = l_DisplayNumLoops to 1 step -1
      
      l_Period_StartArrPos = LOSS_CALC_FTB(data_lp).Period_Start_ArrPos
      l_Period_EndArrPos = LOSS_CALC_FTB(data_lp).Period_End_ArrPos
      
      `Calculate TIME Data
        l_Time$ = left$(LOSS_CALC_FTB(data_lp).Period_Start_Time$,5) + " (" + left$(LOSS_CALC_FTB(data_lp).Period_Start_Date$, 5) + ")   to   " + left$(LOSS_CALC_FTB(data_lp).Period_End_Time$,5) + " (" + left$(LOSS_CALC_FTB(data_lp).Period_End_Date$, 5) + ")"
      `Calculate DEPTH Data
        l_DEPTH_Start# = MEM_MAIN_DATABASE(l_Period_StartArrPos).Hole_Depth#
        l_DEPTH_End# = MEM_MAIN_DATABASE(l_Period_EndArrPos).Hole_Depth#
        l_DEPTH_Difference# = l_DEPTH_End# - l_DEPTH_Start#
        l_DEPTH_Rate# = l_DEPTH_Difference# * (60.0 / LOSS_CALC_FTB(data_lp).Time_Difference)
      `Calculate PVT Data
        l_PVT_Start# = MEM_MAIN_DATABASE(l_Period_StartArrPos).PVT#
        l_PVT_End# = MEM_MAIN_DATABASE(l_Period_EndArrPos).PVT#
        l_PVT_Difference# = l_PVT_End# - l_PVT_Start#
      `Calculate Losses Data
        `Theoretical Loss Rate  
          `WELL DATA Based Volume CONSTANTS
          l_AnnularVol_ft# = ( (WELLDATA_HoleID#*WELLDATA_HoleID#) - (WELLDATA_PipeOD#*WELLDATA_PipeOD#) )/1029.42
          l_PipeCapacity_ft# = (WELLDATA_PipeID#*WELLDATA_PipeID#)/1029.42
          l_Theo_Volume_Diff# = 0-(g_GADGET_1_AnnularVol_ft# + g_GADGET_1_PipeCapacity_ft#)
          if g_ENGINE_UNITS_FT_or_M = 1
            l_TheoreticalTotalMudLoss# = l_Theo_Volume_Diff# * l_DEPTH_Difference#
          else
            l_TheoreticalTotalMudLoss# = l_Theo_Volume_Diff# * (l_DEPTH_Difference# * 3.28083)
          endif
          l_LostDiff# = l_PVT_Difference# - l_TheoreticalTotalMudLoss#
      `Calculate Loss Rate
        l_LOSSRATE_Rate# = l_LostDiff# * (60.0 / LOSS_CALC_FTB(data_lp).Time_Difference)
      
      inc sp, 20
      `Print: Group: Time
        d3d_text 2, l_GX + 10, l_GY + sp, 0, l_Time$, g_ENGINE_COLOUR_Black
      `Print: Group: Depth
        d3d_text 2, l_GX + 230, l_GY + sp, 0, str$(l_DEPTH_Start#, 1), g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 270, l_GY + sp, 0, str$(l_DEPTH_End#, 1), g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 310, l_GY + sp, 0, str$(l_DEPTH_Difference#, 1) + l_Units$, g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 350, l_GY + sp, 0, str$(l_DEPTH_Rate#, 1) +  " " + l_Units$ + "/hr", g_ENGINE_COLOUR_DataBlue
      `Print: Group: PVT
        d3d_text 2, l_GX + 420, l_GY + sp, 0, str$(l_PVT_Start#, 1), g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 470, l_GY + sp, 0, str$(l_PVT_End#, 1), g_ENGINE_COLOUR_Black
      `Print: Group: LOSSES
        d3d_text 2, l_GX + 520, l_GY + sp, 0, str$(l_TheoreticalTotalMudLoss#, 1), g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 560, l_GY + sp, 0, str$(l_PVT_Difference#, 1), g_ENGINE_COLOUR_Black
        d3d_text 2, l_GX + 610, l_GY + sp, 0, str$(l_LostDiff#, 1), g_ENGINE_COLOUR_Black
      `Print: Group: LOSS RATE
        if l_LOSSRATE_Rate# < 0
          d3d_text 2, l_GX + 660, l_GY + sp, 0, str$(l_LOSSRATE_Rate#, 1) + " bbls/hr", g_ENGINE_COLOUR_Red
        else
          d3d_text 2, l_GX + 660, l_GY + sp, 0, "+" + str$(l_LOSSRATE_Rate#, 1) + " bbls/hr", g_ENGINE_COLOUR_DataBlue
        endif 
    next data_lp

    `LOSS_CALC_FTB(g_LOSS_CALC_FTB_IntervalsFound).Time_Difference
    
  d3d_endtext  

endfunction

function lib_GADGET_1_FTB_HandleTimeSelect(r_XPos, r_YPos)

  `g_GADGET_1_FTB_TimeType = 1: 1 Hour
  `g_GADGET_1_FTB_TimeType = 2: 30 Minutes

  local l_BtnX as integer
  local l_BtnY as integer
  
  l_BtnX = r_XPos + 400
  l_BtnY = r_YPos + 11
  
  if g_GADGET_1_FTB_TimeType = 1
  
    if mousey() > l_BtnY and mousey() < l_BtnY + 20
      if mousex() > l_BtnX and mousex() < l_BtnX + 50
        paste image c_GADGET1_FTB_Time_1Hour_lit, l_BtnX, l_BtnY
        if mouseclick() = 1 and mouse_click(1) = -1
          mouse_click(1) = 1
          g_GADGET_1_FTB_TimeType = 2
          lib_GADGET_1_CalcFullTimeBreakdown(g_GADGET_1_FTB_TimeType)
        endif  
      else
        paste image c_GADGET1_FTB_Time_1Hour_Unlit, l_BtnX, l_BtnY
      endif
    else  
      paste image c_GADGET1_FTB_Time_1Hour_Unlit, l_BtnX, l_BtnY
    endif
  
  else
  
    if mousey() > l_BtnY and mousey() < l_BtnY + 20
      if mousex() > l_BtnX and mousex() < l_BtnX + 50
        paste image c_GADGET1_FTB_Time_30Mins_lit, l_BtnX, l_BtnY
        if mouseclick() = 1 and mouse_click(1) = -1
          mouse_click(1) = 1
          g_GADGET_1_FTB_TimeType = 1
          lib_GADGET_1_CalcFullTimeBreakdown(g_GADGET_1_FTB_TimeType)
        endif  
      else
        paste image c_GADGET1_FTB_Time_30Mins_Unlit, l_BtnX, l_BtnY
      endif
    else  
      paste image c_GADGET1_FTB_Time_30Mins_Unlit, l_BtnX, l_BtnY
    endif
  
  endif
  
  `#constant c_GADGET1_FTB_Time_30Mins_Unlit 141
  `get image c_GADGET1_FTB_Time_30Mins_Unlit, 366, 144, 417, 163, 1
  `#constant c_GADGET1_FTB_Time_30Mins_lit 142
  `get image c_GADGET1_FTB_Time_30Mins_lit, 418, 144, 469, 163, 1
  
  `#constant c_GADGET1_FTB_Time_1Hour_Unlit 143
  `get image c_GADGET1_FTB_Time_1Hour_Unlit, 366, 164, 417, 183, 1
  `#constant c_GADGET1_FTB_Time_1Hour_lit 144
  `get image c_GADGET1_FTB_Time_1Hour_lit, 418, 164, 469, 183, 1

  `lib_GADGET_1_CalcFullTimeBreakdown(g_GADGET_1_FTB_TimeType)

  `if g_GADGET_1_FTB_TimeType = 1
  `  paste image c_GADGET1_FTB_Time_30Mins, r_XPos, r_YPos
  `else
  `  paste image c_GADGET1_FTB_Time_1Hour, r_XPos, r_YPos
  `endif

endfunction

function lib_GADGET_1_DATA_Calc(r_ActiveBlock)

  local l_RngARR_P1 as integer
  local l_RngARR_P2 as integer

  `If the start and end array positions are in the wrong order, ie user has dragged up and not down
  `then sort them out. I.e use local variables in this calc function and apply the global vars to them.

  `if g_INFOBOX_MSEAreaDrag_StartY_ArrPntr < g_INFOBOX_MSEAreaDrag_EndY_ArrPntr
  `  l_RngARR_P1 = g_INFOBOX_MSEAreaDrag_StartY_ArrPntr
  `  l_RngARR_P2 = g_INFOBOX_MSEAreaDrag_EndY_ArrPntr
  `else
  `  l_RngARR_P1 = g_INFOBOX_MSEAreaDrag_EndY_ArrPntr
  `  l_RngARR_P2 = g_INFOBOX_MSEAreaDrag_StartY_ArrPntr
  `  g_INFOBOX_MSEAreaDrag_StartY_ArrPntr = l_RngARR_P1
  `  g_INFOBOX_MSEAreaDrag_EndY_ArrPntr = l_RngARR_P2
  `endif
  
  `Ensure arrays are within bounds (they should never be anyway due to checks elsewhere, but why not)
  if l_RngARR_P2 < 0 then l_RngARR_P2 = 0
  if l_RngARR_P1 < 0 then l_RngARR_P1 = 0
  if l_RngARR_P2 > g_DATABASE_MEM_Total_Num_Records then l_RngARR_P2 = g_DATABASE_MEM_Total_Num_Records
  if l_RngARR_P1 > g_DATABASE_MEM_Total_Num_Records then l_RngARR_P1 = g_DATABASE_MEM_Total_Num_Records
   
  `WELL DATA Based Volume CONSTANTS
  g_GADGET_1_AnnularVol_ft# = ( (WELLDATA_HoleID#*WELLDATA_HoleID#) - (WELLDATA_PipeOD#*WELLDATA_PipeOD#) )/1029.42
  g_GADGET_1_PipeCapacity_ft# = (WELLDATA_PipeID#*WELLDATA_PipeID#)/1029.42
  g_GADGET_1_Theo_Volume_Diff# = g_GADGET_1_AnnularVol_ft# + g_GADGET_1_PipeCapacity_ft#
  
  `TIME DATA 
  `Get start and end times and dates
  g_GADGET_1_Time_Start$ = MEM_MAIN_DATABASE(l_RngARR_P1).Time$
  g_GADGET_1_Time_End$ = MEM_MAIN_DATABASE(l_RngARR_P2).Time$

  if g_ENGINE_SwapDayMonthFormat = 1
    g_GADGET_1_Date_Start$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_RngARR_P1).Date$)
    g_GADGET_1_Date_End$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_RngARR_P2).Date$)
  else
    g_GADGET_1_Date_Start$ = MEM_MAIN_DATABASE(l_RngARR_P1).Date$
    g_GADGET_1_Date_End$ = MEM_MAIN_DATABASE(l_RngARR_P2).Date$
  endif
  
  lib_Get_TIME_DIFFERENCE(g_GADGET_1_Time_Start$, g_GADGET_1_Date_Start$, g_GADGET_1_Time_End$, g_GADGET_1_Date_End$)
  `lib_Get_TIME_DIFFERENCE outputs the following two integers
  `g_ENGINE_DateDiff_TotalDays as integer
  `g_ENGINE_TimeDiff_TotalMins# as integer
  `g_ENGINE_TimeDiff_TotalMins# = 20
  
  `Get Hole Depths
  g_GADGET_1_Hole_Depth_Start# = MEM_MAIN_DATABASE(l_RngARR_P1).Hole_Depth#
  g_GADGET_1_Hole_Depth_End# = MEM_MAIN_DATABASE(l_RngARR_P2).Hole_Depth#
  g_GADGET_1_Hole_Depth_Difference# = g_GADGET_1_Hole_Depth_End# - g_GADGET_1_Hole_Depth_Start# 
  `g_GADGET_1_Hole_Depth_Difference# = 1500
  `Get Bit Depths
  g_GADGET_1_Bit_Depth_Start# = MEM_MAIN_DATABASE(l_RngARR_P1).Bit_Depth#
  g_GADGET_1_Bit_Depth_End# = MEM_MAIN_DATABASE(l_RngARR_P2).Bit_Depth#
  g_GADGET_1_Bit_Depth_Difference# = g_GADGET_1_Bit_Depth_Start# - g_GADGET_1_Bit_Depth_End# 
  
  `Get start and end PVTS
  g_GADGET_1_PVT_Start# =  MEM_MAIN_DATABASE(l_RngARR_P1).PVT#
  `g_GADGET_1_PVT_Start# = 400
  g_GADGET_1_PVT_End# =  MEM_MAIN_DATABASE(l_RngARR_P2).PVT#
  `g_GADGET_1_PVT_End# = 380
  g_GADGET_1_PVT_Difference# = g_GADGET_1_PVT_Start# - g_GADGET_1_PVT_End#
  
  if g_ENGINE_UNITS_FT_or_M = 1
    g_GADGET_1_TheoreticalTotalMudLoss# = g_GADGET_1_Theo_Volume_Diff# * g_GADGET_1_Hole_Depth_Difference#
  else
    g_GADGET_1_TheoreticalTotalMudLoss# = g_GADGET_1_Theo_Volume_Diff# * (g_GADGET_1_Hole_Depth_Difference# * 3.28083)
  endif  

  `Check for divide by zero error
  if g_ENGINE_TimeDiff_TotalMins# <> 0
    g_GADGET_1_PVT_LOSSRATE# = abs((g_GADGET_1_PVT_Difference# - g_GADGET_1_TheoreticalTotalMudLoss#) * (60.0 / g_ENGINE_TimeDiff_TotalMins#))
  else
    g_GADGET_1_PVT_LOSSRATE# = -999
  endif
  
    ` lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(7), l_DataView_ArrPos)
    `global g_GADGET_1_BLK1_L1_Data_MAX# as float
    `global g_GADGET_1_BLK1_L1_Data_MIN# as float
    `global g_GADGET_1_BLK1_L2_Data_MAX# as float
    `global g_GADGET_1_BLK1_L2_Data_MIN# as float
    `global g_GADGET_1_BLK1_L3_Data_MAX# as float
    `global g_GADGET_1_BLK1_L3_Data_MIN# as float
    `
    `global g_GADGET_1_BLK2_L1_Data_MAX# as float
    `global g_GADGET_1_BLK2_L1_Data_MIN# as float
    `global g_GADGET_1_BLK2_L2_Data_MAX# as float
    `global g_GADGET_1_BLK2_L2_Data_MIN# as float
    `global g_GADGET_1_BLK2_L3_Data_MAX# as float
    `global g_GADGET_1_BLK2_L3_Data_MIN# as float
   ` 
   ` global g_GADGET_1_BLK3_L1_Data_MAX# as float
   ` global g_GADGET_1_BLK3_L1_Data_MIN# as float
   ` global g_GADGET_1_BLK3_L2_Data_MAX# as float
   ` global g_GADGET_1_BLK3_L2_Data_MIN# as float
   ` global g_GADGET_1_BLK3_L3_Data_MAX# as float
   ` global g_GADGET_1_BLK3_L3_Data_MIN# as float
  
  
  `Set Minimum Values to start array position value and Max values to zero before searching
  g_GADGET_1_BLK1_L1_Data_MAX# = 0.0
  g_GADGET_1_BLK1_L2_Data_MAX# = 0.0
  g_GADGET_1_BLK1_L3_Data_MAX# = 0
  g_GADGET_1_BLK1_L1_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(1), l_RngARR_P2)
  g_GADGET_1_BLK1_L2_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(2), l_RngARR_P2)
  g_GADGET_1_BLK1_L3_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(3), l_RngARR_P2)
  
  g_GADGET_1_BLK2_L1_Data_MAX# = 0
  g_GADGET_1_BLK2_L2_Data_MAX# = 0.0
  g_GADGET_1_BLK2_L3_Data_MAX# = 0.0
  g_GADGET_1_BLK2_L1_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(4), l_RngARR_P2)
  g_GADGET_1_BLK2_L2_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(5), l_RngARR_P2)
  g_GADGET_1_BLK2_L3_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(6), l_RngARR_P2)
  
  g_GADGET_1_BLK3_L1_Data_MAX# = 0.0
  g_GADGET_1_BLK3_L2_Data_MAX# = 0
  g_GADGET_1_BLK3_L3_Data_MAX# = 0
  g_GADGET_1_BLK3_L1_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(7), l_RngARR_P2)
  g_GADGET_1_BLK3_L2_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(8), l_RngARR_P2)
  g_GADGET_1_BLK3_L3_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(9), l_RngARR_P2)
  
  `Search for MAXIMUM and MINIMUM Values in the selected range
  for find_lp = l_RngARR_P1 to l_RngARR_P2
  
    if r_ActiveBlock = 1
      `Maximum Values 
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(1), find_lp) > g_GADGET_1_BLK1_L1_Data_MAX# then g_GADGET_1_BLK1_L1_Data_MAX# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(1), find_lp)
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(2), find_lp) > g_GADGET_1_BLK1_L2_Data_MAX# then g_GADGET_1_BLK1_L2_Data_MAX# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(2), find_lp)
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(3), find_lp) > g_GADGET_1_BLK1_L3_Data_MAX# then g_GADGET_1_BLK1_L3_Data_MAX# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(3), find_lp)
      `Minimum Values
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(1), find_lp) < g_GADGET_1_BLK1_L1_Data_MIN# then g_GADGET_1_BLK1_L1_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(1), find_lp)
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(2), find_lp) < g_GADGET_1_BLK1_L2_Data_MIN# then g_GADGET_1_BLK1_L2_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(2), find_lp)
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(3), find_lp) < g_GADGET_1_BLK1_L3_Data_MIN# then g_GADGET_1_BLK1_L3_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(3), find_lp)
    endif
    
    if r_ActiveBlock = 2
      `Maximum Values
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(4), find_lp) > g_GADGET_1_BLK2_L1_Data_MAX# then g_GADGET_1_BLK2_L1_Data_MAX# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(4), find_lp)
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(5), find_lp) > g_GADGET_1_BLK2_L2_Data_MAX# then g_GADGET_1_BLK2_L2_Data_MAX# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(5), find_lp)
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(6), find_lp) > g_GADGET_1_BLK2_L3_Data_MAX# then g_GADGET_1_BLK2_L3_Data_MAX# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(6), find_lp)
      `Minimum Values
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(4), find_lp) < g_GADGET_1_BLK2_L1_Data_MIN# then g_GADGET_1_BLK2_L1_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(4), find_lp)
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(5), find_lp) < g_GADGET_1_BLK2_L2_Data_MIN# then g_GADGET_1_BLK2_L2_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(5), find_lp)
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(6), find_lp) < g_GADGET_1_BLK2_L3_Data_MIN# then g_GADGET_1_BLK2_L3_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(6), find_lp)
    endif
    
    if r_ActiveBlock = 3
      `Maximum Values
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(7), find_lp) > g_GADGET_1_BLK3_L1_Data_MAX# then g_GADGET_1_BLK3_L1_Data_MAX# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(7), find_lp)
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(8), find_lp) > g_GADGET_1_BLK3_L2_Data_MAX# then g_GADGET_1_BLK3_L2_Data_MAX# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(8), find_lp)
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(9), find_lp) > g_GADGET_1_BLK3_L3_Data_MAX# then g_GADGET_1_BLK3_L3_Data_MAX# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(9), find_lp)
      `Minimum Values
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(7), find_lp) < g_GADGET_1_BLK3_L1_Data_MIN# then g_GADGET_1_BLK3_L1_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(7), find_lp)
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(8), find_lp) < g_GADGET_1_BLK3_L2_Data_MIN# then g_GADGET_1_BLK3_L2_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(8), find_lp)
      if lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(9), find_lp) < g_GADGET_1_BLK3_L3_Data_MIN# then g_GADGET_1_BLK3_L3_Data_MIN# = lib_CHANNEL_ID_GetData(CHANNEL_ID_ChannelLinkIndex(9), find_lp)
    endif
    
  next find_lp
  
 
  

endfunction













function lib_DS_Reset_Plot_AfterXMins()

  `This function is designed to reset the chart plot back to realtime if the system is not touched
  `in c_DS_CHART_PrintOffsetReset time period. This is to make sure that if someone has scrolled backwards and then scrolled up and
  `not come fully to the top it will correct automatically.

  if timer() > g_DS_CHART_PrintOffsetReset
    g_DS_CHART_PrintOffsetReset = timer() + c_DS_CHART_PrintOffsetReset
    if g_DS_CHART_Scroll_Array_Offset <> 0
      g_DS_CHART_Scroll_Array_Offset = 0
      g_DS_ChartButton_TimeZero_Timer = timer() + 250
    endif
  endif

endfunction

function DS_CHART_Get_First_Valid_Record_Array()

  local l_StrtArr as integer
  local l_ChrtArr as integer
  local l_Amnt# as float
  
  if g_ENGINE_CoreFunctionType = 1
    l_StrtArr = g_DS_CHART_Scroll_Array_Offset
  endif  
  
  if g_ENGINE_CoreFunctionType = 2
  
    l_ChrtArr = (g_DATABASE_MEM_Total_Num_Records - g_DS_CHART_Scroll_Array_Offset)
    if l_ChrtArr > g_DATABASE_MEM_Total_Num_Records
      l_ChrtArr = g_DATABASE_MEM_Total_Num_Records
    endif
    
    if g_DISPLAY_SCREEN_TimePeriod_Button = 1
      l_StrtArr = l_ChrtArr
    endif 

    if g_DISPLAY_SCREEN_TimePeriod_Button = 2
      l_Amnt# = 2.0
      l_DIVx# = l_ChrtArr / l_Amnt#
      l_StrtArr = l_ChrtArr - (l_Amnt# * (l_DIVx# - int(l_DIVx#)))
    endif 
    
    if g_DISPLAY_SCREEN_TimePeriod_Button = 3
      l_Amnt# = 8.0
      l_DIVx# = l_ChrtArr / l_Amnt#
      l_StrtArr = l_ChrtArr - (l_Amnt# * (l_DIVx# - int(l_DIVx#)))
    endif 
    
    if g_DISPLAY_SCREEN_TimePeriod_Button = 4
      l_Amnt# = 16.0
      l_DIVx# = l_ChrtArr / l_Amnt#
      l_StrtArr = l_ChrtArr - (l_Amnt# * (l_DIVx# - int(l_DIVx#)))
    endif
    
  endif   
    
endfunction l_StrtArr

function PITS_CHART_Get_First_Valid_Record_Array()

  local l_StrtArr as integer
  local l_ChrtArr as integer
  local l_Amnt# as float
  
  if g_ENGINE_CoreFunctionType = 1
    l_StrtArr = g_PITS_CHART_Scroll_Array_Offset
  endif  
  
  if g_ENGINE_CoreFunctionType = 2
  
    l_ChrtArr = (g_DATABASE_MEM_Total_Num_Records - g_PITS_CHART_Scroll_Array_Offset)
    if l_ChrtArr > g_DATABASE_MEM_Total_Num_Records
      l_ChrtArr = g_DATABASE_MEM_Total_Num_Records
    endif
    
    if g_PITS_SCREEN_TimePeriod_Button = 1
      l_StrtArr = l_ChrtArr
    endif 

    if g_PITS_SCREEN_TimePeriod_Button = 2
      l_Amnt# = 2.0
      l_DIVx# = l_ChrtArr / l_Amnt#
      l_StrtArr = l_ChrtArr - (l_Amnt# * (l_DIVx# - int(l_DIVx#)))
    endif 
    
    if g_PITS_SCREEN_TimePeriod_Button = 3
      l_Amnt# = 8.0
      l_DIVx# = l_ChrtArr / l_Amnt#
      l_StrtArr = l_ChrtArr - (l_Amnt# * (l_DIVx# - int(l_DIVx#)))
    endif 
    
    if g_PITS_SCREEN_TimePeriod_Button = 4
      l_Amnt# = 16.0
      l_DIVx# = l_ChrtArr / l_Amnt#
      l_StrtArr = l_ChrtArr - (l_Amnt# * (l_DIVx# - int(l_DIVx#)))
    endif
    
  endif   
    
endfunction l_StrtArr

function lib_Disp_RT_SET_ScreenPos_Colour_Vars()

  g_Block1_Line1_Colour = rgb(0,0,255)
  g_Block1_Line2_Colour = rgb(255,0,0)
  g_Block1_Line3_Colour = rgb(0,0,0)
  g_Block1_Line4_Colour = rgb(58,162,6)
  
  g_Block2_Line1_Colour = rgb(0,0,255)
  g_Block2_Line2_Colour = rgb(255,0,0)
  g_Block2_Line3_Colour = rgb(0,0,0)
  g_Block2_Line4_Colour = rgb(58,162,6)
  
  g_Block3_Line1_Colour = rgb(0,0,255)
  g_Block3_Line2_Colour = rgb(255,0,0)
  g_Block3_Line3_Colour = rgb(0,0,0)
  g_Block3_Line4_Colour = rgb(58,162,6)
  
  g_Block4_Line1_Colour = rgb(0,0,255)
  g_Block4_Line2_Colour = rgb(255,0,0)
  g_Block4_Line3_Colour = rgb(0,0,0)
  g_Block4_Line4_Colour = rgb(58,162,6)
  
  `Set Colour for easy ARRAY ACCESS
   `DS
		COLOUR_ChartChannelCol(1) = g_Block1_Line1_Colour
		COLOUR_ChartChannelCol(2) = g_Block1_Line2_Colour
		COLOUR_ChartChannelCol(3) = g_Block1_Line3_Colour
		COLOUR_ChartChannelCol(4) = g_Block1_Line4_Colour
		
		COLOUR_ChartChannelCol(5) = g_Block2_Line1_Colour
		COLOUR_ChartChannelCol(6) = g_Block2_Line2_Colour
		COLOUR_ChartChannelCol(7) = g_Block2_Line3_Colour
		COLOUR_ChartChannelCol(8) = g_Block2_Line4_Colour
		
		COLOUR_ChartChannelCol(9) = g_Block3_Line1_Colour
		COLOUR_ChartChannelCol(10) = g_Block3_Line2_Colour
		COLOUR_ChartChannelCol(11) = g_Block3_Line3_Colour
		COLOUR_ChartChannelCol(12) = g_Block3_Line4_Colour
		
   `PITS
		COLOUR_ChartChannelCol(13) = g_Block1_Line1_Colour
		COLOUR_ChartChannelCol(14) = g_Block1_Line2_Colour
		COLOUR_ChartChannelCol(15) = g_Block1_Line3_Colour
		COLOUR_ChartChannelCol(16) = g_Block1_Line4_Colour
		
		COLOUR_ChartChannelCol(17) = g_Block2_Line1_Colour
		COLOUR_ChartChannelCol(18) = g_Block2_Line2_Colour
		COLOUR_ChartChannelCol(19) = g_Block2_Line3_Colour
		COLOUR_ChartChannelCol(20) = g_Block2_Line4_Colour
		
		COLOUR_ChartChannelCol(21) = g_Block3_Line1_Colour
		COLOUR_ChartChannelCol(22) = g_Block3_Line2_Colour
		COLOUR_ChartChannelCol(23) = g_Block3_Line3_Colour
		COLOUR_ChartChannelCol(24) = g_Block3_Line4_Colour
		
		COLOUR_ChartChannelCol(25) = g_Block4_Line1_Colour
		COLOUR_ChartChannelCol(26) = g_Block4_Line2_Colour
		COLOUR_ChartChannelCol(27) = g_Block4_Line3_Colour
		COLOUR_ChartChannelCol(28) = g_Block4_Line4_Colour
  
  `DRILL SCREEN CHARTS
  CHART_Line_Colours(1,1) = 0 : CHART_Line_Colours(1,2) = 0 : CHART_Line_Colours(1,3) = 255
  CHART_Line_Colours(2,1) = 255 :  CHART_Line_Colours(2,2) = 0 : CHART_Line_Colours(2,3) = 0
  CHART_Line_Colours(3,1) = 0 : CHART_Line_Colours(3,2) = 0 : CHART_Line_Colours(3,3) = 0
  CHART_Line_Colours(4,1) = 58 : CHART_Line_Colours(4,2) = 162 : CHART_Line_Colours(4,3) = 6
  
  CHART_Line_Colours(5,1) = 0 : CHART_Line_Colours(5,2) = 0 : CHART_Line_Colours(5,3) = 255
  CHART_Line_Colours(6,1) = 255 : CHART_Line_Colours(6,2) = 0 : CHART_Line_Colours(6,3) = 0
  CHART_Line_Colours(7,1) = 0 : CHART_Line_Colours(7,2) = 0 : CHART_Line_Colours(7,3) = 0
  CHART_Line_Colours(8,1) = 58 : CHART_Line_Colours(8,2) = 162 : CHART_Line_Colours(8,3) = 6
  
  CHART_Line_Colours(9,1) = 0 : CHART_Line_Colours(9,2) = 0 : CHART_Line_Colours(9,3) = 255
  CHART_Line_Colours(10,1) = 255 : CHART_Line_Colours(10,2) = 0 : CHART_Line_Colours(10,3) = 0
  CHART_Line_Colours(11,1) = 0 : CHART_Line_Colours(11,2) = 0 : CHART_Line_Colours(11,3) = 0
  CHART_Line_Colours(12,1) = 58 : CHART_Line_Colours(12,2) = 162 : CHART_Line_Colours(12,3) = 6
  
  `PIT SCREEN CHARTS
  CHART_Line_Colours(13,1) = 0 : CHART_Line_Colours(13,2) = 0 : CHART_Line_Colours(13,3) = 255
  CHART_Line_Colours(14,1) = 255 : CHART_Line_Colours(14,2) = 0 : CHART_Line_Colours(14,3) = 0
  CHART_Line_Colours(15,1) = 0 : CHART_Line_Colours(15,2) = 0 : CHART_Line_Colours(15,3) = 0
  CHART_Line_Colours(16,1) = 58 : CHART_Line_Colours(16,2) = 162 : CHART_Line_Colours(16,3) = 6
  
  CHART_Line_Colours(17,1) = 0 : CHART_Line_Colours(17,2) = 0 : CHART_Line_Colours(17,3) = 255
  CHART_Line_Colours(18,1) = 255 : CHART_Line_Colours(18,2) = 0 : CHART_Line_Colours(18,3) = 0
  CHART_Line_Colours(19,1) = 0 : CHART_Line_Colours(19,2) = 0 : CHART_Line_Colours(19,3) = 0
  CHART_Line_Colours(20,1) = 58 : CHART_Line_Colours(20,2) = 162 : CHART_Line_Colours(20,3) = 6
  
  CHART_Line_Colours(21,1) = 0 : CHART_Line_Colours(21,2) = 0 : CHART_Line_Colours(21,3) = 255
  CHART_Line_Colours(22,1) = 255 : CHART_Line_Colours(22,2) = 0 : CHART_Line_Colours(22,3) = 0
  CHART_Line_Colours(23,1) = 0 : CHART_Line_Colours(23,2) = 0 : CHART_Line_Colours(23,3) = 0
  CHART_Line_Colours(24,1) = 58 : CHART_Line_Colours(24,2) = 162 : CHART_Line_Colours(24,3) = 6
  
  CHART_Line_Colours(25,1) = 0 : CHART_Line_Colours(25,2) = 0 : CHART_Line_Colours(25,3) = 255
  CHART_Line_Colours(26,1) = 255 : CHART_Line_Colours(26,2) = 0 : CHART_Line_Colours(26,3) = 0
  CHART_Line_Colours(27,1) = 0 : CHART_Line_Colours(27,2) = 0 : CHART_Line_Colours(27,3) = 0
  CHART_Line_Colours(28,1) = 58 : CHART_Line_Colours(28,2) = 162 : CHART_Line_Colours(28,3) = 6
  
  g_DRT_Block1_Line1_Colour$ = "R:" + str$(rgbr(g_Block1_Line1_Colour)) + " G:" + str$(rgbg(g_Block1_Line1_Colour)) + " B:" + str$(rgbb(g_Block1_Line1_Colour))
  g_DRT_Block1_Line2_Colour$ = "R:" + str$(rgbr(g_Block1_Line2_Colour)) + " G:" + str$(rgbg(g_Block1_Line2_Colour)) + " B:" + str$(rgbb(g_Block1_Line2_Colour))
  g_DRT_Block1_Line3_Colour$ = "R:" + str$(rgbr(g_Block1_Line3_Colour)) + " G:" + str$(rgbg(g_Block1_Line3_Colour)) + " B:" + str$(rgbb(g_Block1_Line3_Colour))
  g_DRT_Block1_Line4_Colour$ = "R:" + str$(rgbr(g_Block1_Line4_Colour)) + " G:" + str$(rgbg(g_Block1_Line4_Colour)) + " B:" + str$(rgbb(g_Block1_Line4_Colour))
 
  g_DRT_Block2_Line1_Colour$ = "R:" + str$(rgbr(g_Block2_Line1_Colour)) + " G:" + str$(rgbg(g_Block2_Line1_Colour)) + " B:" + str$(rgbb(g_Block2_Line1_Colour))
  g_DRT_Block2_Line2_Colour$ = "R:" + str$(rgbr(g_Block2_Line2_Colour)) + " G:" + str$(rgbg(g_Block2_Line2_Colour)) + " B:" + str$(rgbb(g_Block2_Line2_Colour))
  g_DRT_Block2_Line3_Colour$ = "R:" + str$(rgbr(g_Block2_Line3_Colour)) + " G:" + str$(rgbg(g_Block2_Line3_Colour)) + " B:" + str$(rgbb(g_Block2_Line3_Colour))
  g_DRT_Block2_Line4_Colour$ = "R:" + str$(rgbr(g_Block2_Line4_Colour)) + " G:" + str$(rgbg(g_Block2_Line4_Colour)) + " B:" + str$(rgbb(g_Block2_Line4_Colour))
  
  g_DRT_Block3_Line1_Colour$ = "R:" + str$(rgbr(g_Block3_Line1_Colour)) + " G:" + str$(rgbg(g_Block3_Line1_Colour)) + " B:" + str$(rgbb(g_Block3_Line1_Colour))
  g_DRT_Block3_Line2_Colour$ = "R:" + str$(rgbr(g_Block3_Line2_Colour)) + " G:" + str$(rgbg(g_Block3_Line2_Colour)) + " B:" + str$(rgbb(g_Block3_Line2_Colour))
  g_DRT_Block3_Line3_Colour$ = "R:" + str$(rgbr(g_Block3_Line3_Colour)) + " G:" + str$(rgbg(g_Block3_Line3_Colour)) + " B:" + str$(rgbb(g_Block3_Line3_Colour))
  g_DRT_Block3_Line4_Colour$ = "R:" + str$(rgbr(g_Block3_Line4_Colour)) + " G:" + str$(rgbg(g_Block3_Line4_Colour)) + " B:" + str$(rgbb(g_Block3_Line4_Colour))
  
  g_DRT_Block4_Line1_Colour$ = "R:" + str$(rgbr(g_Block3_Line1_Colour)) + " G:" + str$(rgbg(g_Block3_Line1_Colour)) + " B:" + str$(rgbb(g_Block3_Line1_Colour))
  g_DRT_Block4_Line2_Colour$ = "R:" + str$(rgbr(g_Block3_Line2_Colour)) + " G:" + str$(rgbg(g_Block3_Line2_Colour)) + " B:" + str$(rgbb(g_Block3_Line2_Colour))
  g_DRT_Block4_Line3_Colour$ = "R:" + str$(rgbr(g_Block3_Line3_Colour)) + " G:" + str$(rgbg(g_Block3_Line3_Colour)) + " B:" + str$(rgbb(g_Block3_Line3_Colour))
  g_DRT_Block4_Line4_Colour$ = "R:" + str$(rgbr(g_Block3_Line4_Colour)) + " G:" + str$(rgbg(g_Block3_Line4_Colour)) + " B:" + str$(rgbb(g_Block3_Line4_Colour))
  
  g_Block1_Line1_Lower_Value=0
  g_Block1_Line1_Upper_Value=30
  g_Block1_Line2_Lower_Value=0
  g_Block1_Line2_Upper_Value=25
  g_Block1_Line3_Lower_Value=0
  g_Block1_Line3_Upper_Value=220
  `
  g_Block2_Line1_Lower_Value=25
  g_Block2_Line1_Upper_Value=120
  g_Block2_Line2_Lower_Value=0
  g_Block2_Line2_Upper_Value=100
  g_Block2_Line3_Lower_Value=0
  g_Block2_Line3_Upper_Value=20
  `
  g_Block3_Line1_Lower_Value=0
  g_Block3_Line1_Upper_Value=1000
  g_Block3_Line2_Lower_Value=0
  g_Block3_Line2_Upper_Value=3500
  g_Block3_Line3_Lower_Value=0
  g_Block3_Line3_Upper_Value=300

  `Widescreen
  if g_ENGINE_Screen_Resolution = 1
    `DATA DISPLAY SCREEN COORDINATES
      g_DISPLAY_HOLE_DEPTH_x = 690     : g_DISPLAY_HOLE_DEPTH_y = 732
      g_DISPLAY_BIT_DEPTH_x = 1182     : g_DISPLAY_BIT_DEPTH_y = 95
      g_DISPLAY_ROP_x = 158            : g_DISPLAY_ROP_y = 40
      g_DISPLAY_WOB_x = 158            : g_DISPLAY_WOB_y = 102
      g_DISPLAY_HKLD_x = 158           : g_DISPLAY_HKLD_y = 164
      g_DISPLAY_RPM_x = 528            : g_DISPLAY_RPM_y = 40
      g_DISPLAY_TT_x = 528             : g_DISPLAY_TT_y = 102
      g_DISPLAY_BLKPOS_x = 528         : g_DISPLAY_BLKPOS_y = 164
      g_DISPLAY_PVT_x = 851            : g_DISPLAY_PVT_y = 40
      g_DISPLAY_SPP_x = 851            : g_DISPLAY_SPP_y = 102
      g_DISPLAY_FLOWIN_x = 851         : g_DISPLAY_FLOWIN_y = 164
      g_DISPLAY_TOTAL_SPM_x = 1079     : g_DISPLAY_TOTAL_SPM_y = 189
      g_DISPLAY_TOTAL_STROKES_x = 930  : g_DISPLAY_TOTAL_STROKES_y = 185
      g_DISPLAY_SPM1_x = 1075          : g_DISPLAY_SPM1_y = 279
      g_DISPLAY_SPM2_x = 1180          : g_DISPLAY_SPM2_y = 279
      g_DISPLAY_SPM3_x = 1284          : g_DISPLAY_SPM3_y = 279
      g_DISPLAY_TOTAL_GAS_x = 1092     : g_DISPLAY_TOTAL_GAS_y = 370
      g_DISPLAY_H2S_x = 1262           : g_DISPLAY_H2S_y = 370
      g_DISPLAY_LAGDEPTH_x = 1202      : g_DISPLAY_LAGDEPTH_y = 189
    `UPPER/LOWER RANGES SCREEN COORDINATES
      g_DISPLAY_RangeLower_Block1_Line1_x = 80  : g_DISPLAY_RangeLower_Block1_Line1_y = 48
      g_DISPLAY_RangeUpper_Block1_Line1_x = 234 : g_DISPLAY_RangeUpper_Block1_Line1_y = 48
      g_DISPLAY_RangeLower_Block1_Line2_x = 80  : g_DISPLAY_RangeLower_Block1_Line2_y = 110
      g_DISPLAY_RangeUpper_Block1_Line2_x = 234 : g_DISPLAY_RangeUpper_Block1_Line2_y = 110
      g_DISPLAY_RangeLower_Block1_Line3_x = 80  : g_DISPLAY_RangeLower_Block1_Line3_y = 172
      g_DISPLAY_RangeUpper_Block1_Line3_x = 234 : g_DISPLAY_RangeUpper_Block1_Line3_y = 172
      
      g_DISPLAY_RangeLower_Block2_Line1_x = 458 : g_DISPLAY_RangeLower_Block2_Line1_y = 48
      g_DISPLAY_RangeUpper_Block2_Line1_x = 605 : g_DISPLAY_RangeUpper_Block2_Line1_y = 48
      g_DISPLAY_RangeLower_Block2_Line2_x = 458 : g_DISPLAY_RangeLower_Block2_Line2_y = 110
      g_DISPLAY_RangeUpper_Block2_Line2_x = 605 : g_DISPLAY_RangeUpper_Block2_Line2_y = 110
      g_DISPLAY_RangeLower_Block2_Line3_x = 458 : g_DISPLAY_RangeLower_Block2_Line3_y = 172
      g_DISPLAY_RangeUpper_Block2_Line3_x = 605 : g_DISPLAY_RangeUpper_Block2_Line3_y = 172
      
      g_DISPLAY_RangeLower_Block3_Line1_x = 773 : g_DISPLAY_RangeLower_Block3_Line1_y = 48
      g_DISPLAY_RangeUpper_Block3_Line1_x = 927 : g_DISPLAY_RangeUpper_Block3_Line1_y = 48
      g_DISPLAY_RangeLower_Block3_Line2_x = 773 : g_DISPLAY_RangeLower_Block3_Line2_y = 110
      g_DISPLAY_RangeUpper_Block3_Line2_x = 927 : g_DISPLAY_RangeUpper_Block3_Line2_y = 110
      g_DISPLAY_RangeLower_Block3_Line3_x = 773 : g_DISPLAY_RangeLower_Block3_Line3_y = 172
      g_DISPLAY_RangeUpper_Block3_Line3_x = 927 : g_DISPLAY_RangeUpper_Block3_Line3_y = 172
  else
    `DATA DISPLAY SCREEN COORDINATES
      g_DISPLAY_HOLE_DEPTH_x = 518    : g_DISPLAY_HOLE_DEPTH_y = 732
      g_DISPLAY_BIT_DEPTH_x = 855     : g_DISPLAY_BIT_DEPTH_y = 95
      g_DISPLAY_ROP_x = 107           : g_DISPLAY_ROP_y = 40
      g_DISPLAY_WOB_x = 107           : g_DISPLAY_WOB_y = 102
      g_DISPLAY_HKLD_x = 107          : g_DISPLAY_HKLD_y = 164
      g_DISPLAY_RPM_x = 371           : g_DISPLAY_RPM_y = 40
      g_DISPLAY_TT_x = 371            : g_DISPLAY_TT_y = 102
      g_DISPLAY_BLKPOS_x = 371        : g_DISPLAY_BLKPOS_y = 164
      g_DISPLAY_PVT_x = 579           : g_DISPLAY_PVT_y = 40
      g_DISPLAY_SPP_x = 579           : g_DISPLAY_SPP_y = 102
      g_DISPLAY_FLOWIN_x = 579        : g_DISPLAY_FLOWIN_y = 164
      g_DISPLAY_TOTAL_SPM_x = 753     : g_DISPLAY_TOTAL_SPM_y = 189
      g_DISPLAY_TOTAL_STROKES_x = 930 : g_DISPLAY_TOTAL_STROKES_y = 185
      g_DISPLAY_SPM1_x = 749          : g_DISPLAY_SPM1_y = 279
      g_DISPLAY_SPM2_x = 854          : g_DISPLAY_SPM2_y = 279
      g_DISPLAY_SPM3_x = 960          : g_DISPLAY_SPM3_y = 279
      g_DISPLAY_TOTAL_GAS_x = 769     : g_DISPLAY_TOTAL_GAS_y = 370
      g_DISPLAY_H2S_x = 939           : g_DISPLAY_H2S_y = 370
      g_DISPLAY_LAGDEPTH_x = 876      : g_DISPLAY_LAGDEPTH_y = 189

    `UPPER/LOWER RANGES SCREEN COORDINATES
      g_DISPLAY_RangeLower_Block1_Line1_x = 28  : g_DISPLAY_RangeLower_Block1_Line1_y = 48
      g_DISPLAY_RangeUpper_Block1_Line1_x = 186 : g_DISPLAY_RangeUpper_Block1_Line1_y = 48
      g_DISPLAY_RangeLower_Block1_Line2_x = 28  : g_DISPLAY_RangeLower_Block1_Line2_y = 110
      g_DISPLAY_RangeUpper_Block1_Line2_x = 186 : g_DISPLAY_RangeUpper_Block1_Line2_y = 110
      g_DISPLAY_RangeLower_Block1_Line3_x = 28  : g_DISPLAY_RangeLower_Block1_Line3_y = 172
      g_DISPLAY_RangeUpper_Block1_Line3_x = 186 : g_DISPLAY_RangeUpper_Block1_Line3_y = 172
      
      g_DISPLAY_RangeLower_Block2_Line1_x = 299 : g_DISPLAY_RangeLower_Block2_Line1_y = 48
      g_DISPLAY_RangeUpper_Block2_Line1_x = 451 : g_DISPLAY_RangeUpper_Block2_Line1_y = 48
      g_DISPLAY_RangeLower_Block2_Line2_x = 299 : g_DISPLAY_RangeLower_Block2_Line2_y = 110
      g_DISPLAY_RangeUpper_Block2_Line2_x = 451 : g_DISPLAY_RangeUpper_Block2_Line2_y = 110
      g_DISPLAY_RangeLower_Block2_Line3_x = 299 : g_DISPLAY_RangeLower_Block2_Line3_y = 172
      g_DISPLAY_RangeUpper_Block2_Line3_x = 451 : g_DISPLAY_RangeUpper_Block2_Line3_y = 172
      
      g_DISPLAY_RangeLower_Block3_Line1_x = 504 : g_DISPLAY_RangeLower_Block3_Line1_y = 48
      g_DISPLAY_RangeUpper_Block3_Line1_x = 660 : g_DISPLAY_RangeUpper_Block3_Line1_y = 48
      g_DISPLAY_RangeLower_Block3_Line2_x = 504 : g_DISPLAY_RangeLower_Block3_Line2_y = 110
      g_DISPLAY_RangeUpper_Block3_Line2_x = 660 : g_DISPLAY_RangeUpper_Block3_Line2_y = 110
      g_DISPLAY_RangeLower_Block3_Line3_x = 504 : g_DISPLAY_RangeLower_Block3_Line3_y = 172
      g_DISPLAY_RangeUpper_Block3_Line3_x = 660 : g_DISPLAY_RangeUpper_Block3_Line3_y = 172
  endif

endfunction

function lib_Disp_RT_DS_TimePeriod_Buttons()

  local l_ImgXOff as integer
  
  if g_ENGINE_Screen_Resolution = 1
    `Widescreen
    l_ImgXOff = 327
  else
    `1024x768
    l_ImgXOff = 219
  endif

  `Now DISPLAY TIME PERIOD SPRITES
  if g_ENGINE_CoreFunctionType = 1
    `CF1 uses a special calibration since it is configured for 1 hour on screen
    `at all times
    paste sprite c_SPRITE_TimePeriod_1HrON, l_ImgXOff, 11
  endif
    
  if g_ENGINE_CoreFunctionType = 2
    if g_DISPLAY_SCREEN_TimePeriod_Button = 1
      paste sprite c_SPRITE_TimePeriod_HalfHrON, l_ImgXOff, 11
      paste sprite c_SPRITE_TimePeriod_1HrOFF, l_ImgXOff, 58
      paste sprite c_SPRITE_TimePeriod_4HrOFF, l_ImgXOff, 106
      paste sprite c_SPRITE_TimePeriod_8HrOFF, l_ImgXOff, 153
    endif
    if g_DISPLAY_SCREEN_TimePeriod_Button = 2
      paste sprite c_SPRITE_TimePeriod_HalfHrOFF, l_ImgXOff, 11
      paste sprite c_SPRITE_TimePeriod_1HrON, l_ImgXOff, 58
      paste sprite c_SPRITE_TimePeriod_4HrOFF, l_ImgXOff, 106
      paste sprite c_SPRITE_TimePeriod_8HrOFF, l_ImgXOff, 153
    endif
    if g_DISPLAY_SCREEN_TimePeriod_Button = 3
      paste sprite c_SPRITE_TimePeriod_HalfHrOFF, l_ImgXOff, 11
      paste sprite c_SPRITE_TimePeriod_1HrOFF, l_ImgXOff, 58
      paste sprite c_SPRITE_TimePeriod_4HrON, l_ImgXOff, 106
      paste sprite c_SPRITE_TimePeriod_8HrOFF, l_ImgXOff, 153
    endif
    if g_DISPLAY_SCREEN_TimePeriod_Button = 4
      paste sprite c_SPRITE_TimePeriod_HalfHrOFF, l_ImgXOff, 11
      paste sprite c_SPRITE_TimePeriod_1HrOFF, l_ImgXOff, 58
      paste sprite c_SPRITE_TimePeriod_4HrOFF, l_ImgXOff, 106
      paste sprite c_SPRITE_TimePeriod_8HrON, l_ImgXOff, 153
    endif
  endif

  `TIME PERIOD BUTTONS (0.5hr, 1hr, 4hr, 8hr) INTERACTIONS (Input Code Marker: 53728)
  if mouseclick() = 1 and mouse_click(1) = -1 and g_RANGES_Chart_Selected_Num = -1 and g_ENG_DLS_ToggleScreenON = -1 and g_RCM_MSE_INPUT_Toggle = -1 and g_LOCKOUT_INPUTPAD_TimePeriodButtons = -1 and g_CHANNELIDChngChnl_NUMPAD_TIMEBtb_LOCK = -1
    if mousex() > l_ImgXOff + 1 and mousex() < l_ImgXOff + 50

      if mousey() > 11 and mousey() < 45 : `0.5 hr
        mouse_click(1) = 1
        g_DISPLAY_SCREEN_TimePeriod_Button = 1
        g_ENGINE_DS_Chart_Time_Period_Adjust = 1 
        g_DS_ChartScroll_MseSpeed_Multiplier = int(g_DS_MouseScrollMultiplier_HalfHour * g_MSEWHL_AdjSensitivity_Amount#)
        g_DS_SCROLLTIME_Text_Scroll_Adjust = 2
        ENGINE_DS_CHART_IMAGE_Creation()
        if g_INFOBOX_DS_ModeState = 2 and g_ENGINE_CoreFunctionType = 2
          lib_INFOBOX_HighlightArea_Update(1)
        endif
      endif
      
      if g_ENGINE_CoreFunctionType = 2
        if mousey() > 58 and mousey() < 92 : `1hr
          mouse_click(1) = 1
          g_DISPLAY_SCREEN_TimePeriod_Button = 2
          g_ENGINE_DS_Chart_Time_Period_Adjust = 2
          g_DS_ChartScroll_MseSpeed_Multiplier = int(g_DS_MouseScrollMultiplier_1Hour * g_MSEWHL_AdjSensitivity_Amount#)
          g_DS_SCROLLTIME_Text_Scroll_Adjust = 8
          ENGINE_DS_CHART_IMAGE_Creation()
          if g_INFOBOX_DS_ModeState = 2
            lib_INFOBOX_HighlightArea_Update(1) 
          endif
        endif
        if mousey() > 106 and mousey() < 140 : `4hr
          mouse_click(1) = 1
          g_DISPLAY_SCREEN_TimePeriod_Button = 3
          g_ENGINE_DS_Chart_Time_Period_Adjust = 8
          g_DS_ChartScroll_MseSpeed_Multiplier = int(g_DS_MouseScrollMultiplier_4Hour * g_MSEWHL_AdjSensitivity_Amount#)
          g_DS_SCROLLTIME_Text_Scroll_Adjust = 16
          ENGINE_DS_CHART_IMAGE_Creation()
          if g_INFOBOX_DS_ModeState = 2
            lib_INFOBOX_HighlightArea_Update(1) 
          endif
        endif
        if mousey() > 153 and mousey() < 188 : `8hr
          mouse_click(1) = 1
          g_DISPLAY_SCREEN_TimePeriod_Button = 4
          g_ENGINE_DS_Chart_Time_Period_Adjust = 16
          g_DS_ChartScroll_MseSpeed_Multiplier = int(g_DS_MouseScrollMultiplier_8Hour * g_MSEWHL_AdjSensitivity_Amount#)
          g_DS_SCROLLTIME_Text_Scroll_Adjust = 24
          ENGINE_DS_CHART_IMAGE_Creation()
          if g_INFOBOX_DS_ModeState = 2
            lib_INFOBOX_HighlightArea_Update(1) 
          endif
        endif
      endif  
    endif
  endif 

endfunction



function lib_PLOT_CHART_Format_Line(r_X_POS_A, r_X_POS_B, r_PIX_LOOP, r_DataA_Val# as float, r_DataB_Val# as float, r_UPP_Rng_Val# as float, r_LOW_Rng_Val# as float, r_BOX_MinX as integer, r_BOX_MaxX as integer, r_ColorArr as integer)

  `Within the range
 
  `If Positions A and B are within both ranges
  if r_DataA_Val# > r_LOW_Rng_Val# and r_DataA_Val# < r_UPP_Rng_Val#
    if r_DataB_Val# > r_LOW_Rng_Val# and r_DataB_Val# < r_UPP_Rng_Val#
      lib_PLOT_CHART_Draw_Line(r_X_POS_A, r_X_POS_B, r_PIX_LOOP, r_ColorArr)
    endif
  endif
  
  `UPPER RANGE LINE
  
  `If Positions A is above the top range and B is within range
  if r_DataA_Val# > r_UPP_Rng_Val#
    if r_DataB_Val# > r_LOW_Rng_Val# and r_DataB_Val# < r_UPP_Rng_Val#
      lib_PLOT_CHART_Draw_Line(r_BOX_MaxX, r_X_POS_B, r_PIX_LOOP, r_ColorArr)
    endif
  endif
  `If Position B is above the top range and A is within range
  if r_DataB_Val# > r_UPP_Rng_Val#
    if r_DataA_Val# > r_LOW_Rng_Val# and r_DataA_Val# < r_UPP_Rng_Val#
      lib_PLOT_CHART_Draw_Line(r_X_POS_A, r_BOX_MaxX, r_PIX_LOOP, r_ColorArr)
    endif
  endif
  
  
  `LOWER RANGE LINE
  
  `If B is within the ranges and A is below the bottom range
  if r_DataA_Val# < r_LOW_Rng_Val#
    if r_DataB_Val# > r_LOW_Rng_Val# and r_DataB_Val# < r_UPP_Rng_Val#
      lib_PLOT_CHART_Draw_Line(r_BOX_MinX, r_X_POS_B, r_PIX_LOOP, r_ColorArr)
    endif
  endif         
  
  `If A is within the ranges and B is below the bottom range
  if r_DataB_Val# < r_LOW_Rng_Val#
    if r_DataA_Val# > r_LOW_Rng_Val# and r_DataA_Val# < r_UPP_Rng_Val#
      lib_PLOT_CHART_Draw_Line(r_X_POS_A, r_BOX_MinX, r_PIX_LOOP, r_ColorArr)
    endif
  endif
  
  `If either A or B = 0
  if r_DataA_Val# = 0 and r_DataB_Val# <> 0
    if r_LOW_Rng_Val# = 0
      if r_DataB_Val# < r_UPP_Rng_Val#
        lib_PLOT_CHART_Draw_Line(r_BOX_MinX, r_X_POS_B, r_PIX_LOOP, r_ColorArr)
      else
        lib_PLOT_CHART_Draw_Line(r_BOX_MinX, r_BOX_MaxX, r_PIX_LOOP, r_ColorArr)
      endif
    endif
  endif
  if r_DataB_Val# = 0 and r_DataA_Val# <> 0
    if r_LOW_Rng_Val# = 0
      if r_DataA_Val# < r_UPP_Rng_Val#
        lib_PLOT_CHART_Draw_Line(r_X_POS_A, r_BOX_MinX, r_PIX_LOOP, r_ColorArr)
      else
        lib_PLOT_CHART_Draw_Line(r_BOX_MaxX, r_BOX_MinX, r_PIX_LOOP, r_ColorArr)
      endif
    endif
  endif
  
  `If A and B = 0 (ie flat line at the bottom)
  if r_DataA_Val# = 0 and r_DataB_Val# = 0
    if r_LOW_Rng_Val# = 0
      lib_PLOT_CHART_Draw_Line(r_BOX_MinX, r_BOX_MinX, r_PIX_LOOP, r_ColorArr)
    endif
  endif

endfunction


function lib_PLOT_CHART_Draw_Line(r_DS_Xa, r_DS_Xb, r_YPos, r_ColourArr as integer)


  d3d_color CHART_Line_Colours(r_ColourArr, 1), CHART_Line_Colours(r_ColourArr, 2), CHART_Line_Colours(r_ColourArr, 3), 255
  
  d3d_line r_DS_Xa, r_YPos, r_DS_Xb, r_YPos + 1

  if g_DS_PLOTCHART_DoubleLineThickness = 1
    `Draw line with X+1
    d3d_line r_DS_Xa+1, r_YPos, r_DS_Xb+1, r_YPos + 1
    `Draw line with Y+1
    d3d_line r_DS_Xa, r_YPos + 1, r_DS_Xb, r_YPos + 2
  else
    `Draw line with X+1 : Note: If you ever want true single line thickness then REM/exclude the line below.
    d3d_line r_DS_Xa+1, r_YPos, r_DS_Xb+1, r_YPos + 1
  endif

endfunction

function lib_Disp_RT_Display_DepthUnits()

 ` 
  d3d_starttext
    if g_ENGINE_Screen_Resolution = 1
      if g_ENGINE_UNITS_FT_or_M = 1
        d3d_text 2, 1253, 101, 0, "ft", g_ENGINE_COLOUR_Black
      else
        d3d_text 2, 1253, 101, 0, "m", g_ENGINE_COLOUR_Black
      endif  
    else
      if g_ENGINE_UNITS_FT_or_M = 1
        d3d_text 2, 930, 101, 0, "ft", g_ENGINE_COLOUR_Black
      else
        d3d_text 2, 930, 101, 0, "m", g_ENGINE_COLOUR_Black
      endif  
    endif
  d3d_endtext

endfunction


function lib_Disp_RT_Display_Menu()

  `This function displays the Menu while using the Realtime Display in CF1 modes.

  local l_YPos as integer : l_YPos = 19
  local l_x1# as float : l_x1# = 0.60
  local l_x2# as float : l_x2# = 0.80
  
  if timer() > g_ENG_FlashTimer
    g_ENG_FlashTimer = timer() + 700
    if g_ENG_FlashTimer_Toggle = 1
      g_ENG_FlashTimer_Toggle = -1
    else
      g_ENG_FlashTimer_Toggle = 1
    endif    
  endif
  
    if g_ENG_FlashTimer_Toggle = 1
      d3d_text 2, screen width() * l_x1#, (l_YPos+(19*0)), 0, "F9 - Graphical Display"
    endif
    
    if g_DTFULLSCREEN_Toggle = 2
      d3d_text 1, screen width() * l_x1#, (l_YPos+(19*1)), 0, " `   - Windowed (Double Tap)"
    else
      d3d_text 1, screen width() * l_x1#, (l_YPos+(19*1)), 0, " `   - Fullscreen (Double Tap)"
    endif
  
    `Only show Login Details in Mudlogging (CF2) Mode.
    if g_ENGINE_CoreFunctionType = 2
        d3d_text 1, screen width() * l_x1#, (l_YPos+(19*2)), 0, "F10 - USER ID's"
    endif
    
    d3d_text 1, screen width() * l_x2#, (l_YPos+(19*0)), 0, "F12 - Command Console"
       
    if g_server_connected = 0
      if g_connection_attempt_ATTEMPT_NOW = 1
        d3d_text 1, screen width() * l_x2#, (l_YPos+(19*1)), 0, "*** Attempting to Connect ***"
      else
        d3d_text 1, screen width() * l_x2#, (l_YPos+(19*1)), 0, "F8 - Connect To Server"
      endif
    endif

endfunction


function lib_Disp_RT_DISPLAY_ChartRange_Values1()



endfunction


function lib_Disp_RT_DISPLAY_ChartRange_Values()

    `DISPLAY ALL THE CHART PLOT RANGES
    d3d_starttext
      `Block 1, 2, 3 - Line 1
        d3d_text 8, g_DISPLAY_RangeLower_Block1_Line1_x, g_DISPLAY_RangeLower_Block1_Line1_y, 1, str$(g_Block1_Line1_Lower_Value), g_Block1_Line1_Colour
        d3d_text 8, g_DISPLAY_RangeUpper_Block1_Line1_x, g_DISPLAY_RangeUpper_Block1_Line1_y, 1, str$(g_Block1_Line1_Upper_Value), g_Block1_Line1_Colour

        d3d_text 8, g_DISPLAY_RangeLower_Block2_Line1_x, g_DISPLAY_RangeLower_Block2_Line1_y, 1, str$(g_Block2_Line1_Lower_Value), g_Block2_Line1_Colour
        d3d_text 8, g_DISPLAY_RangeUpper_Block2_Line1_x, g_DISPLAY_RangeUpper_Block2_Line1_y, 1, str$(g_Block2_Line1_Upper_Value), g_Block2_Line1_Colour

        d3d_text 8, g_DISPLAY_RangeLower_Block3_Line1_x, g_DISPLAY_RangeLower_Block3_Line1_y, 1, str$(g_Block3_Line1_Lower_Value), g_Block3_Line1_Colour
        d3d_text 8, g_DISPLAY_RangeUpper_Block3_Line1_x, g_DISPLAY_RangeUpper_Block3_Line1_y, 1, str$(g_Block3_Line1_Upper_Value), g_Block3_Line1_Colour
      `Block 1, 2, 3 - Line 2

        d3d_text 8, g_DISPLAY_RangeLower_Block1_Line2_x, g_DISPLAY_RangeLower_Block1_Line2_y, 1, str$(g_Block1_Line2_Lower_Value), g_Block1_Line2_Colour
        d3d_text 8, g_DISPLAY_RangeUpper_Block1_Line2_x, g_DISPLAY_RangeUpper_Block1_Line2_y, 1, str$(g_Block1_Line2_Upper_Value), g_Block1_Line2_Colour

        d3d_text 8, g_DISPLAY_RangeLower_Block2_Line2_x, g_DISPLAY_RangeLower_Block2_Line2_y, 1, str$(g_Block2_Line2_Lower_Value), g_Block2_Line2_Colour
        d3d_text 8, g_DISPLAY_RangeUpper_Block2_Line2_x, g_DISPLAY_RangeUpper_Block2_Line2_y, 1, str$(g_Block2_Line2_Upper_Value), g_Block2_Line2_Colour

        d3d_text 8, g_DISPLAY_RangeLower_Block3_Line2_x, g_DISPLAY_RangeLower_Block3_Line2_y, 1, str$(g_Block3_Line2_Lower_Value), g_Block3_Line2_Colour
        d3d_text 8, g_DISPLAY_RangeUpper_Block3_Line2_x, g_DISPLAY_RangeUpper_Block3_Line2_y, 1, str$(g_Block3_Line2_Upper_Value), g_Block3_Line2_Colour
      `Block 1, 2, 3 - Line 3

        d3d_text 8, g_DISPLAY_RangeLower_Block1_Line3_x, g_DISPLAY_RangeLower_Block1_Line3_y, 1, str$(g_Block1_Line3_Lower_Value), g_Block1_Line3_Colour
        d3d_text 8, g_DISPLAY_RangeUpper_Block1_Line3_x, g_DISPLAY_RangeUpper_Block1_Line3_y, 1, str$(g_Block1_Line3_Upper_Value), g_Block1_Line3_Colour

        d3d_text 8, g_DISPLAY_RangeLower_Block2_Line3_x, g_DISPLAY_RangeLower_Block2_Line3_y, 1, str$(g_Block2_Line3_Lower_Value), g_Block2_Line3_Colour
        d3d_text 8, g_DISPLAY_RangeUpper_Block2_Line3_x, g_DISPLAY_RangeUpper_Block2_Line3_y, 1, str$(g_Block2_Line3_Upper_Value), g_Block2_Line3_Colour

        d3d_text 8, g_DISPLAY_RangeLower_Block3_Line3_x, g_DISPLAY_RangeLower_Block3_Line3_y, 1, str$(g_Block3_Line3_Lower_Value), g_Block3_Line3_Colour
        d3d_text 8, g_DISPLAY_RangeUpper_Block3_Line3_x, g_DISPLAY_RangeUpper_Block3_Line3_y, 1, str$(g_Block3_Line3_Upper_Value), g_Block3_Line3_Colour
  
    d3d_endtext
  
    `This code displays the chart ranges at the bottom of each chart
    `BLOCK 1
      DS_lib_CHARTS_Calc_Range_Values(g_Block1_Line1_Lower_Value, g_Block1_Line1_Upper_Value)
      DS_lib_CHARTS_Display_Range_Values(1, 660, CHART_Line_Colours(1, 1), CHART_Line_Colours(1, 2), CHART_Line_Colours(1, 3))
      DS_lib_CHARTS_Calc_Range_Values(g_Block1_Line2_Lower_Value, g_Block1_Line2_Upper_Value)
      DS_lib_CHARTS_Display_Range_Values(1, 677, CHART_Line_Colours(2, 1), CHART_Line_Colours(2, 2), CHART_Line_Colours(2, 3))
      DS_lib_CHARTS_Calc_Range_Values(g_Block1_Line3_Lower_Value, g_Block1_Line3_Upper_Value)
      DS_lib_CHARTS_Display_Range_Values(1, 695, CHART_Line_Colours(3, 1), CHART_Line_Colours(3, 2), CHART_Line_Colours(3, 3))
    `BLOCK 2
      DS_lib_CHARTS_Calc_Range_Values(g_Block2_Line1_Lower_Value, g_Block2_Line1_Upper_Value)
      DS_lib_CHARTS_Display_Range_Values(2, 660, CHART_Line_Colours(4, 1), CHART_Line_Colours(4, 2), CHART_Line_Colours(4, 3))
      DS_lib_CHARTS_Calc_Range_Values(g_Block2_Line2_Lower_Value, g_Block2_Line2_Upper_Value)
      DS_lib_CHARTS_Display_Range_Values(2, 677, CHART_Line_Colours(5, 1), CHART_Line_Colours(5, 2), CHART_Line_Colours(5, 3))
      DS_lib_CHARTS_Calc_Range_Values(g_Block2_Line3_Lower_Value, g_Block2_Line3_Upper_Value)
      DS_lib_CHARTS_Display_Range_Values(2, 695, CHART_Line_Colours(6, 1), CHART_Line_Colours(6, 2), CHART_Line_Colours(6, 3))
    `BLOCK 3
      DS_lib_CHARTS_Calc_Range_Values(g_Block3_Line1_Lower_Value, g_Block3_Line1_Upper_Value)
      DS_lib_CHARTS_Display_Range_Values(3, 660, CHART_Line_Colours(7, 1), CHART_Line_Colours(7, 2), CHART_Line_Colours(7, 3))
      DS_lib_CHARTS_Calc_Range_Values(g_Block3_Line2_Lower_Value, g_Block3_Line2_Upper_Value)
      DS_lib_CHARTS_Display_Range_Values(3, 677, CHART_Line_Colours(8, 1), CHART_Line_Colours(8, 2), CHART_Line_Colours(8, 3))
      DS_lib_CHARTS_Calc_Range_Values(g_Block3_Line3_Lower_Value, g_Block3_Line3_Upper_Value)
      DS_lib_CHARTS_Display_Range_Values(3, 695, CHART_Line_Colours(9, 1), CHART_Line_Colours(9, 2), CHART_Line_Colours(9, 3))
  
    d3d_color 255, 255, 255, 255
    

endfunction





function DS_lib_CHARTS_Calc_Range_Values(r_LowRng as integer, r_UppRng as integer)

  local l_increment_val# as float
  
  l_increment_val# = ((r_UppRng - r_LowRng) + 0.0) / 5

  CHARTPLOT_RangeVals(0) = r_LowRng
  CHARTPLOT_RangeVals(1) = CHARTPLOT_RangeVals(0) + int(l_increment_val# + 0.5)
  CHARTPLOT_RangeVals(2) = CHARTPLOT_RangeVals(1) + int(l_increment_val# + 0.5)
  CHARTPLOT_RangeVals(3) = CHARTPLOT_RangeVals(2) + int(l_increment_val# + 0.5)
  CHARTPLOT_RangeVals(4) = CHARTPLOT_RangeVals(3) + int(l_increment_val# + 0.5)
  CHARTPLOT_RangeVals(5) = CHARTPLOT_RangeVals(4) + int(l_increment_val# + 0.5)
  CHARTPLOT_RangeVals(6) = r_UppRng

endfunction




function DS_lib_CHARTS_Display_Range_Values(r_BlockNum as integer, r_YOffset as integer, r_Red as integer, r_Green as integer, r_Blue as integer)

  d3d_color r_Red, r_Green, r_Blue, 255
  d3d_starttext
    if g_ENGINE_Screen_Resolution = 1
      if r_BlockNum = 1 then r_XOffset = 0
      if r_BlockNum = 2 then r_XOffset = 373
      if r_BlockNum = 3 then r_XOffset = 690
      d3d_text 1, r_XOffset + 23, r_YOffset, 1, str$(CHARTPLOT_RangeVals(0))
      d3d_text 1, r_XOffset + 68, r_YOffset, 1, str$(CHARTPLOT_RangeVals(1))
      d3d_text 1, r_XOffset + 129, r_YOffset, 1, str$(CHARTPLOT_RangeVals(2))
      d3d_text 1, r_XOffset + 190, r_YOffset, 1, str$(CHARTPLOT_RangeVals(3))
      d3d_text 1, r_XOffset + 251, r_YOffset, 1, str$(CHARTPLOT_RangeVals(4))
      d3d_text 1, r_XOffset + 298, r_YOffset, 1, str$(CHARTPLOT_RangeVals(5))
    else
      if r_BlockNum = 1 then r_XOffset = 0
      if r_BlockNum = 2 then r_XOffset = 265
      if r_BlockNum = 3 then r_XOffset = 473
      d3d_text 1, r_XOffset + 23, r_YOffset, 1, str$(CHARTPLOT_RangeVals(0))
      d3d_text 1, r_XOffset + 50, r_YOffset, 1, str$(CHARTPLOT_RangeVals(1))
      d3d_text 1, r_XOffset + 87, r_YOffset, 1, str$(CHARTPLOT_RangeVals(2))
      d3d_text 1, r_XOffset + 127, r_YOffset, 1, str$(CHARTPLOT_RangeVals(3))
      d3d_text 1, r_XOffset + 163, r_YOffset, 1, str$(CHARTPLOT_RangeVals(4))
      d3d_text 1, r_XOffset + 192, r_YOffset, 1, str$(CHARTPLOT_RangeVals(5))
    endif
  d3d_endtext

endfunction


Function lib_Disp_RT_SHUTDOWN()

  if g_ENGINE_CoreFunctionType = 1
    g_MAIN_SCREEN_TYPE = 1000
  else
    g_MAIN_SCREEN_TYPE = 1
  endif
  
  d3d_color 255, 255, 255, 255
  
  ENG_RTDisp_GADGET_Toggle = -1
  ENG_RTDisp_GADGET_Stage = -1
  g_PLOTCHART_display_values_click_toggle = -1
  
  g_ENGINE_HIST_DRILL_Screen_Routing = 1
  
  `Set MEM DB Edit flag to null so that it isn't on if used last time.
  g_MEM_DB_EditBDMode_ON = -1
  g_MEM_DB_EditBDMode_Column = 1
  g_MEM_DB_EditBDMode_Row = 0
  g_MEM_DB_EditBDMode_Highlight_DataReady = -1
  g_MEM_DB_EditBDMode_Input_BuildStr$ = ""
  g_ENGINE_InputNumbersOnly$ = ""
  

endfunction


function _______HISTORICAL_SCREENS_CF1_______________________________tw33lg80kr()
endfunction

function CF1_HS_ENGINE()

  if g_HS_NUMPAD_Toggle = -1 and g_RTDispEXITBOX_TOGGLE = -1
    HS_lib_Channel_Selection()
    HS_INPUT_Universal_Mouse()
  endif

  if g_ENGINE_Screen_Resolution = 1
    paste image c_DRILLING_BUTTONImgnum, 1245, 730
  else
    paste image c_DRILLING_BUTTONImgnum, 904, 730
  endif
  
  if image exist(c_CHT_HS_ChartPlot) = 1
    paste image c_CHT_HS_ChartPlot, 75, 63
  endif

  lib_HS_Colour_And_Tick_Boxs()
  lib_HS_TimePeriodButtons()
  lib_HS_Handle_ScreenButtons()
  CF1_HS_TIME_Display()
  lib_HS_Display_Text()
  
  `Display the Channel Information Box
  if g_HS_Display_Chart_Values_click_toggle = 1 and g_RTDispEXITBOX_TOGGLE = -1
    lib_CF1_HS_Show_Chart_Channel_Data()
  endif
  
  `Handle the HS Numpad for entering chart range values
  if g_HS_NUMPAD_Toggle = 1 and g_RTDispEXITBOX_TOGGLE = -1
    HS_NUMPAD_ENGINE()
  endif
  
  `Handle the COLOUR PAD
  if g_COLOURMAP_Toggle = 1 and g_RTDispEXITBOX_TOGGLE = -1
    ENGINE_COLOUR_PAD()
  endif

endfunction

function CF1_HS_PLOT_CHART_CF1_Create_Image()

  l_DEBUG_Timer = hitimer()

  make bitmap from memblock 1, 11
  set current bitmap 1

  CF1_HS_PLOT_CHART_Draw()
   
  get image c_CHT_HS_ChartPlot, 0, 0, bitmap width(1), bitmap height(1), 1
  
  delete bitmap 1
  set current bitmap 0
  
  d3d_color 255, 255, 255, 255
  
  g_DEBUG_HS_UpdateTime_UpdateTimeInMS = hitimer() - l_DEBUG_Timer

endfunction

function CF1_HS_PLOT_CHART_Draw()

  `Note: To change the plotting direction from left-right / right-left then when calling 
  `HS_lib_PLOT_CHART_Draw_Line either (g_HS_CHARTBOX_Ttl_Width - print_pixel_lp and a value
  `of -1 on XPosition in HS_lib_PLOT_CHART_Draw_Line) or (just print_pixel_lp and a value of +1)

  local l_MEM_DB_Pos as integer
  local l_MEM_DB_Pos2 as integer

  local l_DataView_ArrPos as integer

  local l_Channel_1_TotalRange# as float
  local l_Channel_2_TotalRange# as float
  local l_Channel_3_TotalRange# as float
  local l_Channel_4_TotalRange# as float
  local l_Channel_5_TotalRange# as float
  
  local l_Channel_6_TotalRange# as float
  local l_Channel_7_TotalRange# as float
  local l_Channel_8_TotalRange# as float
  local l_Channel_9_TotalRange# as float
  local l_Channel_10_TotalRange# as float
  
  local l_Channel_11_TotalRange# as float
  local l_Channel_12_TotalRange# as float
  local l_Channel_13_TotalRange# as float
  local l_Channel_14_TotalRange# as float
  local l_Channel_15_TotalRange# as float
  
  local l_Channel_16_TotalRange# as float
  local l_Channel_17_TotalRange# as float
  local l_Channel_18_TotalRange# as float
  local l_Channel_19_TotalRange# as float
  local l_Channel_20_TotalRange# as float


  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float
  
  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.
  `if g_DATABASE_MEM_Total_Num_Records > 5
  
    `Block 1
    l_Channel_1_TotalRange# = (HS_Chart_Range_Values#(1) - HS_Chart_Range_Values#(2)) + 0.0
    l_Channel_2_TotalRange# = (HS_Chart_Range_Values#(3) - HS_Chart_Range_Values#(4)) + 0.0
    l_Channel_3_TotalRange# = (HS_Chart_Range_Values#(5) - HS_Chart_Range_Values#(6)) + 0.0
    l_Channel_4_TotalRange# = (HS_Chart_Range_Values#(7) - HS_Chart_Range_Values#(8)) + 0.0
    l_Channel_5_TotalRange# = (HS_Chart_Range_Values#(9) - HS_Chart_Range_Values#(10)) + 0.0
    `Block 2
    l_Channel_6_TotalRange# = (HS_Chart_Range_Values#(11) - HS_Chart_Range_Values#(12)) + 0.0
    l_Channel_7_TotalRange# = (HS_Chart_Range_Values#(13) - HS_Chart_Range_Values#(14)) + 0.0
    l_Channel_8_TotalRange# = (HS_Chart_Range_Values#(15) - HS_Chart_Range_Values#(16)) + 0.0
    l_Channel_9_TotalRange# = (HS_Chart_Range_Values#(17) - HS_Chart_Range_Values#(18)) + 0.0
    l_Channel_10_TotalRange# = (HS_Chart_Range_Values#(19) - HS_Chart_Range_Values#(20)) + 0.0
    `Block 3
    l_Channel_11_TotalRange# = (HS_Chart_Range_Values#(21) - HS_Chart_Range_Values#(22)) + 0.0
    l_Channel_12_TotalRange# = (HS_Chart_Range_Values#(23) - HS_Chart_Range_Values#(24)) + 0.0
    l_Channel_13_TotalRange# = (HS_Chart_Range_Values#(25) - HS_Chart_Range_Values#(26)) + 0.0
    l_Channel_14_TotalRange# = (HS_Chart_Range_Values#(27) - HS_Chart_Range_Values#(28)) + 0.0
    l_Channel_15_TotalRange# = (HS_Chart_Range_Values#(29) - HS_Chart_Range_Values#(30)) + 0.0
//     `Block 4 : THIS IS CF1 CODE...
//     l_Channel_16_TotalRange# = (HS_Chart_Range_Values#(31) - HS_Chart_Range_Values#(32)) + 0.0
//     l_Channel_17_TotalRange# = (HS_Chart_Range_Values#(33) - HS_Chart_Range_Values#(34)) + 0.0
//     l_Channel_18_TotalRange# = (HS_Chart_Range_Values#(35) - HS_Chart_Range_Values#(36)) + 0.0
//     l_Channel_19_TotalRange# = (HS_Chart_Range_Values#(37) - HS_Chart_Range_Values#(38)) + 0.0
//     l_Channel_20_TotalRange# = (HS_Chart_Range_Values#(39) - HS_Chart_Range_Values#(40)) + 0.0

    `Update the START ARRAY position
    `if g_HS_Chart_Update_Start_Array = 1
    `  g_HS_Chart_Update_Start_Array = -1
    `  g_HS_Chart_Start_Array_Pos = HS_CHART_Get_First_Valid_Record_Array()
    `endif
    
      
    for print_pixel_lp = 0 to g_HS_CHARTBOX_Ttl_Width
      
        `GET DATA ARRAY POSITIONS FOR POINT 1 AND POINT 2 OF THE LINE
        `TIME PERIOD ADJUST - g_ENGINE_DS_Chart_Time_Period_Adjust ADDED + l_MEM_DB_Pos2 value to all
        
        `HISTORICAL SCREEN - Get Plot Chart array positions
        
        l_MEM_DB_Pos = g_HS_CHART_Scroll_Array_Offset + (print_pixel_lp * g_ENGINE_HS_Chart_Time_Period_Adjust)
        g_ENG_CF1_HS_StartPlotArrPntr = l_MEM_DB_Pos
        l_MEM_DB_Pos2 = l_MEM_DB_Pos + (1 * g_ENGINE_HS_Chart_Time_Period_Adjust)
        
        if l_MEM_DB_Pos > c_SMod_RTDis_DB_TtlRecs
          l_MEM_DB_Pos = c_SMod_RTDis_DB_TtlRecs
        endif  
        if l_MEM_DB_Pos2 > c_SMod_RTDis_DB_TtlRecs
          l_MEM_DB_Pos2 = c_SMod_RTDis_DB_TtlRecs
        endif
        
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
      
        `HISTORICAL SCREEN - PLOT DATA LINES
         
        `BLOCK 1
          `1 - Hole Depth
          if HS_TickBox_States(1) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).Hole_Depth# - HS_Chart_Range_Values#(2)) / l_Channel_1_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).Hole_Depth# - HS_Chart_Range_Values#(2)) / l_Channel_1_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).Hole_Depth#
            p_DataB_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).Hole_Depth#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(1), HS_Chart_Range_Values#(2), 1)
          endif
          
          `2 - Bit Depth
          if HS_TickBox_States(2) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).Bit_Depth# - HS_Chart_Range_Values#(4)) / l_Channel_2_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).Bit_Depth# - HS_Chart_Range_Values#(4)) / l_Channel_2_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).Bit_Depth#
            p_DataB_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).Bit_Depth#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(3), HS_Chart_Range_Values#(4), 2)
          endif

          `3 - ROP
          if HS_TickBox_States(3) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).ROP# - HS_Chart_Range_Values#(6)) / l_Channel_3_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).ROP# - HS_Chart_Range_Values#(6)) / l_Channel_3_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).ROP#
            p_DataB_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).ROP#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(5), HS_Chart_Range_Values#(6), 3)
          endif
          
          `4 - WOB
          if HS_TickBox_States(4) = 1
            l_ratioA# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).WOB# - HS_Chart_Range_Values#(8)) / l_Channel_4_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratioA# * g_HS_CHARTBOX_Ttl_Height))
            l_ratioB# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).WOB# - HS_Chart_Range_Values#(8)) / l_Channel_4_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratioB# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).WOB#
            p_DataB_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).WOB#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(7), HS_Chart_Range_Values#(8), 4)
          endif
          
          `5 - HKLD
          if HS_TickBox_States(5) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).Hookload - HS_Chart_Range_Values#(10)) / l_Channel_5_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).Hookload - HS_Chart_Range_Values#(10)) / l_Channel_5_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).Hookload)
            p_DataB_Val# = int(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).Hookload)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(9), HS_Chart_Range_Values#(10), 5)
          endif
          
        `BLOCK 2  
          
          `6 - RPM
          if HS_TickBox_States(6) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).RPM - HS_Chart_Range_Values#(12)) / l_Channel_6_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).RPM - HS_Chart_Range_Values#(12)) / l_Channel_6_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).RPM)
            p_DataB_Val# = int(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).RPM)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(11), HS_Chart_Range_Values#(12), 6)
          endif
          
          `7 - TT
          if HS_TickBox_States(7) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).TripTank# - HS_Chart_Range_Values#(14)) / l_Channel_7_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).TripTank# - HS_Chart_Range_Values#(14)) / l_Channel_7_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).TripTank#
            p_DataB_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).TripTank#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(13), HS_Chart_Range_Values#(14), 7)
          endif
         
          `8 - Block Position
          if HS_TickBox_States(8) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).BlockPosition# - HS_Chart_Range_Values#(16)) / l_Channel_8_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).BlockPosition# - HS_Chart_Range_Values#(16)) / l_Channel_8_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).BlockPosition#
            p_DataB_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).BlockPosition#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(15), HS_Chart_Range_Values#(16), 8)
          endif
          
          `9 - PVT
          if HS_TickBox_States(9) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).PVT# - HS_Chart_Range_Values#(18)) / l_Channel_9_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).PVT# - HS_Chart_Range_Values#(18)) / l_Channel_9_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).PVT#
            p_DataB_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).PVT#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(17), HS_Chart_Range_Values#(18), 9)
          endif

          `10 - SPP
          if HS_TickBox_States(10) = 1
            l_ratioA# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).SPP - HS_Chart_Range_Values#(20)) / l_Channel_10_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratioA# * g_HS_CHARTBOX_Ttl_Height))
            l_ratioB# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).SPP - HS_Chart_Range_Values#(20)) / l_Channel_10_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratioB# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).SPP)
            p_DataB_Val# = int(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).SPP)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(19), HS_Chart_Range_Values#(20), 10)
          endif
          
        `BLOCK 3  
          
          `11 - FlowIn
          if HS_TickBox_States(11) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).FlowIn - HS_Chart_Range_Values#(22)) / l_Channel_11_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).FlowIn - HS_Chart_Range_Values#(22)) / l_Channel_11_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).FlowIn)
            p_DataB_Val# = int(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).FlowIn)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(21), HS_Chart_Range_Values#(22), 11)
          endif
          
          `12 - SPM1
          if HS_TickBox_States(12) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).SPM1 - HS_Chart_Range_Values#(24)) / l_Channel_12_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).SPM1 - HS_Chart_Range_Values#(24)) / l_Channel_12_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).SPM1)
            p_DataB_Val# = int(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).SPM1)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(23), HS_Chart_Range_Values#(24), 12)
          endif
          
          `13 - SPM2
          if HS_TickBox_States(13) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).SPM2 - HS_Chart_Range_Values#(26)) / l_Channel_13_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).SPM2 - HS_Chart_Range_Values#(26)) / l_Channel_13_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).SPM2)
            p_DataB_Val# = int(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).SPM2)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(25), HS_Chart_Range_Values#(26), 13)
          endif
          
          `14 - Total Gas %
          if HS_TickBox_States(14) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).TotalGas# - HS_Chart_Range_Values#(28)) / l_Channel_14_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).TotalGas# - HS_Chart_Range_Values#(28)) / l_Channel_14_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).TotalGas#
            p_DataB_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).TotalGas#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(27), HS_Chart_Range_Values#(28), 14)
          endif
          
          `15 - H2S %
          if HS_TickBox_States(15) = 1
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).H2S# - HS_Chart_Range_Values#(30)) / l_Channel_15_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).H2S# - HS_Chart_Range_Values#(30)) / l_Channel_15_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos).H2S#
            p_DataB_Val# = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_MEM_DB_Pos2).H2S#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(29), HS_Chart_Range_Values#(30), 15)
          endif
          
        `BLOCK 4
        
          `NEEDS WRITING STILL
 

    next print_pixel_lp
  

  
endfunction

function CF1_HS_TIME_Display()

  local l_TimePix as integer
  local l_TimeARR as integer
  local l_SCRLp as integer
  
  if g_ENGINE_Screen_Resolution = 1
    l_SCRLp = 10
  else
    l_SCRLp = 7
  endif

  d3d_starttext

    for plot_time_lp =  0 to l_SCRLp
   
      l_TimePix = (plot_time_lp * 113)
      l_TimeARR = g_HS_CHART_Scroll_Array_Offset + ((g_HS_CHARTBOX_Ttl_Width - l_TimePix) * g_ENGINE_HS_Chart_Time_Period_Adjust)
      if l_TimeARR < 0
        l_TimeARR = 0
      endif
      
      if plot_time_lp > 0
        if l_TimeARR < c_SMod_RTDis_DB_TtlRecs
          `Plot the time
          d3d_text 2, 75 + (plot_time_lp * 114), 18, 1, left$(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_TimeARR).Time$, 5), rgb(0, 255, 0)
          `Plot the Date
          if g_UK_or_USA_Settings = 1
            l_HS_date$ = right$(left$(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_TimeARR).Date$, 5), 2) + "/" + left$(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_TimeARR).Date$, 2)
          else
            l_HS_date$ = left$(VIEWERMODE_RTDisplay_DB_HSViewCopy(l_TimeARR).Date$, 5)
          endif
          d3d_text 2, 75 + (plot_time_lp * 114), 36, 1, "(" + l_HS_date$ + ")", rgb(0, 255, 0)
        else
          d3d_text 2, 75 + (plot_time_lp * 114), 18, 1, "No Data", rgb(0, 255, 0)
        endif

      endif
      
    next plot_time_lp

  d3d_endtext

endfunction

function lib_HS_Format_CF1HS_DisplayArray()

  local l_STime as integer : l_STime = timer()

  `Because the VIEWERMODE_RTDisplay_DB(x).x array is continuously receiving data it cannot be viewed
  `using the historical screen at different time intervals. This would result in a moving INT baseline
  `for the start array of the data, i.e the data jumping problem + the data would scroll as you
  `looked at it.
  `To allow for this the user actually looks at a separate array. The main data is copied into this when
  `you open the screen or click re-fresh.
  
  for Copy_Lp = 0 to c_SMod_RTDis_DB_TtlRecs
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).Time$ = VIEWERMODE_RTDisplay_DB(Copy_Lp).Time$
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).Date$ = VIEWERMODE_RTDisplay_DB(Copy_Lp).Date$
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).Hole_Depth# = VIEWERMODE_RTDisplay_DB(Copy_Lp).Hole_Depth#
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).Bit_Depth# = VIEWERMODE_RTDisplay_DB(Copy_Lp).Bit_Depth#
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).ROP# = VIEWERMODE_RTDisplay_DB(Copy_Lp).ROP#
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).WOB# = VIEWERMODE_RTDisplay_DB(Copy_Lp).WOB#
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).Hookload = VIEWERMODE_RTDisplay_DB(Copy_Lp).Hookload
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).RPM = VIEWERMODE_RTDisplay_DB(Copy_Lp).RPM
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).TripTank# = VIEWERMODE_RTDisplay_DB(Copy_Lp).TripTank#
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).BlockPosition# = VIEWERMODE_RTDisplay_DB(Copy_Lp).BlockPosition#
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).PVT# = VIEWERMODE_RTDisplay_DB(Copy_Lp).PVT#
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).SPP = VIEWERMODE_RTDisplay_DB(Copy_Lp).SPP
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).FlowIn = VIEWERMODE_RTDisplay_DB(Copy_Lp).FlowIn
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).SPM1 = VIEWERMODE_RTDisplay_DB(Copy_Lp).SPM1
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).SPM2 = VIEWERMODE_RTDisplay_DB(Copy_Lp).SPM2
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).TotalGas# = VIEWERMODE_RTDisplay_DB(Copy_Lp).TotalGas#
    VIEWERMODE_RTDisplay_DB_HSViewCopy(Copy_Lp).H2S# = VIEWERMODE_RTDisplay_DB(Copy_Lp).H2S#
  next Copy_Lp
  
  g_HS_ENG_CopyArrayTtlTime = timer() - l_STime
  
endfunction

function lib_CF1_HS_Show_Chart_Channel_Data()

  local l_MouseX_PixelPtr as integer
  local l_HSDataView_ArrPos as integer


  `Get the position of the mouse Y point that will be the array access pointer respecting the plot width
  if mousex() > g_HS_CHARTBOX_Screen_Left and mousex() < g_HS_CHARTBOX_Screen_Right
    l_MouseX_PixelPtr = mousex() - g_HS_CHARTBOX_Screen_Left
  else
    if mousex() < g_HS_CHARTBOX_Screen_Left
      l_MouseX_PixelPtr = g_HS_CHARTBOX_Screen_Left
    endif
    if mousex() > g_HS_CHARTBOX_Screen_Right
      l_MouseX_PixelPtr = g_HS_CHARTBOX_Screen_Right
    endif
  endif
   
  `Calculate the array position of the mousey() screen position
  g_ENG_CF1_HS_StartPlotArrPntr = -999
  
  l_HSDataView_ArrPos = g_HS_CHART_Scroll_Array_Offset + (((g_HS_CHARTBOX_Screen_Left + g_HS_CHARTBOX_Ttl_Width) - mousex()) * g_ENGINE_HS_Chart_Time_Period_Adjust)
  
  if l_HSDataView_ArrPos < 0
    l_HSDataView_ArrPos = 0
  endif

  `Draw the Chart Data View black line showing which bit of data you are looking at
  if mousex() > g_HS_CHARTBOX_Screen_Left and mousex() < g_HS_CHARTBOX_Screen_Right
    if g_ENGINE_Alpha_Available = 1
      d3d_line mousex() - 1, g_HS_CHARTBOX_Screen_Top, mousex() - 1, g_HS_CHARTBOX_Screen_Bottom, RGB(100,255,255,255)
      d3d_line mousex() + 1, g_HS_CHARTBOX_Screen_Top, mousex() + 1, g_HS_CHARTBOX_Screen_Bottom, RGB(100,255,255,255)
    endif
    d3d_line mousex(), g_HS_CHARTBOX_Screen_Top, mousex(), g_HS_CHARTBOX_Screen_Bottom, g_ENGINE_COLOUR_Black
    `Floating Time Box displaying the time and date of the data
    l_FTimeBoxX = (image width(c_HS_Data_FloatingTime_Imgnum) / 2)
    paste sprite c_SPRITE_HS_FloatingTime, mousex() - l_FTimeBoxX, 46
    d3d_starttext
      if l_HSDataView_ArrPos < c_SMod_RTDis_DB_TtlRecs
        d3d_text 2, mousex(), 48, 1, VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).Time$, rgb(0, 255, 0)
      else
        d3d_text 2, mousex(), 48, 1, "No Data", rgb(0, 255, 0)
      endif  
    d3d_endtext
  endif
  
  `Main Data box displaying all the channels and their data
  l_HSDCnt = 0
  for count_lp = 1 to 15
    if HS_TickBox_States(count_lp) = 1
      inc l_HSDCnt, 1
    endif
  next count_lp
  
  if l_HSDataView_ArrPos > 0 and l_HSDataView_ArrPos < c_SMod_RTDis_DB_TtlRecs
    if l_HSDCnt > 0
      if l_HSDCnt < 6
        paste sprite c_SPRITE_HS_Chart_Values1, 79, 67
      else
        if l_HSDCnt < 11
          paste sprite c_SPRITE_HS_Chart_Values2, 79, 67
        else
          paste sprite c_SPRITE_HS_Chart_Values3, 79, 67
        endif
      endif
    endif
  endif
  
  
  `Place data in the temp data store ready to be read out if needed
  `stops the large number of if then statements otherwise required.
  if l_HSDataView_ArrPos > 0 and l_HSDataView_ArrPos < c_SMod_RTDis_DB_TtlRecs
    `Block 1
    HS_Data_Store#(1, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).Hole_Depth#
    HS_Data_Store#(2, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).Bit_Depth#
    HS_Data_Store#(3, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).ROP#
    HS_Data_Store#(4, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).WOB#
    HS_Data_Store#(5, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).Hookload
    `Block 2
    HS_Data_Store#(6, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).RPM
    HS_Data_Store#(7, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).TripTank#
    HS_Data_Store#(8, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).BlockPosition#
    HS_Data_Store#(9, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).PVT#
    HS_Data_Store#(10, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).SPP
    `Block 3
    HS_Data_Store#(11, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).FlowIn
    HS_Data_Store#(12, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).SPM1
    HS_Data_Store#(13, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).SPM2
    HS_Data_Store#(14, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).TotalGas#
    HS_Data_Store#(15, 0) = VIEWERMODE_RTDisplay_DB_HSViewCopy(l_HSDataView_ArrPos).H2S#
    `Block 4
    `Still needs writing NOTE: THIS IS CF1 CODE....

    ChnlDat_X = 90
    ChnlDat_Y = 80
    d3d_starttext
      for chnl_data_lp = 1 to 15
        if HS_TickBox_States(chnl_data_lp) = 1
          l_build_strg$ = HS_Channel_Names$(chnl_data_lp) + " : " + str$(HS_Data_Store#(chnl_data_lp, 0), HS_Data_Store#(chnl_data_lp, 1))
          d3d_text 2, ChnlDat_X, ChnlDat_Y, 0, l_build_strg$, HS_Channel_Colour(chnl_data_lp)
          inc ChnlDat_X, 170
          if ChnlDat_X > 900
            ChnlDat_X = 90
            inc ChnlDat_Y, 25
          endif  
        endif
      next chnl_data_lp
    d3d_endtext
  endif  

endfunction

function lib_FakeData_COPY_PUSH_Data(r_FunctionType)

  local l_load_record_number# as float : l_load_record_number# = -1.0
  local l_MemLoc as integer

  if r_FunctionType = 1
  `This function copies a chuck of a database file into the push database memory array so we can view some data
  `and then saves the file for a quicker program loadup time, because when the function is run the program
  `halts since the function sorts the data every item it adds - i.e 10800*10800=116,640,000 program loops
  open datafile to read 1, g_CLIENT_Database_Full_Path$
  
  `c_SMod_RTDis_DB_TtlRecs
    l_OffsetArr = 40417
    for Load_lp = 0 + l_OffsetArr to c_SMod_RTDis_DB_TtlRecs + l_OffsetArr
    `for Load_lp = 0 to 200

      `Load a database item
      l_data_position = int(Load_lp * c_DATABASE_Bytes_Per_Record)
      
      set datafile position 1, l_data_position
      
      l_MemLoc = datafile integer(1)
      g_DISP_RT_DB_Time$ = datafile string$(1)
      g_DISP_RT_DB_Date$ = datafile string$(1)
      g_DISP_RT_DB_Hole_Depth# = datafile float(1)
      g_DISP_RT_DB_Bit_Depth# = datafile float(1)
      g_DISP_RT_DB_ROP# = datafile float(1)
      g_DISP_RT_DB_WOB# = datafile float(1)
      g_DISP_RT_DB_Hookload = datafile word(1)
      g_DISP_RT_DB_RPM = datafile word(1)
      g_DISP_RT_DB_TripTank# = datafile float(1)
      g_DISP_RT_DB_BlockPosition# = datafile float(1)
      g_DISP_RT_DB_PVT# = datafile float(1)
      g_DISP_RT_DB_SPP = datafile word(1)
      g_DISP_RT_DB_FlowIn = datafile word(1)
      g_DISP_RT_DB_SPM1 = datafile word(1)
      g_DISP_RT_DB_SPM2 = datafile word(1)
      g_DISP_RT_DB_TotalGas# = datafile float(1)
      g_DISP_RT_DB_H2S# = datafile float(1)
      
      lib_Disp_RT_CF1_DATABASE_ADD_MEM_Record()
      
    next Load_lp 
    
  close datafile 1
  
    `Now save the file for quick reload by [r_FunctionType=2]
    open to write 1, g_autodir_full_directory_path$ + "\Database\CF1_DB_FakePushArr.dat"
      for write_lp = 0 to c_SMod_RTDis_DB_TtlRecs
        write string 1, VIEWERMODE_RTDisplay_DB(write_lp).Time$
        write string 1, VIEWERMODE_RTDisplay_DB(write_lp).Date$
        write float 1, VIEWERMODE_RTDisplay_DB(write_lp).Hole_Depth#
        write float 1, VIEWERMODE_RTDisplay_DB(write_lp).Bit_Depth#
        write float 1, VIEWERMODE_RTDisplay_DB(write_lp).ROP#
        write float 1, VIEWERMODE_RTDisplay_DB(write_lp).WOB#
        write word 1, VIEWERMODE_RTDisplay_DB(write_lp).Hookload
        write word 1, VIEWERMODE_RTDisplay_DB(write_lp).RPM
        write float 1, VIEWERMODE_RTDisplay_DB(write_lp).TripTank#
        write float 1, VIEWERMODE_RTDisplay_DB(write_lp).BlockPosition#
        write float 1, VIEWERMODE_RTDisplay_DB(write_lp).PVT#
        write word 1, VIEWERMODE_RTDisplay_DB(write_lp).SPP
        write word 1, VIEWERMODE_RTDisplay_DB(write_lp).FlowIn
        write word 1, VIEWERMODE_RTDisplay_DB(write_lp).SPM1
        write word 1, VIEWERMODE_RTDisplay_DB(write_lp).SPM2
        write float 1, VIEWERMODE_RTDisplay_DB(write_lp).TotalGas#
        write float 1, VIEWERMODE_RTDisplay_DB(write_lp).H2S#
      next write_lp
    close file 1

  endif
  
  `[r_FunctionType = 2] - Load the file created by r_FunctionType=1
  if r_FunctionType = 2
  
    `Check file exists and report error to user if it does not
    if file exist(g_autodir_full_directory_path$ + "\Database\CF1_DB_FakePushArr.dat") = 0
      lib_ON_ERROR_Handle("The data file 'CF1_DB_FakePushArr.dat' is missing.", "This file is used for CF1 (Viewer Mode) Debugging and Evaluation.", "Release compiles should not feature this module. Contact GDS for assistance.", -1)
    endif
  
    open to read 1, g_autodir_full_directory_path$ + "\Database\CF1_DB_FakePushArr.dat"
      for read_lp = 0 to c_SMod_RTDis_DB_TtlRecs
        read string 1, VIEWERMODE_RTDisplay_DB(read_lp).Time$
        read string 1, VIEWERMODE_RTDisplay_DB(read_lp).Date$
        read float 1, VIEWERMODE_RTDisplay_DB(read_lp).Hole_Depth#
        read float 1, VIEWERMODE_RTDisplay_DB(read_lp).Bit_Depth#
        read float 1, VIEWERMODE_RTDisplay_DB(read_lp).ROP#
        read float 1, VIEWERMODE_RTDisplay_DB(read_lp).WOB#
        read word 1, VIEWERMODE_RTDisplay_DB(read_lp).Hookload
        read word 1, VIEWERMODE_RTDisplay_DB(read_lp).RPM
        read float 1, VIEWERMODE_RTDisplay_DB(read_lp).TripTank#
        read float 1, VIEWERMODE_RTDisplay_DB(read_lp).BlockPosition#
        read float 1, VIEWERMODE_RTDisplay_DB(read_lp).PVT#
        read word 1, VIEWERMODE_RTDisplay_DB(read_lp).SPP
        read word 1, VIEWERMODE_RTDisplay_DB(read_lp).FlowIn
        read word 1, VIEWERMODE_RTDisplay_DB(read_lp).SPM1
        read word 1, VIEWERMODE_RTDisplay_DB(read_lp).SPM2
        read float 1, VIEWERMODE_RTDisplay_DB(read_lp).TotalGas#
        read float 1, VIEWERMODE_RTDisplay_DB(read_lp).H2S#
      next read_lp
    close file 1 

  endif
  
endfunction  

function _______HISTORICAL_SCREENS_CF2_______________________________tw33lg80kr()
endfunction

function CF2_HS_ENGINE()

  if g_HS_NUMPAD_Toggle = -1 and g_EXIT_Client_Toggle <> 1
    HS_lib_Channel_Selection()
    HS_INPUT_Universal_Mouse()
  endif

  if g_ENGINE_Screen_Resolution = 1
    paste image c_DRILLING_BUTTONImgnum, 1245, 730
  else
    paste image c_DRILLING_BUTTONImgnum, 904, 730
  endif
  
  if image exist(c_CHT_HS_ChartPlot) = 1
    paste image c_CHT_HS_ChartPlot, 75, 63
  endif

  lib_HS_Colour_And_Tick_Boxs()
    
  lib_HS_TimePeriodButtons()
  
  Handle_HS_Screen_DepthTick_Button()
  Handle_HS_Screen_Comments_Button()
  
  lib_HS_Handle_ScreenButtons()
    
  CF2_HS_TIME_Display()
    
  lib_HS_Display_Text()
  
  if g_HS_Display_DepthTicks = 1 then lib_HS_RT_Display_DEPTH_TICKS()
  if g_HS_Display_Comments = 1 then lib_HS_RT_Display_COMMENTS()
  
  `Paste side cover image to cover over possible comment overlap with the lefthand side of the chart display
  paste image c_HS_Comment_SideBlankingPart_Img, 63, 109, 1
  
  `Display the Channel Information INFOBOX
  if g_HS_Display_Chart_Values_click_toggle = 1
    lib_CF2_HS_Show_Chart_Channel_Data()
  endif
  
   `Handle the COLOUR PAD
  if g_COLOURMAP_Toggle = 1
    ENGINE_COLOUR_PAD()
  endif
  
  `Handle the HS Numpad for entering chart range values
  if g_HS_NUMPAD_Toggle = 1
    HS_NUMPAD_ENGINE()
  endif
  
  d3d_color 255,255,255, 255

endfunction


function CF2_HS_PLOT_CHART_Draw()

  `Note: To change the plotting direction from left-right / right-left then when calling 
  `HS_lib_PLOT_CHART_Draw_Line either (g_HS_CHARTBOX_Ttl_Width - print_pixel_lp and a value
  `of -1 on XPosition in HS_lib_PLOT_CHART_Draw_Line) or (just print_pixel_lp and a value of +1)

  local l_MEM_DB_Pos as integer
  local l_MEM_DB_Pos2 as integer

  local l_DataView_ArrPos as integer

  local l_Channel_1_TotalRange# as float
  local l_Channel_2_TotalRange# as float
  local l_Channel_3_TotalRange# as float
  local l_Channel_4_TotalRange# as float
  local l_Channel_5_TotalRange# as float
  local l_Channel_6_TotalRange# as float
  local l_Channel_7_TotalRange# as float
  local l_Channel_8_TotalRange# as float
  local l_Channel_9_TotalRange# as float
  local l_Channel_10_TotalRange# as float
  local l_Channel_11_TotalRange# as float
  local l_Channel_12_TotalRange# as float
  local l_Channel_13_TotalRange# as float
  local l_Channel_14_TotalRange# as float
  local l_Channel_15_TotalRange# as float
  local l_Channel_16_TotalRange# as float
  local l_Channel_17_TotalRange# as float
  local l_Channel_18_TotalRange# as float
  local l_Channel_19_TotalRange# as float
  local l_Channel_20_TotalRange# as float

  local l_ratio# as float
  local p_DataA_Val# as float
  local p_DataB_Val# as float
  
  `Only start plotting charts if the total number of records received from the client is > 5. This
  `is a safety measure to make sure the program does not try and plot records that do not exist.
  `It will only be in the first <1 minute of a well that there are <5 records.
  if g_DATABASE_MEM_Total_Num_Records > 5
  
    `Block 1
    l_Channel_1_TotalRange# = (HS_Chart_Range_Values#(1) - HS_Chart_Range_Values#(2)) + 0.0
    l_Channel_2_TotalRange# = (HS_Chart_Range_Values#(3) - HS_Chart_Range_Values#(4)) + 0.0
    l_Channel_3_TotalRange# = (HS_Chart_Range_Values#(5) - HS_Chart_Range_Values#(6)) + 0.0
    l_Channel_4_TotalRange# = (HS_Chart_Range_Values#(7) - HS_Chart_Range_Values#(8)) + 0.0
    l_Channel_5_TotalRange# = (HS_Chart_Range_Values#(9) - HS_Chart_Range_Values#(10)) + 0.0
    `Block 2
    l_Channel_6_TotalRange# = (HS_Chart_Range_Values#(11) - HS_Chart_Range_Values#(12)) + 0.0
    l_Channel_7_TotalRange# = (HS_Chart_Range_Values#(13) - HS_Chart_Range_Values#(14)) + 0.0
    l_Channel_8_TotalRange# = (HS_Chart_Range_Values#(15) - HS_Chart_Range_Values#(16)) + 0.0
    l_Channel_9_TotalRange# = (HS_Chart_Range_Values#(17) - HS_Chart_Range_Values#(18)) + 0.0
    l_Channel_10_TotalRange# = (HS_Chart_Range_Values#(19) - HS_Chart_Range_Values#(20)) + 0.0
    `Block 3
    l_Channel_11_TotalRange# = (HS_Chart_Range_Values#(21) - HS_Chart_Range_Values#(22)) + 0.0
    l_Channel_12_TotalRange# = (HS_Chart_Range_Values#(23) - HS_Chart_Range_Values#(24)) + 0.0
    l_Channel_13_TotalRange# = (HS_Chart_Range_Values#(25) - HS_Chart_Range_Values#(26)) + 0.0
    l_Channel_14_TotalRange# = (HS_Chart_Range_Values#(27) - HS_Chart_Range_Values#(28)) + 0.0
    l_Channel_15_TotalRange# = (HS_Chart_Range_Values#(29) - HS_Chart_Range_Values#(30)) + 0.0
    `Block 4
    l_Channel_16_TotalRange# = (HS_Chart_Range_Values#(31) - HS_Chart_Range_Values#(32)) + 0.0
    l_Channel_17_TotalRange# = (HS_Chart_Range_Values#(33) - HS_Chart_Range_Values#(34)) + 0.0
    l_Channel_18_TotalRange# = (HS_Chart_Range_Values#(35) - HS_Chart_Range_Values#(36)) + 0.0
    l_Channel_19_TotalRange# = (HS_Chart_Range_Values#(37) - HS_Chart_Range_Values#(38)) + 0.0
    l_Channel_20_TotalRange# = (HS_Chart_Range_Values#(39) - HS_Chart_Range_Values#(40)) + 0.0

    `Update the START ARRAY position
    if g_HS_Chart_Update_Start_Array = 1
      g_HS_Chart_Update_Start_Array = -1
      g_HS_Chart_Start_Array_Pos = HS_CHART_Get_First_Valid_Record_Array()
    endif
    
    for print_pixel_lp = 0 to g_HS_CHARTBOX_Ttl_Width
      if (g_HS_Chart_Start_Array_Pos - print_pixel_lp) > 1
      
        `GET DATA ARRAY POSITIONS FOR POINT 1 AND POINT 2 OF THE LINE
        `TIME PERIOD ADJUST - g_ENGINE_DS_Chart_Time_Period_Adjust ADDED + l_MEM_DB_Pos2 value to all
        
        `HISTORICAL SCREEN - Get Plot Chart array positions
        l_MEM_DB_Pos = (g_HS_Chart_Start_Array_Pos) - (print_pixel_lp * g_ENGINE_HS_Chart_Time_Period_Adjust)
        l_MEM_DB_Pos2 = l_MEM_DB_Pos - (1 * g_ENGINE_HS_Chart_Time_Period_Adjust)
        
        if l_MEM_DB_Pos < 1
          l_MEM_DB_Pos = 1
        endif
        if l_MEM_DB_Pos2 < 1
          l_MEM_DB_Pos2 = 1
        endif
      
        `HISTORICAL SCREEN - PLOT DATA LINES

        `BLOCK 1
          `1 - Hole Depth
          if HS_TickBox_States(1) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).Hole_Depth# - HS_Chart_Range_Values#(2)) / l_Channel_1_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).Hole_Depth# - HS_Chart_Range_Values#(2)) / l_Channel_1_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).Hole_Depth#
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).Hole_Depth#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(1), HS_Chart_Range_Values#(2), 1)
          endif
          
          `2 - Bit Depth
          if HS_TickBox_States(2) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).Bit_Depth# - HS_Chart_Range_Values#(4)) / l_Channel_2_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).Bit_Depth# - HS_Chart_Range_Values#(4)) / l_Channel_2_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).Bit_Depth#
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).Bit_Depth#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(3), HS_Chart_Range_Values#(4), 2)
          endif

          `3 - ROP
          if HS_TickBox_States(3) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).ROP# - HS_Chart_Range_Values#(6)) / l_Channel_3_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).ROP# - HS_Chart_Range_Values#(6)) / l_Channel_3_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).ROP#
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).ROP#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(5), HS_Chart_Range_Values#(6), 3)
          endif
          
          `4 - WOB
          if HS_TickBox_States(4) = 1
            l_ratioA# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).WOB# - HS_Chart_Range_Values#(8)) / l_Channel_4_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratioA# * g_HS_CHARTBOX_Ttl_Height))
            l_ratioB# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).WOB# - HS_Chart_Range_Values#(8)) / l_Channel_4_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratioB# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).WOB#
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).WOB#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(7), HS_Chart_Range_Values#(8), 4)
          endif
          
          `5 - HKLD
          if HS_TickBox_States(5) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).Hookload - HS_Chart_Range_Values#(10)) / l_Channel_5_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).Hookload - HS_Chart_Range_Values#(10)) / l_Channel_5_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos).Hookload)
            p_DataB_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos2).Hookload)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(9), HS_Chart_Range_Values#(10), 5)
          endif
          
        `BLOCK 2  
          
          `6 - RPM
          if HS_TickBox_States(6) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).RPM - HS_Chart_Range_Values#(12)) / l_Channel_6_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).RPM - HS_Chart_Range_Values#(12)) / l_Channel_6_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos).RPM)
            p_DataB_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos2).RPM)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(11), HS_Chart_Range_Values#(12), 6)
          endif
          
          `7 - TT
          if HS_TickBox_States(7) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).TripTank# - HS_Chart_Range_Values#(14)) / l_Channel_7_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).TripTank# - HS_Chart_Range_Values#(14)) / l_Channel_7_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).TripTank#
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).TripTank#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(13), HS_Chart_Range_Values#(14), 7)
          endif
         
          `8 - Block Position
          if HS_TickBox_States(8) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).BlockPosition# - HS_Chart_Range_Values#(16)) / l_Channel_8_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).BlockPosition# - HS_Chart_Range_Values#(16)) / l_Channel_8_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).BlockPosition#
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).BlockPosition#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(15), HS_Chart_Range_Values#(16), 8)
          endif
          
          `9 - PVT
          if HS_TickBox_States(9) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).PVT# - HS_Chart_Range_Values#(18)) / l_Channel_9_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).PVT# - HS_Chart_Range_Values#(18)) / l_Channel_9_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).PVT#
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).PVT#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(17), HS_Chart_Range_Values#(18), 9)
          endif

          `10 - SPP
          if HS_TickBox_States(10) = 1
            l_ratioA# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).SPP - HS_Chart_Range_Values#(20)) / l_Channel_10_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratioA# * g_HS_CHARTBOX_Ttl_Height))
            l_ratioB# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).SPP - HS_Chart_Range_Values#(20)) / l_Channel_10_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratioB# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos).SPP)
            p_DataB_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos2).SPP)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(19), HS_Chart_Range_Values#(20), 10)
          endif
          
        `BLOCK 3  
          
          `11 - FlowIn
          if HS_TickBox_States(11) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).FlowIn - HS_Chart_Range_Values#(22)) / l_Channel_11_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).FlowIn - HS_Chart_Range_Values#(22)) / l_Channel_11_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos).FlowIn)
            p_DataB_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos2).FlowIn)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(21), HS_Chart_Range_Values#(22), 11)
          endif
          
          `12 - SPM1
          if HS_TickBox_States(12) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).SPM1 - HS_Chart_Range_Values#(24)) / l_Channel_12_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).SPM1 - HS_Chart_Range_Values#(24)) / l_Channel_12_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos).SPM1)
            p_DataB_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos2).SPM1)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(23), HS_Chart_Range_Values#(24), 12)
          endif
          
          `13 - SPM2
          if HS_TickBox_States(13) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).SPM2 - HS_Chart_Range_Values#(26)) / l_Channel_13_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).SPM2 - HS_Chart_Range_Values#(26)) / l_Channel_13_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos).SPM2)
            p_DataB_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos2).SPM2)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(25), HS_Chart_Range_Values#(26), 13)
          endif
          
          `14 - SPM2
          if HS_TickBox_States(14) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).SPM3 - HS_Chart_Range_Values#(28)) / l_Channel_14_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).SPM3 - HS_Chart_Range_Values#(28)) / l_Channel_14_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos).SPM3)
            p_DataB_Val# = int(MEM_MAIN_DATABASE(l_MEM_DB_Pos2).SPM3)
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(27), HS_Chart_Range_Values#(28), 13)
          endif
          
          `15 - Total Gas %
          if HS_TickBox_States(15) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).TotalGas# - HS_Chart_Range_Values#(30)) / l_Channel_15_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).TotalGas# - HS_Chart_Range_Values#(30)) / l_Channel_15_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).TotalGas#
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).TotalGas#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(29), HS_Chart_Range_Values#(30), 14)
          endif
          
        `BLOCK 4  
          
          `16 - H2S %
          if HS_TickBox_States(16) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).H2S# - HS_Chart_Range_Values#(32)) / l_Channel_16_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).H2S# - HS_Chart_Range_Values#(32)) / l_Channel_16_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).H2S#
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).H2S#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(31), HS_Chart_Range_Values#(32), 15)
          endif
          
          `17 - Temp IN
          if HS_TickBox_States(17) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).TempIN# - HS_Chart_Range_Values#(34)) / l_Channel_17_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).TempIN# - HS_Chart_Range_Values#(34)) / l_Channel_17_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).TempIN#
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).TempIN#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(33), HS_Chart_Range_Values#(34), 15)
          endif
          
          `18 - Temp OUT
          if HS_TickBox_States(18) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).TempOUT# - HS_Chart_Range_Values#(36)) / l_Channel_18_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).TempOUT# - HS_Chart_Range_Values#(36)) / l_Channel_18_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).TempOUT#
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).TempOUT#
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(35), HS_Chart_Range_Values#(36), 15)
          endif
          
          `19 - CSG
          if HS_TickBox_States(19) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).CSG - HS_Chart_Range_Values#(38)) / l_Channel_19_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).CSG - HS_Chart_Range_Values#(38)) / l_Channel_19_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).CSG
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).CSG
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(37), HS_Chart_Range_Values#(38), 15)
          endif
          
          `20 - Total Strokes
          if HS_TickBox_States(20) = 1
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos).Total_Strokes - HS_Chart_Range_Values#(40)) / l_Channel_20_TotalRange#
            p_Y_POS_A = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            l_ratio# = (MEM_MAIN_DATABASE(l_MEM_DB_Pos2).Total_Strokes - HS_Chart_Range_Values#(40)) / l_Channel_20_TotalRange#
            p_Y_POS_B = c_N_HS_CHARTBOX_BMP_Bottom_Y - (int(l_ratio# * g_HS_CHARTBOX_Ttl_Height))
            p_DataA_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos).Total_Strokes
            p_DataB_Val# = MEM_MAIN_DATABASE(l_MEM_DB_Pos2).Total_Strokes
            lib_HS_PLOT_CHART_Format_Line(p_Y_POS_A, p_Y_POS_B, print_pixel_lp, p_DataA_Val#, p_DataB_Val#, HS_Chart_Range_Values#(39), HS_Chart_Range_Values#(40), 15)
          endif




//     SPM1 as word 12
//     SPM2 as word 13
//     SPM3 as word 14
//     TotalGas# as float 15
//
//     H2S# as float 16
//     TempIN# as float 17
//     TempOUT# as float 18
//     CSG as word 19
//     Total_Strokes as integer 20


 
       endif
    next print_pixel_lp
  
  endif
  
endfunction

function CF2_HS_TIME_Display()

  local l_TimePix as integer
  local l_TimeARR as integer
  local l_SCRLp as integer
  
  if g_ENGINE_Screen_Resolution = 1
    l_SCRLp = 10
  else
    l_SCRLp = 7
  endif

  d3d_starttext
  
    `If midnight is on screen then display the date change line and information
    for print_dateline_lp = 0 to g_HS_CHARTBOX_Ttl_Width
    
      l_TimeARR = (g_DATABASE_MEM_Total_Num_Records - g_HS_CHART_Scroll_Array_Offset) - ((g_HS_CHARTBOX_Ttl_Width - print_dateline_lp) * g_ENGINE_HS_Chart_Time_Period_Adjust)    
      l_Pxl1_Arr = (g_DATABASE_MEM_Total_Num_Records - g_HS_CHART_Scroll_Array_Offset) - ((g_HS_CHARTBOX_Ttl_Width - print_dateline_lp) * g_ENGINE_HS_Chart_Time_Period_Adjust) 
      l_Pxl2_Arr = (g_DATABASE_MEM_Total_Num_Records - g_HS_CHART_Scroll_Array_Offset) - ((g_HS_CHARTBOX_Ttl_Width - print_dateline_lp - 1) * g_ENGINE_HS_Chart_Time_Period_Adjust) 

      if l_Pxl1_Arr > 0 and l_Pxl1_Arr < g_DATABASE_MEM_Total_Num_Records
        l_Date1$ = MEM_MAIN_DATABASE(l_Pxl1_Arr).Date$
      endif
      if l_Pxl2_Arr > 0 and l_Pxl2_Arr < g_DATABASE_MEM_Total_Num_Records
        l_Date2$ = MEM_MAIN_DATABASE(l_Pxl2_Arr).Date$
      endif

      if l_Pxl1_Arr > 0 and l_Pxl2_Arr > 0 and l_Pxl1_Arr < g_DATABASE_MEM_Total_Num_Records and l_Pxl2_Arr < g_DATABASE_MEM_Total_Num_Records
        if l_Date1$ <> l_Date2$
          l_XPrntPixel = print_dateline_lp + g_HS_CHARTBOX_Screen_Left
          if l_XPrntPixel - 60 > g_HS_CHARTBOX_Screen_Left then d3d_text 2, l_XPrntPixel - 60, g_HS_CHARTBOX_Screen_Top + 20, 0, lib_CONVERT_DATE_US_to_UK_Format(l_Date1$), g_ENGINE_COLOUR_Black
          if l_XPrntPixel + 60 < g_HS_CHARTBOX_Screen_Right then d3d_text 2, l_XPrntPixel + 10, g_HS_CHARTBOX_Screen_Top + 20, 0, lib_CONVERT_DATE_US_to_UK_Format(l_Date2$), g_ENGINE_COLOUR_Black
          d3d_line l_XPrntPixel, g_HS_CHARTBOX_Screen_Top, l_XPrntPixel, g_HS_CHARTBOX_Screen_Bottom, g_ENGINE_COLOUR_Black
        endif
      endif  
    
    next print_dateline_lp

    `Display the Time
    for plot_time_lp =  0 to l_SCRLp
      
      l_TimePix = (plot_time_lp * 113)
      l_TimeARR = (g_DATABASE_MEM_Total_Num_Records - g_HS_CHART_Scroll_Array_Offset) - ((g_HS_CHARTBOX_Ttl_Width - l_TimePix) * g_ENGINE_HS_Chart_Time_Period_Adjust)
      if l_TimeARR < 0
        l_TimeARR = 0
      endif
      if l_TimeARR > g_DATABASE_MEM_Total_Num_Records
        l_TimeARR = g_DATABASE_MEM_Total_Num_Records
      endif
      
      if plot_time_lp > 0
        if l_TimeARR > 0
          `Plot the time
          d3d_text 2, 75 + (plot_time_lp * 114), 18, 1, left$(MEM_MAIN_DATABASE(l_TimeARR).Time$, 5), rgb(0, 255, 0)
          `Plot the Date
          if g_UK_or_USA_Settings = 1
            l_HS_date$ = right$(left$(MEM_MAIN_DATABASE(l_TimeARR).Date$, 5), 2) + "/" + left$(MEM_MAIN_DATABASE(l_TimeARR).Date$, 2)
          else
            l_HS_date$ = left$(MEM_MAIN_DATABASE(l_TimeARR).Date$, 5)
          endif
          d3d_text 2, 75 + (plot_time_lp * 114), 36, 1, "(" + l_HS_date$ + ")", rgb(0, 255, 0)
        else
          d3d_text 2, 75 + (plot_time_lp * 114), 18, 1, "No Data", rgb(0, 255, 0)
          `d3d_text 8, 75 + (plot_time_lp * 114), 36, 1, l_HS_date$, rgb(0, 255, 0)
        endif

      endif
      
    next plot_time_lp

  d3d_endtext

endfunction

function CF2_HS_PLOT_CHART_CF2_Create_Image()





  local l_DEBUG_Timer as integer

  l_DEBUG_Timer = hitimer()
  
  if image exist(c_CHT_HS_ChartPlot) = 1 then delete image c_CHT_HS_ChartPlot
  make image from memblock 1, 11
    
  MAKE IMAGE c_CHT_HS_ChartPlot, image width(1), image height(1)
  DRAW TO IMAGE c_CHT_HS_ChartPlot
    
  paste image 1, 0, 0
  delete image 1
  

  `make bitmap from memblock 1, 11
  `set current bitmap 1

  CF2_HS_PLOT_CHART_Draw()
   
  `get image c_CHT_HS_ChartPlot, 0, 0, bitmap width(1), bitmap height(1), 1
  
  `delete bitmap 1
  `set current bitmap 0
  
  d3d_color 255, 255, 255, 255
  
  set current bitmap 0
  
  g_DEBUG_HS_UpdateTime_UpdateTimeInMS = hitimer() - l_DEBUG_Timer

endfunction

function lib_CF2_HS_Show_Chart_Channel_Data()

  local l_MouseX_PixelPtr as integer
  local l_HSDataView_ArrPos as integer
  
  local l_FTimeBoxX as integer
  local l_HSDCnt as integer
  local ChnlDat_X as integer
  local ChnlDat_Y as integer
  local l_build_strg$ as string


  `Get the position of the mouse Y point that will be the array access pointer respecting the plot width
  if mousex() > g_HS_CHARTBOX_Screen_Left and mousex() < g_HS_CHARTBOX_Screen_Right
    l_MouseX_PixelPtr = mousex() - g_HS_CHARTBOX_Screen_Left
  else
    if mousex() < g_HS_CHARTBOX_Screen_Left
      l_MouseX_PixelPtr = g_HS_CHARTBOX_Screen_Left
    endif
    if mousex() > g_HS_CHARTBOX_Screen_Right
      l_MouseX_PixelPtr = g_HS_CHARTBOX_Screen_Right
    endif
  endif
  
  `Calculate the array position of the mousey() screen position
  l_HSDataView_ArrPos = (g_HS_Chart_Start_Array_Pos) - ((g_HS_CHARTBOX_Ttl_Width - l_MouseX_PixelPtr) * g_ENGINE_HS_Chart_Time_Period_Adjust)
  if l_HSDataView_ArrPos < 0
    l_HSDataView_ArrPos = 0
  endif
  if l_HSDataView_ArrPos > g_DATABASE_MaxTotalRecords
    l_HSDataView_ArrPos = g_DATABASE_MaxTotalRecords
  endif  


  `HS INFO LINE - Draw the Chart Data View black line showing which bit of data you are looking at
  if mousex() > g_HS_CHARTBOX_Screen_Left and mousex() < g_HS_CHARTBOX_Screen_Right
    if g_ENGINE_Alpha_Available = 1
      d3d_line mousex() - 1, g_HS_CHARTBOX_Screen_Top, mousex() - 1, g_HS_CHARTBOX_Screen_Bottom, RGB(100,255,255,255)
      d3d_line mousex() + 1, g_HS_CHARTBOX_Screen_Top, mousex() + 1, g_HS_CHARTBOX_Screen_Bottom, RGB(100,255,255,255)
    endif
    d3d_line mousex(), g_HS_CHARTBOX_Screen_Top, mousex(), g_HS_CHARTBOX_Screen_Bottom, g_ENGINE_COLOUR_Black
    `Floating Time Box displaying the time and date of the data
    l_FTimeBoxX = (image width(c_HS_Data_FloatingTime_Imgnum) / 2)
    paste sprite c_SPRITE_HS_FloatingTime, mousex() - l_FTimeBoxX, 46
    d3d_starttext
      if l_HSDataView_ArrPos > 0
        d3d_text 2, mousex(), 48, 1, MEM_MAIN_DATABASE(l_HSDataView_ArrPos).Time$, rgb(0, 255, 0)
      else
        d3d_text 2, mousex(), 48, 1, "No Data", rgb(0, 255, 0)
      endif  
    d3d_endtext
  endif
  
  `Main Data box displaying all the channels and their data
  l_HSDCnt = 0
  for count_lp = 1 to 20
    if HS_TickBox_States(count_lp) = 1
      inc l_HSDCnt, 1
    endif
  next count_lp
  
  `Handle HS INFOBOX Background Image (height dependent on number of channels selected by user)
  if l_HSDCnt > 0
    if l_HSDCnt < 6
      paste sprite c_SPRITE_HS_Chart_Values1, 79, 67
    else
      if l_HSDCnt < 11
        paste sprite c_SPRITE_HS_Chart_Values2, 79, 67
      else
        if l_HSDCnt < 16
          paste sprite c_SPRITE_HS_Chart_Values3, 79, 67
        else
          paste sprite c_SPRITE_HS_Chart_Values4, 79, 67
        endif
      endif
    endif
  endif 
  
  `CF2
  `Place data in the temp data store ready to be read out if needed
  `stops the large number of if then statements otherwise required.
  if l_HSDataView_ArrPos > 0
    `Block 1
    HS_Data_Store#(1, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).Hole_Depth#
    HS_Data_Store#(2, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).Bit_Depth#
    HS_Data_Store#(3, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).ROP#
    HS_Data_Store#(4, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).WOB#
    HS_Data_Store#(5, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).Hookload
    `Block 2
    HS_Data_Store#(6, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).RPM
    HS_Data_Store#(7, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).TripTank#
    HS_Data_Store#(8, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).BlockPosition#
    HS_Data_Store#(9, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).PVT#
    HS_Data_Store#(10, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).SPP
    `Block 3
    HS_Data_Store#(11, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).FlowIn
    HS_Data_Store#(12, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).SPM1
    HS_Data_Store#(13, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).SPM2
    HS_Data_Store#(14, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).SPM3
    HS_Data_Store#(15, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).TotalGas#
    `Block 4
    HS_Data_Store#(16, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).H2S#
    HS_Data_Store#(17, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).TempIN#
    HS_Data_Store#(18, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).TempOUT#
    HS_Data_Store#(19, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).CSG
    HS_Data_Store#(20, 0) = MEM_MAIN_DATABASE(l_HSDataView_ArrPos).Total_Strokes
  endif
  
 
  ChnlDat_X = 90
  ChnlDat_Y = 80
  d3d_starttext
    for chnl_data_lp = 1 to 20
      if HS_TickBox_States(chnl_data_lp) = 1
        l_build_strg$ = HS_Channel_Names$(chnl_data_lp) + " : " + str$(HS_Data_Store#(chnl_data_lp, 0), HS_Data_Store#(chnl_data_lp, 1))
        d3d_text 2, ChnlDat_X, ChnlDat_Y, 0, l_build_strg$, HS_Channel_Colour(chnl_data_lp)
        inc ChnlDat_X, 170
        if ChnlDat_X > 900
          ChnlDat_X = 90
          inc ChnlDat_Y, 25
        endif  
      endif
    next chnl_data_lp
  d3d_endtext

endfunction

function _______PITS_SCREEN_CF2___________________________________________jfyurh64373()
`Pits Screen functions for displaying in CF2 (Mudlogging Mode) drillscreen/historical
`g_ENGINE_HIST_DRILL_Screen_Routing=3
endfunction

function CF2_PITS_SCREEN_ENGINE()
        
  local l_MouseInChartNum as integer

  if g_ENG_DLS_ToggleScreenON = -1
  `and g_PITS_NUMPAD_Selected_ChannelID = -1
    lib_CHANNEL_ID_Activate_ByMouse()
  endif
  
  `(Input Code Marker: 66271)
  if g_ENG_DLS_ToggleScreenON = -1 and g_RCM_MSE_INPUT_Toggle = -1 and g_CHANNELIDChngChnl_NUMPAD_TIMEBtb_LOCK = -1
    lib_RT_CF2_PITS_RangeVals_MouseSelect()
  endif
  
  `Print Selected Channel Names
  lib_CHANNEL_ID_PrintChannel_NAMES(2)
  if g_ENG_RTPRNT2IMG_CTRLFLOW = -1
    lib_CHANNEL_ID_PrintChannel_RTValues(2)
  endif
  lib_CHANNEL_ID_PrintChannel_RANGES(2)
  
    if g_ENGINE_Screen_Resolution = 1
      lib_CHANNEL_ID_PrintChannel_ChartDivs(1, 2)
    else
      lib_CHANNEL_ID_PrintChannel_ChartDivs(2, 2)
    endif

  
  lib_Disp_RT_PITS_TimePeriod_Buttons()

  
  lib_Disp_RT_CF2_PLOT_TIME()
  

  d3d_starttext
    `Display the hole depth
      d3d_text 5, g_DISPLAY_HOLE_DEPTH_x, g_DISPLAY_HOLE_DEPTH_y, 1, str$(g_COMMPORT_Receive_HoleDepth#, 1), g_ENGINE_COLOUR_Green
  
    `PITS SCREEN LAG DEPTH
      if g_LAGDEPTH_AdjustValue# <> 0.0
        l_LagDepth_Adjusted_Val# = g_COMMPORT_Receive_LagDepth# * g_LAGDEPTH_AdjustValue#
        d3d_text 5, 270, 732, 1, "Lag Depth : " + str$(l_LagDepth_Adjusted_Val#, 1), g_ENGINE_COLOUR_DataBlue
      endif
  d3d_endtext
  

    
  `Run the Comment System on the Realtime Displays
  	if g_ENG_CommentSystem_Active = 1
    	COMMENTSYSTEM_ENGINE()
  	endif
  
  `Display and Handle button to switch to and control Data List Screen
  	if g_ENG_DLS_Enabled = 1
    	ENGINE_Data_List_Screen()
  	endif
  
  `Handle the image showing if the chart time is set to zero - if the chart is plotting at 'now'
  	if g_PITS_CHART_Scroll_Array_Offset = 0
    	if g_ENGINE_Screen_Resolution = 1
      	paste image c_ChartData_ZeroTime_Yes_Imgnum, 1322, 178
    	else
      	paste image c_ChartData_ZeroTime_Yes_Imgnum, 889, 178
    	endif
  	endif
  
  `Handle the Depth Ticks Button
  Handle_DS_Screen_DepthTick_Button()
  
  `PITS Screen - If the WITS serial port is not active then display a graphic informing the user
  if g_SERIALPORT_ACTIVE = -1
    if timer() >  g_ENG_WitsFailedRTGraphicFlashTimer
      g_ENG_WitsFailedRTGraphicFlashTimer = timer() + 1000
      if g_ENG_WitsFailedRTGraphicFlashToggle <> 1
        g_ENG_WitsFailedRTGraphicFlashToggle = 1
      else
        g_ENG_WitsFailedRTGraphicFlashToggle = -1
      endif    
    endif
    if g_ENG_WitsFailedRTGraphicFlashToggle = 1 and g_PORTABLE_ENG_RunAs_VIEWER = -1 and g_ENG_RTPRNT2IMG_CTRLFLOW = -1
      if g_ENGINE_Screen_Resolution = 1
        paste image c_WITS_Failed_InfoGraphic, 1025, 464
      else
        paste image c_WITS_Failed_InfoGraphic, 702, 464
      endif
    endif
  endif
  
  `PITS Screen - If Data Logging is Disabled then display a graphic informing the user
  if g_ENG_Logging_Active = -1
    if timer() >  g_ENG_DataLoggingDisabledRTGraphicFlashTimer
      g_ENG_DataLoggingDisabledRTGraphicFlashTimer = timer() + 1000
      if g_ENG_DataLoggingDisabledRTGraphicFlashToggle <> 1
        g_ENG_DataLoggingDisabledRTGraphicFlashToggle = 1
      else
        g_ENG_DataLoggingDisabledRTGraphicFlashToggle = -1
      endif    
    endif
    if g_ENG_DataLoggingDisabledRTGraphicFlashToggle = 1 and g_PORTABLE_ENG_RunAs_VIEWER = -1 and g_ENG_RTPRNT2IMG_CTRLFLOW = -1
      if g_ENGINE_Screen_Resolution = 1
        paste image c_DataLogging_Disabled_InfoGraphic, 1025, 528
      else
        paste image c_DataLogging_Disabled_InfoGraphic, 702, 528
      endif
    endif
  endif
  
  `Handle PITS Screen Infobox
  `if g_CHANNELIDChngChnl_NUMPAD_TIMEBtb_LOCK = -1
    if g_PITS_NUMPAD_Selected_ChannelID = -1 and g_LOCKOUT_INPUTPAD_DS_ChannelRanges = -1
      if g_CHANNEL_ID_ChngChnl_Toggle = -1
        if g_ENG_DLS_ToggleScreenON = -1
          if g_ENG_RTPRNT2IMG_CTRLFLOW = -1
            if g_DS_DepthAlarm_Btn_Toggle = -1
              PITS_CHART_INFOBOX_ENGINE()
            endif
          endif
        endif
      endif
    endif
 ` endif  
 
 
  `Handle the DEPTH ALARM Button
    lib_DS_DepthAlarm_Button()
  

  `Display PITS Numpad if active. Note: Goes last so overlays all other images/text etc
    if g_PITS_NUMPAD_DISPLAY_NUMPAD = 1
      PITS_NUMPAD_ENGINE()
    endif
  


endfunction



function lib_RT_Input_PITS_MouseZ_Scroll()

  `PITS SCREEN MouseZ Scroll Charts
    if mousez() > g_PITS_CHART_Scroll_MouseZ
      g_PITS_CHART_Scroll_MouseZ = mousez()
      if g_PITS_CHART_Scroll_Array_Offset > 0
        dec g_PITS_CHART_Scroll_Array_Offset, int((c_CHART_Scroll_Key_Speed * g_PITS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
        `dec g_PITS_CHART_Scroll_Array_Offset, (c_CHART_Scroll_Key_Speed * g_PITS_ChartScroll_MseSpeed_Multiplier)
      endif
      if g_PITS_CHART_Scroll_Array_Offset < 0 
        g_PITS_CHART_Scroll_Array_Offset = 0
      endif
      ENGINE_PITS_CHART_IMAGE_Creation()
      lib_INFOBOX_HighlightArea_Update(2)
    endif
    
    if mousez() < g_PITS_CHART_Scroll_MouseZ
      g_PITS_CHART_Scroll_MouseZ = mousez()
      inc g_PITS_CHART_Scroll_Array_Offset, int((c_CHART_Scroll_Key_Speed * g_PITS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
      ENGINE_PITS_CHART_IMAGE_Creation()
      lib_INFOBOX_HighlightArea_Update(2)
    endif
    
  `PITS Key Scroll
    `[UP Cursor] - Go up a page view
    if keystate(200)= 1 and key_state(200,0)= 0
      g_PITS_CHART_Scroll_MouseZ = mousez()
      if g_PITS_CHART_Scroll_Array_Offset > 0
        dec g_PITS_CHART_Scroll_Array_Offset, int((c_CHART_Scroll_Key_Speed * g_PITS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
      endif
      if g_PITS_CHART_Scroll_Array_Offset < 0 
        g_PITS_CHART_Scroll_Array_Offset = 0
      endif
      ENGINE_PITS_CHART_IMAGE_Creation()
      lib_INFOBOX_HighlightArea_Update(2)
      key_state(200,0)=1
    endif
    if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
    `[DOWN Cursor] - Go down a page view
    if keystate(208)= 1 and key_state(208,0)= 0
      g_PITS_CHART_Scroll_MouseZ = mousez()
      inc g_PITS_CHART_Scroll_Array_Offset, int((c_CHART_Scroll_Key_Speed * g_PITS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
      ENGINE_PITS_CHART_IMAGE_Creation()
      lib_INFOBOX_HighlightArea_Update(2)
      key_state(208,0)=1
    endif
    if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
    
    `[PAGE UP Cursor] - Go up a page view
    if keystate(201)= 1 and key_state(201,0)= 0
      g_PITS_CHART_Scroll_MouseZ = mousez()
      if g_PITS_CHART_Scroll_Array_Offset > 0
        dec g_PITS_CHART_Scroll_Array_Offset, int(((c_CHART_Scroll_Key_Speed * 5) * g_PITS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
      endif
      if g_PITS_CHART_Scroll_Array_Offset < 0 
        g_PITS_CHART_Scroll_Array_Offset = 0
      endif
      ENGINE_PITS_CHART_IMAGE_Creation()
      lib_INFOBOX_HighlightArea_Update(2)
      key_state(201,0)=1
    endif
    if keystate(201)=0 and key_state(201,0)=1 then key_state(201,0)=0
    `[PAGE DOWN Cursor] - Go down a page view
    if keystate(209)= 1 and key_state(209,0)= 0
      g_PITS_CHART_Scroll_MouseZ = mousez()
      inc g_PITS_CHART_Scroll_Array_Offset, int(((c_CHART_Scroll_Key_Speed * 5) * g_PITS_ChartScroll_MseSpeed_Multiplier) * g_MSEWHL_AdjSensitivity_Amount#)
      ENGINE_PITS_CHART_IMAGE_Creation()
      lib_INFOBOX_HighlightArea_Update(2)
      key_state(209,0)=1
    endif
    if keystate(209)=0 and key_state(209,0)=1 then key_state(209,0)=0
    
  `[HOME] PITS Home Button
    if keystate(199)= 1 and key_state(199,0)= 0
      g_PITS_CHART_Scroll_Array_Offset = 0
      ENGINE_PITS_CHART_IMAGE_Creation()
      lib_INFOBOX_HighlightArea_Update(2)
      key_state(199,0)=1
    endif
    if keystate(199)=0 and key_state(199,0)=1 then key_state(199,0)=0
  
  

    
endfunction


function lib_Disp_RT_PITS_TimePeriod_Buttons()

  local l_ImgXOff as integer
  
  if g_ENGINE_Screen_Resolution = 1
    `Widescreen
    l_ImgXOff = 327
  else
    `1024x768
    l_ImgXOff = 219
  endif
   

  if g_PITS_SCREEN_TimePeriod_Button = 1
    paste sprite c_SPRITE_TimePeriod_HalfHrON, l_ImgXOff, 11
    paste sprite c_SPRITE_TimePeriod_1HrOFF, l_ImgXOff, 58
    paste sprite c_SPRITE_TimePeriod_4HrOFF, l_ImgXOff, 106
    paste sprite c_SPRITE_TimePeriod_8HrOFF, l_ImgXOff, 153
  endif
  if g_PITS_SCREEN_TimePeriod_Button = 2
    paste sprite c_SPRITE_TimePeriod_HalfHrOFF, l_ImgXOff, 11
    paste sprite c_SPRITE_TimePeriod_1HrON, l_ImgXOff, 58
    paste sprite c_SPRITE_TimePeriod_4HrOFF, l_ImgXOff, 106
    paste sprite c_SPRITE_TimePeriod_8HrOFF, l_ImgXOff, 153
  endif
  if g_PITS_SCREEN_TimePeriod_Button = 3
    paste sprite c_SPRITE_TimePeriod_HalfHrOFF, l_ImgXOff, 11
    paste sprite c_SPRITE_TimePeriod_1HrOFF, l_ImgXOff, 58
    paste sprite c_SPRITE_TimePeriod_4HrON, l_ImgXOff, 106
    paste sprite c_SPRITE_TimePeriod_8HrOFF, l_ImgXOff, 153
  endif
  if g_PITS_SCREEN_TimePeriod_Button = 4
    paste sprite c_SPRITE_TimePeriod_HalfHrOFF, l_ImgXOff, 11
    paste sprite c_SPRITE_TimePeriod_1HrOFF, l_ImgXOff, 58
    paste sprite c_SPRITE_TimePeriod_4HrOFF, l_ImgXOff, 106
    paste sprite c_SPRITE_TimePeriod_8HrON, l_ImgXOff, 153
  endif


  `TIME PERIOD BUTTONS (0.5hr, 1hr, 4hr, 8hr) INTERACTIONS (Input Code Marker: 72347)
  if mouseclick() = 1 and mouse_click(1) = -1 and g_PITS_NUMPAD_DISPLAY_NUMPAD = -1 and g_ENG_DLS_ToggleScreenON = -1 and g_RCM_MSE_INPUT_Toggle = -1 and g_LOCKOUT_INPUTPAD_TimePeriodButtons = -1 and g_CHANNELIDChngChnl_NUMPAD_TIMEBtb_LOCK = -1
    if mousex() > l_ImgXOff + 1 and mousex() < l_ImgXOff + 50
    
      if mousey() > 11 and mousey() < 45 : `0.5 hr
        mouse_click(1) = 1
        g_PITS_SCREEN_TimePeriod_Button = 1
        g_ENGINE_PITS_Chart_Time_Period_Adjust = 1
        g_PITS_ChartScroll_MseSpeed_Multiplier = int(g_DS_MouseScrollMultiplier_HalfHour * g_MSEWHL_AdjSensitivity_Amount#)
        `g_DS_SCROLLTIME_Text_Scroll_Adjust = 2
        ENGINE_PITS_CHART_IMAGE_Creation()
        if g_INFOBOX_PITS_ModeState = 2 and g_ENGINE_CoreFunctionType = 2
          lib_INFOBOX_HighlightArea_Update(2)
        endif
      endif
      if mousey() > 58 and mousey() < 92 : `1hr
        mouse_click(1) = 1
        g_PITS_SCREEN_TimePeriod_Button = 2
        g_ENGINE_PITS_Chart_Time_Period_Adjust = 2
        g_PITS_ChartScroll_MseSpeed_Multiplier = int(g_DS_MouseScrollMultiplier_1Hour * g_MSEWHL_AdjSensitivity_Amount#)
        `g_DS_SCROLLTIME_Text_Scroll_Adjust = 8
        ENGINE_PITS_CHART_IMAGE_Creation()
        if g_INFOBOX_PITS_ModeState = 2 and g_ENGINE_CoreFunctionType = 2
          lib_INFOBOX_HighlightArea_Update(2)
        endif
      endif
      if mousey() > 106 and mousey() < 140 : `4hr
        mouse_click(1) = 1
        g_PITS_SCREEN_TimePeriod_Button = 3
        g_ENGINE_PITS_Chart_Time_Period_Adjust = 8
        g_PITS_ChartScroll_MseSpeed_Multiplier = int(g_DS_MouseScrollMultiplier_4Hour * g_MSEWHL_AdjSensitivity_Amount#)
        `g_DS_SCROLLTIME_Text_Scroll_Adjust = 16
        ENGINE_PITS_CHART_IMAGE_Creation()
        if g_INFOBOX_PITS_ModeState = 2 and g_ENGINE_CoreFunctionType = 2
          lib_INFOBOX_HighlightArea_Update(2)
        endif
      endif
      if mousey() > 153 and mousey() < 188 : `8hr
        mouse_click(1) = 1
        g_PITS_SCREEN_TimePeriod_Button = 4
        g_ENGINE_PITS_Chart_Time_Period_Adjust = 16
        g_PITS_ChartScroll_MseSpeed_Multiplier = int(g_DS_MouseScrollMultiplier_8Hour * g_MSEWHL_AdjSensitivity_Amount#)
        `g_DS_SCROLLTIME_Text_Scroll_Adjust = 24
        ENGINE_PITS_CHART_IMAGE_Creation()
        if g_INFOBOX_PITS_ModeState = 2 and g_ENGINE_CoreFunctionType = 2
          lib_INFOBOX_HighlightArea_Update(2)
        endif
      endif
        
    endif
  endif

endfunction





function lib_RT_CF2_PITS_RangeVals_MouseSelect()
 
  local l_SelectedChannelID as integer
  local l_SelectedLowerUpper as integer
  
  local l_MSE_In_Chart_ID as integer
  
  local l_MSE_X as integer
  local l_MSE_Y as integer
 

  if mouseclick() = 1 and g_PITS_NUMPAD_SelectRange_MouseClick = -1 and g_PITS_NUMPAD_DISPLAY_NUMPAD = -1 and g_LOCKOUT_INPUTPAD_PITS_ChannelRanges = -1

    l_SelectedChannelID = -1
    l_SelectedLowerUpper = -1
    g_PITS_NUMPAD_Selected_ChannelID = -1
    g_PITS_NUMPAD_Selected_LowerUpperChnl = -1
    g_PITS_NUMPAD_SelectRange_MouseClick = 1

  	`Determine Active BLOCK by mouse coordinates (Get current Chart/Block Number)
  	l_MSE_X = mousex()
  	l_MSE_Y = mousey()
  	if l_MSE_X > 51 and l_MSE_X < 262 then l_MSE_In_Chart_ID = 1
  	if l_MSE_X > 421 and l_MSE_X < 632 then l_MSE_In_Chart_ID = 2
  	if l_MSE_X > 744 and l_MSE_X < 954 then l_MSE_In_Chart_ID = 3
  	if l_MSE_X > 1059 and l_MSE_X < 1270 then l_MSE_In_Chart_ID = 4
	
	  
    	`Block 1
      	if l_MSE_In_Chart_ID = 1
          if g_PITS_SCREEN_Block1_DisplayFormat = 3
            `Lower Range Values
            	if mousex() > 52 and mousex() < 107
            	    if mousey() > 46 and mousey() < 67
            	      l_SelectedChannelID = 1
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 78 and mousey() < 129
            	      l_SelectedChannelID = 2
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 170 and mousey() < 191
            	      l_SelectedChannelID = 3
            	      l_SelectedLowerUpper = 1
            	    endif
            	endif
            `Upper Range Values
            	if mousex() > 207 and mousex() < 260
            	    if mousey() > 46 and mousey() < 67
            	      l_SelectedChannelID = 1
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 78 and mousey() < 129
            	      l_SelectedChannelID = 2
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 170 and mousey() < 191
            	      l_SelectedChannelID = 3
            	      l_SelectedLowerUpper = 2
            	    endif
            	endif
          endif  
          `
          if g_PITS_SCREEN_Block1_DisplayFormat = 4
            `Lower Range Values
            	if mousex() > 95 and mousex() < 148
            	    if mousey() > 30 and mousey() < 49
            	      l_SelectedChannelID = 1
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 77 and mousey() < 96
            	      l_SelectedChannelID = 2
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 124 and mousey() < 143
            	      l_SelectedChannelID = 3
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 171 and mousey() < 190
            	      l_SelectedChannelID = 4
            	      l_SelectedLowerUpper = 1
            	    endif
            	endif
            `Upper Range Values
            	if mousex() > 207 and mousex() < 260
            	    if mousey() > 30 and mousey() < 49
            	      l_SelectedChannelID = 1
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 77 and mousey() < 96
            	      l_SelectedChannelID = 2
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 124 and mousey() < 143
            	      l_SelectedChannelID = 3
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 171 and mousey() < 190
            	      l_SelectedChannelID = 4
            	      l_SelectedLowerUpper = 2
            	    endif
            	endif
          endif 
        endif


    	`Block 2
      	if l_MSE_In_Chart_ID = 2
          if g_PITS_SCREEN_Block2_DisplayFormat = 3
            `Lower Range Values
            	if mousex() > 422 and mousex() < 475
            	    if mousey() > 46 and mousey() < 67
            	      l_SelectedChannelID = 5
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 78 and mousey() < 129
            	      l_SelectedChannelID = 6
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 170 and mousey() < 191
            	      l_SelectedChannelID = 7
            	      l_SelectedLowerUpper = 1
            	    endif
            	endif
            `Upper Range Values
            	if mousex() > 577 and mousex() < 630
            	    if mousey() > 46 and mousey() < 67
            	      l_SelectedChannelID = 5
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 78 and mousey() < 129
            	      l_SelectedChannelID = 6
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 170 and mousey() < 191
            	      l_SelectedChannelID = 7
            	      l_SelectedLowerUpper = 2
            	    endif
            	endif
          endif  
          `
          if g_PITS_SCREEN_Block2_DisplayFormat = 4
            `Lower Range Values
            	if mousex() > 465 and mousex() < 518
            	    if mousey() > 30 and mousey() < 49
            	      l_SelectedChannelID = 5
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 77 and mousey() < 96
            	      l_SelectedChannelID = 6
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 124 and mousey() < 143
            	      l_SelectedChannelID = 7
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 171 and mousey() < 190
            	      l_SelectedChannelID = 8
            	      l_SelectedLowerUpper = 1
            	    endif
            	endif
            `Upper Range Values
            	if mousex() > 577 and mousex() < 630
            	    if mousey() > 30 and mousey() < 49
            	      l_SelectedChannelID = 5
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 77 and mousey() < 96
            	      l_SelectedChannelID = 6
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 124 and mousey() < 143
            	      l_SelectedChannelID = 7
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 171 and mousey() < 190
            	      l_SelectedChannelID = 8
            	      l_SelectedLowerUpper = 2
            	    endif
            	endif
          endif 
        endif


     	`Block 3
      	if l_MSE_In_Chart_ID = 3
          if g_PITS_SCREEN_Block3_DisplayFormat = 3
            `Lower Range Values
            	if mousex() > 746 and mousex() < 799
            	    if mousey() > 46 and mousey() < 67
            	      l_SelectedChannelID = 9
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 78 and mousey() < 129
            	      l_SelectedChannelID = 10
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 170 and mousey() < 191
            	      l_SelectedChannelID = 11
            	      l_SelectedLowerUpper = 1
            	    endif
            	endif
            `Upper Range Values
            	if mousex() > 900 and mousex() < 954
            	    if mousey() > 46 and mousey() < 67
            	      l_SelectedChannelID = 9
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 78 and mousey() < 129
            	      l_SelectedChannelID = 10
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 170 and mousey() < 191
            	      l_SelectedChannelID = 11
            	      l_SelectedLowerUpper = 2
            	    endif
            	endif
          endif  
          `
          if g_PITS_SCREEN_Block3_DisplayFormat = 4
            `Lower Range Values
            	if mousex() > 788 and mousex() < 841
            	    if mousey() > 30 and mousey() < 49
            	      l_SelectedChannelID = 9
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 77 and mousey() < 96
            	      l_SelectedChannelID = 10
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 124 and mousey() < 143
            	      l_SelectedChannelID = 11
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 171 and mousey() < 190
            	      l_SelectedChannelID = 12
            	      l_SelectedLowerUpper = 1
            	    endif
            	endif
            `Upper Range Values
            	if mousex() > 900 and mousex() < 953
            	    if mousey() > 30 and mousey() < 49
            	      l_SelectedChannelID = 9
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 77 and mousey() < 96
            	      l_SelectedChannelID = 10
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 124 and mousey() < 143
            	      l_SelectedChannelID = 11
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 171 and mousey() < 190
            	      l_SelectedChannelID = 12
            	      l_SelectedLowerUpper = 2
            	    endif
            	endif
          endif 
        endif

       	`Block 4
      	if l_MSE_In_Chart_ID = 4
          if g_PITS_SCREEN_Block4_DisplayFormat = 3
            `Lower Range Values
            	if mousex() > 1060 and mousex() < 1114
            	    if mousey() > 46 and mousey() < 67
            	      l_SelectedChannelID = 13
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 78 and mousey() < 129
            	      l_SelectedChannelID = 14
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 170 and mousey() < 191
            	      l_SelectedChannelID = 15
            	      l_SelectedLowerUpper = 1
            	    endif
            	endif
            `Upper Range Values
            	if mousex() > 1215 and mousex() < 1269
            	    if mousey() > 46 and mousey() < 67
            	      l_SelectedChannelID = 13
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 78 and mousey() < 129
            	      l_SelectedChannelID = 14
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 170 and mousey() < 191
            	      l_SelectedChannelID = 15
            	      l_SelectedLowerUpper = 2
            	    endif
            	endif
          endif  
          `
          if g_PITS_SCREEN_Block4_DisplayFormat = 4
            `Lower Range Values
            	if mousex() > 1103 and mousex() < 1156
            	    if mousey() > 30 and mousey() < 49
            	      l_SelectedChannelID = 13
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 77 and mousey() < 96
            	      l_SelectedChannelID = 14
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 124 and mousey() < 143
            	      l_SelectedChannelID = 15
            	      l_SelectedLowerUpper = 1
            	    endif
            	    if mousey() > 171 and mousey() < 190
            	      l_SelectedChannelID = 16
            	      l_SelectedLowerUpper = 1
            	    endif
            	endif
            `Upper Range Values
            	if mousex() > 1215 and mousex() < 1268
            	    if mousey() > 30 and mousey() < 49
            	      l_SelectedChannelID = 13
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 77 and mousey() < 96
            	      l_SelectedChannelID = 14
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 124 and mousey() < 143
            	      l_SelectedChannelID = 15
            	      l_SelectedLowerUpper = 2
            	    endif
            	    if mousey() > 171 and mousey() < 190
            	      l_SelectedChannelID = 16
            	      l_SelectedLowerUpper = 2
            	    endif
            	endif
          endif 
        endif

    if l_SelectedChannelID <> -1 and l_SelectedLowerUpper <> -1 and g_CHANNELIDChngChnl_NUMPAD_TIMEBtb_LOCK = -1
      if CHANNEL_ID_ChannelLinkIndex(l_SelectedChannelID + 12) <> -1
        g_PITS_NUMPAD_Selected_ChannelID = l_SelectedChannelID + 12
        g_PITS_NUMPAD_Selected_LowerUpperChnl = l_SelectedLowerUpper
        g_PITS_NUMPAD_DISPLAY_NUMPAD = 1
        `Turn off the chart infobox if it is visible
        if g_PITS_PLOTCHART_display_values_click_toggle = 1
          g_PITS_PLOTCHART_display_values_click_toggle = -1
        endif
      endif  
    endif
    
  endif
  if mouseclick() = 0 and g_PITS_NUMPAD_SelectRange_MouseClick = 1 then g_PITS_NUMPAD_SelectRange_MouseClick = -1


endfunction

function lib_RT_CF2_PITS_CHART_ChkChartContainsPVT(r_ChartNum as integer)

  local p_OUTPUT as integer : p_OUTPUT = -1
  
  Local l_Block1ID as integer
  Local l_Block2ID as integer
  Local l_Block3ID as integer
  
  
  `This function determines whether any channel in the received chart number is displaying the PVT
  `channel, in which case the losses calculator can be displayed in the chart infobox being displayed

  `Block 1
  if r_ChartNum = 1
    l_Block1ID = 10
    l_Block2ID = 11
    l_Block3ID = 12
  endif  

  `Block 2
  if r_ChartNum = 2
    l_Block1ID = 13
    l_Block2ID = 14
    l_Block3ID = 15
  endif 
  
  `Block 3
  if r_ChartNum = 3
    l_Block1ID = 16
    l_Block2ID = 17
    l_Block3ID = 18
  endif 
  
  `Block 4
  if r_ChartNum = 4
    l_Block1ID = 19
    l_Block2ID = 20
    l_Block3ID = 21
  endif     
  
  if CHANNEL_ID_ChannelLinkIndex(l_Block1ID) = 17 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block2ID) = 17 then p_OUTPUT = 1
  if CHANNEL_ID_ChannelLinkIndex(l_Block3ID) = 17 then p_OUTPUT = 1

  


endfunction p_OUTPUT

function _______HISTORICAL_SCREENS_General_Libraries_______________________________tw33lg80kr()
endfunction

function HS_lib_Channel_Selection()


  `Find which information box the user has clicked
  g_HS_RangeSelect_Box = -1
  if mousey() > 590 and mousey() < 710
    `Left Box
    if mousex() > 18 and mousex() < 328
      g_HS_RangeSelect_Box = 1
    endif
    `Middle Left Box
    if mousex() > 357 and mousex() < 667
      g_HS_RangeSelect_Box = 2
    endif
    `Middle Right Box
    if mousex() > 695 and mousex() < 1005
      g_HS_RangeSelect_Box = 3
    endif
    `Right Box
    if mousex() > 1033 and mousex() < 1343
      g_HS_RangeSelect_Box = 4
    endif
  endif
  
  if g_HS_RangeSelect_Box <> -1
    `Now find the channel number from the mousey position
    g_HS_RangeSelect_Channel = -1
    l_prt_y = 600 - c_HS_InfoBox_LineSpacing
    for find_lp = 1 to 5
      inc l_prt_y, c_HS_InfoBox_LineSpacing
      if mousey() > l_prt_y and mousey() < (l_prt_y + c_HS_InfoBox_LineSpacing)
        g_HS_RangeSelect_Channel = find_lp
      endif 
    next find_lp
  endif



endfunction

function HS_lib_NUMPAD_Set_Range_Value(r_RANGEEDIT_IncomingValue$)

  local l_arr_pos as integer
  
 ` g_HS_RangeSelect_Box
 ` g_HS_RangeSelect_Channel
 ` g_HS_RangeSelect_UpperLower
 
  if g_HS_RangeSelect_Box = 1
    l_arr_pos = (g_HS_RangeSelect_Channel * 2) - 1 + (g_HS_RangeSelect_UpperLower - 1)
  endif
  
  if g_HS_RangeSelect_Box = 2
    l_arr_pos = (g_HS_RangeSelect_Channel * 2) + 9 + (g_HS_RangeSelect_UpperLower - 1)
  endif
  
  if g_HS_RangeSelect_Box = 3
    l_arr_pos = (g_HS_RangeSelect_Channel * 2) + 19 + (g_HS_RangeSelect_UpperLower - 1)
  endif
  
  if g_HS_RangeSelect_Box = 4
    l_arr_pos = (g_HS_RangeSelect_Channel * 2) + 29 + (g_HS_RangeSelect_UpperLower - 1)
  endif

  HS_Chart_Range_Values#(l_arr_pos) = val(r_RANGEEDIT_IncomingValue$)

  SAVE_HS_CHART_Ranges_Data()

endfunction

function HS_INPUT_Universal_Mouse()

  local l_text_XPos as integer
  local l_arr_pos1 as integer
  local l_arr_pos2 as integer
  local l_decimals1 as integer
  local l_decimals2 as integer
  local l_RangesBuild$ as string
  local l_conditions_passed as integer
  local l_char_pixel as integer

  `HS - Show the Channel Data in the box on the main chart plot
  	if mouseclick() = 1 and mouse_click(1) = -1 and g_COLOURMAP_Toggle = -1
    	if mousex() > g_HS_CHARTBOX_Screen_Left and mousex() < g_HS_CHARTBOX_Screen_Right
      	if mousey() > g_HS_CHARTBOX_Screen_Top and mousey() < g_HS_CHARTBOX_Screen_Bottom
        	mouse_click(1) = 1
        	if g_HS_Display_Chart_Values_click_toggle = -1
          	g_HS_Display_Chart_Values_click_toggle = 1
        	else
          	g_HS_Display_Chart_Values_click_toggle = -1
        	endif
      	endif  
    	endif
  	endif
  `If the colour chart is active then stop viewing data
  	if g_COLOURMAP_Toggle = 1 and g_HS_Display_Chart_Values_click_toggle = 1
    	g_HS_Display_Chart_Values_click_toggle = -1
  	endif

  `HS MouseZ Scroll Charts
  	if g_COLOURMAP_Toggle = -1
    	if mousez() > g_CHART_Scroll_MouseZ
      	g_CHART_Scroll_MouseZ = mousez()
      	g_HS_Chart_Update_Start_Array = 1
      	dec g_HS_CHART_Scroll_Array_Offset, (c_CHART_Scroll_Key_Speed * g_HS_ChartScroll_MseSpeed_Multiplier)
      	if g_HS_CHART_Scroll_Array_Offset < 0
        	g_HS_CHART_Scroll_Array_Offset = 0
      	endif
      	if g_ENGINE_CoreFunctionType = 1
        	CF1_HS_PLOT_CHART_CF1_Create_Image()
      	endif
      	if g_ENGINE_CoreFunctionType = 2
        	CF2_HS_PLOT_CHART_CF2_Create_Image()
      	endif
    	endif
    	if mousez() < g_CHART_Scroll_MouseZ
      	g_CHART_Scroll_MouseZ = mousez()
      	g_HS_Chart_Update_Start_Array = 1
      	inc g_HS_CHART_Scroll_Array_Offset, (c_CHART_Scroll_Key_Speed * g_HS_ChartScroll_MseSpeed_Multiplier)
      	if g_ENGINE_CoreFunctionType = 1
        	if g_HS_CHART_Scroll_Array_Offset > c_SMod_RTDis_DB_TtlRecs 
          	g_HS_CHART_Scroll_Array_Offset = c_SMod_RTDis_DB_TtlRecs 
          	`- (g_HS_CHARTBOX_Ttl_Width * g_ENGINE_HS_Chart_Time_Period_Adjust))
        	endif
        	CF1_HS_PLOT_CHART_CF1_Create_Image()
      	endif
      	if g_ENGINE_CoreFunctionType = 2
        	CF2_HS_PLOT_CHART_CF2_Create_Image()
      	endif
     	endif
    	if g_HS_CHART_Scroll_Array_Offset > 2147400000
      	g_HS_CHART_Scroll_Array_Offset = 0
    	endif
    	if g_HS_CHART_Scroll_Array_Offset < 0
      	g_HS_CHART_Scroll_Array_Offset = 0
    	endif
  	endif

  `HS Time Period Buttons
  	if mouseclick() = 1 and mouse_click(1) = -1 and g_COLOURMAP_Toggle = -1
    	`if g_HS_MAGNIFYER_Toggle = -1
      	if mousex() > 11 and mousex() < 62
        	if mousey() > 13 and mousey() < 50 : `1hr
          	mouse_click(1) = 1
          	g_HS_TimePeriod_Buttons = 1
          	g_ENGINE_HS_Chart_Time_Period_Adjust = 1
          	g_HS_ChartScroll_MseSpeed_Multiplier = g_HS_MouseScrollMultiplier_1Hour
          	if g_ENGINE_CoreFunctionType = 1
            	CF1_HS_PLOT_CHART_CF1_Create_Image()
          	endif
          	if g_ENGINE_CoreFunctionType = 2
            	CF2_HS_PLOT_CHART_CF2_Create_Image()
          	endif
        	endif
        	if mousey() > 60 and mousey() < 97 : `4hr
          	mouse_click(1) = 1
          	g_HS_TimePeriod_Buttons = 2
          	g_ENGINE_HS_Chart_Time_Period_Adjust = 4
          	g_HS_ChartScroll_MseSpeed_Multiplier = g_HS_MouseScrollMultiplier_4Hour
          	if g_ENGINE_CoreFunctionType = 1
            	CF1_HS_PLOT_CHART_CF1_Create_Image()
          	endif
          	if g_ENGINE_CoreFunctionType = 2
            	CF2_HS_PLOT_CHART_CF2_Create_Image()
          	endif
        	endif
        	if mousey() > 107 and mousey() < 144 : `8hr
          	mouse_click(1) = 1
          	g_HS_TimePeriod_Buttons = 3
          	g_ENGINE_HS_Chart_Time_Period_Adjust = 8
          	g_HS_ChartScroll_MseSpeed_Multiplier = g_HS_MouseScrollMultiplier_8Hour
          	if g_ENGINE_CoreFunctionType = 1
            	CF1_HS_PLOT_CHART_CF1_Create_Image()
          	endif
          	if g_ENGINE_CoreFunctionType = 2
            	CF2_HS_PLOT_CHART_CF2_Create_Image()
          	endif
        	endif
        	if mousey() > 154 and mousey() < 191 : `12hr
          	mouse_click(1) = 1
          	g_HS_TimePeriod_Buttons = 4
          	g_ENGINE_HS_Chart_Time_Period_Adjust = 12
          	g_HS_ChartScroll_MseSpeed_Multiplier = g_HS_MouseScrollMultiplier_12Hour
          	if g_ENGINE_CoreFunctionType = 1
            	CF1_HS_PLOT_CHART_CF1_Create_Image()
          	endif
          	if g_ENGINE_CoreFunctionType = 2
            	CF2_HS_PLOT_CHART_CF2_Create_Image()
          	endif
        	endif
      	endif
  	endif
  
  `Tick Box Mouse Clicks
  	if mouseclick() = 1 and mouse_click(1) = -1
    	for check_lp = 1 to 20
      	if sprite collision(c_HS_SPRITE_TickBoxs_StartNum + check_lp, 2) = 1
        	mouse_click(1) = 1
        	if HS_TickBox_States(check_lp) = -1
          	HS_TickBox_States(check_lp) = 1
        	else
          	HS_TickBox_States(check_lp) = -1
        	endif 
          	if g_ENGINE_CoreFunctionType = 1
            	CF1_HS_PLOT_CHART_CF1_Create_Image()
          	endif
          	if g_ENGINE_CoreFunctionType = 2
            	CF2_HS_PLOT_CHART_CF2_Create_Image()
          	endif
        	SAVE_HS_ChannelStates()
      	endif
    	next check_lp
  	endif
  
  `Colour Box Mouse Clicks
  	if mouseclick() = 1 and mouse_click(1) = -1
    	for check_lp = 1 to 20
      	if sprite collision(c_HS_SPRITE_COLOURBoxs_StartNum + check_lp, 2) = 1
        	mouse_click(1) = 1
        	g_COLOURMAP_Toggle = 1
        	g_COLOURPAD_HS_ArrayNum = check_lp
        	g_COLOURPAD_Set_Start_Colour = 1
      	endif
    	next check_lp
  	endif
  
  `HS - Zero chart position button
  	if mouseclick() = 1 and mouse_click(1) = -1
    	if mousey() > 118 and mousey() < 139
      	if g_ENGINE_Screen_Resolution = 1
        	if mousex() > 1327 and mousex() < 1357
          	mouse_click(1) = 1
          	g_HS_CHART_Scroll_Array_Offset = 0
          	g_HS_Chart_Update_Start_Array = 1
          	g_HS_ChartButton_TimeZero_Timer = timer() + 250
          	if g_ENGINE_CoreFunctionType = 1
            	CF1_HS_PLOT_CHART_CF1_Create_Image()
          	endif
          	if g_ENGINE_CoreFunctionType = 2
            	CF2_HS_PLOT_CHART_CF2_Create_Image()
          	endif
        	endif
      	else
        	if mousex() > 988 and mousex() < 1018
          	mouse_click(1) = 1
          	g_HS_CHART_Scroll_Array_Offset = 0
          	g_HS_Chart_Update_Start_Array = 1
          	g_HS_ChartButton_TimeZero_Timer = timer() + 250
          	if g_ENGINE_CoreFunctionType = 1
            	CF1_HS_PLOT_CHART_CF1_Create_Image()
          	endif
          	if g_ENGINE_CoreFunctionType = 2
            	CF2_HS_PLOT_CHART_CF2_Create_Image()
          	endif
        	endif
      	endif
    	endif
  	endif
  
  `[SPACE BAR] - HS Zero Time Button
  	if scancode() = 57 and g_CMNTSYS_AddNewCmnt_Stage = -1
    	g_HS_CHART_Scroll_Array_Offset = 0
    	g_HS_Chart_Update_Start_Array = 1
    	g_HS_ChartButton_TimeZero_Timer = timer() + 250
    	if g_ENGINE_CoreFunctionType = 1
      	CF1_HS_PLOT_CHART_CF1_Create_Image()
    	endif
    	if g_ENGINE_CoreFunctionType = 2
      	CF2_HS_PLOT_CHART_CF2_Create_Image()
    	endif
  	endif
  
  `Refresh Screen Button
  	if mouseclick() = 1 and mouse_click(1) = -1
    	if mousey() > 508 and mousey() < 542
      	if g_ENGINE_Screen_Resolution = 1
        	if mousex() > 1214 and mousex() < 1328
          	mouse_click(1) = 1
          	g_HS_Chart_Update_Start_Array = 1
          	g_HS_Refresh_Light_TimTog = timer() + 200
          	if g_ENGINE_CoreFunctionType = 1
            	lib_HS_Format_CF1HS_DisplayArray()
            	CF1_HS_PLOT_CHART_CF1_Create_Image()
          	endif
          	if g_ENGINE_CoreFunctionType = 2
            	CF2_HS_PLOT_CHART_CF2_Create_Image()
          	endif
        	endif
      	else
        	if mousex() > 872 and mousex() < 986
          	mouse_click(1) = 1
          	g_HS_Chart_Update_Start_Array = 1
          	g_HS_Refresh_Light_TimTog = timer() + 200
          	if g_ENGINE_CoreFunctionType = 1
            	lib_HS_Format_CF1HS_DisplayArray()
            	CF1_HS_PLOT_CHART_CF1_Create_Image()
          	endif
          	if g_ENGINE_CoreFunctionType = 2
            	CF2_HS_PLOT_CHART_CF2_Create_Image()
          	endif
        	endif
      	endif
    	endif
  	endif
   
  `Drilling Template Button
  	if mouseclick() = 1 and mouse_click(1) = -1
    	if mousex() > 15 and mousex() < 135
      	if mousey() > 522 and mousey() < 563
        	mouse_click(1) = 1
        	g_HS_DrillTemplate_Light_TimTog = timer() + 200
        	`Block 1
        	HS_TickBox_States(1) = 1
        	HS_TickBox_States(2) = -1
        	HS_TickBox_States(3) = 1
        	HS_TickBox_States(4) = 1
        	HS_TickBox_States(5) = 1
        	`Block 2
        	HS_TickBox_States(6) = 1
        	HS_TickBox_States(7) = -1
        	HS_TickBox_States(8) = 1
        	HS_TickBox_States(9) = 1
        	HS_TickBox_States(10) = 1
        	`Block 3
        	HS_TickBox_States(11) = 1
        	HS_TickBox_States(12) = -1
        	HS_TickBox_States(13) = -1
        	HS_TickBox_States(14) = -1
        	HS_TickBox_States(15) = -1
        	`Block 4
        	HS_TickBox_States(16) = -1
        	HS_TickBox_States(17) = -1
        	HS_TickBox_States(18) = -1
        	HS_TickBox_States(19) = -1
        	HS_TickBox_States(20) = -1
        	if g_ENGINE_CoreFunctionType = 1
          	CF1_HS_PLOT_CHART_CF1_Create_Image()
        	endif
        	if g_ENGINE_CoreFunctionType = 2
          	CF2_HS_PLOT_CHART_CF2_Create_Image()
        	endif
        	SAVE_HS_ChannelStates() 
      	endif
    	endif
  	endif
  
  `Tripping Template Button
  	if mouseclick() = 1 and mouse_click(1) = -1
    	if mousex() > 138 and mousex() < 258
      	if mousey() > 522 and mousey() < 563
        	mouse_click(1) = 1
        	g_HS_TripTemplate_Light_TimTog = timer() + 200
        	`Block 1
        	HS_TickBox_States(1) = -1
        	HS_TickBox_States(2) = 1
        	HS_TickBox_States(3) = -1
        	HS_TickBox_States(4) = -1
        	HS_TickBox_States(5) = 1
        	`Block 2
        	HS_TickBox_States(6) = -1
        	HS_TickBox_States(7) = 1
        	HS_TickBox_States(8) = 1
        	HS_TickBox_States(9) = 1
        	HS_TickBox_States(10) = 1
        	`Block 3
        	HS_TickBox_States(11) = 1
        	HS_TickBox_States(12) = -1
        	HS_TickBox_States(13) = -1
        	HS_TickBox_States(14) = -1
        	HS_TickBox_States(15) = -1
        	`Block 4
        	HS_TickBox_States(16) = -1
        	HS_TickBox_States(17) = -1
        	HS_TickBox_States(18) = -1
        	HS_TickBox_States(19) = -1
        	HS_TickBox_States(20) = -1
        	if g_ENGINE_CoreFunctionType = 1
          	CF1_HS_PLOT_CHART_CF1_Create_Image()
        	endif
        	if g_ENGINE_CoreFunctionType = 2
          	CF2_HS_PLOT_CHART_CF2_Create_Image()
        	endif
        	SAVE_HS_ChannelStates() 
      	endif
    	endif
  	endif
  
  
  
  
  
  
  `HS - HI/LO CHANNEL RANGES - Select a range value to edit (based on box and channel numbers)
  	if mouseclick() = 1 and mouse_click(1) = -1
    	if mousey() > 590 and mousey() < 710
      	`Find whether the user has clicked the upper or lower range portion of the string
      	if g_HS_RangeSelect_Box = 1
        	if g_HS_RangeSelect_Channel <> -1
          	l_text_XPos = c_HS_Box1_LeftX + c_HS_BoxLeft_To_RangeTextX
          	l_arr_pos1 = g_HS_RangeSelect_Channel + (g_HS_RangeSelect_Channel - 1)
          	l_arr_pos2 = g_HS_RangeSelect_Channel * 2
          	
          	l_decimals1 = 0
          	for check_lp = 1 to len(str$(HS_Chart_Range_Values#(l_arr_pos1)))
            	if mid$(str$(HS_Chart_Range_Values#(l_arr_pos1)), check_lp) = "." then l_decimals1 = 1
          	next check_lp
          	l_decimals2 = 0
          	for check_lp = 1 to len(str$(HS_Chart_Range_Values#(l_arr_pos2)))
            	if mid$(str$(HS_Chart_Range_Values#(l_arr_pos2)), check_lp) = "." then l_decimals2 = 1
          	next check_lp
          	
          	l_RangesBuild$ = str$(HS_Chart_Range_Values#(l_arr_pos1), l_decimals1) + " / " + str$(HS_Chart_Range_Values#(l_arr_pos2), l_decimals2)
          	if mousex() > l_text_XPos and mousex() < text width(l_RangesBuild$) + c_HS_Box1_LeftX + c_HS_BoxLeft_To_RangeTextX - 15
            	l_conditions_passed = 1
            	mouse_click(1) = 1
          	endif
        	endif
      	endif
      	if g_HS_RangeSelect_Box = 2
        	if g_HS_RangeSelect_Channel <> -1
          	l_text_XPos = c_HS_Box2_LeftX + c_HS_BoxLeft_To_RangeTextX
          	l_arr_pos1 = (g_HS_RangeSelect_Channel + (g_HS_RangeSelect_Channel - 1) + 10)
          	l_arr_pos2 = (g_HS_RangeSelect_Channel + g_HS_RangeSelect_Channel + 10)
          	
          	l_decimals1 = 0
          	for check_lp = 1 to len(str$(HS_Chart_Range_Values#(l_arr_pos1)))
            	if mid$(str$(HS_Chart_Range_Values#(l_arr_pos1)), check_lp) = "." then l_decimals1 = 1
          	next check_lp
          	l_decimals2 = 0
          	for check_lp = 1 to len(str$(HS_Chart_Range_Values#(l_arr_pos2)))
            	if mid$(str$(HS_Chart_Range_Values#(l_arr_pos2)), check_lp) = "." then l_decimals2 = 1
          	next check_lp
          	
          	l_RangesBuild$ = str$(HS_Chart_Range_Values#(l_arr_pos1), l_decimals1) + " / " + str$(HS_Chart_Range_Values#(l_arr_pos2), l_decimals2)
          	if mousex() > l_text_XPos and mousex() < text width(l_RangesBuild$) + c_HS_Box2_LeftX + c_HS_BoxLeft_To_RangeTextX - 15
            	l_conditions_passed = 1
            	mouse_click(1) = 1
          	endif
        	endif
      	endif
      	if g_HS_RangeSelect_Box = 3
        	if g_HS_RangeSelect_Channel <> -1
          	l_text_XPos = c_HS_Box3_LeftX + c_HS_BoxLeft_To_RangeTextX
          	l_arr_pos1 = (g_HS_RangeSelect_Channel + (g_HS_RangeSelect_Channel - 1) + 20)
          	l_arr_pos2 = (g_HS_RangeSelect_Channel + g_HS_RangeSelect_Channel + 20)
          	
          	l_decimals1 = 0
          	for check_lp = 1 to len(str$(HS_Chart_Range_Values#(l_arr_pos1)))
            	if mid$(str$(HS_Chart_Range_Values#(l_arr_pos1)), check_lp) = "." then l_decimals1 = 1
          	next check_lp
          	l_decimals2 = 0
          	for check_lp = 1 to len(str$(HS_Chart_Range_Values#(l_arr_pos2)))
            	if mid$(str$(HS_Chart_Range_Values#(l_arr_pos2)), check_lp) = "." then l_decimals2 = 1
          	next check_lp
          	
          	l_RangesBuild$ = str$(HS_Chart_Range_Values#(l_arr_pos1), l_decimals1) + " / " + str$(HS_Chart_Range_Values#(l_arr_pos2), l_decimals2)
          	if mousex() > l_text_XPos and mousex() < text width(l_RangesBuild$) + c_HS_Box3_LeftX + c_HS_BoxLeft_To_RangeTextX - 15
            	l_conditions_passed = 1
            	mouse_click(1) = 1
          	endif
        	endif
      	endif
      	if g_HS_RangeSelect_Box = 4
        	if g_HS_RangeSelect_Channel <> -1
          	l_text_XPos = c_HS_Box4_LeftX + c_HS_BoxLeft_To_RangeTextX
          	l_arr_pos1 = (g_HS_RangeSelect_Channel + (g_HS_RangeSelect_Channel - 1) + 30)
          	l_arr_pos2 = (g_HS_RangeSelect_Channel + g_HS_RangeSelect_Channel + 30)
          	
          	l_decimals1 = 0
          	for check_lp = 1 to len(str$(HS_Chart_Range_Values#(l_arr_pos1)))
            	if mid$(str$(HS_Chart_Range_Values#(l_arr_pos1)), check_lp) = "." then l_decimals1 = 1
          	next check_lp
          	l_decimals2 = 0
          	for check_lp = 1 to len(str$(HS_Chart_Range_Values#(l_arr_pos2)))
            	if mid$(str$(HS_Chart_Range_Values#(l_arr_pos2)), check_lp) = "." then l_decimals2 = 1
          	next check_lp
          	
          	l_RangesBuild$ = str$(HS_Chart_Range_Values#(l_arr_pos1), l_decimals1) + " / " + str$(HS_Chart_Range_Values#(l_arr_pos2), l_decimals2)
          	
          	`if mousex() > l_text_XPos and mousex() < text width(l_RangesBuild$) + c_HS_Box4_LeftX + c_HS_BoxLeft_To_RangeTextX - 15
          	`l_WidthVal = d3d_gettextwidth(2, l_RangesBuild$) + 8 + c_HS_Box4_LeftX + c_HS_BoxLeft_To_RangeTextX - 15
          	`NOTE: d3d_gettextwidth doesn't count spaces so we add 4 for each space in l_RangesBuild$; i.e 8
          	
          	if mousex() > l_text_XPos and mousex() < text width(l_RangesBuild$) + c_HS_Box4_LeftX + c_HS_BoxLeft_To_RangeTextX - 15
          	`if mousex() > l_text_XPos and mousex() < l_WidthVal
            	l_conditions_passed = 1
            	mouse_click(1) = 1
          	endif
	
        	endif
      	endif
      	
      
	
      	g_HS_RangeSelect_UpperLower = -1
      	if l_conditions_passed = 1
      	  `TOGGLE HS INPUTBOX ON
        	for get_char_lp = 1 to len(l_RangesBuild$)
          	if mid$(l_RangesBuild$, get_char_lp) = "/"
            	l_char_pixel = text width(left$(l_RangesBuild$, get_char_lp-2))
            	if mousex() < l_text_XPos + l_char_pixel
              	g_HS_RangeSelect_UpperLower = 1
              	mouse_click(1) = 1
              	g_HS_NUMPAD_Toggle = 1
              	g_NUMPAD_BuildValue_Final$ = ""
              	g_NUMPAD_BuildValue$ = ""
            	else
              	g_HS_RangeSelect_UpperLower = 2
              	mouse_click(1) = 1
              	g_HS_NUMPAD_Toggle = 1
              	g_NUMPAD_BuildValue_Final$ = ""
              	g_NUMPAD_BuildValue$ = ""
            	endif
          	endif
        	next get_char_lp
      	endif
    	endif
  	endif
  
  
//   `Turn these on to see some of the HS channel range variables (need to click on hi/low to populate all) 
//   d3d_starttext
//     d3d_text 1, 10 , 350, 0, str$(g_HS_RangeSelect_Box), g_ENGINE_COLOUR_Black
//     d3d_text 1, 10 , 370, 0, str$(g_HS_RangeSelect_Channel), g_ENGINE_COLOUR_Black
//     d3d_text 1, 10 , 390, 0, l_RangesBuild$, g_ENGINE_COLOUR_Black
//     d3d_text 1, 10 , 410, 0, str$(l_WidthVal), g_ENGINE_COLOUR_Black
//     d3d_text 1, 10 , 430, 0, "A", g_ENGINE_COLOUR_Black
//   d3d_endtext
  
  
  
  
  

endfunction



function lib_HS_Display_Text()

  local l_prt_x as integer
  local l_prt_y as integer
  local l_decimals1 as integer
  local l_decimals2 as integer
  local l_RangesBuild$ as string
  local offset1 as integer

  d3d_starttext

    `DISPLAY CHANNEL NAMES AND RANGES IN BOX's
      `Left Box Channel Name and Ranges
      l_prt_x = c_HS_Box1_LeftX + c_HS_BoxLeft_To_ChnlNameTextX : l_prt_y = 600 - c_HS_InfoBox_LineSpacing
      for print_lp = 1 to 5
        inc l_prt_y, c_HS_InfoBox_LineSpacing
        
        `Print Channel Name
        d3d_text 2, l_prt_x, l_prt_y, 0, HS_Channel_Names$(print_lp), HS_Channel_Colour(print_lp)
        
        `Print Channel Units
        d3d_text 10, c_HS_Box1_LeftX + c_HS_BoxLeft_To_UnitNameTextX, l_prt_y, 0, "(" + HS_Channel_Units$(print_lp) + ")", HS_Channel_Colour(print_lp)
        
        `Print Channel Ranges
        offset1 = (print_lp * 2) - 1
        l_decimals1 = 0
        for check_lp = 1 to len(str$(HS_Chart_Range_Values#(offset1)))
          if mid$(str$(HS_Chart_Range_Values#(offset1)), check_lp) = "." then l_decimals1 = 1
        next check_lp
        l_decimals2 = 0
        for check_lp = 1 to len(str$(HS_Chart_Range_Values#(offset1 + 1)))
          if mid$(str$(HS_Chart_Range_Values#(offset1 + 1)), check_lp) = "." then l_decimals2 = 1
        next check_lp
        
        l_RangesBuild$ = str$(HS_Chart_Range_Values#(offset1), l_decimals1) + " / " + str$(HS_Chart_Range_Values#(offset1 + 1), l_decimals2)
        if g_HS_RangeSelect_Box = 1 and mousex() > c_HS_Box1_LeftX + c_HS_BoxLeft_To_RangeTextX and g_HS_RangeSelect_Channel = print_lp and mousex() < text width(l_RangesBuild$) + c_HS_Box1_LeftX + c_HS_BoxLeft_To_RangeTextX - 15
          d3d_text 9, c_HS_Box1_LeftX + c_HS_BoxLeft_To_RangeTextX, l_prt_y, 0, l_RangesBuild$, HS_Channel_Colour(print_lp)
        else
          d3d_text 2, c_HS_Box1_LeftX + c_HS_BoxLeft_To_RangeTextX, l_prt_y, 0, l_RangesBuild$, HS_Channel_Colour(print_lp)
        endif
        
      next print_lp
      
      `Middle Left Box Channel Name and Ranges
      l_prt_x = c_HS_Box2_LeftX + c_HS_BoxLeft_To_ChnlNameTextX : l_prt_y = 600 - c_HS_InfoBox_LineSpacing
      for print_lp = 1 to 5
        inc l_prt_y, c_HS_InfoBox_LineSpacing
        
        `Print Channel Name
        d3d_text 2, l_prt_x, l_prt_y, 0, HS_Channel_Names$(print_lp + 5), HS_Channel_Colour(print_lp + 5)
        
        `Print Channel Units
        d3d_text 10, c_HS_Box2_LeftX + c_HS_BoxLeft_To_UnitNameTextX, l_prt_y, 0, "(" + HS_Channel_Units$(print_lp + 5) + ")", HS_Channel_Colour(print_lp)
                
        `Print Channel Ranges
        offset1 = (print_lp * 2) + 9
        
        l_decimals1 = 0
        for check_lp = 1 to len(str$(HS_Chart_Range_Values#(offset1)))
          if mid$(str$(HS_Chart_Range_Values#(offset1)), check_lp) = "." then l_decimals1 = 1
        next check_lp
        l_decimals2 = 0
        for check_lp = 1 to len(str$(HS_Chart_Range_Values#(offset1 + 1)))
          if mid$(str$(HS_Chart_Range_Values#(offset1 + 1)), check_lp) = "." then l_decimals2 = 1
        next check_lp
        
        l_RangesBuild$ = str$(HS_Chart_Range_Values#(offset1), l_decimals1) + " / " + str$(HS_Chart_Range_Values#(offset1 + 1), l_decimals2)
        if g_HS_RangeSelect_Box = 2 and mousex() > c_HS_Box2_LeftX + c_HS_BoxLeft_To_RangeTextX and g_HS_RangeSelect_Channel = print_lp and mousex() < text width(l_RangesBuild$) + c_HS_Box2_LeftX + c_HS_BoxLeft_To_RangeTextX - 15
          d3d_text 9, c_HS_Box2_LeftX + c_HS_BoxLeft_To_RangeTextX, l_prt_y, 0, l_RangesBuild$, HS_Channel_Colour(print_lp + 5)
        else
          d3d_text 2, c_HS_Box2_LeftX + c_HS_BoxLeft_To_RangeTextX, l_prt_y, 0, l_RangesBuild$, HS_Channel_Colour(print_lp + 5)
        endif
      next print_lp
      
      `Middle Right Box Channel Name and Ranges
      l_prt_x = c_HS_Box3_LeftX + c_HS_BoxLeft_To_ChnlNameTextX : l_prt_y = 600 - c_HS_InfoBox_LineSpacing
      for print_lp = 1 to 5
        inc l_prt_y, c_HS_InfoBox_LineSpacing
        
        `Print Channel Name
        d3d_text 2, l_prt_x, l_prt_y, 0, HS_Channel_Names$(print_lp + 10), HS_Channel_Colour(print_lp + 10)
        
        `Print Channel Units
        d3d_text 10, c_HS_Box3_LeftX + c_HS_BoxLeft_To_UnitNameTextX, l_prt_y, 0, "(" + HS_Channel_Units$(print_lp + 10) + ")", HS_Channel_Colour(print_lp)
        
        `Print Channel Ranges
        offset1 = (print_lp * 2) + 19
        
        l_decimals1 = 0
        for check_lp = 1 to len(str$(HS_Chart_Range_Values#(offset1)))
          if mid$(str$(HS_Chart_Range_Values#(offset1)), check_lp) = "." then l_decimals1 = 1
        next check_lp
        l_decimals2 = 0
        for check_lp = 1 to len(str$(HS_Chart_Range_Values#(offset1 + 1)))
          if mid$(str$(HS_Chart_Range_Values#(offset1 + 1)), check_lp) = "." then l_decimals2 = 1
        next check_lp
        
        l_RangesBuild$ = str$(HS_Chart_Range_Values#(offset1), l_decimals1) + " / " + str$(HS_Chart_Range_Values#(offset1 + 1), l_decimals2)
        if g_HS_RangeSelect_Box = 3 and mousex() > c_HS_Box3_LeftX + c_HS_BoxLeft_To_RangeTextX and g_HS_RangeSelect_Channel = print_lp and mousex() < text width(l_RangesBuild$) + c_HS_Box3_LeftX + c_HS_BoxLeft_To_RangeTextX - 15
          d3d_text 9, c_HS_Box3_LeftX + c_HS_BoxLeft_To_RangeTextX, l_prt_y, 0, l_RangesBuild$, HS_Channel_Colour(print_lp + 10)
        else
          d3d_text 2, c_HS_Box3_LeftX + c_HS_BoxLeft_To_RangeTextX, l_prt_y, 0, l_RangesBuild$, HS_Channel_Colour(print_lp + 10)
        endif
      next print_lp
      
      `Right Box Channel Name and Ranges
      l_prt_x = c_HS_Box4_LeftX + c_HS_BoxLeft_To_ChnlNameTextX : l_prt_y = 600 - c_HS_InfoBox_LineSpacing
      for print_lp = 1 to 5
        inc l_prt_y, c_HS_InfoBox_LineSpacing
        
        `Print Channel Name
        d3d_text 2, l_prt_x, l_prt_y, 0, HS_Channel_Names$(print_lp + 15), HS_Channel_Colour(print_lp + 15)
        
        `Print Channel Units
        d3d_text 10, c_HS_Box4_LeftX + c_HS_BoxLeft_To_UnitNameTextX, l_prt_y, 0, "(" + HS_Channel_Units$(print_lp + 15) + ")", HS_Channel_Colour(print_lp)
        
        `Print Channel Ranges
        offset1 = (print_lp * 2) + 29
        
        l_decimals1 = 0
        for check_lp = 1 to len(str$(HS_Chart_Range_Values#(offset1)))
          if mid$(str$(HS_Chart_Range_Values#(offset1)), check_lp) = "." then l_decimals1 = 1
        next check_lp
        l_decimals2 = 0
        for check_lp = 1 to len(str$(HS_Chart_Range_Values#(offset1 + 1)))
          if mid$(str$(HS_Chart_Range_Values#(offset1 + 1)), check_lp) = "." then l_decimals2 = 1
        next check_lp
        
        l_RangesBuild$ = str$(HS_Chart_Range_Values#(offset1), l_decimals1) + " / " + str$(HS_Chart_Range_Values#(offset1 + 1), l_decimals2)
        if g_HS_RangeSelect_Box = 4 and mousex() > c_HS_Box4_LeftX + c_HS_BoxLeft_To_RangeTextX and g_HS_RangeSelect_Channel = print_lp and mousex() < text width(l_RangesBuild$) + c_HS_Box4_LeftX + c_HS_BoxLeft_To_RangeTextX - 15
          d3d_text 9, c_HS_Box4_LeftX + c_HS_BoxLeft_To_RangeTextX, l_prt_y, 0, l_RangesBuild$, HS_Channel_Colour(print_lp + 15)
        else
          d3d_text 2, c_HS_Box4_LeftX + c_HS_BoxLeft_To_RangeTextX, l_prt_y, 0, l_RangesBuild$, HS_Channel_Colour(print_lp + 15)
        endif
      next print_lp
  

    `Display the hole depth
    `d3d_color 0, 255, 0, 255 : `Hole and Bit Depth
    d3d_text 5, g_DISPLAY_HOLE_DEPTH_x, g_DISPLAY_HOLE_DEPTH_y, 1, str$(g_COMMPORT_Receive_HoleDepth#, 1), g_ENGINE_COLOUR_Green
    
    
  d3d_endtext

endfunction










function lib_HS_PLOT_CHART_Format_Line(r_Y_POS_A, r_Y_POS_B, r_PIX_LOOP, r_DataA_Val# as float, r_DataB_Val# as float, r_UPP_Rng_Val# as float, r_LOW_Rng_Val# as float, r_ColorArr as integer)
  
  `Within the range
  
  `If Positions A and B are within both ranges
  if r_DataA_Val# > r_LOW_Rng_Val# and r_DataA_Val# < r_UPP_Rng_Val#
    if r_DataB_Val# > r_LOW_Rng_Val# and r_DataB_Val# < r_UPP_Rng_Val#
      lib_HS_PLOT_CHART_Draw_Line(r_Y_POS_A, r_Y_POS_B, g_HS_CHARTBOX_Ttl_Width - r_PIX_LOOP, HS_Channel_Colour(r_ColorArr))
    endif
  endif
  
  `Upper Ranges
  
  `If Positions A is above the top range and B is within range
  if r_DataA_Val# > r_UPP_Rng_Val#
    if r_DataB_Val# > r_LOW_Rng_Val# and r_DataB_Val# < r_UPP_Rng_Val#
      lib_HS_PLOT_CHART_Draw_Line(c_N_HS_CHARTBOX_BMP_Top_Y, r_Y_POS_B, g_HS_CHARTBOX_Ttl_Width - r_PIX_LOOP, HS_Channel_Colour(r_ColorArr))
    endif
  endif
  
  `If Position B is above the top range and A is within range
  if r_DataB_Val# > r_UPP_Rng_Val#
    if r_DataA_Val# > r_LOW_Rng_Val# and r_DataA_Val# < r_UPP_Rng_Val#
      lib_HS_PLOT_CHART_Draw_Line(r_Y_POS_A, c_N_HS_CHARTBOX_BMP_Top_Y, g_HS_CHARTBOX_Ttl_Width - r_PIX_LOOP, HS_Channel_Colour(r_ColorArr))
    endif
  endif
  
  `Lower Ranges
  
  `If B is within the ranges and A is below the bottom range
  if r_DataA_Val# < r_LOW_Rng_Val#
    if r_DataB_Val# > r_LOW_Rng_Val# and r_DataB_Val# < r_UPP_Rng_Val#
      lib_HS_PLOT_CHART_Draw_Line(c_N_HS_CHARTBOX_BMP_Bottom_Y, r_Y_POS_B, g_HS_CHARTBOX_Ttl_Width - r_PIX_LOOP, HS_Channel_Colour(r_ColorArr))
    endif
  endif         
  
  `If A is within the ranges and B is below the bottom range
  if r_DataB_Val# < r_LOW_Rng_Val#
    if r_DataA_Val# > r_LOW_Rng_Val# and r_DataA_Val# < r_UPP_Rng_Val#
      lib_HS_PLOT_CHART_Draw_Line(r_Y_POS_A, c_N_HS_CHARTBOX_BMP_Bottom_Y, g_HS_CHARTBOX_Ttl_Width - r_PIX_LOOP, HS_Channel_Colour(r_ColorArr))
    endif
  endif
  
  `If either A or B = 0
  if r_DataA_Val# = 0 and r_DataB_Val# <> 0
    if r_LOW_Rng_Val# = 0
      if r_DataB_Val# < r_UPP_Rng_Val#
        lib_HS_PLOT_CHART_Draw_Line(c_N_HS_CHARTBOX_BMP_Bottom_Y, r_Y_POS_B, g_HS_CHARTBOX_Ttl_Width - r_PIX_LOOP, HS_Channel_Colour(r_ColorArr))
      else
        lib_HS_PLOT_CHART_Draw_Line(c_N_HS_CHARTBOX_BMP_Bottom_Y, c_N_HS_CHARTBOX_BMP_Top_Y, g_HS_CHARTBOX_Ttl_Width - r_PIX_LOOP, HS_Channel_Colour(r_ColorArr))
      endif
    endif
  endif
  if r_DataB_Val# = 0 and r_DataA_Val# <> 0
    if r_LOW_Rng_Val# = 0
      if r_DataA_Val# < r_UPP_Rng_Val#
        lib_HS_PLOT_CHART_Draw_Line(r_Y_POS_A, c_N_HS_CHARTBOX_BMP_Bottom_Y, g_HS_CHARTBOX_Ttl_Width - r_PIX_LOOP, HS_Channel_Colour(r_ColorArr))
      else
        lib_HS_PLOT_CHART_Draw_Line(c_N_HS_CHARTBOX_BMP_Top_Y, c_N_HS_CHARTBOX_BMP_Bottom_Y, g_HS_CHARTBOX_Ttl_Width - r_PIX_LOOP, HS_Channel_Colour(r_ColorArr))
      endif
    endif
  endif
  
  `If A and B = 0 (ie flat line at the bottom)
  if r_DataA_Val# = 0 and r_DataB_Val# = 0
    if r_LOW_Rng_Val# = 0
      lib_HS_PLOT_CHART_Draw_Line(c_N_HS_CHARTBOX_BMP_Bottom_Y, c_N_HS_CHARTBOX_BMP_Bottom_Y, g_HS_CHARTBOX_Ttl_Width - r_PIX_LOOP, HS_Channel_Colour(r_ColorArr))
    endif
  endif

endfunction

function lib_HS_PLOT_CHART_Draw_Line(r_Ya, r_Yb, r_XPos, r_colour as dword)

  `x1 = r_XPos
  `y1 = r_Ya
  `x2 = (r_XPos - 1)
  `y2 = r_Yb

  d3d_line r_XPos, r_Ya, (r_XPos - 1), r_Yb, r_colour

  if g_HS_PLOTCHART_DoubleLineThickness = 1
    `Plot y+1
    d3d_line r_XPos, r_Ya + 1, (r_XPos - 1), r_Yb + 1, r_colour
    `Plot x+1
    d3d_line r_XPos + 1, r_Ya, (r_XPos - 1) + 1, r_Yb, r_colour
  else
    `Plot y+1
    d3d_line r_XPos, r_Ya + 1, (r_XPos - 1), r_Yb + 1, r_colour
  endif

endfunction

function HS_CHART_Get_First_Valid_Record_Array()
  
  local l_RetArr as integer
  local l_ChrtArr as integer
  local l_Amnt# as float
  local l_DIVx# as float
  
    l_ChrtArr = (g_DATABASE_MEM_Total_Num_Records - g_HS_CHART_Scroll_Array_Offset)
    if l_ChrtArr > g_DATABASE_MEM_Total_Num_Records
      l_ChrtArr = g_DATABASE_MEM_Total_Num_Records
    endif  
    
    if g_HS_TimePeriod_Buttons = 1
      l_RetArr = l_ChrtArr
    endif 

    if g_HS_TimePeriod_Buttons = 2
      l_Amnt# = 2.0
      l_DIVx# = l_ChrtArr / l_Amnt#
      l_RetArr = l_ChrtArr - (l_Amnt# * (l_DIVx# - int(l_DIVx#)))
    endif 
    
    if g_HS_TimePeriod_Buttons = 3
      l_Amnt# = 8.0
      l_DIVx# = l_ChrtArr / l_Amnt#
      l_RetArr = l_ChrtArr - (l_Amnt# * (l_DIVx# - int(l_DIVx#)))
    endif 
    
    if g_HS_TimePeriod_Buttons = 4
      l_Amnt# = 16.0
      l_DIVx# = l_ChrtArr / l_Amnt#
      l_RetArr = l_ChrtArr - (l_Amnt# * (l_DIVx# - int(l_DIVx#)))
    endif


endfunction l_RetArr

function lib_HS_Handle_ScreenButtons()

  `Display the Refresh Flash
  if g_HS_Refresh_Light_TimTog <> -1
    if timer() > g_HS_Refresh_Light_TimTog
      g_HS_Refresh_Light_TimTog = -1
    else
      if g_ENGINE_Screen_Resolution = 1
        paste image c_HS_RefreshButtonLight_Imgnum, 1215, 509
      else
        paste image c_HS_RefreshButtonLight_Imgnum, 873, 509
      endif  
    endif
  endif
  
  `Display the Drilling Template Flash
  if g_HS_DrillTemplate_Light_TimTog <> -1
    if timer() > g_HS_DrillTemplate_Light_TimTog
      g_HS_DrillTemplate_Light_TimTog = -1
    else
      paste image c_HS_Template_Drilling_Img, 16, 523
    endif
  endif
  
  `Display the Tripping Template Flash
  if g_HS_TripTemplate_Light_TimTog <> -1
    if timer() > g_HS_TripTemplate_Light_TimTog
      g_HS_TripTemplate_Light_TimTog = -1
    else
      paste image c_HS_Template_Tripping_Img, 139, 523
    endif
  endif
  
  `Flash the HS Zero Chart Position Button if it has been pressed.
  if timer() < g_HS_ChartButton_TimeZero_Timer
    if g_ENGINE_Screen_Resolution = 1
      paste image c_HS_Chart_PosZero_Img, 1328, 119
    else
      paste image c_HS_Chart_PosZero_Img, 989, 119
    endif
  endif

endfunction

function lib_HS_TimePeriodButtons()

  `Display HS Time Period Buttons
  if g_HS_TimePeriod_Buttons = 1
    paste sprite c_SPRITE_TimePeriod_1HrON, 12, 14
    paste sprite c_SPRITE_TimePeriod_4HrOFF, 12, 61
    paste sprite c_SPRITE_TimePeriod_8HrOFF, 12, 108
    paste sprite c_SPRITE_TimePeriod_12HrOFF, 12, 155
  endif
  if g_HS_TimePeriod_Buttons = 2
    paste sprite c_SPRITE_TimePeriod_1HrOFF, 12, 14
    paste sprite c_SPRITE_TimePeriod_4HrON, 12, 61
    paste sprite c_SPRITE_TimePeriod_8HrOFF, 12, 108
    paste sprite c_SPRITE_TimePeriod_12HrOFF, 12, 155
  endif
  if g_HS_TimePeriod_Buttons = 3
    paste sprite c_SPRITE_TimePeriod_1HrOFF, 12, 14
    paste sprite c_SPRITE_TimePeriod_4HrOFF, 12, 61
    paste sprite c_SPRITE_TimePeriod_8HrON, 12, 108
    paste sprite c_SPRITE_TimePeriod_12HrOFF, 12, 155
  endif
  if g_HS_TimePeriod_Buttons = 4
    paste sprite c_SPRITE_TimePeriod_1HrOFF, 12, 14
    paste sprite c_SPRITE_TimePeriod_4HrOFF, 12, 61
    paste sprite c_SPRITE_TimePeriod_8HrOFF, 12, 108
    paste sprite c_SPRITE_TimePeriod_12HrON, 12, 155
  endif

endfunction

function lib_HS_Colour_And_Tick_Boxs()


  `DISPLAY THE HS TICK BOX'S
    `[BOX1] Left Box
    l_prt_x = c_HS_Box1_LeftX + c_HS_BoxLeft_To_TickBoxX : l_prt_y = 600 - c_HS_InfoBox_LineSpacing
    for spr_lp = 1 to 5
      inc l_prt_y, c_HS_InfoBox_LineSpacing
      if HS_TickBox_States(spr_lp) = -1
        sprite c_HS_SPRITE_TickBoxs_StartNum + spr_lp, l_prt_x, l_prt_y, c_HS_TickBox_Unticked_Imgnum
        paste sprite c_HS_SPRITE_TickBoxs_StartNum + spr_lp, l_prt_x, l_prt_y
      else
        sprite c_HS_SPRITE_TickBoxs_StartNum + spr_lp, l_prt_x, l_prt_y, c_HS_TickBox_Ticked_Imgnum
        paste sprite c_HS_SPRITE_TickBoxs_StartNum + spr_lp, l_prt_x, l_prt_y
      endif
    next spr_lp
    
    `[BOX2] Middle Left Box
    l_prt_x = c_HS_Box2_LeftX + c_HS_BoxLeft_To_TickBoxX : l_prt_y = 600 - c_HS_InfoBox_LineSpacing
    for spr_lp = 1 to 5
      inc l_prt_y, c_HS_InfoBox_LineSpacing
      if HS_TickBox_States(spr_lp + 5) = -1
        sprite c_HS_SPRITE_TickBoxs_StartNum + 5 + spr_lp, l_prt_x, l_prt_y, c_HS_TickBox_Unticked_Imgnum
        paste sprite c_HS_SPRITE_TickBoxs_StartNum + 5 + spr_lp, l_prt_x, l_prt_y
      else
        sprite c_HS_SPRITE_TickBoxs_StartNum + 5 + spr_lp, l_prt_x, l_prt_y, c_HS_TickBox_Ticked_Imgnum
        paste sprite c_HS_SPRITE_TickBoxs_StartNum + 5 + spr_lp, l_prt_x, l_prt_y
      endif
    next spr_lp
    
    `[BOX3] Middle Right Box
    l_prt_x = c_HS_Box3_LeftX + c_HS_BoxLeft_To_TickBoxX : l_prt_y = 600 - c_HS_InfoBox_LineSpacing
    for spr_lp = 1 to 5
      inc l_prt_y, c_HS_InfoBox_LineSpacing
      if HS_TickBox_States(spr_lp + 10) = -1
        sprite c_HS_SPRITE_TickBoxs_StartNum + 10 + spr_lp, l_prt_x, l_prt_y, c_HS_TickBox_Unticked_Imgnum
        paste sprite c_HS_SPRITE_TickBoxs_StartNum + 10 + spr_lp, l_prt_x, l_prt_y
      else
        sprite c_HS_SPRITE_TickBoxs_StartNum + 10 + spr_lp, l_prt_x, l_prt_y, c_HS_TickBox_Ticked_Imgnum
        paste sprite c_HS_SPRITE_TickBoxs_StartNum + 10 + spr_lp, l_prt_x, l_prt_y
      endif
    next spr_lp
    
    `[BOX4] Right Box
    l_prt_x = c_HS_Box4_LeftX + c_HS_BoxLeft_To_TickBoxX : l_prt_y = 600 - c_HS_InfoBox_LineSpacing
    for spr_lp = 1 to 5
      inc l_prt_y, c_HS_InfoBox_LineSpacing
      if HS_TickBox_States(spr_lp + 15) = -1
        sprite c_HS_SPRITE_TickBoxs_StartNum + 15 + spr_lp, l_prt_x, l_prt_y, c_HS_TickBox_Unticked_Imgnum
        paste sprite c_HS_SPRITE_TickBoxs_StartNum + 15 + spr_lp, l_prt_x, l_prt_y
      else
        sprite c_HS_SPRITE_TickBoxs_StartNum + 15 + spr_lp, l_prt_x, l_prt_y, c_HS_TickBox_Ticked_Imgnum
        paste sprite c_HS_SPRITE_TickBoxs_StartNum + 15 + spr_lp, l_prt_x, l_prt_y
      endif
    next spr_lp
    
    
    
  `Display the COLOUR Box's
  
    `Left Box Colour Box Graphics
    	l_prt_x = c_HS_Box1_LeftX + c_HS_BoxLeft_To_ColourBoxX : l_prt_y = 601 - c_HS_InfoBox_LineSpacing
    	for spr_lp = 1 to 5
      	inc l_prt_y, c_HS_InfoBox_LineSpacing
      	sprite c_HS_SPRITE_COLOURBoxs_Underlay + spr_lp, l_prt_x, l_prt_y, c_HS_ColourBox_StartImg + spr_lp
      	paste sprite c_HS_SPRITE_COLOURBoxs_Underlay + spr_lp, l_prt_x + 2, l_prt_y + 2
      	sprite spr_lp + c_HS_SPRITE_COLOURBoxs_StartNum, l_prt_x, l_prt_y, c_HS_ColourBox_ImgNum
      	paste sprite spr_lp + c_HS_SPRITE_COLOURBoxs_StartNum, l_prt_x, l_prt_y
    	next spr_lp
    
    `Middle Left Box Colour Box Graphics
    	l_prt_x = c_HS_Box2_LeftX + c_HS_BoxLeft_To_ColourBoxX : l_prt_y = 601 - c_HS_InfoBox_LineSpacing
    	for spr_lp = 1 to 5
      	inc l_prt_y, c_HS_InfoBox_LineSpacing
      	sprite c_HS_SPRITE_COLOURBoxs_Underlay + spr_lp + 5, l_prt_x, l_prt_y, c_HS_ColourBox_StartImg + spr_lp + 5
      	paste sprite c_HS_SPRITE_COLOURBoxs_Underlay + spr_lp + 5, l_prt_x + 2, l_prt_y + 2
      	sprite c_HS_SPRITE_COLOURBoxs_StartNum + spr_lp + 5, l_prt_x, l_prt_y, c_HS_ColourBox_ImgNum
      	paste sprite c_HS_SPRITE_COLOURBoxs_StartNum + spr_lp + 5, l_prt_x, l_prt_y
    	next spr_lp
    
    `Middle Right Box Colour Box Graphics
    	l_prt_x = c_HS_Box3_LeftX + c_HS_BoxLeft_To_ColourBoxX : l_prt_y = 601 - c_HS_InfoBox_LineSpacing
    	for spr_lp = 1 to 5
      	inc l_prt_y, c_HS_InfoBox_LineSpacing
      	sprite c_HS_SPRITE_COLOURBoxs_Underlay + spr_lp + 10, l_prt_x, l_prt_y, c_HS_ColourBox_StartImg + spr_lp + 10
      	paste sprite c_HS_SPRITE_COLOURBoxs_Underlay + spr_lp + 10, l_prt_x + 2, l_prt_y + 2
      	sprite spr_lp + c_HS_SPRITE_COLOURBoxs_StartNum + 10, l_prt_x, l_prt_y, c_HS_ColourBox_ImgNum
      	paste sprite spr_lp + c_HS_SPRITE_COLOURBoxs_StartNum + 10, l_prt_x, l_prt_y
    	next spr_lp

    `Right Box Colour Box Graphics
    	l_prt_x = c_HS_Box4_LeftX + c_HS_BoxLeft_To_ColourBoxX : l_prt_y = 601 - c_HS_InfoBox_LineSpacing
    	for spr_lp = 1 to 5
      	inc l_prt_y, c_HS_InfoBox_LineSpacing
      	sprite c_HS_SPRITE_COLOURBoxs_Underlay + spr_lp + 15, l_prt_x, l_prt_y, c_HS_ColourBox_StartImg + spr_lp + 15
      	paste sprite c_HS_SPRITE_COLOURBoxs_Underlay + spr_lp + 15, l_prt_x + 2, l_prt_y + 2
      	sprite spr_lp + c_HS_SPRITE_COLOURBoxs_StartNum + 15, l_prt_x, l_prt_y, c_HS_ColourBox_ImgNum
      	paste sprite spr_lp + c_HS_SPRITE_COLOURBoxs_StartNum + 15, l_prt_x, l_prt_y
    	next spr_lp


endfunction



function lib_HS_Create_ColorBox_Images()

  local l_ImgCol as dword
  local p_ImgNum as integer

  for Mk_Lp = 1 to 20
    l_ImgCol = HS_Channel_Colour(Mk_Lp)
    p_ImgNum = Mk_Lp + c_HS_ColourBox_StartImg
    lib_Create_Image(8, 8, l_ImgCol, p_ImgNum, 0, rgb(0,0,0))
    sprite c_HS_SPRITE_COLOURBoxs_Underlay + Mk_Lp, 0, 0, Mk_Lp + c_HS_ColourBox_StartImg
  next Mk_Lp
  
endfunction

function ENGINE_COLOUR_PAD()

  local l_POINT_PixelCol as dword

  if g_COLOURPAD_Set_Start_Colour = 1
    g_COLOURPAD_Set_Start_Colour = -1
    g_COLOURPAD_Start_ColourR = HS_CHART_Line_Colours(g_COLOURPAD_HS_ArrayNum, 1)
    g_COLOURPAD_Start_ColourG = HS_CHART_Line_Colours(g_COLOURPAD_HS_ArrayNum, 2)
    g_COLOURPAD_Start_ColourB = HS_CHART_Line_Colours(g_COLOURPAD_HS_ArrayNum, 3)
  endif

  paste sprite c_SPRITE_COLOURPAD, g_COLOURMAP_PosX, g_COLOURMAP_PosY

  `Close the Colour Box if the Windows close button is pressed
  if mouseclick() = 1 and mouse_click(1) = -1
    if mousex() > g_COLOURMAP_PosX + 408 and mousex() < g_COLOURMAP_PosX + 456
      if mousey() > g_COLOURMAP_PosY and mousey() < g_COLOURMAP_PosY + 20
        mouse_click(1) = 1
        g_COLOURMAP_Toggle = -1
        HS_Channel_Colour(g_COLOURPAD_HS_ArrayNum) = rgb(g_COLOURPAD_Start_ColourR, g_COLOURPAD_Start_ColourG, g_COLOURPAD_Start_ColourB)
        if g_ENGINE_CoreFunctionType = 1
          CF1_HS_PLOT_CHART_CF1_Create_Image()
        endif
        if g_ENGINE_CoreFunctionType = 2
          CF2_HS_PLOT_CHART_CF2_Create_Image()
        endif
        lib_HS_Create_ColorBox_Images()
      endif
    endif
  endif
  
  CP_lib_Drag_Colourpad()
  
  `Select a colour
  if mouseclick() = 1 and mouse_click(1) = -1
    `PrePicked Colour Palette
    if mousex() > g_COLOURMAP_PosX + 17 and mousex() < g_COLOURMAP_PosX + 219
      if mousey() > g_COLOURMAP_PosY + 55 and mousey() < g_COLOURMAP_PosY + 183
        g_COLOURPAD_SET_ColourR = rgbr(point(mousex(), mousey()))
        g_COLOURPAD_SET_ColourG = rgbg(point(mousex(), mousey()))
        g_COLOURPAD_SET_ColourB = rgbb(point(mousex(), mousey()))
        HS_Channel_Colour(g_COLOURPAD_HS_ArrayNum) = rgb(g_COLOURPAD_SET_ColourR, g_COLOURPAD_SET_ColourG, g_COLOURPAD_SET_ColourB)
        if g_ENGINE_CoreFunctionType = 1
          CF1_HS_PLOT_CHART_CF1_Create_Image()
        endif
        if g_ENGINE_CoreFunctionType = 2
          CF2_HS_PLOT_CHART_CF2_Create_Image()
        endif
        lib_HS_Create_ColorBox_Images()
      endif
    endif
    `Gradient Colour Box Palette
    if mousex() > g_COLOURMAP_PosX + 236 and mousex() < g_COLOURMAP_PosX + 412
      if mousey() > g_COLOURMAP_PosY + 37 and mousey() < g_COLOURMAP_PosY + 225
        g_COLOURPAD_SET_ColourR = rgbr(point(mousex(), mousey()))
        g_COLOURPAD_SET_ColourG = rgbg(point(mousex(), mousey()))
        g_COLOURPAD_SET_ColourB = rgbb(point(mousex(), mousey()))
        HS_Channel_Colour(g_COLOURPAD_HS_ArrayNum) = rgb(g_COLOURPAD_SET_ColourR, g_COLOURPAD_SET_ColourG, g_COLOURPAD_SET_ColourB)
        if g_ENGINE_CoreFunctionType = 1
          CF1_HS_PLOT_CHART_CF1_Create_Image()
        endif
        if g_ENGINE_CoreFunctionType = 2
          CF2_HS_PLOT_CHART_CF2_Create_Image()
        endif
        lib_HS_Create_ColorBox_Images()
      endif
    endif
    `Black and White Gradient
    if mousex() > g_COLOURMAP_PosX + 428 and mousex() < g_COLOURMAP_PosX + 439
      if mousey() > g_COLOURMAP_PosY + 37 and mousey() < g_COLOURMAP_PosY + 225
        g_COLOURPAD_SET_ColourR = rgbr(point(mousex(), mousey()))
        g_COLOURPAD_SET_ColourG = rgbg(point(mousex(), mousey()))
        g_COLOURPAD_SET_ColourB = rgbb(point(mousex(), mousey()))
        HS_Channel_Colour(g_COLOURPAD_HS_ArrayNum) = rgb(g_COLOURPAD_SET_ColourR, g_COLOURPAD_SET_ColourG, g_COLOURPAD_SET_ColourB)
        if g_ENGINE_CoreFunctionType = 1
          CF1_HS_PLOT_CHART_CF1_Create_Image()
        endif
        if g_ENGINE_CoreFunctionType = 2
          CF2_HS_PLOT_CHART_CF2_Create_Image()
        endif
        lib_HS_Create_ColorBox_Images()
      endif
    endif
  endif
  
  `Enter Button Clicked
  if mouseclick() = 1 and mouse_click(1) = -1
    if mousex() > g_COLOURMAP_PosX + 141 and mousex() < g_COLOURMAP_PosX + 217
      if mousey() > g_COLOURMAP_PosY + 196 and mousey() < g_COLOURMAP_PosY + 224
        mouse_click(1) = 1
        g_COLOURMAP_Toggle = -1
        HS_CHART_Line_Colours(g_COLOURPAD_HS_ArrayNum, 1) = g_COLOURPAD_SET_ColourR
        HS_CHART_Line_Colours(g_COLOURPAD_HS_ArrayNum, 2) = g_COLOURPAD_SET_ColourG
        HS_CHART_Line_Colours(g_COLOURPAD_HS_ArrayNum, 3) = g_COLOURPAD_SET_ColourB
        HS_Channel_Colour(g_COLOURPAD_HS_ArrayNum) = rgb(g_COLOURPAD_SET_ColourR, g_COLOURPAD_SET_ColourG, g_COLOURPAD_SET_ColourB)
        lib_HS_Create_ColorBox_Images()
        SAVE_HS_Channel_Colours()
        if g_ENGINE_CoreFunctionType = 1
          CF1_HS_PLOT_CHART_CF1_Create_Image()
        endif
        if g_ENGINE_CoreFunctionType = 2
          CF2_HS_PLOT_CHART_CF2_Create_Image()
        endif
      endif
    endif
  endif
  
endfunction

function CP_lib_Drag_Colourpad()

  `HANDLE DRAGGING THE RANGE INPUT BOX AROUND THE SCREEN
  if mouseclick() = 1
    if g_COLOURPAD_MOVE_MouseClickHOLD = -1 and mouse_click(1) = -1
      if mousex() > g_COLOURMAP_PosX and mousex() < g_COLOURMAP_PosX + 463
        if mousey() > g_COLOURMAP_PosY and mousey() < g_COLOURMAP_PosY + 29
          g_COLOURPAD_MOVE_MouseClickHOLD = 1
          g_COLOURPAD_MOVE_Old_MseX = mousex()
          g_COLOURPAD_MOVE_Old_MseY = mousey()
          mouse_click(1) = 1
        endif
      endif
    endif
    if g_COLOURPAD_MOVE_MouseClickHOLD = 1
      g_COLOURMAP_PosX = g_COLOURMAP_PosX + (mousex() - g_COLOURPAD_MOVE_Old_MseX)
      if g_COLOURMAP_PosY + (mousey() - g_COLOURPAD_MOVE_Old_MseY) > 0 
      `and g_COLOURMAP_PosY + (mousey() - g_COLOURPAD_MOVE_Old_MseY) < 310
        g_COLOURMAP_PosY = g_COLOURMAP_PosY + (mousey() - g_COLOURPAD_MOVE_Old_MseY)
      endif
      g_COLOURPAD_MOVE_Old_MseX = mousex()
      g_COLOURPAD_MOVE_Old_MseY = mousey()
    endif
  endif
  if mouseclick() = 0 and g_COLOURPAD_MOVE_MouseClickHOLD = 1
    g_COLOURPAD_MOVE_MouseClickHOLD = -1
  endif  

endfunction

function ___________________________________________________________________tw33lg80kr()
endfunction


function lib_Disp_RT_Get_Server_Channel_Settings()
  `This function updates the Channel Plot Ranges and Channel Colours.
  `It does this by transmitting code 2998
  
  if g_server_connected = 1
    g_DISP_RT_DB_RequestChannel_Date$ = ""
    g_DISP_RT_DB_RequestChannel_Time$ = ""
    net send 0
    net put long 2998
    net put long 42846
    net send
    inc g_ENG_DataTransfer_Total, 2048
  endif

endfunction



function lib_DRT_Receive_Channel_Settings()

  g_DISP_RT_DB_RequestChannel_State = 2
  
  g_DISP_RT_DB_RequestChannel_Date$ = lib_CONVERT_DATE_US_to_UK_Format(get date$())
  g_DISP_RT_DB_RequestChannel_Time$ = get time$()

  `Put Chart Colours
  g_Block1_Line1_Colour = net get long()
  g_Block1_Line2_Colour = net get long()
  g_Block1_Line3_Colour = net get long()
  g_Block2_Line1_Colour = net get long()
  g_Block2_Line2_Colour = net get long()
  g_Block2_Line3_Colour = net get long()
  g_Block3_Line1_Colour = net get long()
  g_Block3_Line2_Colour = net get long()
  g_Block3_Line3_Colour = net get long()
    `Assign Colours from received DWORD value to their arrays
      `Block 1
        CHART_Line_Colours(1, 1) = rgbr(g_Block1_Line1_Colour)
        CHART_Line_Colours(1, 2) = rgbg(g_Block1_Line1_Colour)
        CHART_Line_Colours(1, 3) = rgbb(g_Block1_Line1_Colour)
        CHART_Line_Colours(2, 1) = rgbr(g_Block1_Line2_Colour)
        CHART_Line_Colours(2, 2) = rgbg(g_Block1_Line2_Colour)
        CHART_Line_Colours(2, 3) = rgbb(g_Block1_Line2_Colour)
        CHART_Line_Colours(3, 1) = rgbr(g_Block1_Line3_Colour)
        CHART_Line_Colours(3, 2) = rgbg(g_Block1_Line3_Colour)
        CHART_Line_Colours(3, 3) = rgbb(g_Block1_Line3_Colour)
      `Block 2
        CHART_Line_Colours(4, 1) = rgbr(g_Block2_Line1_Colour)
        CHART_Line_Colours(4, 2) = rgbg(g_Block2_Line1_Colour)
        CHART_Line_Colours(4, 3) = rgbb(g_Block2_Line1_Colour)
        CHART_Line_Colours(5, 1) = rgbr(g_Block2_Line2_Colour)
        CHART_Line_Colours(5, 2) = rgbg(g_Block2_Line2_Colour)
        CHART_Line_Colours(5, 3) = rgbb(g_Block2_Line2_Colour)
        CHART_Line_Colours(6, 1) = rgbr(g_Block2_Line3_Colour)
        CHART_Line_Colours(6, 2) = rgbg(g_Block2_Line3_Colour)
        CHART_Line_Colours(6, 3) = rgbb(g_Block2_Line3_Colour)
      `Block 3
        CHART_Line_Colours(7, 1) = rgbr(g_Block3_Line1_Colour)
        CHART_Line_Colours(7, 2) = rgbg(g_Block3_Line1_Colour)
        CHART_Line_Colours(7, 3) = rgbb(g_Block3_Line1_Colour)
        CHART_Line_Colours(8, 1) = rgbr(g_Block3_Line2_Colour)
        CHART_Line_Colours(8, 2) = rgbg(g_Block3_Line2_Colour)
        CHART_Line_Colours(8, 3) = rgbb(g_Block3_Line2_Colour)
        CHART_Line_Colours(9, 1) = rgbr(g_Block3_Line3_Colour)
        CHART_Line_Colours(9, 2) = rgbg(g_Block3_Line3_Colour)
        CHART_Line_Colours(9, 3) = rgbb(g_Block3_Line3_Colour)
  
        g_DRT_Block1_Line1_Colour$ = "R:" + str$(rgbr(g_Block1_Line1_Colour)) + " G:" + str$(rgbg(g_Block1_Line1_Colour)) + " B:" + str$(rgbb(g_Block1_Line1_Colour))
        g_DRT_Block1_Line2_Colour$ = "R:" + str$(rgbr(g_Block1_Line2_Colour)) + " G:" + str$(rgbg(g_Block1_Line2_Colour)) + " B:" + str$(rgbb(g_Block1_Line2_Colour))
        g_DRT_Block1_Line3_Colour$ = "R:" + str$(rgbr(g_Block1_Line3_Colour)) + " G:" + str$(rgbg(g_Block1_Line3_Colour)) + " B:" + str$(rgbb(g_Block1_Line3_Colour))
        g_DRT_Block2_Line1_Colour$ = "R:" + str$(rgbr(g_Block2_Line1_Colour)) + " G:" + str$(rgbg(g_Block2_Line1_Colour)) + " B:" + str$(rgbb(g_Block2_Line1_Colour))
        g_DRT_Block2_Line2_Colour$ = "R:" + str$(rgbr(g_Block2_Line2_Colour)) + " G:" + str$(rgbg(g_Block2_Line2_Colour)) + " B:" + str$(rgbb(g_Block2_Line2_Colour))
        g_DRT_Block2_Line3_Colour$ = "R:" + str$(rgbr(g_Block2_Line3_Colour)) + " G:" + str$(rgbg(g_Block2_Line3_Colour)) + " B:" + str$(rgbb(g_Block2_Line3_Colour))
        g_DRT_Block3_Line1_Colour$ = "R:" + str$(rgbr(g_Block3_Line1_Colour)) + " G:" + str$(rgbg(g_Block3_Line1_Colour)) + " B:" + str$(rgbb(g_Block3_Line1_Colour))
        g_DRT_Block3_Line2_Colour$ = "R:" + str$(rgbr(g_Block3_Line2_Colour)) + " G:" + str$(rgbg(g_Block3_Line2_Colour)) + " B:" + str$(rgbb(g_Block3_Line2_Colour))
        g_DRT_Block3_Line3_Colour$ = "R:" + str$(rgbr(g_Block3_Line3_Colour)) + " G:" + str$(rgbg(g_Block3_Line3_Colour)) + " B:" + str$(rgbb(g_Block3_Line3_Colour))

  `Get Chart Ranges
  g_Block1_Line1_Lower_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(1) = g_Block1_Line1_Lower_Value
  g_Block1_Line1_Upper_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(2) = g_Block1_Line1_Upper_Value
  g_Block1_Line2_Lower_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(3) = g_Block1_Line2_Lower_Value
  g_Block1_Line2_Upper_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(4) = g_Block1_Line2_Upper_Value
  g_Block1_Line3_Lower_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(5) = g_Block1_Line3_Lower_Value
  g_Block1_Line3_Upper_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(6) = g_Block1_Line3_Upper_Value
  g_Block2_Line1_Lower_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(7) = g_Block2_Line1_Lower_Value
  g_Block2_Line1_Upper_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(8) = g_Block2_Line1_Upper_Value
  g_Block2_Line2_Lower_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(9) = g_Block2_Line2_Lower_Value
  g_Block2_Line2_Upper_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(10) = g_Block2_Line2_Upper_Value
  g_Block2_Line3_Lower_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(11) = g_Block2_Line3_Lower_Value
  g_Block2_Line3_Upper_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(12) = g_Block2_Line3_Upper_Value
  g_Block3_Line1_Lower_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(13) = g_Block3_Line1_Lower_Value
  g_Block3_Line1_Upper_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(14) = g_Block3_Line1_Upper_Value
  g_Block3_Line2_Lower_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(15) = g_Block3_Line2_Lower_Value
  g_Block3_Line2_Upper_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(16) = g_Block3_Line2_Upper_Value
  g_Block3_Line3_Lower_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(17) = g_Block3_Line3_Lower_Value
  g_Block3_Line3_Upper_Value = net get int() : CF1_CHARTIndex_BlockLine_Val(18) = g_Block3_Line3_Upper_Value

  `Receive Channel Names
  g_DS_Units_Block1Line1_Name$ = net get string()
  g_DS_Units_Block1Line2_Name$ = net get string()
  g_DS_Units_Block1Line3_Name$ = net get string()
  g_DS_Units_Block2Line1_Name$ = net get string()
  g_DS_Units_Block2Line2_Name$ = net get string()
  g_DS_Units_Block2Line3_Name$ = net get string()
  g_DS_Units_Block3Line1_Name$ = net get string()
  g_DS_Units_Block3Line2_Name$ = net get string()
  g_DS_Units_Block3Line3_Name$ = net get string()
  


endfunction

function lib_DRT_Request_PUSH_TABLE_Relationship()

  if g_server_connected = 1
    net send 0
    net put long 3000
    net put long 25928
    net send
    inc g_ENG_DataTransfer_Total, 2048
  endif

endfunction

function lib_DRT_Receive_PUSH_Data()

  g_DISP_RT_DB_PUSHTABLE_State = 2

  g_DISP_RT_DB_Time$ = net get string()
  g_DISP_RT_DB_Date$ = net get string()
  g_DISP_RT_DB_Hole_Depth# = net get float()
  g_DISP_RT_DB_Bit_Depth# = net get float()
  g_DISP_RT_DB_ROP# = net get float()
  g_DISP_RT_DB_WOB# = net get float()
  g_DISP_RT_DB_Hookload = net get word()
  g_DISP_RT_DB_RPM = net get word()
  g_DISP_RT_DB_TripTank# = net get float()
  g_DISP_RT_DB_BlockPosition# = net get float()
  g_DISP_RT_DB_PVT# = net get float()
  g_DISP_RT_DB_SPP = net get word()
  g_DISP_RT_DB_FlowIn = net get word()
  g_DISP_RT_DB_SPM1 = net get word()
  g_DISP_RT_DB_SPM2 = net get word()
  g_DISP_RT_DB_TotalGas# = net get float()
  g_DISP_RT_DB_H2S# = net get float()
  `Set the last good data timer to now (shows no recent data if not received for 45 seconds)
  g_DISP_RT_DB_Last_Good_Data_Timer = timer()
  g_DISP_RT_DB_Last_Good_Data_Received$ = get time$()
  
endfunction

function __________SYSTRAY_HANDLING___________________________________________j7egyz827y()
endfunction

function lib_SYSTEMTRAY_CheckFor_Messages()

  `The key here is to go through your messages and pick the ones you want to respond to.
  `Then you clearTrayMsgs() to clear the buffer so you don't get the message when it hasn't
  `  really been sent again.
  `Windows messages don't come in any special order.  You must code around this.  You get the message
  `  when windows feels like sending it.  This is why there is a buffer containing all messages
  `  coming from your icon.  Don't forget to clear it when you are done checking it. Otherwise
  `  you are responding to events that don't happen.

  for CheckDLL_MsSG_Queue_LP = 0 to 51 step 4
    temp_val = CheckDLL_MsSG_Queue_LP + systraymsg
    l_messagepump = *temp_val
    lib_SYSTEMTRAY_DetermineMSGType(l_messagepump)
  next CheckDLL_MsSG_Queue_LP
  lib_ClearTrayMsgs()

endfunction

function lib_SYSTEMTRAY_DetermineMSGType(msg)

  `This function stores the behaviour scripts for actions responding to the system tray messages.
  `Note: windows is responsible for filling the system tray message queue as it wants. We can only
  `      act on them.

  `Left Mouse Button
  If msg= WM_LBUTTONDOWN
    restore window
    call dll c_User32DLL, "SetForegroundWindow", Hwnd : `Window must be in the foreground before activating
    call dll c_User32DLL, "SetActiveWindow", Hwnd : `Activate window - give window the windows focus
    g_SYSTRAY_Prog_Minimised = -1
    lib_ClearTrayMsgs()
  EndIf
  
  `Right Mouse Button
  If msg= WM_RBUTTONDOWN
    restore window
    call dll c_User32DLL, "SetForegroundWindow", Hwnd : `Window must be in the foreground before activating
    call dll c_User32DLL, "SetActiveWindow", Hwnd : `Activate window - give window the windows focus
    lib_ClearTrayMsgs()
  EndIf
        
endfunction

function lib_Get_ICONIC_STATUS()

  `This function determines whether the program is maximised (is iconic), or minimised

  local l_iconic as dword
  
  l_iconic = Call DLL(c_User32DLL, "IsIconic", hwnd)

endfunction  l_iconic

Function lib_NiCommand(systraytemp as dword)
  call dll c_SystemTrayDLL,"sni_command",systraytemp
EndFunction

Function lib_TrayTipText(systraytemp$ as string)
  call dll c_SystemTrayDLL,"systraytip",systraytemp$
EndFunction

Function lib_ClearTrayMsgs()
  for clear_lp = 0 to 51 step 4
     temp = clear_lp + systraymsg
     *temp = 0
  next clear_lp
EndFunction

Function lib_StartSysTray()
  SysTrayResult=call dll (c_SystemTrayDLL,"starticon")
EndFunction SysTrayResult

function lib_ProperSleep(r_SleepPeriod_ms as dword)
  
  if g_ENG_EXTVAL_ProperSleep_Counter = g_ENG_EXTVAL_ProperSleep_OnCycleNum
    call dll c_Kernel32DLL, "Sleep", r_SleepPeriod_ms
    g_ENG_EXTVAL_ProperSleep_Counter = 0
  else
    inc g_ENG_EXTVAL_ProperSleep_Counter, 1
  endif

endfunction

function __________NEW_COMMANDS____________________________________________tx12hjsgr()
endfunction

function D3D_Print_Black(r_X as integer, r_Y as integer, r_Font as integer, r_StrVal$ as string)

    d3d_starttext
      d3d_text r_Font, r_X , r_Y, 1, r_StrVal$, g_ENGINE_COLOUR_Black
    d3d_endtext


endfunction


function __________LIBRARY_COMMANDS____________________________________________tx12hjsgr()
endfunction



function lib_Set_CHART_INFOBOX_ShowButtonState(r_State as integer)

  `The Show Button displayed on the Chart Infobox graphic/displaybox must interact
  `with other function/code elsewhere, i.e. by controlling mouse inputs / toggles
  `in other functions. This function is used to set whether the show button is being
  `interacted with and provide a variable to use to control program flow in other functions.

  g_INFOBOX_ShowButton_ActionState = r_State

endfunction

function lib_ROP_GetOnBOTTOM_MINUTES(r_StartArr as integer, r_EndArr as integer)

  `This function exports the total on bottom minutes over the received interval

  local l_OUTPUT_OnBottomMins_Count as integer : l_OUTPUT_OnBottomMins_Count = 0
  
  local l_Hole_Depth_As1DPStr$ as string
  local l_Bit_Depth_As1DPStr$ as string

  for count_lp = r_StartArr to r_EndArr
  
    `l_Hole_Depth_As1DPStr$ = str$(MEM_MAIN_DATABASE(count_lp).Hole_Depth#, 1)
    `l_Bit_Depth_As1DPStr$ = str$(MEM_MAIN_DATABASE(count_lp).Bit_Depth#, 1)
  
    if MEM_MAIN_DATABASE(count_lp).Bit_Depth# = MEM_MAIN_DATABASE(count_lp).Hole_Depth#
    `if l_Hole_Depth_As1DPStr$ = l_Bit_Depth_As1DPStr$
      inc l_OUTPUT_OnBottomMins_Count, 1
    endif
  next count_lp

  `Convert to Minutes
  l_OUTPUT_OnBottomMins_Count = int(l_OUTPUT_OnBottomMins_Count / 15)

endfunction l_OUTPUT_OnBottomMins_Count

function lib_ROP_GetOnBOTTOM_MINUTES_ROTONLY(r_StartArr as integer, r_EndArr as integer)

  `This function exports the total on bottom minutes (rotating only) over the received interval

  local l_OUTPUT_OnBottomMins_Count as integer : l_OUTPUT_OnBottomMins_Count = 0
  
  local l_Hole_Depth_As1DPStr$ as string
  local l_Bit_Depth_As1DPStr$ as string

  for count_lp = r_StartArr to r_EndArr
  
  
    if MEM_MAIN_DATABASE(count_lp).Bit_Depth# = MEM_MAIN_DATABASE(count_lp).Hole_Depth#
      
      if MEM_MAIN_DATABASE(count_lp).RPM > 0
        inc l_OUTPUT_OnBottomMins_Count, 1
      endif
   
    endif
    
  next count_lp

  `Convert to Minutes
  l_OUTPUT_OnBottomMins_Count = int(l_OUTPUT_OnBottomMins_Count / 15)

endfunction l_OUTPUT_OnBottomMins_Count

function lib_Get_TOTAL_CIRCULATING_MINUTES(r_StartArr as integer, r_EndArr as integer, r_GPM_Threshold# as float)

  local l_OUTPUT_TotalCircMins as integer : l_OUTPUT_TotalCircMins = 0

  if r_GPM_Threshold# = 0
    `Thershold = 0
  	for count_lp = r_StartArr to r_EndArr
    	if MEM_MAIN_DATABASE(count_lp).FlowIn > 0
      	inc l_OUTPUT_TotalCircMins, 1
    	endif
  	next count_lp
  else
    `Thershold > 0
    for count_lp = r_StartArr to r_EndArr
    	if MEM_MAIN_DATABASE(count_lp).FlowIn => r_GPM_Threshold#
       inc l_OUTPUT_TotalCircMins, 1
    	endif
  	next count_lp
  endif

  `Convert to Minutes
  l_OUTPUT_TotalCircMins = int(l_OUTPUT_TotalCircMins / 15)


endfunction l_OUTPUT_TotalCircMins

function lib_Get_TOTAL_CIRCULATING_MINUTES_PUMP1(r_StartArr as integer, r_EndArr as integer)

  local l_OUTPUT_TotalCircMins as integer : l_OUTPUT_TotalCircMins = 0

  for count_lp = r_StartArr to r_EndArr
    if MEM_MAIN_DATABASE(count_lp).SPM1 > 0
      inc l_OUTPUT_TotalCircMins, 1
    endif
  next count_lp

  `Convert to Minutes
  l_OUTPUT_TotalCircMins = int(l_OUTPUT_TotalCircMins / 15)


endfunction l_OUTPUT_TotalCircMins

function lib_Get_TOTAL_CIRCULATING_MINUTES_PUMP2(r_StartArr as integer, r_EndArr as integer)

  local l_OUTPUT_TotalCircMins as integer : l_OUTPUT_TotalCircMins = 0

  for count_lp = r_StartArr to r_EndArr
    if MEM_MAIN_DATABASE(count_lp).SPM2 > 0
      inc l_OUTPUT_TotalCircMins, 1
    endif
  next count_lp

  `Convert to Minutes
  l_OUTPUT_TotalCircMins = int(l_OUTPUT_TotalCircMins / 15)


endfunction l_OUTPUT_TotalCircMins

function lib_Get_TOTAL_CIRCULATING_MINUTES_PUMP3(r_StartArr as integer, r_EndArr as integer)

  local l_OUTPUT_TotalCircMins as integer : l_OUTPUT_TotalCircMins = 0

  for count_lp = r_StartArr to r_EndArr
    if MEM_MAIN_DATABASE(count_lp).SPM3 > 0
      inc l_OUTPUT_TotalCircMins, 1
    endif
  next count_lp

  `Convert to Minutes
  l_OUTPUT_TotalCircMins = int(l_OUTPUT_TotalCircMins / 15)


endfunction l_OUTPUT_TotalCircMins

function lib_Get_TOTAL_ROTATING_MINUTES(r_StartArr as integer, r_EndArr as integer)

  local l_OUTPUT_TotalRotatingMins as integer : l_OUTPUT_TotalRotatingMins = 0
  
  local l_4Second_StringRevsEstimate# as float : l_4Second_StringRevsEstimate# = 0.0
  local l_4Second_StringRevCount# as float : l_4Second_StringRevCount# = 0
  g_DLS_DATA_Ttl_RT_Revs_ON_BOTTOM_ONLY = 0


  for count_lp = r_StartArr to r_EndArr
    if MEM_MAIN_DATABASE(count_lp).RPM > 0
      inc l_OUTPUT_TotalRotatingMins, 1
      
      l_4Second_StringRevsEstimate# = MEM_MAIN_DATABASE(count_lp).RPM / 15.0
      inc l_4Second_StringRevCount#, l_4Second_StringRevsEstimate#
      
      if MEM_MAIN_DATABASE(count_lp).Bit_Depth# = MEM_MAIN_DATABASE(count_lp).Hole_Depth#
        inc g_DLS_DATA_Ttl_RT_Revs_ON_BOTTOM_ONLY, (MEM_MAIN_DATABASE(count_lp).RPM / 15.0)
      endif
      
    endif
  next count_lp
  
  `Convert to Minutes
  l_OUTPUT_TotalRotatingMins = int(l_OUTPUT_TotalRotatingMins / 15)

  
  `Estimate String Revs / Revolutions for reporting
  g_DLS_DATA_Ttl_RT_Revs = int(l_4Second_StringRevCount#)
  g_DLS_DATA_Total_RT_Revs$ = str$(g_DLS_DATA_Ttl_RT_Revs)
  
  g_DLS_DATA_Total_RT_Revs_ON_BOTTOM_ONLY$ = str$(g_DLS_DATA_Ttl_RT_Revs_ON_BOTTOM_ONLY)
  
endfunction l_OUTPUT_TotalRotatingMins

function lib_Get_TOTAL_BIT_REVS(r_StartArr as integer, r_EndArr as integer)

  `This function calculates and fills all Total Bit Rev Values
  `Note: g_DLS_DATA_Total_RT_Revs$ (Period Rotary Table / String Revs calculated in lib_Get_TOTAL_ROTATING_MINUTES)

  local l_TotalGallonsPumpedOverPeriod as integer : l_TotalGallonsPumpedOverPeriod = 0
  local l_TotalGallonsPumpedOverPeriod_ON_BOTTOM_ONLY as integer : l_TotalGallonsPumpedOverPeriod_ON_BOTTOM_ONLY = 0
  local l_TotalMudMotorRevs as integer : l_TotalMudMotorRevs = 0
  local l_TotalMudMotorRevs_ON_BOTTOM_ONLY as integer : l_TotalMudMotorRevs_ON_BOTTOM_ONLY = 0
  
  local l_Combined_RT_and_MM_Revs_ON_BOTTOM_ONLY as integer : l_Combined_RT_and_MM_Revs_ON_BOTTOM_ONLY = 0
  local l_Combined_RT_and_MM_Revs_ALL as integer : l_Combined_RT_and_MM_Revs_ALL = 0

  for count_lp = r_StartArr to r_EndArr
  
    if MEM_MAIN_DATABASE(count_lp).FlowIn > 0
  
      inc l_TotalGallonsPumpedOverPeriod, (MEM_MAIN_DATABASE(count_lp).FlowIn / 15.0)
  
      if MEM_MAIN_DATABASE(count_lp).Bit_Depth# = MEM_MAIN_DATABASE(count_lp).Hole_Depth#
        inc l_TotalGallonsPumpedOverPeriod_ON_BOTTOM_ONLY, (MEM_MAIN_DATABASE(count_lp).FlowIn / 15.0)
      endif
  
    endif
  
  next count_lp

  l_TotalMudMotorRevs = int(l_TotalGallonsPumpedOverPeriod * WELLDATA_MudMotorFactor_RevsGallon#)
  l_TotalMudMotorRevs_ON_BOTTOM_ONLY = int(l_TotalGallonsPumpedOverPeriod_ON_BOTTOM_ONLY * WELLDATA_MudMotorFactor_RevsGallon#)
 
  g_DLS_DATA_Total_MM_Revs$ = str$(l_TotalMudMotorRevs)
  g_DLS_DATA_Total_MM_Revs_ON_BOTTOM_ONLY$ = str$(l_TotalMudMotorRevs_ON_BOTTOM_ONLY)
  
  l_Combined_RT_and_MM_Revs_ON_BOTTOM_ONLY = g_DLS_DATA_Ttl_RT_Revs_ON_BOTTOM_ONLY + l_TotalMudMotorRevs_ON_BOTTOM_ONLY
  g_DLS_DATA_Combined_RT_MM_Revs_ON_BOTTOM_ONLY$ = str$(l_Combined_RT_and_MM_Revs_ON_BOTTOM_ONLY)
  
  l_Combined_RT_and_MM_Revs_ALL = g_DLS_DATA_Ttl_RT_Revs + l_TotalMudMotorRevs
  g_DLS_DATA_Combined_RT_MM_Revs_ALL$ = str$(l_Combined_RT_and_MM_Revs_ALL)

endfunction 



function lib_Get_TOTAL_SPMs_MINUTES(r_StartArr as integer, r_EndArr as integer)
   
  g_DLS_DATA_Total_SPM1_Minutes# = -1
  g_DLS_DATA_Total_SPM2_Minutes# = -1
  g_DLS_DATA_Total_SPM3_Minutes# = -1
  
  g_DLS_DATA_Total_SPM1_Minutes_OnBottom# = -1
  g_DLS_DATA_Total_SPM2_Minutes_OnBottom# = -1
  g_DLS_DATA_Total_SPM3_Minutes_OnBottom# = -1
   
  
  ``Convert to Minutes
  `l_OUTPUT_TotalCircMins = int(l_OUTPUT_TotalCircMins / 15)

  for count_lp = r_StartArr to r_EndArr
  
    `Count PUMPS ON
    	if MEM_MAIN_DATABASE(count_lp).SPM1 > 0
      	inc g_DLS_DATA_Total_SPM1_Minutes#, 1.0
    	endif
    	if MEM_MAIN_DATABASE(count_lp).SPM2 > 0
      	inc g_DLS_DATA_Total_SPM2_Minutes#, 1.0
    	endif
    	if MEM_MAIN_DATABASE(count_lp).SPM3 > 0
      	inc g_DLS_DATA_Total_SPM3_Minutes#, 1.0
    	endif
    `Count IF ON BOTTOM ONLY
      if MEM_MAIN_DATABASE(count_lp).Bit_Depth# = MEM_MAIN_DATABASE(count_lp).Hole_Depth#
    		if MEM_MAIN_DATABASE(count_lp).SPM1 > 0
      		inc g_DLS_DATA_Total_SPM1_Minutes_OnBottom#, 1.0
    		endif
    		if MEM_MAIN_DATABASE(count_lp).SPM2 > 0
      		inc g_DLS_DATA_Total_SPM2_Minutes_OnBottom#, 1.0
    		endif
    		if MEM_MAIN_DATABASE(count_lp).SPM3 > 0
      		inc g_DLS_DATA_Total_SPM3_Minutes_OnBottom#, 1.0
    		endif
      endif
  
  next count_lp
  
  g_DLS_DATA_Total_SPM1_Minutes# = g_DLS_DATA_Total_SPM1_Minutes# / 15.0
  g_DLS_DATA_Total_SPM2_Minutes# = g_DLS_DATA_Total_SPM2_Minutes# / 15.0
  g_DLS_DATA_Total_SPM3_Minutes# = g_DLS_DATA_Total_SPM3_Minutes# / 15.0
  
  g_DLS_DATA_Total_SPM1_Minutes_OnBottom# = g_DLS_DATA_Total_SPM1_Minutes_OnBottom# / 15.0
  g_DLS_DATA_Total_SPM2_Minutes_OnBottom# = g_DLS_DATA_Total_SPM2_Minutes_OnBottom# / 15.0
  g_DLS_DATA_Total_SPM3_Minutes_OnBottom# = g_DLS_DATA_Total_SPM3_Minutes_OnBottom# / 15.0

endfunction



function lib_Get_PIPEPULLED_BLKPOSMidPoint(r_StartArr as integer, r_EndArr as integer)

  `To work out the number of pipe pulled in the range the maximum and minimum heights are found
  `and used to work out the average middle point. This is then used by other functions to work
  `out when the block position moves above and below this point to act as a counter.

  local l_OUTPUT_BlockPositionInterval as integer : l_OUTPUT_BlockPositionInterval = 0

  local l_Get_MaxBlockPosition# as float : l_Get_MaxBlockPosition# = 0
  local l_Get_MinBlockPosition# as float : l_Get_MinBlockPosition# = 1000000
  local l_OUTPUT# as float

  for count_lp = r_StartArr to r_EndArr
    if MEM_MAIN_DATABASE(count_lp).BlockPosition# > l_Get_MaxBlockPosition#
      l_Get_MaxBlockPosition# = MEM_MAIN_DATABASE(count_lp).BlockPosition#
    endif
    if MEM_MAIN_DATABASE(count_lp).BlockPosition# < l_Get_MinBlockPosition#
      l_Get_MinBlockPosition# = MEM_MAIN_DATABASE(count_lp).BlockPosition#
    endif
  next count_lp

  l_OUTPUT# = ((l_Get_MaxBlockPosition# - l_Get_MinBlockPosition#) / 2.0) + l_Get_MinBlockPosition#

endfunction l_OUTPUT#

function lib_Get_PIPEPULLED_NumPulled(r_StartArr as integer, r_EndArr as integer, r_BlockPosMidPoint# as float)

  local l_Stage as integer : l_Stage = -1
  local l_OUTPUT as integer : l_OUTPUT = 0

  for count_lp = r_StartArr to r_EndArr
  
    if MEM_MAIN_DATABASE(count_lp).BlockPosition# < r_BlockPosMidPoint#
      l_Stage = 1
    endif
    
    if l_Stage = 1
      if MEM_MAIN_DATABASE(count_lp).BlockPosition# > r_BlockPosMidPoint#
        inc l_OUTPUT, 1
        l_Stage = -1
      endif
    endif
    
  next count_lp
  
endfunction l_OUTPUT

function lib_USERINPUT_ROP_DepthInterval()

  `This function allows the user to set the ROP Depth Interval
  
  g_ENGINE_InputNumbersOnly$ = ""
  l_Keypressed = 1
  
  exit_condition = -1
  repeat
  
    cls


    d3d_starttext
  
      sp = 10
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "PROGRAM SUSPENDED (Press ESC to return)"
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  ""
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "This option allows you to change the ROP DEPTH INTERVAL", g_ENGINE_COLOUR_White
      if g_ENGINE_UNITS_FT_or_M = 1
        inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "Well Units                       : ft"
      else
        inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "Well Units                       : m"
      endif
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "Current ROP Depth Interval  : " + str$(g_ROPCALC_ROPCalcDepthInterval#, 1)
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  ""
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "Input the new number of Memory Records"
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "> " + g_ENGINE_InputNumbersOnly$
  
    d3d_endtext
    
    sync

    lib_INPUT_GetString_NumbersOnly()
    
    
    `Exit with Escape Key
    if scancode() = 0 and l_Keypressed = 1 then l_Keypressed = -1
    if keystate(1) = 1 and l_Keypressed = -1
      exit_condition = 10
      key_state(1,0) = 1
    endif
    
    if lib_Enter_Pressed(6473) = 1 and l_Keypressed = -1
      g_ROPCALC_ROPCalcDepthInterval# = val(g_ENGINE_InputNumbersOnly$)
      exit_condition = 1
    endif
  
  until exit_condition <> -1
  
  `Update the Engine Setup file with the new ROP Depth Interval
  SAVE_Engine_Setup()

endfunction


function lib_USERINPUT_ChangeAChannelName()

  `This function allows the user to set the ROP Depth Interval
  
  local l_UserSelection_EditItemNum as integer : l_UserSelection_EditItemNum = 1
  
  wdth_prnt = screen width() * 0.05
  X_prnt1 = screen width() * 0.05 + 50
  X_prnt2 = screen width() * 0.05 + 200
  X_prnt3 = screen width() * 0.05 + 300
  
  g_ENGINE_InputNumbersOnly$ = ""
  l_Keypressed = 1
  exit_condition = -1
  
  clear entry buffer
  
  
  repeat
  
    cls


    d3d_starttext
    
    sp = 0

    inc sp, 20 : d3d_text 1, wdth_prnt, sp, 0, g_ENG_ProjectMenuTitle$
    
  
    inc sp, 10
    inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "PROGRAM SUSPENDED (Press ESC to return)", g_ENGINE_COLOUR_White
    inc sp, 20
    inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "This option allows you to change the Channel Display Names", g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "NOTE: Leave an override BLANK to display the internal channel name.", g_ENGINE_COLOUR_White
    
    inc sp, 30
    d3d_text 1, X_prnt1, sp, 0, "CHANNEL INFORMATION", g_ENGINE_COLOUR_White
    inc sp, 20
    d3d_text 1, X_prnt1, sp, 0, "ID Number", g_ENGINE_COLOUR_White
    d3d_text 1, X_prnt2, sp, 0, "Internal Name", g_ENGINE_COLOUR_White
    d3d_text 1, X_prnt3, sp, 0, "OVERRIDE NAME", g_ENGINE_COLOUR_White
    inc sp, 5
      
      for print_lp = 1 to 27
      
        inc sp, 20
        
        if print_lp = l_UserSelection_EditItemNum
          d3d_box X_prnt3 - 3, sp - 2, X_prnt3 + 200, sp + 21, rgb(70, 70, 70)
        endif
        
        d3d_text 1, X_prnt1, sp, 0, str$(print_lp), g_ENGINE_COLOUR_White
        d3d_text 1, X_prnt2, sp, 0, CHANNEL_ID_ChannelNames$(print_lp), g_ENGINE_COLOUR_White
        d3d_text 1, X_prnt3, sp, 0, CHANNEL_ID_ChannelNames_UserOverride$(print_lp), g_ENGINE_COLOUR_White
      
        if print_lp = l_UserSelection_EditItemNum
          g_ENGINE_Input$ = CHANNEL_ID_ChannelNames_UserOverride$(print_lp)
          lib_INPUT_GetString()
          if g_ENGINE_Input$ <> CHANNEL_ID_ChannelNames_UserOverride$(print_lp)
            CHANNEL_ID_ChannelNames_UserOverride$(print_lp) = g_ENGINE_Input$
          endif
        endif
      
      next print_lp
  
  
  
  
    d3d_endtext
    
    
    `if g_ENGINE_Input$ <> ""
    
    `[UP Cursor]
    if keystate(200)= 1 and key_state(200,0)= 0
      dec l_UserSelection_EditItemNum, 1
      if l_UserSelection_EditItemNum < 1 then l_UserSelection_EditItemNum = 1
      key_state(200,0)=1
    endif
    if keystate(200)=0 and key_state(200,0)=1 then key_state(200,0)=0
    `[DOWN Cursor]
    if keystate(208)= 1 and key_state(208,0)= 0
      inc l_UserSelection_EditItemNum, 1
      if l_UserSelection_EditItemNum > 27 then l_UserSelection_EditItemNum = 27
      key_state(208,0)=1
    endif
    if keystate(208)=0 and key_state(208,0)=1 then key_state(208,0)=0
    
    `Exit with Escape Key
    if scancode() = 0 and l_Keypressed = 1 then l_Keypressed = -1
    if keystate(1) = 1 and l_Keypressed = -1
      exit_condition = 10
      key_state(1,0) = 1
    endif
    
    
    
    fastsync
  
  until exit_condition <> -1
  
  SAVE_CHANNEL_ID_Names_USER_OVERRIDE()

endfunction

function lib_USERINPUT_LagDepth_DisplayAndAdjust()

  `This function allows the display of the received wits LAG DEPTH variable
  ` - Setting any value other than ZERO will display the lag depth on the RT screens
  ` - Setting a value of ONE displays the variable unadjusted
  ` - Setting a positive or negative number multiplies the variable by that number, adjusting it
  
  g_ENGINE_InputNumbersOnly$ = ""
  l_Keypressed = 1
  
  exit_condition = -1
  repeat
  
    cls


    d3d_starttext
  
      sp = 10
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "PROGRAM SUSPENDED (Press ESC to return)"
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  ""
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "This option allows you to display the LAG DEPTH", g_ENGINE_COLOUR_White
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  " - Enter ZERO to TURN OFF displaying the Lag Depth.", g_ENGINE_COLOUR_White
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  " - Enter ONE to display the Lag Depth UNADJUSTED.", g_ENGINE_COLOUR_White
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  " - Enter a positive or negative value to adjust the lag depth by (multiplying) that amount.", g_ENGINE_COLOUR_White

      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  ""
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "Input the adjustment value"
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "> " + g_ENGINE_InputNumbersOnly$
  
    d3d_endtext
    
    sync

    lib_INPUT_GetString_NumbersOnly()
    
    
    `Exit with Escape Key
    if scancode() = 0 and l_Keypressed = 1 then l_Keypressed = -1
    if keystate(1) = 1 and l_Keypressed = -1
      exit_condition = 10
      key_state(1,0) = 1
    endif
    
    if lib_Enter_Pressed(6473) = 1 and l_Keypressed = -1
      g_LAGDEPTH_AdjustValue# = val(g_ENGINE_InputNumbersOnly$)
      exit_condition = 1
      SAVE_Engine_Setup()
    endif
  
  until exit_condition <> -1
  
  `Update the Engine Setup file with the new ROP Depth Interval
  SAVE_Engine_Setup()

endfunction


function lib_USERINPUT_DB_MEM_Ttl_Num_Records()

  `This function allows the user to manually set lib_USERINPUT_DB_MEM_Ttl_Num_Records
  `useful for changing the database by manually setting a point in it and then
  `formatting the HD DB and reloading.
  
  g_ENGINE_InputNumbersOnly$ = ""
  l_Keypressed = 1
  
  exit_condition = -1
  repeat
  
    cls
  
    d3d_starttext
  
      sp = 10
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "PROGRAM SUSPENDED (Press ESC to return)"
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  ""
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "This option allows you to change the number of Memory Database records (prune back to a point)", g_ENGINE_COLOUR_White
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "Number of records in Memory : " + str$(g_DATABASE_MEM_Total_Num_Records)
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "Number of HD Records: " + str$(g_DATABASE_HD_Total_Num_Records)
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  ""
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "Input the new number of Memory Records"
      inc sp, 20 : d3d_text 2, 50, l_GY + sp, 0,  "> " + g_ENGINE_InputNumbersOnly$
  
    d3d_endtext
    
    sync

    lib_INPUT_GetString_NumbersOnly()
    
    if scancode() = 0 and l_Keypressed = 1 then l_Keypressed = -1
    `Exit with Escape Key
    if keystate(1) = 1 and l_Keypressed = -1
      exit_condition = 10
      key_state(1,0) = 1
    endif
    
    if lib_Enter_Pressed(6477) = 1 and l_Keypressed = -1
      g_DATABASE_MEM_Total_Num_Records = val(g_ENGINE_InputNumbersOnly$)
      exit_condition = 1
    endif
  
  until exit_condition <> -1

endfunction


function lib_Activate_RTGraphicsDisplay()

  `[Typically from F9] - Toggle the Realtime Graphics Display/Realtime Graphics Variables Screen
  `              NOTE: This is context sensitive depending on whether the user has already started the
  `              Realtime Graphics Display
  
    if g_MAIN_SCREEN_TYPE <> 1000
      `Start the Realtime Graphics Display
       g_MAIN_SCREEN_TYPE = 1000
       g_COMMANDCONSOLE_Active = 0
       lib_CMND_CNSL_Deactivate()
       lib_Disp_RT_STARTUP()
       ENG_RTDisp_GADGET_Toggle = -1
       ENG_RTDisp_GADGET_Stage = -1
       g_PLOTCHART_display_values_click_toggle = -1
    else
      `Realtime Graphics Display is running
      if g_ENGINE_CoreFunctionType = 1
        `If Client is in Viewer Mode then allow access to Client/Server Visual Settings and Viewer DB
        if g_COMMANDCONSOLE_Active = 1 and g_DISP_REALTIME_ScreenType = 1
          g_DISP_REALTIME_ScreenType = 2
        endif  
        if g_DISP_REALTIME_ScreenType = 1
          g_DISP_REALTIME_ScreenType = 2
        else
          if g_COMMANDCONSOLE_Active = 1
            `Start the Realtime Graphics Display
             g_MAIN_SCREEN_TYPE = 1000
             g_COMMANDCONSOLE_Active = 0
             lib_CMND_CNSL_Deactivate()
             `lib_Disp_RT_STARTUP()
             ENG_RTDisp_GADGET_Toggle = -1
             ENG_RTDisp_GADGET_Stage = -1
             g_PLOTCHART_display_values_click_toggle = -1
          endif
          g_DISP_REALTIME_ScreenType = 1
        endif
      else
        `If in Mudlogging Mode then return to the command console to allow normal access to functions
        `Seems to just be the SYSTEM BUTTON that ends up using this. 
        g_DISP_REALTIME_SHUTDOWN_Toggle = 1
      endif
    endif 
  
endfunction  

function lib_LOOP_EXIT()

  local l_Return as integer : l_SndOut = -1

  `This function provides exit from a Repeat>Until loop
  `It monitors and allows exit from a Repeat>Until condition by setting and checking
  `global keystate and mousestate variables (g_LPEXIT_Keystate and g_LPEXIT_Mousestate)
  

  
  if scancode() = 0
    g_LPEXIT_Keystate = -1
  endif
  if mouseclick() = 0
    g_LPEXIT_Mousestate = -1
  endif    
  if scancode() <> 0 and g_LPEXIT_Keystate = -1
    l_Return = 1
    key_state(scancode(),0) = 1
  endif
  if mouseclick() <> 0 and g_LPEXIT_Mousestate = -1
    l_Return = 1
    mouse_click(mouseclick()) = 1
  endif

endfunction l_Return

function lib_INPUT_GetString()

    
  l_char$ = entry$()
  select asc(l_char$)
    case 8 : `Backspace
      g_ENGINE_Input$ = left$(g_ENGINE_Input$, len(g_ENGINE_Input$) - 1)
      g_ENGINE_InputSTARS$ = left$(g_ENGINE_InputSTARS$, len(g_ENGINE_Input$) - 1)
    endcase   
    case default
      if asc(l_char$) > 31
        g_ENGINE_Input$ = g_ENGINE_Input$ + l_char$
        g_ENGINE_InputSTARS$ = g_ENGINE_InputSTARS$ + "*"
      endif
    endcase
  endselect
      
  clear entry buffer
      
endfunction

function lib_INPUT_GetString_Alarm_Label()

  local l_char$ as string

  `This function is used as a get string for the Alarm Label from the Alarm Input Pad box only.
    
  l_char$ = entry$()
  select asc(l_char$)
    case 8 : `Backspace
      g_ALARM_ENG_INPUTPAD_LabelText$ = left$(g_ALARM_ENG_INPUTPAD_LabelText$, len(g_ALARM_ENG_INPUTPAD_LabelText$) - 1)
    endcase   
    case default
      if asc(l_char$) > 31
        g_ALARM_ENG_INPUTPAD_LabelText$ = g_ALARM_ENG_INPUTPAD_LabelText$ + l_char$
      endif
    endcase
  endselect
      
  clear entry buffer
      
endfunction

function lib_INPUT_GetString_NumbersOnly()

  l_char$ = entry$()
  select asc(l_char$)
    case 8 : `Backspace
      g_ENGINE_InputNumbersOnly$ = left$(g_ENGINE_InputNumbersOnly$, len(g_ENGINE_InputNumbersOnly$) - 1)
    endcase   
    case default
      if asc(l_char$) = 46
        g_ENGINE_InputNumbersOnly$ = g_ENGINE_InputNumbersOnly$ + l_char$
      endif
      if asc(l_char$) > 47 and asc(l_char$) < 58
        g_ENGINE_InputNumbersOnly$ = g_ENGINE_InputNumbersOnly$ + l_char$
      endif
    endcase
  endselect
      
  clear entry buffer
      
endfunction

function lib_INPUT_GetStringX(r_X$ as string, r_MaxChar as integer, r_IsIPAddress as integer, r_IsPortNumber as integer)

  `r_X$ = the string to be changed
  `r_MaxChar = max charaters in the string
  `r_IsIPAddress = Toggle for inputting in an IP Address format (checks for IP format)

  local l_add_enddot as integer : l_add_enddot = -1
  local l_counter as integer
  local p_X$ as string
  local l_RulePassed as integer : l_RulePassed = 0
  
  p_X$ = r_X$
  l_char$ = entry$()
  select asc(l_char$)
  
    case 8 : `Backspace
      p_X$ = left$(r_X$, len(r_X$) - 1)
    endcase   
  
    case default
      if len(r_X$) <= r_MaxChar
        if r_IsIPAddress = 1
          `If the string is an IP Address then enforce rule conformity
            `1. Only numbers and a '.' are acceptable characters
              if l_RulePassed = 0
                if asc(l_char$) > 47 and asc(l_char$) < 58
                  l_RulePassed = 1
                else
                  if asc(l_char$) = 46
                    l_RulePassed = 1
                  endif
                endif
              endif
            `2. The first character cannot be a '.'
              if l_RulePassed = 1
                if len(r_X$) = 0
                  if l_char$ <> "."
                    l_RulePassed = 2
                  endif
                else
                  l_RulePassed = 2 
                endif              
              endif
            `3. Two dots cannot be next to each other
              if l_RulePassed = 2
                `if len(r_X$) > 1
                  if right$(r_X$, 1) = "."
                    if l_char$ <> "."
                      l_RulePassed = 3
                    endif
                  else
                    l_RulePassed = 3
                  endif
                `else
                `  `l_RulePassed = 3
                `endif
              endif
            `4. Only 4 '.'s are possible in an IP Address (count number of '.'s; max 4)
               if l_RulePassed = 3
                 l_counter = 0
                 for count_lp = 1 to len(r_X$)
                   if mid$(r_X$, count_lp) = "."
                     inc l_counter, 1
                   endif
                 next count_lp
                 if l_counter < 3 or l_char$ <> "."
                   l_RulePassed = 4
                 endif
               endif
             `5. Only 3 numbers in a row are permitted
               if l_RulePassed = 4
                 if l_char$ <> "."
                   if len(r_X$) > 2
                     for check_lp = 1 to 3
                       if mid$(right$(r_X$, 3), check_lp) = "."
                         l_RulePassed = 5 
                       endif
                     next check_lp
                   else
                     l_RulePassed = 5 
                   endif
                 else
                   l_RulePassed = 5 
                 endif
               endif
             `6. After 3 numbers a '.' is inserted, unless the '.' was the last possible
               if l_RulePassed = 5
                 if len(r_X$) > 1
                   l_add_enddot = -1
                   if l_char$ <> "."
                     l_test$ = right$(r_X$, 2)
                     if mid$(l_test$, 1) <> "." and mid$(l_test$, 2) <> "." and l_counter < 3
                       l_add_enddot = 1
                     endif
                   endif
                 endif  
               endif
            `All Rules Passed - Add Character
            if l_RulePassed = 5
              p_X$ = r_X$ + l_char$
              if l_add_enddot = 1
                p_X$ = p_X$ + "."
              endif
            endif  
        else
          if r_IsPortNumber = 1
            `If the string is a Port Number then enforce rule conformity
              `1. Only numbers are acceptable characters
              if asc(l_char$) > 47 and asc(l_char$) < 58
                p_X$ = r_X$ + l_char$
              endif
          else
            if asc(l_char$) > 31
              p_X$ = r_X$ + l_char$
            endif
          endif
        endif
      endif
    endcase
  endselect
  
      
  clear entry buffer
      
endfunction p_X$

function lib_INPUT_GetString_USERIDInput()

    
  l_char$ = entry$()
  select asc(l_char$)
    case 8 : `Backspace
      g_LOGIN_UserID_Input$ = left$(g_LOGIN_UserID_Input$, len(g_LOGIN_UserID_Input$) - 1)
    endcase   
    case default
      if asc(l_char$) > 31
        g_LOGIN_UserID_Input$ = g_LOGIN_UserID_Input$ + l_char$
      endif
    endcase
  endselect
      
  clear entry buffer
  
  
      
endfunction

function lib_PRINTColon(r_FontSize as integer, r_xPos as integer, r_yPos as integer, r_Colour as dword)

  `This function prints a COLON to the screen
  `NOTE: It must be called within a d3d_starttext endtext group
  
  d3d_text r_FontSize, r_xPos, r_yPos, 0, ":", r_Colour

endfunction

function lib_Get_ChannelDisplayName(r_Pointer)

  local p_OUTPUT$ as string
  
  if CHANNEL_ID_ChannelNames_UserOverride$(r_Pointer) <> ""
    p_OUTPUT$ = CHANNEL_ID_ChannelNames_UserOverride$(r_Pointer)
  else
    p_OUTPUT$ = CHANNEL_ID_ChannelNames$(r_Pointer)
  endif

endfunction p_OUTPUT$


function lib_Chnl_DPs(r_ChannelID)

  local p_OUTPUT as integer : p_OUTPUT = 1
  
  if CHANNEL_ID_ChannelLinkIndex(r_ChannelID) = 8 then p_OUTPUT = 2 :`TripTank then DP=2

endfunction p_OUTPUT


function lib_Enter_Pressed(r_DEBUG as integer)

  local l_EnterPressed as integer : l_EnterPressed = -1

    `[Enter] - Accept the command console string
    if keystate(28) = 0 and key_state(28,0) = 1 then key_state(28,0) = 0
    if keystate(28) = 1 and key_state(28,0) = 0
      l_EnterPressed = 1
      key_state(28,0) = 1
      g_DEBUG_lib_Enter_Pressed = r_DEBUG
    endif
    
    
    `[Numeric Keypad Enter] - Accept the command console string
    if keystate(156) = 0 and key_state(156,0) = 1 then key_state(156,0) = 0
    if keystate(156) = 1 and key_state(156,0) = 0
      l_EnterPressed = 1
      key_state(156,0) = 1
      g_DEBUG_lib_Enter_Pressed = r_DEBUG
    endif
    

endfunction l_EnterPressed

function lib_CmndCons_Display_Menu()

  `This is used in the FRONTSCREEN menus when the Command Console is ACTIVE

  local l_YPos as integer : l_YPos = 19

  `NOTE: d3d_starttext and d3d_endtext are not called here, this function must be called within them.

  local l_x1# as float : l_x1# = 0.60
  local l_x2# as float : l_x2# = 0.80
  
  d3d_text 1, screen width() * l_x2#, (l_YPos+(19*2)), 0, "F12 - Command Console EXIT"
  d3d_text 1, screen width() * l_x2#, (l_YPos+(19*3)), 0, "ESC - Command Console EXIT"
  
    if g_server_connected = 0
      if g_connection_attempt_ATTEMPT_NOW = 1
        d3d_text 1, screen width() * l_x2#, (l_YPos+(19*2)), 0, "*** Attempting to Connect ***"
      else
        if timer() > g_MENU_F8Connect_Timer
          g_MENU_F8Connect_Timer = timer() + 1000
          if g_MENU_F8Connect_Toggle = 1
            g_MENU_F8Connect_Toggle = -1
          else
            g_MENU_F8Connect_Toggle = 1
          endif
        endif  
        if g_MENU_F8Connect_Toggle = 1
          d3d_text 1, screen width() * l_x2#, (l_YPos+(19*4)), 0, "F8 - Connect To Server"
        else
          d3d_text 1, screen width() * l_x2#, (l_YPos+(19*4)), 0, ""
        endif
      endif
    endif

endfunction

function lib_Display_Menu()

  `This is used in the FRONTSCREEN menus when the Command Console is OFF

  local l_YPos as integer : l_YPos = 19

  `NOTE: d3d_starttext and d3d_endtext are not called here, this function must be called within them.

  local l_x1# as float : l_x1# = 0.60
  local l_x2# as float : l_x2# = 0.80
  
  if g_ENGINE_CoreFunctionType = 1 : `Client started in Viewer Mode
    d3d_text 1, screen width() * l_x1#, (l_YPos+(19*0)), 0, "F1 - Main Screen, mst: " + str$(g_MAIN_SCREEN_TYPE)
    d3d_text 2, screen width() * l_x1#, (l_YPos+(19*1)), 0, "F9 - Graphical Display"

    d3d_text 1, screen width() * l_x2#, (l_YPos+(19*0)), 0, "F12 - Command Console"   
    
    if g_DTFULLSCREEN_Toggle = 2
      d3d_text 1, screen width() * l_x2#, (l_YPos+(19*1)), 0, " `   - Windowed (Double Tap)"
    else
      d3d_text 1, screen width() * l_x2#, (l_YPos+(19*1)), 0, " `   - Fullscreen (Double Tap)"
    endif
    
    if g_server_connected = 0
      if g_connection_attempt_ATTEMPT_NOW = 1
        d3d_text 1, screen width() * l_x2#, (l_YPos+(19*2)), 0, "*** Attempting to Connect ***"
      else
        if timer() > g_MENU_F8Connect_Timer
          g_MENU_F8Connect_Timer = timer() + 1000
          if g_MENU_F8Connect_Toggle = 1
            g_MENU_F8Connect_Toggle = -1
          else
            g_MENU_F8Connect_Toggle = 1
          endif
        endif  
        if g_MENU_F8Connect_Toggle = 1
          d3d_text 1, screen width() * l_x2#, (l_YPos+(19*2)), 0, "F8 - Connect To Server"
        else
          d3d_text 1, screen width() * l_x2#, (l_YPos+(19*2)), 0, ""
        endif
      endif
    endif
  endif
   
  if g_ENGINE_CoreFunctionType = 2 : `Client started in Mudlogging Mode
    d3d_text 1, screen width() * l_x1#, (l_YPos+(19*0)), 0, "F1 - Front Screen"
    d3d_text 1, screen width() * l_x1#, (l_YPos+(19*1)), 0, "F2 - Databases"
    d3d_text 1, screen width() * l_x1#, (l_YPos+(19*2)), 0, "F3 - Serial Port Information/WITS"
    d3d_text 1, screen width() * l_x1#, (l_YPos+(19*3)), 0, "F4 - ROP Calculation Data"
    d3d_text 2, screen width() * l_x1#, (l_YPos+(19*4)), 0, "F9 - Graphical Display"
    
    d3d_text 1, screen width() * l_x2#, (l_YPos+(19*0)), 0, "F10 - USER ID's"
    d3d_text 1, screen width() * l_x2#, (l_YPos+(19*1)), 0, "F11 - Instant Messaging"
    d3d_text 1, screen width() * l_x2#, (l_YPos+(19*2)), 0, "F12 - Command Console"
    
    if g_DTFULLSCREEN_Toggle = 2
      d3d_text 1, screen width() * l_x2#, (l_YPos+(19*3)), 0, " `   - Windowed (Double Tap)"
    else
      d3d_text 1, screen width() * l_x2#, (l_YPos+(19*3)), 0, " `   - Fullscreen (Double Tap)"
    endif
    
    if g_server_connected = 0
      if g_connection_attempt_ATTEMPT_NOW = 1
        d3d_text 1, screen width() * l_x2#, (l_YPos+(19*4)), 0, "*** Attempting to Connect ***"
      else
        if timer() > g_MENU_F8Connect_Timer
          g_MENU_F8Connect_Timer = timer() + 1000
          if g_MENU_F8Connect_Toggle = 1
            g_MENU_F8Connect_Toggle = -1
          else
            g_MENU_F8Connect_Toggle = 1
          endif
        endif  
        if g_MENU_F8Connect_Toggle = 1
          d3d_text 1, screen width() * l_x2#, (l_YPos+(19*4)), 0, "F8 - Connect To Server"
        else
          d3d_text 1, screen width() * l_x2#, (l_YPos+(19*4)), 0, ""
        endif
      endif
    endif
  endif


endfunction

function lib_Drag_ExitBoxGraphic()

  `HANDLE DRAGGING THE RANGE INPUT BOX AROUND THE SCREEN
  if mouseclick() = 1
    if g_RTDispEXITBOX_MOVE_MouseClickHOLD = -1 and mouse_click(1) = -1
      if mousex() > g_RTDispEXITBOX_PosX and mousex() < g_RTDispEXITBOX_PosX + 391
        if mousey() > g_RTDispEXITBOX_PosY and mousey() < g_RTDispEXITBOX_PosY + 29
          g_RTDispEXITBOX_MOVE_MouseClickHOLD = 1
          g_RTDispEXITBOX_MOVE_Old_MseX = mousex()
          g_RTDispEXITBOX_MOVE_Old_MseY = mousey()
          mouse_click(1) = 1
        endif
      endif
    endif
    if g_RTDispEXITBOX_MOVE_MouseClickHOLD = 1
      g_RTDispEXITBOX_PosX = g_RTDispEXITBOX_PosX + (mousex() - g_RTDispEXITBOX_MOVE_Old_MseX)
      if g_RTDispEXITBOX_PosY + (mousey() - g_RTDispEXITBOX_MOVE_Old_MseY) > 0 
        g_RTDispEXITBOX_PosY = g_RTDispEXITBOX_PosY + (mousey() - g_RTDispEXITBOX_MOVE_Old_MseY)
      endif
      g_RTDispEXITBOX_MOVE_Old_MseX = mousex()
      g_RTDispEXITBOX_MOVE_Old_MseY = mousey()
    endif
  endif
  if mouseclick() = 0 and g_RTDispEXITBOX_MOVE_MouseClickHOLD = 1
    g_RTDispEXITBOX_MOVE_MouseClickHOLD = -1
  endif  

endfunction

function lib_ToolTip_Display(r_TipTextGroup as integer)

  `r_TipTextGroup : Groups allow the code to be grouped with different screen co-ordinates per function call
  `                 all stored in this function.
  
  local l_DispTT as integer : l_DispTT = -1
  local l_DispStr$ as string : l_DispStr$ = ""
  local l_XPos as integer
  local l_YPos as integer
  local l_Width as integer

  `Trigger Tool Tip Timer
  if mousex() > g_ENG_ToolTip_Mouse_StartX - c_ENG_ToolTip_Startup_Sensitivity and mousex() < g_ENG_ToolTip_Mouse_StartX + c_ENG_ToolTip_Startup_Sensitivity and mousey() > g_ENG_ToolTip_Mouse_StartY - c_ENG_ToolTip_Startup_Sensitivity and mousey() < g_ENG_ToolTip_Mouse_StartY + c_ENG_ToolTip_Startup_Sensitivity
    if g_ENG_ToolTip_Toggle_ON = -1
      g_ENG_ToolTip_Timer = timer() + c_ENG_ToolTip_Startup_Timer
      g_ENG_ToolTip_Toggle_ON = 1
    endif  
  else
    g_ENG_ToolTip_Mouse_StartX = mousex()
    g_ENG_ToolTip_Mouse_StartY = mousey()
    g_ENG_ToolTip_Toggle_ON = -1
    g_ENG_ToolTip_Toggle_DisplayON = -1
  endif
  
  `Activate the Tool Tip based on the Timer
  if g_ENG_ToolTip_Toggle_ON = 1
    if timer() > g_ENG_ToolTip_Timer
      g_ENG_ToolTip_Toggle_DisplayON = 1
    endif  
  else
    g_ENG_ToolTip_Toggle_DisplayON = -1
    if image exist(c_ENG_ToolTip_BkgdIMG) = 1
      delete image c_ENG_ToolTip_BkgdIMG
    endif  
  endif

  `GROUP - Graphical Installation Screen Tool Tips
  if r_TipTextGroup = 1
    if mousex() > 119 and mousex() < 333
      if mousey() > 143 and mousey() < 191
        if mousey() < 167
          l_DispTT = 1 : l_DispStr$ = "Screen Resolution: 1024x768"
        else
          l_DispTT = 1 : l_DispStr$ = "Screen Resolution: Widescreen"
        endif
      endif
      if mousey() > 257 and mousey() < 300
        if mousey() < 280
          l_DispTT = 1 : l_DispStr$ = "Server IP Address"
        else
          l_DispTT = 1 : l_DispStr$ = "Server Port Number"
        endif
      endif
      if mousey() > 365 and mousey() < 411
        if mousey() < 391
          l_DispTT = 1 : l_DispStr$ = "Run as Viewer"
        else
          l_DispTT = 1 : l_DispStr$ = "Run as Server"
        endif
      endif
    endif  
  endif
  
  if l_DispTT = 1 and g_ENG_ToolTip_Toggle_DisplayON = 1
  
    if image exist(c_ENG_ToolTip_BkgdIMG) = 0
      l_Width = d3d_gettextwidth(1, l_DispStr$) + 10
      lib_Create_Image(l_Width, 20, rgb(250, 250, 250), c_ENG_ToolTip_BkgdIMG, 1, rgb(118, 118, 118))
    endif
  
    if image exist(c_ENG_ToolTip_BkgdIMG) = 1
      if mousex() + image width(c_ENG_ToolTip_BkgdIMG) > 450
        l_XPos = 450 - image width(c_ENG_ToolTip_BkgdIMG)
        l_YPos = mousey() - 20
      else
        l_XPos = mousex()
        l_YPos = mousey() - 20
      endif
      
      paste image c_ENG_ToolTip_BkgdIMG, l_XPos, l_YPos
      d3d_starttext
        d3d_text 1, l_XPos + 5, l_YPos + 2, 0, "" + l_DispStr$, g_ENGINE_COLOUR_Black
      d3d_endtext
    endif
  
  endif
  
  d3d_starttext
    d3d_text 1, 20, 160, 0, " : " + str$(g_ENG_ToolTip_Toggle_ON), g_ENGINE_COLOUR_Black
    d3d_text 1, 20, 180, 0, " : " + str$(g_ENG_ToolTip_Mouse_StartX), g_ENGINE_COLOUR_Black
    d3d_text 1, 20, 200, 0, " : " + str$(g_ENG_ToolTip_Mouse_StartY), g_ENGINE_COLOUR_Black
    d3d_text 1, 20, 220, 0, " : " + str$(g_ENG_ToolTip_Timer), g_ENGINE_COLOUR_Black
    d3d_text 1, 20, 240, 0, " : " + str$(g_ENG_ToolTip_Toggle_DisplayON), g_ENGINE_COLOUR_Black
    d3d_text 1, 20, 240, 0, " Wid: " + str$(image width(c_ENG_ToolTip_BkgdIMG)), g_ENGINE_COLOUR_Black
  d3d_endtext


endfunction

function lib_EXIT_Program(r_Display_Text as integer , r_DirectExit as integer)

  `r_Display_Text - Displays exit text on screen; -1: No, 1: Yes
  `r_DirectExit - Immediately Exists Program; -1: No, 1: Yes

  local l_Exit_Timer as integer : l_Exit_Timer = timer()
  local l_wdth_prnt as integer
  local l_val_offset as integer
  local l_Keystate as integer : l_Keystate = -1
  
  local l_ENG_Graphics$ as string : l_ENG_Graphics$ = ""
  local l_ENG_SysMem$ as string : l_ENG_SysMem$ = ""
  local l_ENG_DisConnect$ as string : l_ENG_DisConnect$ = ""
  
  local l_ExitGraphic_PosX as integer
  local l_ExitGraphic_PosY as integer

  l_ExitGraphic_PosX = g_ENG_Half_Screen_Width - (image width(c_DB_ExitProgram_ExitBox_Image) / 2)
  l_ExitGraphic_PosY = g_ENG_Half_Screen_Height - (image height(c_DB_ExitProgram_ExitBox_Image) / 2)

  paste image c_DB_ExitProgram_ExitBox_Image, l_ExitGraphic_PosX, l_ExitGraphic_PosY, 1
  sync
  
  l_exit_counter = 0
  exit_condition = -1
  repeat
  
    inc l_exit_counter, 1
    
    	if r_Display_Text = 1
    	
    		d3d_starttext
      		l_wdth_prnt = screen width() * 0.05
      		sp = 0
      		inc sp,19
      		inc sp,19 : d3d_text 3, l_wdth_prnt, sp, 0, "  CLOSING DOWN"
      		inc sp,19
      		inc sp,19 : d3d_text 2, l_wdth_prnt, sp, 0, "  SYSTEM ENGINE VARIABLES"
      		inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    1. Freeing Graphics Memory : " + l_ENG_Graphics$
      		inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    2. Freeing System Memory : " + l_ENG_SysMem$
      		inc sp,19
      		inc sp,19
      		inc sp,19 : d3d_text 2, l_wdth_prnt, sp, 0, "  CONNECTIONS"
      		inc sp,19 : d3d_text 1, l_wdth_prnt, sp, 0, "    3. Disconnecting from Server : " + l_ENG_DisConnect$
    		
      		` Engine Commands
      		if l_exit_counter = 1 + 1
        		l_ENG_Graphics$ = lib_EXIT_Video()
      		endif
      		if l_exit_counter = 1 + 2
        		l_ENG_SysMem$ = lib_EXIT_Free_Arrays()
      		endif
      		if l_exit_counter = 1 + 3
        		l_ENG_DisConnect$ = lib_EXIT_Disconnect_Server()
      		endif
      		
      		if l_exit_counter > 1 + 4
        		inc sp, 19*3 : d3d_text 2, l_wdth_prnt, sp, 0, "  Press a key to Exit the program."
        		if scancode() = 0 and l_Keystate = -1
          		l_Keystate = 1
        		endif
        		if scancode() <> 0 and l_Keystate = 1
          		exit_condition = 1
          		inc sp,(19*3) : d3d_text 8, l_wdth_prnt, sp, 0, "  Exiting Program."
        		endif
      		endif
    		d3d_endtext
    		
    		 sync
    	
    	endif
      
   
    
    if mouseclick() = 1 and mouse_click(1) = -1
      exit_condition = 1
    endif
    if mouseclick() = 0 and mouse_click(1) = 1
      mouse_click(1) = -1
    endif  
    
    if r_DirectExit = 1
      exit_condition = 1
    endif
  
  until exit_condition = 1
  
  end

endfunction

function lib_EXIT_Video()

  local l_FunctionTimer as integer : l_FunctionTimer = timer()
  local l_FunctionTStr$ as string

  `Delete Images
  for del_img_lp = 1 to 100
    if del_img_lp <> c_DISPLAY_Imgnum_BlackBackground
      if image exist(del_img_lp) = 1
        delete image del_img_lp
      endif
    endif
  next del_img_lp
  
  `Delete Objects
  for del_obj_lp = 1 to 100
    if del_obj_lp <> c_DISPOBJ_BlackBackground
      if object exist(del_obj_lp) = 1
        delete object del_obj_lp
      endif
    endif
  next del_obj_lp
  
  `Delete Sprites
  for del_spr_lp = 1 to 100
    if sprite exist(del_spr_lp) = 1
      delete sprite del_spr_lp
    endif
  next del_spr_lp       
  

  l_FunctionTStr$ = "Graphics Unloaded (" + str$(timer() - l_FunctionTimer) + "ms)"

endfunction l_FunctionTStr$

function lib_EXIT_Free_Arrays()

  local l_FunctionTimer as integer : l_FunctionTimer = timer()
  local l_FunctionTStr$ as string
  
    `Delete DLL's
    delete dll c_SystemTrayDLL
    delete dll c_User32DLL
    delete dll c_Kernel32DLL

    undim key_state(0)
    
    undim MEM_MAIN_DATABASE(0)
    
    undim WITS_Chnl_Rcrd_Mnemonics$(0)

    undim WITS_String_Separator_Positions(0)
    undim WITS_RECEIVE_String_Breakdown$(0)
    undim WITS_RECEIVE_String_Breakdown_Values#(0)
    
    undim Command_Console_Commands$(0)
    

  
  l_FunctionTStr$ = "System Memory Cleared (" + str$(timer() - l_FunctionTimer) + "ms)"

endfunction l_FunctionTStr$

function lib_EXIT_DISCONNECT_Server()

  local l_FunctionTimer as integer : l_FunctionTimer = timer()
  local l_FunctionTStr$ as string
  local l_net_connected_test as integer
  local l_TimePeriod$ as string
  
  ARS_LOCAL_Add_Report("lib_EXIT_DISCONNECT_Server > Test Connection State", -1)

    l_net_connected_test = net connected()
    if l_net_connected_test = 1
      ARS_LOCAL_Add_Report("lib_EXIT_DISCONNECT_Server > State = 1. Disconnecting", -1)
      net disconnect
    else
      ARS_LOCAL_Add_Report("lib_EXIT_DISCONNECT_Server > State = -1. Failed.", -1)
    endif
    
  g_server_relationship_data_received = -1  

  l_FunctionTStr$ = "Disconnected from Server (" + str$(timer() - l_FunctionTimer) + "ms)"
  l_TimePeriod$ = str$(timer() - l_FunctionTimer) + "ms"
  ARS_LOCAL_Add_Report("lib_EXIT_DISCONNECT_Server > Took : " + l_TimePeriod$, -1)

endfunction l_FunctionTStr$


function lib_SetScreen_Windowed_FullScreen_p1or2(r_Type as integer)

  `This function sets the screentype - either windowed or fullscreen
  `Windowed   : r_Type = 1
  `FullScreen : r_Type = 2

  if r_Type = 1
    g_Window_Fullscreen_Toggle = 1
    g_DTFULLSCREEN_Toggle = 1
    set window layout 1, 1, 0
    set window size screen width(), screen height()
    set window position 0, 0
  endif
  
  if r_Type = 2
    g_Window_Fullscreen_Toggle = 2
    g_DTFULLSCREEN_Toggle = 2
    set window layout 0, 0, 0
    set window size screen width(), screen height()
    set window position 0, 0
  endif 

endfunction


function lib_Programmer_Mode_ON()

  g_ENG_Logging_Active = -1
  g_AUTO_CONNECT_ON = -1

endfunction



function lib_BACKUP_Local_Database_StrOUT()

  `BACKUP From: Startup Date Check - If the prog hasn't been run for a while then offer create new well
  `             This would then create a backup of the HD DB Copy + Mem DB Write.
  `             However. This doesn't even run any more.

  local l_FunctionOutput$ as string : l_FunctionOutput$ = "lib_BACKUP_Local_Database_StrOUT > RUN"
  local l_LogFileBuildStr$ as string
  local l_LOG_NewHDFile_FileSize as integer
  local l_LOG_NewHDFile_TotalRecs# as float
  
  local l_day$ as string
  local l_month$ as string
  local l_year$ as string
  local l_hours$ as string
  local l_minutes$ as string
  local l_date$ as string
  local l_time$ as string
  local f_filename$ as string
  local l_dest$ as string
  
  
  g_lib_BACKUP_Local_Database_Result = -1

  if file exist(g_CLIENT_Database_Full_Path$) = 1
    l_day$ = right$(left$(get date$(), 5), 2)
    l_month$ = left$(get date$(), 2)
    l_year$ =  right$(get date$(), 2)
    l_hours$ = left$(get time$(), 2)
    l_minutes$ = right$(left$(get time$(), 5), 2)
    l_date$  = l_day$ + l_month$ + l_year$
    l_time$ = l_hours$ + l_minutes$
    f_filename$ = "BackupDB_" + l_date$ + "_" + l_time$ + ".dat"
    l_dest$ = g_autodir_full_directory_path$ + "\Database\" + f_filename$
    
    
    lib_LOG_FILE_Backup_Information("  ")
    lib_LOG_FILE_Backup_Information("**** NEW BACKUP at " + get time$() + " / " + l_date$ + " ****")
    lib_LOG_FILE_Backup_Information("  + ** NEW HD BACKUP (A Copy of the HD DB file) **")
    lib_LOG_FILE_Backup_Information("  + Requested from - lib_BACKUP_Local_Database_StrOUT")
    l_LogFileBuildStr$ = "  + Variable: g_DATABASE_HD_Total_Num_Records: " + str$(g_DATABASE_HD_Total_Num_Records)
    lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
    
    
    if file exist(l_dest$) = 0
      `1. Create a copy of the DH DB File
      	copy file g_CLIENT_Database_Full_Path$, l_dest$
      	if file exist(l_dest$) = 1
        	l_FunctionOutput$ = "Local Database BACKUP > Successful (Backup Filename : " + f_filename$ + ")"
        	g_lib_BACKUP_Local_Database_Result = 1
        	`
        	l_LogFileBuildStr$ = "  + HD DB : Successful > HD File Copy Created"
        	lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        	`
        	l_LogFileBuildStr$ = "  + Filename: " + l_dest$
        	lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
          `    	
        	l_LOG_NewHDFile_FileSize = file size(l_dest$)
        	l_LOG_NewHDFile_TotalRecs# = (l_LOG_NewHDFile_FileSize + 0.0) / c_DATABASE_Bytes_Per_Record
        	l_LogFileBuildStr$ = "  + HD DB :   - File Size: " + str$(l_LOG_NewHDFile_FileSize) + "KB     Total Records: " + str$(l_LOG_NewHDFile_TotalRecs#, 2)
        	lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        	`
      	else
        	l_FunctionOutput$ = "Local Database BACKUP > ERROR: Database backup failed"
        	lib_LOG_FILE_Backup_Information("   + HD DB : Failed > HD File not found after copy operation")
      	endif
      `2. Write a copy of the MEM DB to the HD
        lib_Database_MEM_WriteHDBackup("Arrived at from: Create a New Well via lib_BACKUP_Local_Database_StrOUT")
    else
      l_FunctionOutput$ = "Local Database BACKUP > ERROR: The backup file already exists"
    endif
  else
    l_FunctionOutput$ = "Local Database BACKUP > ERROR: Main Database file not found."
  endif

endfunction l_FunctionOutput$

function lib_ON_ERROR_Handle(r_ERR_Info$ as string, r_ERR_TS1$ as string, r_ERR_TS2$ as string, r_Admin_Msg as integer)

  local l_exit_condition as integer : l_exit_condition = -1
  local l_left_prnt as integer
  local l_mid_prnt as integer
  local l_midleft as integer

  `This function is called to END the Program as a fatal error has occured. The programmer can
  `send strings to this function to display error messages, but the function ultimately displays
  `these before closing the program.
  
  l_left_prnt = screen width() * 0.05 : sp = 0
  l_mid_prnt = screen width() / 2
  l_midleft = (screen width() / 2) - 250
  
  
  repeat
    y_pos = 0
    d3d_starttext
  
      inc y_pos,19 : d3d_text 1, l_left_prnt, y_pos, 0, g_ENG_ProjectMenuTitle$
    
      l_PrntSTR$ = "*** UNRECOVERABLE ERROR ***"
      inc y_pos,57 : d3d_text 4, l_mid_prnt - (d3d_gettextwidth(4, l_PrntSTR$)/2)-20, y_pos, 0, l_PrntSTR$
      if r_Admin_Msg = 1
        l_PrntSTR1$ = "Program may lack Administrator Privilages"
        inc y_pos,57 : d3d_text 4, l_mid_prnt - (d3d_gettextwidth(4, l_PrntSTR1$)/2)-20, y_pos, 0, l_PrntSTR1$
      endif
      
      inc y_pos,57 : d3d_text 1, l_midleft, y_pos, 0, "- This program is sorry, but an unrecoverable error has occurred."
      inc y_pos,19 : d3d_text 1, l_midleft, y_pos, 0, "  Information about this error and any advice is given below."
      
      inc y_pos,57 : d3d_text 2, l_midleft, y_pos, 0, "  Error Information"
      inc y_pos,19 : d3d_text 1, l_midleft, y_pos, 0, "    " + r_ERR_Info$
     
      inc y_pos,57 : d3d_text 2, l_midleft, y_pos, 0, "  Troubleshooting"
      inc y_pos,19 : d3d_text 1, l_midleft, y_pos, 0, "    " + r_ERR_TS1$
        if r_ERR_TS2$ <> ""
          inc y_pos,19 : d3d_text 1, l_midleft, y_pos, 0, "    " + r_ERR_TS2$
        endif
      
      
      l_PrntSTR$ = "Press a key to exit the program."
      inc y_pos,95 : d3d_text 1, l_mid_prnt - (d3d_gettextwidth(1, l_PrntSTR$)/2)-20, y_pos, 0, l_PrntSTR$
      
    d3d_endtext
    sync
  until lib_LOOP_EXIT() = 1
  
  end

endfunction

function lib_ON_HALT_Handle(r_HALT_Info$ as string, r_HALT_TS1$ as string, r_HALT_TS2$ as string)

  local l_exit_condition as integer : l_exit_condition = -1
  local l_left_prnt as integer
  local l_mid_prnt as integer
  local l_midleft as integer

  `This function is called to END the Program as a fatal error has occured. The programmer can
  `send strings to this function to display error messages, but the function ultimately displays
  `these before closing the program.
  
  l_left_prnt = screen width() * 0.05 : sp = 0
  l_mid_prnt = screen width() / 2
  l_midleft = (screen width() / 2) - 250
  
  
  repeat
    y_pos = 0
    d3d_starttext
  
      inc y_pos,19 : d3d_text 1, l_left_prnt, y_pos, 0, g_ENG_ProjectMenuTitle$
    
      l_PrntSTR$ = "*** PROGRAM INFORMATION ***"
      inc y_pos,57 : d3d_text 4, l_mid_prnt - (d3d_gettextwidth(4, l_PrntSTR$)/2)-20, y_pos, 0, l_PrntSTR$
      
      inc y_pos,57 : d3d_text 1, l_midleft, y_pos, 0, "- The Program has been paused for your information."
      inc y_pos,19 : d3d_text 1, l_midleft, y_pos, 0, "  Information and advice is given below."
      
      inc y_pos,57 : d3d_text 2, l_midleft, y_pos, 0, "  Error Information"
      inc y_pos,19 : d3d_text 1, l_midleft, y_pos, 0, "    " + r_HALT_Info$
     
      inc y_pos,57 : d3d_text 2, l_midleft, y_pos, 0, "  Troubleshooting"
      inc y_pos,19 : d3d_text 1, l_midleft, y_pos, 0, "    " + r_HALT_TS1$
        if r_HALT_TS2$ <> ""
          inc y_pos,19 : d3d_text 1, l_midleft, y_pos, 0, "    " + r_HALT_TS2$
        endif
      
      
      l_PrntSTR$ = "Press a key to continue."
      inc y_pos,95 : d3d_text 1, l_mid_prnt - (d3d_gettextwidth(1, l_PrntSTR$)/2)-20, y_pos, 0, l_PrntSTR$
      
    d3d_endtext
    sync
  until lib_LOOP_EXIT() = 1
  

endfunction

function lib_WARNING_Memory_Full_Screen()




endfunction

function lib_AUTODETECT_Screen_Resolution()

  g_AUTODETECT_ScreenRES_Width = DISPLAY WIDTH()
  g_AUTODETECT_ScreenRES_Height = DISPLAY HEIGHT()
  g_AUTODETECT_ScreenRES_Name$ = str$(g_AUTODETECT_ScreenRES_Width) + "x" + str$(g_AUTODETECT_ScreenRES_Height)

endfunction


function lib_SET_DISPLAY_MODE()

  if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Function: lib_SET_DISPLAY_MODE > Setting Resolutions)"  

  if g_ENGINE_Screen_Resolution = 1
    if g_1366x768_Available = 1
      if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Function: lib_SET_DISPLAY_MODE > CF1: Set Display Mode)" 
      set window size 1366, 768
      set display mode 1366, 768, 32
    else
      if g_1360x768_Available = 1
        if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Function: lib_SET_DISPLAY_MODE > CF1: Set Display Mode)" 
        set display mode 1360, 768, 32
        set window size 1360, 768
      else  
        do
          cls
          print "ERROR> Program set to Widescreen: Display Modes (1366x768 and 1360x768) Not Available. Contact GDS for assistance."
          sync
        loop
      endif  
    endif
  else
    if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Function: lib_SET_DISPLAY_MODE > CF2: Set Window Size)" 
    set window size 1024, 768
    if g_1024_768_Available = 1
      if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Function: lib_SET_DISPLAY_MODE > CF2: Set Display Mode)"
      set display mode 1024, 768, 32
    else
      do
        cls
        print "ERROR> Display Mode (1024x768) Not Available. Contact GDS for assistance."
        sync
      loop  
    endif
  endif
  
  if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Function: lib_SET_DISPLAY_MODE > Setting Window Position)"
  
  set window position 0, 0
  g_DTFULLSCREEN_Toggle = -1
  
  if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Function: lib_SET_DISPLAY_MODE > Defining Variables)"
  
  g_ENG_Half_Screen_Width = get window client width() / 2
  g_ENG_Half_Screen_Height = get window client height() / 2
  
  `Advanced Reporting Image Position
  g_ENG_ARS_BkgdPosX = g_ENG_Half_Screen_Width - (c_ENG_ARS_Bkgd_Width / 2)
  g_ENG_ARS_BkgdPosY = g_ENG_Half_Screen_Height - (c_ENG_ARS_Bkgd_Height / 2)
   
  if g_ENGINE_CoreFunctionType = 2 then set window title "GDS Remote Data Service - Client (Full Mudlogging Suite) (Function: lib_SET_DISPLAY_MODE > Initialise Graphics System: START)" 
   
  INITIALISE_GRAPHICS_SYSTEM()

endfunction

function lib_RESOLUTION_TEST()

  `This function checks that the desktop resolution matches requirements for the user choice.
  
  local l_BuildErrLine1$ as string : l_BuildErrLine1$ = "Possible Desktop Resolution Issue Detected"
  local l_BuildErrLine2$ as string : l_BuildErrLine2$ = ""
  local l_BuildErrLine3$ as string : l_BuildErrLine3$ = ""
  local l_Desktop_DisplayWidth as integer : l_Desktop_DisplayWidth = DISPLAY WIDTH()
  local l_Desktop_DisplayHeight as integer : l_Desktop_DisplayHeight = DISPLAY HEIGHT()
  local l_ERROR_Found as integer : l_ERROR_Found = -1

  `1024x768
  if g_ENGINE_Screen_Resolution = 0
    `Check Width
    if l_Desktop_DisplayWidth <> 1024
      l_ERROR_Found = 1
      l_BuildErrLine2$ = l_BuildErrLine2$ + "Desktop Width appears to be set to " + str$(l_Desktop_DisplayWidth)
    endif
    `Check Height
    if l_Desktop_DisplayHeight <> 768
      l_ERROR_Found = 1
      if len(l_BuildErrLine2$) > 5
        l_BuildErrLine2$ = l_BuildErrLine2$ + ", and the "
      endif
      l_BuildErrLine2$ = l_BuildErrLine2$ + "Desktop Height appears to be set to " + str$(l_Desktop_DisplayHeight)
    endif
    l_BuildErrLine3$ = "Ensure that the Desktop Resolution is set to 1024x768"
  endif
  
  
  `Widescreen 1366x768
  if g_ENGINE_Screen_Resolution = 1
    `Check Width
    if l_Desktop_DisplayWidth <> 1366
      l_ERROR_Found = 1
      l_BuildErrLine2$ = l_BuildErrLine2$ + "Desktop Width appears to be set to " + str$(l_Desktop_DisplayWidth)
    endif
    `Check Height
    if l_Desktop_DisplayHeight <> 768
      l_ERROR_Found = 1
      if len(l_BuildErrLine2$) > 5
        l_BuildErrLine2$ = l_BuildErrLine2$ + ", and the "
      endif
      l_BuildErrLine2$ = l_BuildErrLine2$ + "Desktop Height appears to be set to " + str$(l_Desktop_DisplayHeight)
    endif
    l_BuildErrLine3$ = "Ensure that the Desktop Resolution is set to 1366x768"
  endif
  
  if l_ERROR_Found = 1
    lib_ON_HALT_Handle(l_BuildErrLine1$, l_BuildErrLine2$, l_BuildErrLine3$)
  endif

endfunction

function lib_SETWINDOW_Active()

  SWP_FRAMECHANGED  = 32
  SWP_DRAWFRAME  = SWP_FRAMECHANGED
  SWP_HIDEWINDOW  = 128
  SWP_NOACTIVATE  = 16
  SWP_NOCOPYBITS  = 256
  SWP_NOMOVE  = 2
  SWP_NOOWNERZORDER  = 512
  SWP_NOREDRAW  = 8
  SWP_NOREPOSITION  = SWP_NOOWNERZORDER
  SWP_NOSIZE  = 1
  SWP_NOZORDER  = 4
  SWP_SHOWWINDOW  = 64
  HWND_BOTTOM  = 1
  HWND_BROADCAST  = 65535
  HWND_DESKTOP  = 0
  HWND_NOTOPMOST  = -2
  HWND_TOP  = 0
  HWND_TOPMOST  = -1

  rem make the window always on top
  hwnd = call dll(c_User32DLL,"GetActiveWindow")
  x = 0
  y = 0
  x_width = 0
  y_height = 0
  result=call dll(c_User32DLL, "SetWindowPos", hwnd, HWND_TOP, x, y, x_width, y_height, SWP_SHOWWINDOW||SWP_NOMOVE||SWP_NOSIZE)


endfunction

function lib_FULLSCREEN_Force_Fullscreen_Mode()

  `Set to fullscreen
  lib_SetScreen_Windowed_FullScreen_p1or2(2)

endfunction

function lib_FULLSCREEN_DoubleTap_Toggle()
 
  if timer() < g_DTFULLSCREEN_Timer + c_DTFULLSCREEN_TapSpeed
    if g_Window_Fullscreen_Toggle = 1
      `Windowed
      lib_SetScreen_Windowed_FullScreen_p1or2(2)
    else
      `Fullscreen
      lib_SetScreen_Windowed_FullScreen_p1or2(1)
    endif
  else
    g_DTFULLSCREEN_Timer = timer() + c_DTFULLSCREEN_TapSpeed
  endif

endfunction

function lib_Activate_CMNDCON_CmndInfo(r_CRep$)

  g_COMMANDCONSOLE_CommandReport1$ = r_CRep$

  g_COMMANDCONSOLE_CommandActivatedSwitch = 1
  g_COMMANDCONSOLE_Report_Timer = g_TIMER_1 + c_CMND_CONSL_FadeTimer
  g_COMMANDCONSOLE_Report_Alpha = 255
  g_COMMANDCONSOLE_Report_AlphaCMND = 255

endfunction

function lib_AUClient_BACKUP_HDDatabase(r_SM_ClientID as integer)

  `BACKUP From: Authorised Client Request via network - HD DB File Copy + MEM DB Write

  local l_BuildStr$ as string
  local l_LogFileBuildStr$ as string
  local l_LOG_NewHDFile_FileSize as integer
  local l_LOG_NewHDFile_TotalRecs# as float
  
  local l_day$ as string
  local l_month$ as string
  local l_year$ as string
  local l_hours$ as string
  local l_minutes$ as string
  local l_date$ as string
  local l_time$ as string
  local f_filename$ as string
  local l_dest$ as string

  `This function acts on a request by a spymode client to perform a HD Database backup

      if file exist(g_CLIENT_Database_Full_Path$) = 1
        l_day$ = right$(left$(get date$(), 5), 2)
        l_month$ = left$(get date$(), 2)
        l_year$ =  right$(get date$(), 2)
        l_hours$ = left$(get time$(), 2)
        l_minutes$ = right$(left$(get time$(), 5), 2)
        l_date$  = l_day$ + l_month$ + l_year$
        l_time$ = l_hours$ + l_minutes$
        f_filename$ = "BackupDB_" + l_date$ + "_" + l_time$ + ".dat"
        l_dest$ = g_autodir_full_directory_path$ + "\Database\" + f_filename$
        
        
    		lib_LOG_FILE_Backup_Information("  ")
    		lib_LOG_FILE_Backup_Information("**** NEW BACKUP at " + get time$() + " / " + l_date$ + " ****")
    		lib_LOG_FILE_Backup_Information("  + ** NEW HD BACKUP (A Copy of the HD DB file) **")
    		lib_LOG_FILE_Backup_Information("  + Requested from - lib_AUClient_BACKUP_HDDatabase")
    		l_LogFileBuildStr$ = "  + Variable: g_DATABASE_HD_Total_Num_Records: " + str$(g_DATABASE_HD_Total_Num_Records)
    		lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        
        
        if file exist(l_dest$) = 0
          `1. Create a copy of the HD DB File
          	copy file g_CLIENT_Database_Full_Path$, l_dest$
          	if file exist(l_dest$) = 1
            	l_BuildStr$ ="Database BACKUP > Successful (Filename : " + f_filename$ + ")"
            	lib_MESSAGE_AUClient_Relay_To_ClientID(r_SM_ClientID, l_BuildStr$)
            	lib_ARS_RelayToClientID_ReportandComplete(l_BuildStr$, r_SM_ClientID)
        			`
        			l_LogFileBuildStr$ = "  + HD DB : Successful > HD File Copy Created"
        			lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        			`
        			l_LogFileBuildStr$ = "  + Filename: " + l_dest$
        			lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
          		`    	
        			l_LOG_NewHDFile_FileSize = file size(l_dest$)
        			l_LOG_NewHDFile_TotalRecs# = (l_LOG_NewHDFile_FileSize + 0.0) / c_DATABASE_Bytes_Per_Record
        			l_LogFileBuildStr$ = "  + HD DB :   - File Size: " + str$(l_LOG_NewHDFile_FileSize) + "KB     Total Records: " + str$(l_LOG_NewHDFile_TotalRecs#, 2)
        			lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        			`
          	else
            	l_BuildStr$ = "Database BACKUP > ERROR: Database backup failed"
            	lib_MESSAGE_AUClient_Relay_To_ClientID(r_SM_ClientID, l_BuildStr$)
            	lib_ARS_RelayToClientID_ReportandComplete(l_BuildStr$, r_SM_ClientID)
            	lib_LOG_FILE_Backup_Information("   + HD DB : Failed > HD File not found after copy operation")
          	endif
          `2. Write a fresh copy of the MEM DB to the HD.
            lib_Database_MEM_WriteHDBackup("Arrived at from: AU Client Request in lib_AUClient_BACKUP_HDDatabase")
       
        else
          l_BuildStr$ = "Database BACKUP > ERROR: The backup file already exists"
          lib_MESSAGE_AUClient_Relay_To_ClientID(r_SM_ClientID, l_BuildStr$)
          lib_ARS_RelayToClientID_ReportandComplete(l_BuildStr$, r_SM_ClientID)
        endif
      else
        l_BuildStr$ = "Database BACKUP > ERROR: Main Database file not found."
        lib_MESSAGE_AUClient_Relay_To_ClientID(r_SM_ClientID, l_BuildStr$)
        lib_ARS_RelayToClientID_ReportandComplete(l_BuildStr$, r_SM_ClientID)
      endif


endfunction

function lib_AUClient_REINIT_SERIAL_PORT(r_RSP_ClientID)

  l_ClosePort_Result = lib_Close_Serial_Port(g_hPort)
  if l_ClosePort_Result = 0
    if g_SERIALPORT_ACTIVE = -1
      l_BuildStr$ = "Restart Port: ERROR: NO PORT ACTIVE TO UNMOUNT"
      lib_MESSAGE_AUClient_Relay_To_ClientID(r_RSP_ClientID, l_BuildStr$)
    else
      l_BuildStr$ = "Restart Port: ERROR: Unable to remove the port. Try again."
      lib_MESSAGE_AUClient_Relay_To_ClientID(r_RSP_ClientID, l_BuildStr$)
    endif
  else
    g_SERIALPORT_ACTIVE = -1
    g_SERIALPORT_ACTIVE_ID$ = ""
    l_RestartPort_Result = Kernel32_PORT_Setup(g_SERIALPORT_Port_Name$)
    if l_RestartPort_Result = 0
      l_BuildStr$ = "Restart Port: ERROR: Port Deleted, Unable to recreate port"
      lib_MESSAGE_AUClient_Relay_To_ClientID(r_RSP_ClientID, l_BuildStr$)
    else
      l_BuildStr$ = "Restart Port: SUCCESS, port re-initiated"
      lib_MESSAGE_AUClient_Relay_To_ClientID(r_RSP_ClientID, l_BuildStr$)
      g_hPort = l_RestartPort_Result
    endif
  endif

endfunction



function lib_Round_Float_Up(r_RndFlt#)

  local l_FValInt as integer

  if r_RndFlt# < 0.0
    l_FValInt = int(r_RndFlt# - 0.5)
  else
    l_FValInt = int(r_RndFlt# + 0.5)
  endif

endfunction l_FValInt

function lib_Count_Num_Spaces_In_A_String(r_InputString$ as string)

  local p_OUTPUT_COUNTER as integer

  `This function counts the number of spaces (" " characters) in a string and outputs the number
  
		p_OUTPUT_COUNTER = 0
		for count_spaces_lp = 1 to len(r_InputString$)
			if mid$(r_InputString$, count_spaces_lp) = " "
				inc p_OUTPUT_COUNTER, 1
			endif
		next count_spaces_lp

endfunction p_OUTPUT_COUNTER

function lib_Get_String_STRING(r_GSS$)

  local l_temp$ as string

  l_temp$ = ""
  for find_lp = 1 to len(r_GSS$)
    if mid$(r_GSS$, find_lp) = "="
      l_temp$ = right$(r_GSS$, (len(r_GSS$) - find_lp))
    endif
  next find_lp
  g_LGSS_ConvertedString_Output_STR$ = l_temp$

endfunction

function lib_Get_String_VAL(r_StringVAL$)

  local l_OutputVAL# as float

  for find_lp = 1 to len(r_StringVAL$)
    if mid$(r_StringVAL$, find_lp) = "="
      l_OutputVAL# = val(right$(r_StringVAL$, (len(r_StringVAL$) - find_lp)))
    endif
  next find_lp
  
  g_LGSV_ConvertedString_Output_FLT# = l_OutputVAL#

endfunction

function lib_Create_Image(r_SizeX as integer, r_SizeY as integer, r_RGB as dword, r_ImgNum as integer, r_ADD_Border as integer, r_Border_Colour as dword)

  local l_Memblock_Pos as double integer

  if image exist(r_ImgNum) = 1
    delete image r_ImgNum
  endif  

  make memblock 1, ((r_SizeX * r_SizeY) * 4) + 12
  write memblock dword 1, 0, r_SizeX
  write memblock dword 1, 4, r_SizeY
  write memblock dword 1, 8,32
  for x_lp=0 to r_SizeX - 1
    for y_lp = 0 to r_SizeY - 1
        l_Mem_Pntr = 12 + (((y_lp*r_SizeX) * 4) + (x_lp * 4))
        write memblock dword 1, l_Mem_Pntr, r_RGB
    next y_lp
  next x_lp
  
  if r_ADD_Border = 1  
    lib_Memblock_Image_BORDERS(1, r_Border_Colour, r_SizeX, r_SizeY)
  endif  
  
  make image from memblock r_ImgNum, 1
  
  delete memblock 1

endfunction

function lib_Memblock_Image_BORDERS(r_MemblockNum as integer, r_Colour as dword, r_IMG_X as integer, r_IMG_Y as integer)

  if r_IMG_Y > 0

    `Write the popup box Top Line
    for x_lp = 0 to r_IMG_X - 1
      l_Mem_Pntr = (12 + (x_lp * 4))
      write memblock dword r_MemblockNum, l_Mem_Pntr, r_Colour
    next x_lp
  
    `Write the popup box Left Line
    for y_lp = 0 to r_IMG_Y - 2
      l_Mem_Pntr = 12 + ((y_lp * r_IMG_X) * 4)
      write memblock dword r_MemblockNum, l_Mem_Pntr, r_Colour
    next y_lp
  
    `Write the popup box Bottom Line
    for x_lp = 0 to r_IMG_X - 1
      l_Mem_Pntr = 12 + ((((r_IMG_Y - 1)*r_IMG_X) * 4) + (x_lp * 4))
      write memblock dword r_MemblockNum, l_Mem_Pntr, r_Colour
    next x_lp
  
    `Write the popup box Right Line
    for y_lp = 0 to r_IMG_Y - 2
      l_Mem_Pntr = 12 + (((y_lp * r_IMG_X) * 4) + ((r_IMG_X - 1) * 4))
      write memblock dword r_MemblockNum, l_Mem_Pntr, r_Colour
    next y_lp

  endif

endfunction

function lib_Get_CAPSLOCK_State()

  local l_buffer as dword
  local l_OUTPUT as integer

  if timer() > g_ENG_CAPSLOCK_CheckStateTimer
  
    g_ENG_CAPSLOCK_CheckStateTimer = timer() + 100

    make memblock 18, 256
    	l_buffer = get memblock ptr(18)
    	call dll c_User32DLL, "GetKeyboardState", l_buffer
    	l_OUTPUT = memblock byte(18, 20)
    delete memblock 18
    
    if l_OUTPUT > 1 then l_OUTPUT = l_OUTPUT - 128
    
  endif 

endfunction l_OUTPUT

function lib_MESSAGE_AUClient_Relay_To_ClientID(r_MsgClientID as integer, r_MsgStr$ as string)

  `Function used when the Authorised Client needs to send a message to another client
  `connected to the server.
  `Note that if r_MsgClientID = -1 then the Server will send the message to all Clients.
  
  net send 0
  net put long 212
  net put long 84523
  net put int r_MsgClientID
  net put string r_MsgStr$
  net send
  
  inc g_ENG_DataTransfer_Total, 2048

endfunction

function lib_ARS_RelayToClientID_SendReport(r_SRMsgStr$ as string, r_SRClientID as integer)

  net send 0
  net put long 4200
  net put long 14662
  net put int r_SRClientID
  net put string r_SRMsgStr$
  net send
  
  inc g_ENG_DataTransfer_Total, 2048
  
endfunction

function lib_ARS_RelayToClientID_ReportandComplete(r_RaCMsgStr$ as string, r_RaCClientID as integer)

  net send 0
  net put long 4210
  net put long 14663
  net put int r_RaCClientID
  net put string r_RaCMsgStr$
  net send
  
  inc g_ENG_DataTransfer_Total, 2048
  
endfunction


function lib_CONVERT_DATE_US_to_UK_Format(r_ConvertDate$)

  local l_DOut$ as string

  l_DOut$ = right$(left$(r_ConvertDate$, 5), 2) + "/" + left$(r_ConvertDate$, 2) + "/" + right$(r_ConvertDate$, 2)

endfunction l_DOut$

function lib_Get_TIME_DIFFERENCE(r_Start_Time$ as string, r_Date_Start$ as string, r_End_Time$ as string, r_Date_End$ as string)

  local l_Start_Hr as integer
  local l_Start_Min as integer
  local l_Start_Sec# as float
  local l_End_Hr as integer
  local l_End_Min as integer
  local l_End_Sec as integer
  
  local l_Start_TotalMins# as float
  local l_End_TotalMins# as float
  
    l_Start_Hr = val(first token$(r_Start_Time$,":"))
    l_Start_Min = val(next token$(":"))
    l_Start_Sec# = val(next token$(""))
    
    l_End_Hr = val(first token$(r_End_Time$,":"))
    l_End_Min = val(next token$(":"))
    l_End_Sec = val(next token$(""))
  
    `First get the date difference in number of days
    lib_Get_DATE_DIFFERENCE(r_Date_Start$, r_Date_End$)
    
    `Case 1: If DayDifference=0 then all the minutes are on the same day and just subtract the times
    `Case 2: If DayDifference=1 then calc from 00:00:00 to the end time + start_time to 23:59:59
    `Case 3: If DayDifference>1 then calc from 00:00:00 to the end time + start_time to 23:59:59
    `        plus (DayDifference-1*1440) - 1440=minutes per day.
    
    `Case 1
    if g_ENGINE_DateDiff_TotalDays = 0
      l_TmpFlt1# = ((l_Start_Hr * 60) + l_Start_Min + (l_Start_Sec# / 60.0))
      l_TmpFlt2# = ((l_End_Hr * 60) + l_End_Min + (l_End_Sec / 60.0))
      g_ENGINE_TimeDiff_TotalMins# = l_TmpFlt2# - l_TmpFlt1#
    endif
       
    `Case 2
    if g_ENGINE_DateDiff_TotalDays = 1
      `Minutes Yesterday
       l_TmpFlt1# = 1440 - ((l_Start_Hr * 60) + l_Start_Min + (l_Start_Sec# / 60.0))
      `Minutes Today
       l_TmpFlt2# = ((l_End_Hr * 60) + l_End_Min + (l_End_Sec / 60.0))
       g_ENGINE_TimeDiff_TotalMins# = l_TmpFlt1# + l_TmpFlt2#
    endif
    
    `Case 3
    if g_ENGINE_DateDiff_TotalDays > 1
      `Minutes Yesterday
       l_TmpFlt1# = 1440 - ((l_Start_Hr * 60) + l_Start_Min + (l_Start_Sec# / 60.0))
      `Minutes Today
       l_TmpFlt2# = ((l_End_Hr * 60) + l_End_Min + (l_End_Sec / 60.0))
       g_ENGINE_TimeDiff_TotalMins# = l_TmpFlt1# + l_TmpFlt2# + ((g_ENGINE_DateDiff_TotalDays-1)*1440)
    endif
  
endfunction

function lib_Get_DATE_DIFFERENCE(r_StartDate$ as string, r_EndDate$ as string)

  `NOTE: Requires date in the format DD/MM/YYYY, if not use lib_CONVERT_DATE_US_to_UK_Format(r_ConvertDate$)

  local l_Start_Day as integer : l_Start_Day = val(first token$(r_StartDate$,"/"))
  local l_Start_Month as integer : l_Start_Month = val(next token$("/"))
  local l_Start_Year as integer : l_Start_Year = val(next token$(""))
  local l_End_Day as integer : l_End_Day = val(first token$(r_EndDate$,"/"))
  local l_End_Month as integer : l_End_Month = val(next token$("/"))
  local l_End_Year as integer : l_End_Year = val(next token$(""))
  
  `Consider Jan+Feb as month 13 and 14
  if l_Start_Month = 1 or l_Start_Month = 2
    inc l_Start_Month, 12
    dec l_Start_Year, 1
  endif  
  if l_End_Month = 1 or l_End_Month = 2
    inc l_End_Month, 12
    dec l_End_Year, 1
  endif 

  l_DayNum_Start = int(365*l_Start_Year) + int(l_Start_Year/4) - int(l_Start_Year/100) + int(l_Start_Year/400) + l_Start_Day + int((153*l_Start_Month+8)/5)
  l_DayNum_End = int(365*l_End_Year) + int(l_End_Year/4) - int(l_End_Year/100) + int(l_End_Year/400) + l_End_Day + int((153*l_End_Month+8)/5)
  g_ENGINE_DateDiff_TotalDays = l_DayNum_End - l_DayNum_Start

 endfunction

function lib_Get_OS_Type()

  Load Dll "kernel32.dll",2
  Make Memblock 1, 148
  Write Memblock Dword 1,0,148
  Call Dll 2,"GetVersionExA",Get Memblock Ptr(1)
  MAJORV= Memblock Word(1,4)
  MINORV= Memblock Word(1,8)
  PLATID= Memblock Word(1,16)
  Delete Memblock 1
  Delete Dll 2

  global g_OS_Name$ as string : g_OS_Name$ = "Unknown Operating System"
  if MAJORV = 4
    if MINORV = 10
      g_OS_Name$ = "Windows 98"
    else
      g_OS_Name$ = "Windows 95"
    endif
  endif
  if MAJORV = 5
    if MINORV = 0
      g_OS_Name$ = "Windows 2000"
    endif
    if MINORV = 1
      g_OS_Name$ = "Windows XP"
    endif
  endif
  if MAJORV = 6
    g_OS_Name$ = "Windows 7"
  endif

endfunction



function lib_Format_Float_as_String(r_float#)

  local l_outputtemp$ as string
  local char$ as string

  temp_float$ = str$(r_float#)
  length = len(temp_float$)
  char_position = -1
  
    for find_lp = 0 to length
      char$ = mid$(temp_float$, find_lp)
      if char$ = "."
        char_position = find_lp
      endif
    next find_lp

    if char_position <> -1
      if char_position > 0 and char_position < length
        l_outputtemp$ = left$(temp_float$, char_position + 1)
      endif
    else
      l_outputtemp$ = temp_float$
    endif

  g_formatted_float_return$ = l_outputtemp$

endfunction


function lib_PrintString_IntoSections(r_PrintStr$ as string, r_PrntColumn_XPos as integer, r_PrntColumn_YPos as integer, r_SplitLength as integer, r_TextCol as dword)

  `string name, print y_position, split length

  local l_SplitPoint as integer : l_SplitPoint = -1
  local l_PrintStr_Column1$ as string
  local l_PrintStr_Column2$ as string
  local l_Print_YposSP as integer : l_Print_YposSP = r_PrntColumn_YPos

  if len(r_PrintStr$) < r_SplitLength
    inc l_Print_YposSP,19 : d3d_text 1, r_PrntColumn_XPos, l_Print_YposSP, 0, "[" + r_PrintStr$ + "]", r_TextCol
  else
    `Split the string into 2 sections using a carriage return point and print them both into columns
    `Discover the next carriage return point after the split point
    l_SplitPoint = -1
    for char_lp = 1 to len(r_PrintStr$)
      if char_lp > r_SplitLength
        if mid$(r_PrintStr$, char_lp) = chr$(10) and l_SplitPoint = -1
          l_SplitPoint = char_lp + 0
        endif
      endif
    next char_lp
    if l_SplitPoint <> -1
      l_PrintStr_Column1$ = left$(r_PrintStr$, l_SplitPoint)
      l_PrintStr_Column2$ = right$(r_PrintStr$, (len(r_PrintStr$)-l_SplitPoint))
    endif
    
    `set cursor 0, r_PrntColmn_YPos
    `print "[" + l_PrintStr_Column1$
    `set cursor 100, r_PrntColmn_YPos
    `print l_PrintStr_Column2$ + "]"
    
    inc l_Print_YposSP,19 : d3d_text 1, r_PrntColumn_XPos, l_Print_YposSP, 0, "[" + l_PrintStr_Column1$, r_TextCol
    
    l_Print_YposSP = r_PrntColumn_YPos
    inc l_Print_YposSP,19 : d3d_text 1, r_PrntColumn_XPos + 160, l_Print_YposSP, 0, l_PrintStr_Column2$ + "]", r_TextCol
    
  
  endif  
  
endfunction

function lib_IncY(r_Val)

  inc g_SY, (19 * r_Val)

endfunction

function lib_DecY(r_Val)

  dec g_SY, (19 * r_Val)

endfunction

function lib_ResetY()

  g_SY = 0

endfunction

function lib_INPUT_Keypress(r_SCode as integer)

  local p_OUTPUT as integer : p_OUTPUT = -1
  
  if keystate(r_SCode) = 1 and key_state(r_SCode,0)= 0
    key_state(r_SCode,0) = 1
    p_OUTPUT = 1
  endif
  if keystate(r_SCode)=0 and key_state(r_SCode,0)=1 then key_state(r_SCode,0)=0

endfunction p_OUTPUT

function Release_LOCKOUT_Variables()

  if mouseclick() = 0
  
    if g_LOCKOUT_ChartInfoBoxes = 1 then g_LOCKOUT_ChartInfoBoxes = -1
  
  endif

endfunction

function MidnightBackup_Handle_Infographic()

  local l_XPos as integer : l_XPos = SCREEN WIDTH() - image width(c_MIDNIGHTBACKUP_BkgdImg) - 10
  local l_YPos as integer : l_YPos = SCREEN HEIGHT() - image height(c_MIDNIGHTBACKUP_BkgdImg) - 10
  local l_MSGBOX_TextX as integer : l_MSGBOX_TextX = l_XPos + 20
  local l_MSGBOX_TextY as integer : l_MSGBOX_TextY = l_YPos + 20

  `Display the Infobox at full alpha until the timer runs out
  if g_AUTO_MIDNIGHTBACKUP_DispInfoImg = 1
  	if g_AUTO_MIDNIGHTBACKUP_InfoImg_Timer > timer()
    	paste sprite c_SPRITE_MIDNIGHTBACKUP_Bkgd, l_XPos, l_YPos
    	d3d_starttext
      	d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, "MIDNIGHT WELL BACKUP", g_ENGINE_COLOUR_Black
      	inc l_MSGBOX_TextY, 20
      	d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, g_AUTO_MIDNIGHTBACKUP_InfoImg_Msg1$, g_ENGINE_COLOUR_Black
    	d3d_endtext
  	else
    	g_AUTO_MIDNIGHTBACKUP_AlphaFade_Timer = timer() + 50
    	g_AUTO_MIDNIGHTBACKUP_AlphaFade_Val = 255
    	g_AUTO_MIDNIGHTBACKUP_DispInfoImg = 2
  	endif
  endif
  
  `Once the timer runs out swtich to here and fade the box out.
  if g_AUTO_MIDNIGHTBACKUP_DispInfoImg = 2
  
    if timer() > g_AUTO_MIDNIGHTBACKUP_AlphaFade_Timer
      g_AUTO_MIDNIGHTBACKUP_AlphaFade_Timer = timer() + 50
      dec g_AUTO_MIDNIGHTBACKUP_AlphaFade_Val, 8
    endif
    
    if g_AUTO_MIDNIGHTBACKUP_AlphaFade_Val > 30
      set sprite alpha c_SPRITE_MIDNIGHTBACKUP_Bkgd, g_AUTO_MIDNIGHTBACKUP_AlphaFade_Val
      paste sprite c_SPRITE_MIDNIGHTBACKUP_Bkgd, l_XPos, l_YPos
      `
    	d3d_starttext
      	d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, "MIDNIGHT WELL BACKUP", g_ENGINE_COLOUR_Black
      	inc l_MSGBOX_TextY, 20
      	d3d_text 15, l_MSGBOX_TextX , l_MSGBOX_TextY, 0, g_AUTO_MIDNIGHTBACKUP_InfoImg_Msg1$, g_ENGINE_COLOUR_Black
    	d3d_endtext
    else
      g_AUTO_MIDNIGHTBACKUP_DispInfoImg = -1
      g_AUTO_MIDNIGHTBACKUP_AlphaFade_Val = 255
      set sprite alpha c_SPRITE_MIDNIGHTBACKUP_Bkgd, g_AUTO_MIDNIGHTBACKUP_AlphaFade_Val
    endif  
    
  endif
  
  

endfunction

function lib_STARTUP_GUI_CreateNewWell()


  `This function is called from the main Program Startup box if the user selects the option to 
  `create a new well. It backs up any old database.dat file, and then deletes it so the program
  `starts up with no database.dat file present - i.e. it will create a new one.
  
  local l_Exit_Function as integer : l_Exit_Function = -1
  local l_FileExistsMsg$ as string : l_FileExistsMsg$ = ""
  local l_DbaseFileExist as integer : l_DbaseFileExist = -1
  local l_NewDB_FuncStage as integer : l_NewDB_FuncStage = 0
  local l_FlashInputTimer as integer : l_FlashInputTimer = timer()
  local l_Backup_Counter as integer : l_Backup_Counter = 0
  local l_Create_Counter as integer : l_Create_Counter = 0
  local l_BackupCmntStr$ as string
  local l_BACKUP_GOOD as integer : l_BACKUP_GOOD = -1
  local l_DELETION_GOOD as integer : l_DELETION_GOOD = -1
  
  local l_LogFileBuildStr$ as string
  local l_LOG_NewHDFile_FileSize as integer
  local l_LOG_NewHDFile_TotalRecs# as float
  
  local l_day$ as string
  local l_month$ as string
  local l_year$ as string
  local l_hours$ as string
  local l_minutes$ as string
  local l_date$ as string
  local l_time$ as string
  local f_filename$ as string
  local l_dest$ as string
  
  local p_OUTPUT as integer : p_OUTPUT = -1

  set window size 750, 300
  set display mode 750, 300, 32
  
  set window title "GDS CLIENT - BOOT - Create New Well"
  

  set window position (desktop width() / 2) - (430 + 20), (desktop height() / 2) - (264 + 20)
  
  enable escapekey
  
  `At this point in the main program code g_CLIENT_Database_Full_Path$ has no value, so we must
  `unfortunately give it one by assuming everything is installed as a normal Mudlogging Setup,
  `which it should always be.
  	g_CLIENT_Database_Full_Path$ = g_autodir_full_directory_path$ + "\Database\Database.dat"
  
  
  
  
  repeat
  
    cls
  
    `Stage 0 (Ask user if they want to continue)
  	if l_NewDB_FuncStage = 0
  	
  	  print
  	  print " *** CREATE A NEW WELL ***"
  	  print
  	  print "  This will BACKUP any old Database file and CREATE a new one."
  	  print "  Are you sure you want to continue?"
  	  
  	  if timer() < l_FlashInputTimer + 500
  	    print "  (Y/N) >"
  	  else
  	    print "  (Y/N)"
  	    if timer() > l_FlashInputTimer + 1000 then l_FlashInputTimer = timer()
  	  endif
  	
  	  `Y
  		if keystate(21)= 1 and key_state(21,0)= 0
    		l_NewDB_FuncStage = 1
    		key_state(21,0)=1
  		endif
  		if keystate(21)=0 and key_state(21,0)=1 then key_state(21,0)=0
  		`N
  		if keystate(49)= 1 and key_state(49,0)= 0
    		end
    		key_state(49,0)=1
  		endif
  		if keystate(49)=0 and key_state(49,0)=1 then key_state(49,0)=0
  	
  	endif
  	
  	`Stage 1
  	if l_NewDB_FuncStage = 1
  	
  	  print
  	  print " *** CREATE A NEW WELL ***"
  	  print
  	  print "  Checking for existing Database File"
  	
  		l_DbaseFileExist = file exist(g_CLIENT_Database_Full_Path$)
  		if l_DbaseFileExist = 1
    		print "   - File Found"
    		print
  		  print "  LAST CHANCE - Are you sure you want to BACKUP the old Database and CREATE a new one?"
  		else
    		print "   - File Not Found"
    		print
  		  print "  LAST CHANCE - Are you sure you want to CREATE a Database?" 
  		endif 
  		
  	  if timer() < l_FlashInputTimer + 500
  	    print "  (Y/N) >"
  	  else
  	    print "  (Y/N)"
  	    if timer() > l_FlashInputTimer + 1000 then l_FlashInputTimer = timer()
  	  endif
  	  
  	  `Y
  		if keystate(21)= 1 and key_state(21,0)= 0
    		l_NewDB_FuncStage = 2
    		key_state(21,0)=1
  		endif
  		if keystate(21)=0 and key_state(21,0)=1 then key_state(21,0)=0
  		`N
  		if keystate(49)= 1 and key_state(49,0)= 0
    		end
    		key_state(49,0)=1
  		endif
  		if keystate(49)=0 and key_state(49,0)=1 then key_state(49,0)=0
  	
  	endif
  	
  	`Stage 2
  	if l_NewDB_FuncStage = 2
  	
  	  print
  	  print " *** CREATE A NEW WELL ***"
  	  print
  	  print "  Backing-up old Database File"
  	  print
  	  
  	  if l_Backup_Counter < 1
  	  	if timer() < l_FlashInputTimer + 500
  	    	print "  - Backup: Working"
  	  	else
  	    	print "  - Backup:"
  	    	if timer() > l_FlashInputTimer + 1000
  	      	l_FlashInputTimer = timer()
  	      	inc l_Backup_Counter, 1
  	    	endif  
  	  	endif
  	  else
  	    l_NewDB_FuncStage = 3
  	  endif
  	
  	endif
  	
  	`Stage 3 (Backup the Old Database File)
  	`BACKUP From: STARTUP GUI NEW WELL OPTION - HD DB File Copy

  	if l_NewDB_FuncStage = 3
  	
      if file exist(g_CLIENT_Database_Full_Path$) = 1
        l_day$ = right$(left$(get date$(), 5), 2)
        l_month$ = left$(get date$(), 2)
        l_year$ =  right$(get date$(), 2)
        l_hours$ = left$(get time$(), 2)
        l_minutes$ = right$(left$(get time$(), 5), 2)
        l_date$  = l_day$ + l_month$ + l_year$
        l_time$ = l_hours$ + l_minutes$
        f_filename$ = "BackupDB_" + l_date$ + "_" + l_time$ + ".dat"
        
        `OLD: Delete: l_dest$ = g_autodir_full_directory_path$ + "\Database\" + f_filename$
        l_dest$ = g_autodir_full_directory_path$ + "\Database\DB Backups\" + f_filename$
        
    		lib_LOG_FILE_Backup_Information("  ")
    		lib_LOG_FILE_Backup_Information("**** NEW BACKUP at " + get time$() + " / " + l_date$ + " ****")
    		lib_LOG_FILE_Backup_Information("  + ** NEW HD BACKUP (A Copy of the HD DB file) **")
    		lib_LOG_FILE_Backup_Information("  + Requested from - lib_STARTUP_GUI_CreateNewWell")
    		l_LogFileBuildStr$ = "  + Variable: g_DATABASE_HD_Total_Num_Records: " + str$(g_DATABASE_HD_Total_Num_Records)
    		lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        
        
        if file exist(l_dest$) = 0
          `1. Create a copy of the HD DB file.
          	copy file g_CLIENT_Database_Full_Path$, l_dest$
          	if file exist(l_dest$) = 1
            	l_BackupCmntStr$ ="Successful (Filename : " + f_filename$ + ")"
            	l_BACKUP_GOOD = 1
        			`
        			l_LogFileBuildStr$ = "  + HD DB : Successful > HD File Copy Created"
        			lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        			`
        			l_LogFileBuildStr$ = "  + Filename: " + l_dest$
        			lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
          		`    	
        			l_LOG_NewHDFile_FileSize = file size(l_dest$)
        			l_LOG_NewHDFile_TotalRecs# = (l_LOG_NewHDFile_FileSize + 0.0) / c_DATABASE_Bytes_Per_Record
        			l_LogFileBuildStr$ = "  + HD DB :   - File Size: " + str$(l_LOG_NewHDFile_FileSize) + "KB     Total Records: " + str$(l_LOG_NewHDFile_TotalRecs#, 2)
        			lib_LOG_FILE_Backup_Information(l_LogFileBuildStr$)
        			`
          	else
            	l_BackupCmntStr$ = "ERROR: Database backup failed"
            	lib_LOG_FILE_Backup_Information("   + HD DB : Failed > HD File not found after copy operation")
          	endif
          `2. Write the MEM DB to the HD
            lib_Database_MEM_WriteHDBackup("Arrived at from: Create a New Well via lib_STARTUP_GUI_CreateNewWell")
        else
          l_BackupCmntStr$ = "ERROR: The backup file already exists"
        endif
      else
        l_BackupCmntStr$ = "ERROR: Main Database file not found."
      endif
  	
  	  l_NewDB_FuncStage = 4
  	
  	endif
  	
  	
  	
  	
  	`Stage 4 (Display Backup Info)
  	if l_NewDB_FuncStage = 4
  	
  	  print
  	  print " *** CREATE A NEW WELL ***"
  	  print
  	  print "  Backing-up old Database File"
  	  print
  	  
	    print "  Backup performed..."
	    print "  - " + l_BackupCmntStr$
  	
  	  `Only proceed if the Backup was good.
  	  if l_BACKUP_GOOD = 1
  	    l_NewDB_FuncStage = 5
  	  else
  	    print
   	  	if timer() < l_FlashInputTimer + 1000
  	    	print "  Backup FAILED.. Program Halted"
  	  	else
  	    	print ""
  	    	if timer() > l_FlashInputTimer + 2000
  	      	l_FlashInputTimer = timer()
  	    	endif  
  	  	endif
  	  endif  
  	
  	endif
  	
  	`Stage 5
  	if l_NewDB_FuncStage = 5
  	
  	  print
  	  print " *** CREATE A NEW WELL ***"
  	  print
  	  print "  Backing-up old Database File"
  	  print
  	  
	    print "  Backup performed..."
	    print "  - " + l_BackupCmntStr$
  	
  	
  	  print
  	  print "  Ready a New Well" 

  	  
  	  if l_Create_Counter < 2
  	  	if timer() < l_FlashInputTimer + 500
  	    	print "  - New Database: Working"
  	  	else
  	    	print "  - New Database:"
  	    	if timer() > l_FlashInputTimer + 1000
  	      	l_FlashInputTimer = timer()
  	      	inc l_Create_Counter, 1
  	    	endif  
  	  	endif
  	  else
        l_NewDB_FuncStage = 6
  	  endif
  	
  	endif
  	
  	`Stage 6 (Ready a NEW WELL, i.e. delete old Database.dat)
  	if l_NewDB_FuncStage = 6

  	  if file exist(g_CLIENT_Database_Full_Path$) = 1
  	    delete file g_CLIENT_Database_Full_Path$
  	  endif
  	  
  	  if file exist(g_CLIENT_Database_Full_Path$) = 1
  	    l_DELETION_GOOD = -1
  	  	print
  	  	print " *** CREATE A NEW WELL ***"
  	  	print
  	  	print "  Backing-up old Database File"
  	  	print
  	  	
	    	print "  Backup performed..."
	    	print "  - " + l_BackupCmntStr$
  		
  		
  	  	print
  	  	print "  Ready a New Well" 
  	  	print "  - New Well > ERROR. Unable to DELETE Old Database File"
  	  	print
   	  	if timer() < l_FlashInputTimer + 1000
  	    	print "  Program Halted"
  	  	else
  	    	print ""
  	    	if timer() > l_FlashInputTimer + 2000
  	      	l_FlashInputTimer = timer()
  	    	endif  
  	  	endif
  	  else
  	    l_DELETION_GOOD = 1
  	    l_NewDB_FuncStage = 7
  	  endif
  	
  	endif
  	
  	`Stage 6
  	if l_NewDB_FuncStage = 7
  	
  	  print
  	  print " *** CREATE A NEW WELL ***"
  	  print
  	  print "  Backing-up old Database File"
  	  print
  	  
	    print "  Backup performed..."
	    print "  - " + l_BackupCmntStr$
  	
  	
  	  print
  	  print "  New Well" 
  	  print "  - New Well Ready..."
  	  
  	  print
   	  if timer() < l_FlashInputTimer + 1000
  	    print "  New Well Ready - Press SPACE BAR to continue"
  	  else
  	    print ""
  	    if timer() > l_FlashInputTimer + 2000
  	      l_FlashInputTimer = timer()
  	    endif  
  	  endif
  	  
  		`Space Bar
  		if keystate(57)= 1 and key_state(57,0)= 0
    		l_Exit_Function = 1
    		p_OUTPUT = 1
    		key_state(57,0)=1
  		endif
  		if keystate(57)=0 and key_state(57,0)=1 then key_state(57,0)=0
  	
  	endif
  	
  	
  	sync
  
  until l_Exit_Function = 1
  
  disable escapekey
  
  

endfunction p_OUTPUT

function lib_GLOBAL_Disp_MouseWheel_Sens_Images()

  `Displays the INC or DEC arrows when the mouse wheel sensitivity in a function is altered.

``global g_ENG_Half_Screen_Width as integer
`global g_ENG_Half_Screen_Height as integer


    `Display - Image
    if g_MSEWHL_AdjSensitivity_DEC_Timer > timer()
      paste image c_MSEWHL_AdjSensitivity_Img_LEFT, g_ENG_Half_Screen_Width - 38, g_ENG_Half_Screen_Height - 37, 1
      D3D_Print_Black(g_ENG_Half_Screen_Width, g_ENG_Half_Screen_Height, 1, str$(g_MSEWHL_AdjSensitivity_Amount#, 1) + "x")
    endif
    `Display + Image
    if g_MSEWHL_AdjSensitivity_INC_Timer > timer()
      paste image c_MSEWHL_AdjSensitivity_Img_RIGHT, g_ENG_Half_Screen_Width - 38, g_ENG_Half_Screen_Height - 37, 1 
      D3D_Print_Black(g_ENG_Half_Screen_Width, g_ENG_Half_Screen_Height, 1, str$(g_MSEWHL_AdjSensitivity_Amount#, 1) + "x")
    endif
  

endfunction

function lib_GLOBAL_Adjust_MouseWheel_Sensitivity()

  `+/- Input Keys : Change mouse wheel sensitivities on Realtime / Command Console Database Viewers

 
  `PITS SCREEN MOUSE Z
    	` - KEY
    	if keystate(12) = 1 and key_state(12,0) = 0
	      g_MSEWHL_AdjSensitivity_DEC_Timer = timer() + 250
	      if g_MSEWHL_AdjSensitivity_Amount# > 1.0
	        dec g_MSEWHL_AdjSensitivity_Amount#, 0.2
	      endif
      	key_state(12,0) = 1
    	endif
    	
    	if keystate(12)=0 and key_state(12,0)=1 then key_state(12,0)=0
	  	` + KEY
    	if keystate(13) = 1 and key_state(13,0)=0
	      g_MSEWHL_AdjSensitivity_INC_Timer = timer() + 250
	      inc g_MSEWHL_AdjSensitivity_Amount#, 0.2
      	key_state(13,0) = 1
    	endif
    	if keystate(13)=0 and key_state(13,0)=1 then key_state(13,0)=0
    

  lib_GLOBAL_Disp_MouseWheel_Sens_Images()

    

endfunction

function __________CHANNEL_ID_______________________________________________jeu7629khhh()
`Channel ID is the system used to identify which channel is being clicked on and change ony of its
`properties, i.e. Channel name, Upper/Lower range - these then change the plots.
endfunction

function lib_CHANNEL_ID_Activate_ByMouse()

  local p_OUTPUT_Selected_Block_Num as integer : 
  local p_OUTPUT_Selected_Channel_Num as integer : local p_OUTPUT_Selected_Block_Num as integer
  local l_DblClk_Activate as integer
  local l_BlkChnlFound as integer : l_BlkChnlFound = -1
  local l_MSE_In_Chart_ID as integer : l_MSE_In_Chart_ID = -1
  local l_MSE_X as integer
  local l_MSE_Y as integer

  `This function determines which channel the user has clicked on to change on
  `either the Drilling or Pits Screens. Each Block contains 3 Channels and each Block
  `is identical in layout to the others, so a bit of maths can determine what has been
  `clicked using just the Block start X/Y coordinates. Whether the user is on the Drill
  `screen or Pit screen is determined in this function.
  
  `The function Outputs the Block and Channel numbers that have been clicked on
  `for use in the lib_CHANNEL_ID_Change_A_Channel function

  l_DblClk_Activate = -1
  
  if mouseclick() = 1 and g_CHANNEL_ID_ChngChnl_MseDblClck_MseClicked = -1
  ` and g_RCM_MSE_INPUT_Toggle = -1
    g_CHANNEL_ID_ChngChnl_MseDblClck_MseClicked = 1
    if timer() > g_CHANNEL_ID_ChngChnl_MseDblClck_Timer + 500
      if g_CHANNELIDChngChnl_NUMPAD_TIMEBtb_LOCK = -1
        g_CHANNEL_ID_ChngChnl_MseDblClck_Timer = timer()
      endif
    else
      l_DblClk_Activate = 1
      g_CHANNEL_ID_ChngChnl_OUTPUT_BlockNum = -1
      g_CHANNEL_ID_ChngChnl_OUTPUT_ChnlNum = -1
      g_CHANNEL_ID_ChngChnl_MseDblClck_MseXPos = mousex()
      g_CHANNEL_ID_ChngChnl_MseDblClck_MseYPos = mousey()
    endif
  endif
  if mouseclick() = 0 and g_CHANNEL_ID_ChngChnl_MseDblClck_MseClicked = 1
    g_CHANNEL_ID_ChngChnl_MseDblClck_MseClicked = -1
  endif

  
  if l_DblClk_Activate = 1
  
    `Discover if the mouse is in any of the clickable areas on the screen to activate the channel change box
    if g_ENGINE_Screen_Resolution = 1
    
      `Drilling Screen
      
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1
      
        `Determine Active BLOCK by mouse coordinates (Get current Chart/Block Number)
        l_MSE_X = g_CHANNEL_ID_ChngChnl_MseDblClck_MseXPos
        l_MSE_Y = g_CHANNEL_ID_ChngChnl_MseDblClck_MseYPos
        if l_MSE_X > 51 and l_MSE_X < 262 then l_MSE_In_Chart_ID = 1
        if l_MSE_X > 421 and l_MSE_X < 632 then l_MSE_In_Chart_ID = 2
        if l_MSE_X > 744 and l_MSE_X < 954 then l_MSE_In_Chart_ID = 3
      
        `Drill Screen - Now test the Active Block ID depending on if it is displaying 3 or 4 Channels
          `Block 1
        		if l_MSE_In_Chart_ID = 1
        			if g_DS_SCREEN_Block1_DisplayFormat = 3
        				lib_CHANNEL_ID_MouseTestBlockArea(118, 6, 1, 3, l_MSE_X, l_MSE_Y)
        			endif
        			if g_DS_SCREEN_Block1_DisplayFormat = 4
        				lib_CHANNEL_ID_MouseTestBlockArea(52, 6, 1, 4, l_MSE_X, l_MSE_Y)
        			endif
        		endif
        	`Block 2	
        		if l_MSE_In_Chart_ID = 2
        			if g_DS_SCREEN_Block2_DisplayFormat = 3
        				lib_CHANNEL_ID_MouseTestBlockArea(488, 6, 2, 3, l_MSE_X, l_MSE_Y)
        			endif
        			if g_DS_SCREEN_Block2_DisplayFormat = 4
        				lib_CHANNEL_ID_MouseTestBlockArea(422, 6, 2, 4, l_MSE_X, l_MSE_Y)
        			endif
        		endif
        	`Block 3
        		if l_MSE_In_Chart_ID = 3
        			if g_DS_SCREEN_Block3_DisplayFormat = 3
        				lib_CHANNEL_ID_MouseTestBlockArea(811, 6, 3, 3, l_MSE_X, l_MSE_Y)
        			endif
        			if g_DS_SCREEN_Block3_DisplayFormat = 4
        				lib_CHANNEL_ID_MouseTestBlockArea(745, 6, 3, 4, l_MSE_X, l_MSE_Y)
        			endif
        		endif
        
      endif
      
      
      
      `Pits Screen
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3
      
        `Determine Active BLOCK by mouse coordinates (Get current Chart/Block Number)
        l_MSE_X = g_CHANNEL_ID_ChngChnl_MseDblClck_MseXPos
        l_MSE_Y = g_CHANNEL_ID_ChngChnl_MseDblClck_MseYPos
        if l_MSE_X > 51 and l_MSE_X < 262 then l_MSE_In_Chart_ID = 1
        if l_MSE_X > 421 and l_MSE_X < 632 then l_MSE_In_Chart_ID = 2
        if l_MSE_X > 744 and l_MSE_X < 954 then l_MSE_In_Chart_ID = 3
        if l_MSE_X > 1059 and l_MSE_X < 1270 then l_MSE_In_Chart_ID = 4
      
          `Block 1
        		if l_MSE_In_Chart_ID = 1
        			if g_PITS_SCREEN_Block1_DisplayFormat = 3
        				lib_CHANNEL_ID_MouseTestBlockArea(118, 6, 1, 3, l_MSE_X, l_MSE_Y)
        			endif
        			if g_PITS_SCREEN_Block1_DisplayFormat = 4
        				lib_CHANNEL_ID_MouseTestBlockArea(52, 6, 1, 4, l_MSE_X, l_MSE_Y)
        			endif
        		endif
        	`Block 2	
        		if l_MSE_In_Chart_ID = 2
        			if g_PITS_SCREEN_Block2_DisplayFormat = 3
        				lib_CHANNEL_ID_MouseTestBlockArea(488, 6, 2, 3, l_MSE_X, l_MSE_Y)
        			endif
        			if g_PITS_SCREEN_Block2_DisplayFormat = 4
        				lib_CHANNEL_ID_MouseTestBlockArea(422, 6, 2, 4, l_MSE_X, l_MSE_Y)
        			endif
        		endif
        	`Block 3
        		if l_MSE_In_Chart_ID = 3
        			if g_PITS_SCREEN_Block3_DisplayFormat = 3
        				lib_CHANNEL_ID_MouseTestBlockArea(811, 6, 3, 3, l_MSE_X, l_MSE_Y)
        			endif
        			if g_PITS_SCREEN_Block3_DisplayFormat = 4
        				lib_CHANNEL_ID_MouseTestBlockArea(745, 6, 3, 4, l_MSE_X, l_MSE_Y)
        			endif
        		endif
        	`Block 4
        		if l_MSE_In_Chart_ID = 4
        			if g_PITS_SCREEN_Block4_DisplayFormat = 3
        				lib_CHANNEL_ID_MouseTestBlockArea(1125, 6, 4, 3, l_MSE_X, l_MSE_Y)
        			endif
        			if g_PITS_SCREEN_Block4_DisplayFormat = 4
        				lib_CHANNEL_ID_MouseTestBlockArea(1061, 6, 4, 4, l_MSE_X, l_MSE_Y)
        			endif
        		endif
      
      endif
      
    else
    
      `Drilling Screen
      if g_ENGINE_HIST_DRILL_Screen_Routing = 1
        `lib_CHANNEL_ID_MouseTestBlockArea(68, 6, 1, 3)
        `lib_CHANNEL_ID_MouseTestBlockArea(332, 6, 2, 3)
        `lib_CHANNEL_ID_MouseTestBlockArea(541, 6, 3, 3)
      endif
      
      `Pits Screen
      if g_ENGINE_HIST_DRILL_Screen_Routing = 3
        `lib_CHANNEL_ID_MouseTestBlockArea(68, 6, 1, 3)
        `lib_CHANNEL_ID_MouseTestBlockArea(332, 6, 2, 3)
        `lib_CHANNEL_ID_MouseTestBlockArea(541, 6, 3, 3)
        `lib_CHANNEL_ID_MouseTestBlockArea(743, 6, 4, 3)
      endif
      
    endif
      
    `If a channel has been double clicked on and is valid set to active
    if g_CHANNEL_ID_ChngChnl_OUTPUT_BlockNum <> -1 and g_CHANNEL_ID_ChngChnl_OUTPUT_ChnlNum <> -1
    
      `Set the NUMPAD and TIME PERIOD BUTTON LOCK
      g_CHANNELIDChngChnl_NUMPAD_TIMEBtb_LOCK = 1
      
      `This code is only run on a double click detected on one of the channel name boxes. Therefore it is
      `possible to enter the NUMPAD on one of the upper/lower ranges before the double click event occurs.
      `Because of this if the NUMPAD is active on either Drilling or Pits Screen it is deactivated here.
      `(The chances of this are reduced by not checking the Channel Name Boxes that are not on screen etc,
      `but this code is still here just in case a NUMPAD is activated preceeded by the double click here).
      lib_ALL_NUMPADS_Close_NUMPAD()
      
      `Set Toggles
      g_CHANNEL_ID_ChngChnl_Toggle = 1
      g_CHANNEL_ID_ChngChnl_MouseClick = 1
      
    endif
  
  endif

endfunction

function lib_CHANNEL_ID_Change_A_Channel(r_ScreenType)

  local l_BoxPos_x as integer
  local l_BoxPos_y as integer
  local l_SelectedChnlName$ as string
  local l_SelectedChnlIndex as integer

  `This function handles selecting a new channel on either the Drilling Screen or the Pits Screen
  `it provides an overlaid list and allows the user to select a channel with the mouse.
  `That channel is then displayed on that chart in that channel position.
  `Charts are described as Blocks. The Drilling Screen has 3 blocks and the Pits Screen has 4 blocks.
  `Each block has 3 channels. Channels can be turned off by selecting NONE in the Overlaid list.

  l_BoxPos_x = g_CHANNEL_ID_ChngChnl_BoxPos_x
  l_BoxPos_y = g_CHANNEL_ID_ChngChnl_BoxPos_y
  
  `Set the lockdown variable to force the Chart Info Boxes on the DS and PITS Screen to non responsive
    g_LOCKOUT_ChartInfoBoxes = 1
  
  `Inputs
    `CURSOR KEY UP
    `if keystate(200) = 1 and g_CHANNEL_ID_ChngChnl_KeyPressed = -1
    `  g_CHANNEL_ID_ChngChnl_KeyPressed = 1
    `  if g_CHANNEL_ID_ChngChnl_SelectChannel > 1
    `    dec g_CHANNEL_ID_ChngChnl_SelectChannel, 1
    `  endif 
    `endif
    `CURSOR KEY DOWN  
    `if keystate(208) = 1 and g_CHANNEL_ID_ChngChnl_KeyPressed = -1
    `  g_CHANNEL_ID_ChngChnl_KeyPressed = 1
    `  if g_CHANNEL_ID_ChngChnl_SelectChannel < 25
    `    inc g_CHANNEL_ID_ChngChnl_SelectChannel, 1
    `  endif 
    `endif
    `ESC
    if keystate(1) = 1 and g_CHANNEL_ID_ChngChnl_KeyPressed = -1
      key_state(1,0) = 1
      g_CHANNEL_ID_ChngChnl_KeyPressed = 1
      g_CHANNEL_ID_ChngChnl_Toggle = -1
    endif
    `Scroll Screen Numbers using mouse wheel
    `if mousez() > g_CHANNEL_ID_ChngChnl_MouseZ
    `  g_CHANNEL_ID_ChngChnl_MouseZ = mousez()
    `  if g_CHANNEL_ID_ChngChnl_SelectChannel > 1
    `    dec g_CHANNEL_ID_ChngChnl_SelectChannel, 1
    `  endif 
    `endif
    `if mousez() < g_CHANNEL_ID_ChngChnl_MouseZ
    `  g_CHANNEL_ID_ChngChnl_MouseZ = mousez()
    `  if g_CHANNEL_ID_ChngChnl_SelectChannel < 25
    `    inc g_CHANNEL_ID_ChngChnl_SelectChannel, 1
    `  endif 
    `endif
    
    `ENTER KEY
    if keystate(28) = 1 and g_CHANNEL_ID_ChngChnl_KeyPressed = -1
      g_CHANNEL_ID_ChngChnl_KeyPressed = 1
      key_state(28,0) = 1
    endif
    
    
    
    if scancode() = 0 and g_CHANNEL_ID_ChngChnl_KeyPressed = 1
      g_CHANNEL_ID_ChngChnl_KeyPressed = -1
    endif  
  
  paste image c_ENG_CHANNEL_ID_Menu_BkgdIMG, l_BoxPos_x, l_BoxPos_y
  
  `Handle Change Channel Input Box Close Button
  paste image c_CHANNEL_ID_CloseButton, l_BoxPos_x + 240, l_BoxPos_y + 1
  if mousex() > l_BoxPos_x + 240 and mousex() < l_BoxPos_x + 259
    if mousey() > l_BoxPos_y + 1 and mousey() < l_BoxPos_y + 18
      if mouseclick() = 1
        g_CHANNEL_ID_ChngChnl_Toggle = -1
        mouse_click(1) = 1
        g_CHART_Scroll_MouseZ = mousez()
        g_INFOBOX_INPUT_LMB_State = 1
        g_INFOBOX_INPUT_RMB_State = 1
      endif
    endif
  endif

  d3d_starttext
  


    l_SelectedChnlIndex = ((g_CHANNEL_ID_ChngChnl_OUTPUT_BlockNum - 1)*4) + g_CHANNEL_ID_ChngChnl_OUTPUT_ChnlNum
    if r_ScreenType = 2 then inc l_SelectedChnlIndex, 9

    if l_SelectedChnlIndex > 0
      if CHANNEL_ID_ChannelLinkIndex(l_SelectedChnlIndex) > 0
        l_SelectedChnlName$ = CHANNEL_ID_ChannelNames$(CHANNEL_ID_ChannelLinkIndex(l_SelectedChnlIndex))
        if CHANNEL_ID_ChannelNames_UserOverride$(CHANNEL_ID_ChannelLinkIndex(l_SelectedChnlIndex)) <> ""
          l_SelectedChnlName$ = l_SelectedChnlName$ + " (" + CHANNEL_ID_ChannelNames_UserOverride$(CHANNEL_ID_ChannelLinkIndex(l_SelectedChnlIndex)) + ")"
        endif
      else
        l_SelectedChnlName$ = ""
      endif
    else
      l_SelectedChnlName$ = ""
    endif
    
    d3d_text 2, l_BoxPos_x + 20, l_BoxPos_y + 25, 0, "Selected: " + l_SelectedChnlName$, g_ENGINE_COLOUR_White
  
    d3d_text 2, l_BoxPos_x + 20, l_BoxPos_y + 50, 0, "Select a channel", g_ENGINE_COLOUR_White

    if mouseclick() = 0 and g_CHANNEL_ID_ChngChnl_MouseClick <> - 1 then g_CHANNEL_ID_ChngChnl_MouseClick = -1
    
    `Handle the NUMPAD and TIME PERIOD BUTTONS Lockout.
    `Note: that this locks when the Change Channel box is first activated and will only unlock once it is closed
    `      and the mouse button is not being pressed (i.e. it is 'finished with').
    
    for Channel_lp = 1 to 29
    
      x1 = l_BoxPos_x + 13
      x2 = l_BoxPos_x + 150
      y1 = l_BoxPos_y + 54 + (Channel_lp*20)
      y2 = l_BoxPos_y + 73 + (Channel_lp*20)
      
      if mousex() > x1 and mousex() < x2
        if mousey() > y1 and mousey() < y2
          g_CHANNEL_ID_ChngChnl_SelectChannel = Channel_lp
          
          `MOUSE CLICK
          if mouseclick() = 1 and g_CHANNEL_ID_ChngChnl_MouseClick = -1
          
            g_CHANNEL_ID_ChngChnl_MouseClick = 1
            g_CHANNEL_ID_ChngChnl_Toggle = -1
            mouse_click(1) = 1
            g_CHART_Scroll_MouseZ = mousez()
            
            lib_CHANNEL_ID_Set_IndexArray(g_CHANNEL_ID_ChngChnl_OUTPUT_BlockNum, g_CHANNEL_ID_ChngChnl_OUTPUT_ChnlNum, Channel_lp)
            
            `Update Screen Charts
            if g_ENGINE_HIST_DRILL_Screen_Routing = 1
              ENGINE_DS_CHART_IMAGE_Creation()
            endif
            if g_ENGINE_HIST_DRILL_Screen_Routing = 3
              ENGINE_PITS_CHART_IMAGE_Creation()
            endif
            
            SAVE_CHANNEL_ID_ChannelIndex()
            
            g_INFOBOX_INPUT_LMB_State = 1
            g_INFOBOX_INPUT_RMB_State = 1
            
          endif
          
        endif
      endif
    
      if Channel_lp = g_CHANNEL_ID_ChngChnl_SelectChannel
        `l_text_length = d3d_gettextwidth(1, CHANNEL_ID_ChannelNames$(Channel_lp)) + 30
        d3d_box l_BoxPos_x + 13, l_BoxPos_y + 54 + (Channel_lp*20), l_BoxPos_x + 200, l_BoxPos_y + 73 + (Channel_lp*20), rgb(70, 70, 70)
      endif
    
      if Channel_lp < 29
        if CHANNEL_ID_ChannelNames_UserOverride$(Channel_lp) <> ""
          d3d_text 1, l_BoxPos_x + 20, l_BoxPos_y + 55 + (Channel_lp*20), 0, str$(Channel_lp)+ " " + CHANNEL_ID_ChannelNames$(Channel_lp) + " (" + CHANNEL_ID_ChannelNames_UserOverride$(Channel_lp) + ")", g_ENGINE_COLOUR_White
        else
          d3d_text 1, l_BoxPos_x + 20, l_BoxPos_y + 55 + (Channel_lp*20), 0, str$(Channel_lp)+ " " + CHANNEL_ID_ChannelNames$(Channel_lp), g_ENGINE_COLOUR_White
        endif
      else
        d3d_text 1, l_BoxPos_x + 20, l_BoxPos_y + 55 + (Channel_lp*20), 0, "CLEAR"
      endif


    next
  
  d3d_endtext
  
  g_PITS_ChartData_MouseState = 1

endfunction

function lib_CHANNEL_ID_MouseTestBlockArea(r_Block_XPos as integer, r_Block_YPos as integer, r_BlockNumber as integer, r_3_Or_4_Channels as integer, r_MSE_X as integer, r_MSE_Y as integer)

  local l_YOffset_Box_Channel_1 as integer
  local l_YOffset_Box_Channel_2 as integer
  local l_YOffset_Box_Channel_3 as integer
  local l_YOffset_Box_Channel_4 as integer

  `Test Block Area using all fixed variables, except for received X, Y
  
  `NOTE: X Position passed to this function is a COLUMN position with a START Y position. This function
  `      them increments the Y position within that COLUMN to check the Channel Name Box Positions, which
  `      it calculates using an offset value.
  
  `NOTE: r_3_Or_4_Channels options: 3=3 Channels in the Chart, 4=4 Channels in the Chart
  `NOTE: r_3_Or_4_Channels is used to determine if the Displayed Channel Items is 3 or 4. l_YOffset
  `      changes if it is 4 etc. 
  
  `YOffsets: 3 Channels on the Chart
  if r_3_Or_4_Channels = 3
    l_YOffset_Box_Channel_1 = 0
    l_YOffset_Box_Channel_2 = 62
    l_YOffset_Box_Channel_3 = 125
  endif
  
  `YOffsets: 4 Channels on the Chart
  if r_3_Or_4_Channels = 4
    l_YOffset_Box_Channel_1 = 0
    l_YOffset_Box_Channel_2 = 48
    l_YOffset_Box_Channel_3 = 95
    l_YOffset_Box_Channel_4 = 143
  endif
  
  `NOTE: These are also set to -1 in the mouse double click activation code to prevent a bug where they are passed to the PITS screen uncleared during program testing if
  `      this function is not run (i.e. if they were only cleared here) 
  g_CHANNEL_ID_ChngChnl_OUTPUT_BlockNum = -1
  g_CHANNEL_ID_ChngChnl_OUTPUT_ChnlNum = -1
  
  `Check if the mouse is in the Y coordinates of any channel in the Blocks Column (r_Block_XPos)
    if r_MSE_X > r_Block_XPos and r_MSE_X < (r_Block_XPos + 81)
    
      `Check Channel 1
      if r_MSE_Y > (r_Block_YPos + l_YOffset_Box_Channel_1) and r_MSE_Y < (r_Block_YPos + l_YOffset_Box_Channel_1 + 23)
        g_CHANNEL_ID_ChngChnl_OUTPUT_BlockNum = r_BlockNumber
        g_CHANNEL_ID_ChngChnl_OUTPUT_ChnlNum = 1
      endif
      
      `Check Channel 2
      if r_MSE_Y > (r_Block_YPos + l_YOffset_Box_Channel_2) and r_MSE_Y < (r_Block_YPos + l_YOffset_Box_Channel_2 + 23)
        g_CHANNEL_ID_ChngChnl_OUTPUT_BlockNum = r_BlockNumber
        g_CHANNEL_ID_ChngChnl_OUTPUT_ChnlNum = 2
      endif
      
      `Check Channel 3
      if r_MSE_Y > (r_Block_YPos + l_YOffset_Box_Channel_3) and r_MSE_Y < (r_Block_YPos + l_YOffset_Box_Channel_3 + 23)
        g_CHANNEL_ID_ChngChnl_OUTPUT_BlockNum = r_BlockNumber
        g_CHANNEL_ID_ChngChnl_OUTPUT_ChnlNum = 3
      endif
      
      `Check Channel 4
      if r_3_Or_4_Channels = 4
      	if r_MSE_Y > (r_Block_YPos + l_YOffset_Box_Channel_4) and r_MSE_Y < (r_Block_YPos + l_YOffset_Box_Channel_4 + 23)
       		g_CHANNEL_ID_ChngChnl_OUTPUT_BlockNum = r_BlockNumber
       		g_CHANNEL_ID_ChngChnl_OUTPUT_ChnlNum = 4
      	endif
      endif

    endif 
    
    

endfunction

function lib_CHANNEL_ID_PrintChannel_RTValues(r_ScreenType as integer)

  local l_LagDepth_Adjusted_Val# as float

  `DRILLING SCREEN
  if r_ScreenType = 1
    d3d_starttext
    
      d3d_text 5, g_DISPLAY_HOLE_DEPTH_x, g_DISPLAY_HOLE_DEPTH_y, 1, str$(g_COMMPORT_Receive_HoleDepth#, 1), g_ENGINE_COLOUR_Green
      d3d_text 5, g_DISPLAY_BIT_DEPTH_x, g_DISPLAY_BIT_DEPTH_y, 1, str$(g_COMMPORT_Receive_BitDepth#, 1), g_ENGINE_COLOUR_Green
      l_total_SPM_math = g_COMMPORT_Receive_SPM1 + g_COMMPORT_Receive_SPM2 + g_COMMPORT_Receive_SPM3
      d3d_text 7, g_DISPLAY_TOTAL_SPM_x, g_DISPLAY_TOTAL_SPM_y, 1, str$(l_total_SPM_math), g_ENGINE_COLOUR_DataBlue
      d3d_text 7, g_DISPLAY_SPM1_x, g_DISPLAY_SPM1_y, 1, str$(g_COMMPORT_Receive_SPM1, 0), g_ENGINE_COLOUR_DataBlue
      d3d_text 7, g_DISPLAY_SPM2_x, g_DISPLAY_SPM2_y, 1, str$(g_COMMPORT_Receive_SPM2, 0), g_ENGINE_COLOUR_DataBlue
      d3d_text 7, g_DISPLAY_SPM3_x, g_DISPLAY_SPM3_y, 1, str$(g_COMMPORT_Receive_SPM3, 0), g_ENGINE_COLOUR_DataBlue
      d3d_text 7, g_DISPLAY_TOTAL_GAS_x, g_DISPLAY_TOTAL_GAS_y, 1, str$(g_COMMPORT_Receive_TotalGas#, 1), g_ENGINE_COLOUR_DataBlue
      d3d_text 7, g_DISPLAY_H2S_x, g_DISPLAY_H2S_y, 1, str$(g_COMMPORT_Receive_H2S#, 0), g_ENGINE_COLOUR_DataBlue
        if g_LAGDEPTH_AdjustValue# <> 0.0
          l_LagDepth_Adjusted_Val# = g_COMMPORT_Receive_LagDepth# * g_LAGDEPTH_AdjustValue#
          d3d_text 7, g_DISPLAY_LAGDEPTH_x, g_DISPLAY_LAGDEPTH_y, 1, str$(l_LagDepth_Adjusted_Val#, 1), g_ENGINE_COLOUR_DataBlue
        endif
        
      `Block 1
      if g_DS_SCREEN_Block1_DisplayFormat = 3
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(1)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(1)) : if CHANNEL_ID_ChannelLinkIndex(1) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block1_Channel1_ValuePos_x, g_DRILL_DISPLAY_Block1_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(2)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(2)) : if CHANNEL_ID_ChannelLinkIndex(2) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block1_Channel2_ValuePos_x, g_DRILL_DISPLAY_Block1_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(3)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(3)) : if CHANNEL_ID_ChannelLinkIndex(3) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block1_Channel3_ValuePos_x, g_DRILL_DISPLAY_Block1_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      endif
      if g_DS_SCREEN_Block1_DisplayFormat = 4
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(1)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(1)) : if CHANNEL_ID_ChannelLinkIndex(1) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block1_4_Channel1_ValuePos_x, g_DRILL_DISPLAY_Block1_4_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(2)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(2)) : if CHANNEL_ID_ChannelLinkIndex(2) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block1_4_Channel2_ValuePos_x, g_DRILL_DISPLAY_Block1_4_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(3)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(3)) : if CHANNEL_ID_ChannelLinkIndex(3) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block1_4_Channel3_ValuePos_x, g_DRILL_DISPLAY_Block1_4_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(4)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(4)) : if CHANNEL_ID_ChannelLinkIndex(4) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block1_4_Channel4_ValuePos_x, g_DRILL_DISPLAY_Block1_4_Channel4_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      endif
      	
      `Block 2
      if g_DS_SCREEN_Block2_DisplayFormat = 3
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(5)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(5)) : if CHANNEL_ID_ChannelLinkIndex(5) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block2_Channel1_ValuePos_x, g_DRILL_DISPLAY_Block2_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(6)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(6)) : if CHANNEL_ID_ChannelLinkIndex(6) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block2_Channel2_ValuePos_x, g_DRILL_DISPLAY_Block2_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(7)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(7)) : if CHANNEL_ID_ChannelLinkIndex(7) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block2_Channel3_ValuePos_x, g_DRILL_DISPLAY_Block2_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      endif
      if g_DS_SCREEN_Block2_DisplayFormat = 4
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(5)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(5)) : if CHANNEL_ID_ChannelLinkIndex(5) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block2_4_Channel1_ValuePos_x, g_DRILL_DISPLAY_Block2_4_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(6)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(6)) : if CHANNEL_ID_ChannelLinkIndex(6) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block2_4_Channel2_ValuePos_x, g_DRILL_DISPLAY_Block2_4_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(7)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(7)) : if CHANNEL_ID_ChannelLinkIndex(7) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block2_4_Channel3_ValuePos_x, g_DRILL_DISPLAY_Block2_4_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(8)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(8)) : if CHANNEL_ID_ChannelLinkIndex(8) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block2_4_Channel4_ValuePos_x, g_DRILL_DISPLAY_Block2_4_Channel4_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      endif
      	
      `Block 3
      if g_DS_SCREEN_Block3_DisplayFormat = 3
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(9)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(9)) : if CHANNEL_ID_ChannelLinkIndex(9) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block3_Channel1_ValuePos_x, g_DRILL_DISPLAY_Block3_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(10)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(10)) : if CHANNEL_ID_ChannelLinkIndex(10) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block3_Channel2_ValuePos_x, g_DRILL_DISPLAY_Block3_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(11)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(11)) : if CHANNEL_ID_ChannelLinkIndex(11) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block3_Channel3_ValuePos_x, g_DRILL_DISPLAY_Block3_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
   	  endif
   	  if g_DS_SCREEN_Block3_DisplayFormat = 4
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(9)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(9)) : if CHANNEL_ID_ChannelLinkIndex(9) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block3_4_Channel1_ValuePos_x, g_DRILL_DISPLAY_Block3_4_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(10)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(10)) : if CHANNEL_ID_ChannelLinkIndex(10) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block3_4_Channel2_ValuePos_x, g_DRILL_DISPLAY_Block3_4_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(11)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(11)) : if CHANNEL_ID_ChannelLinkIndex(11) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block3_4_Channel3_ValuePos_x, g_DRILL_DISPLAY_Block3_4_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      	l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(12)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(12)) : if CHANNEL_ID_ChannelLinkIndex(12) > 0 then d3d_text 7, g_DRILL_DISPLAY_Block3_4_Channel4_ValuePos_x, g_DRILL_DISPLAY_Block3_4_Channel4_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
   	  endif
   	  
    d3d_endtext
  endif
` 
  `PITS SCREEN
  if r_ScreenType = 2
  
    d3d_starttext
    
      `Block 1
      if g_PITS_SCREEN_Block1_DisplayFormat = 3
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(13)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(13)) : if CHANNEL_ID_ChannelLinkIndex(13) > 0 then d3d_text 7, g_PITS_DISPLAY_Block1_Channel1_ValuePos_x, g_PITS_DISPLAY_Block1_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(14)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(14)) : if CHANNEL_ID_ChannelLinkIndex(14) > 0 then d3d_text 7, g_PITS_DISPLAY_Block1_Channel2_ValuePos_x, g_PITS_DISPLAY_Block1_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(15)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(15)) : if CHANNEL_ID_ChannelLinkIndex(15) > 0 then d3d_text 7, g_PITS_DISPLAY_Block1_Channel3_ValuePos_x, g_PITS_DISPLAY_Block1_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      endif
      if g_PITS_SCREEN_Block1_DisplayFormat = 4
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(13)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(13)) : if CHANNEL_ID_ChannelLinkIndex(13) > 0 then d3d_text 7, g_PITS_DISPLAY_Block1_4_Channel1_ValuePos_x, g_PITS_DISPLAY_Block1_4_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(14)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(14)) : if CHANNEL_ID_ChannelLinkIndex(14) > 0 then d3d_text 7, g_PITS_DISPLAY_Block1_4_Channel2_ValuePos_x, g_PITS_DISPLAY_Block1_4_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(15)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(15)) : if CHANNEL_ID_ChannelLinkIndex(15) > 0 then d3d_text 7, g_PITS_DISPLAY_Block1_4_Channel3_ValuePos_x, g_PITS_DISPLAY_Block1_4_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(16)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(16)) : if CHANNEL_ID_ChannelLinkIndex(16) > 0 then d3d_text 7, g_PITS_DISPLAY_Block1_4_Channel4_ValuePos_x, g_PITS_DISPLAY_Block1_4_Channel4_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      endif
      
      `Block 2
      if g_PITS_SCREEN_Block2_DisplayFormat = 3
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(17)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(17)) : if CHANNEL_ID_ChannelLinkIndex(17) > 0 then d3d_text 7, g_PITS_DISPLAY_Block2_Channel1_ValuePos_x, g_PITS_DISPLAY_Block2_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(18)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(18)) : if CHANNEL_ID_ChannelLinkIndex(18) > 0 then d3d_text 7, g_PITS_DISPLAY_Block2_Channel2_ValuePos_x, g_PITS_DISPLAY_Block2_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(19)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(19)) : if CHANNEL_ID_ChannelLinkIndex(19) > 0 then d3d_text 7, g_PITS_DISPLAY_Block2_Channel3_ValuePos_x, g_PITS_DISPLAY_Block2_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      endif
      if g_PITS_SCREEN_Block2_DisplayFormat = 4
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(17)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(17)) : if CHANNEL_ID_ChannelLinkIndex(17) > 0 then d3d_text 7, g_PITS_DISPLAY_Block2_4_Channel1_ValuePos_x, g_PITS_DISPLAY_Block2_4_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(18)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(18)) : if CHANNEL_ID_ChannelLinkIndex(18) > 0 then d3d_text 7, g_PITS_DISPLAY_Block2_4_Channel2_ValuePos_x, g_PITS_DISPLAY_Block2_4_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(19)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(19)) : if CHANNEL_ID_ChannelLinkIndex(19) > 0 then d3d_text 7, g_PITS_DISPLAY_Block2_4_Channel3_ValuePos_x, g_PITS_DISPLAY_Block2_4_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(20)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(20)) : if CHANNEL_ID_ChannelLinkIndex(20) > 0 then d3d_text 7, g_PITS_DISPLAY_Block2_4_Channel4_ValuePos_x, g_PITS_DISPLAY_Block2_4_Channel4_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue 
      endif
      
      `Block 3
      if g_PITS_SCREEN_Block3_DisplayFormat = 3
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(21)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(21)) : if CHANNEL_ID_ChannelLinkIndex(21) > 0 then d3d_text 7, g_PITS_DISPLAY_Block3_Channel1_ValuePos_x, g_PITS_DISPLAY_Block3_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(22)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(22)) : if CHANNEL_ID_ChannelLinkIndex(22) > 0 then d3d_text 7, g_PITS_DISPLAY_Block3_Channel2_ValuePos_x, g_PITS_DISPLAY_Block3_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(23)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(23)) : if CHANNEL_ID_ChannelLinkIndex(23) > 0 then d3d_text 7, g_PITS_DISPLAY_Block3_Channel3_ValuePos_x, g_PITS_DISPLAY_Block3_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      endif
      if g_PITS_SCREEN_Block3_DisplayFormat = 4
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(21)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(21)) : if CHANNEL_ID_ChannelLinkIndex(21) > 0 then d3d_text 7, g_PITS_DISPLAY_Block3_4_Channel1_ValuePos_x, g_PITS_DISPLAY_Block3_4_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(22)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(22)) : if CHANNEL_ID_ChannelLinkIndex(22) > 0 then d3d_text 7, g_PITS_DISPLAY_Block3_4_Channel2_ValuePos_x, g_PITS_DISPLAY_Block3_4_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(23)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(23)) : if CHANNEL_ID_ChannelLinkIndex(23) > 0 then d3d_text 7, g_PITS_DISPLAY_Block3_4_Channel3_ValuePos_x, g_PITS_DISPLAY_Block3_4_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(24)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(24)) : if CHANNEL_ID_ChannelLinkIndex(24) > 0 then d3d_text 7, g_PITS_DISPLAY_Block3_4_Channel4_ValuePos_x, g_PITS_DISPLAY_Block3_4_Channel4_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      endif
      
      `Block 4
      if g_PITS_SCREEN_Block4_DisplayFormat = 3
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(25)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(25)) : if CHANNEL_ID_ChannelLinkIndex(25) > 0 then d3d_text 7, g_PITS_DISPLAY_Block4_Channel1_ValuePos_x, g_PITS_DISPLAY_Block4_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(26)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(26)) : if CHANNEL_ID_ChannelLinkIndex(26) > 0 then d3d_text 7, g_PITS_DISPLAY_Block4_Channel2_ValuePos_x, g_PITS_DISPLAY_Block4_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(27)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(27)) : if CHANNEL_ID_ChannelLinkIndex(27) > 0 then d3d_text 7, g_PITS_DISPLAY_Block4_Channel3_ValuePos_x, g_PITS_DISPLAY_Block4_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      endif
      if g_PITS_SCREEN_Block4_DisplayFormat = 4
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(25)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(25)) : if CHANNEL_ID_ChannelLinkIndex(25) > 0 then d3d_text 7, g_PITS_DISPLAY_Block4_4_Channel1_ValuePos_x, g_PITS_DISPLAY_Block4_4_Channel1_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(26)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(26)) : if CHANNEL_ID_ChannelLinkIndex(26) > 0 then d3d_text 7, g_PITS_DISPLAY_Block4_4_Channel2_ValuePos_x, g_PITS_DISPLAY_Block4_4_Channel2_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(27)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(27)) : if CHANNEL_ID_ChannelLinkIndex(27) > 0 then d3d_text 7, g_PITS_DISPLAY_Block4_4_Channel3_ValuePos_x, g_PITS_DISPLAY_Block4_4_Channel3_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
        l_Value# = lib_CHANNEL_ID_Get_RT_Value(CHANNEL_ID_ChannelLinkIndex(28)) : l_UnitsDP = lib_CHANNEL_ID_Get_UNITS_DP(CHANNEL_ID_ChannelLinkIndex(28)) : if CHANNEL_ID_ChannelLinkIndex(28) > 0 then d3d_text 7, g_PITS_DISPLAY_Block4_4_Channel4_ValuePos_x, g_PITS_DISPLAY_Block4_4_Channel4_ValuePos_y, 1, str$(l_Value#, l_UnitsDP), g_ENGINE_COLOUR_DataBlue
      endif
    
    d3d_endtext
    
  endif


endfunction

function lib_CHANNEL_ID_PrintChannel_NAMES(r_ScreenType as integer)

  `This function prints the Indexed CHANNEL NAMES to the screen
  `Call this function to print the CHANNEL NAMES
  
  `DS Screen - Channel NAMES
  if r_ScreenType = 1
    d3d_starttext
        `Block 1
          if g_DS_SCREEN_Block1_DisplayFormat = 3
          	if CHANNEL_ID_ChannelLinkIndex(1) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block1_Channel1_Name_x, g_DRILL_DISPLAY_Block1_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(1)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(2) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block1_Channel2_Name_x, g_DRILL_DISPLAY_Block1_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(2)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(3) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block1_Channel3_Name_x, g_DRILL_DISPLAY_Block1_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(3)), g_ENGINE_COLOUR_Black
          endif
          if g_DS_SCREEN_Block1_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(1) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block1_4_Channel1_Name_x, g_DRILL_DISPLAY_Block1_4_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(1)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(2) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block1_4_Channel2_Name_x, g_DRILL_DISPLAY_Block1_4_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(2)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(3) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block1_4_Channel3_Name_x, g_DRILL_DISPLAY_Block1_4_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(3)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(4) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block1_4_Channel4_Name_x, g_DRILL_DISPLAY_Block1_4_Channel4_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(4)), g_ENGINE_COLOUR_Black
          endif
        `Block 2
          if g_DS_SCREEN_Block2_DisplayFormat = 3
          	if CHANNEL_ID_ChannelLinkIndex(5) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block2_Channel1_Name_x, g_DRILL_DISPLAY_Block2_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(5)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(6) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block2_Channel2_Name_x, g_DRILL_DISPLAY_Block2_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(6)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(7) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block2_Channel3_Name_x, g_DRILL_DISPLAY_Block2_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(7)), g_ENGINE_COLOUR_Black
          endif
          if g_DS_SCREEN_Block2_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(5) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block2_4_Channel1_Name_x, g_DRILL_DISPLAY_Block2_4_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(5)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(6) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block2_4_Channel2_Name_x, g_DRILL_DISPLAY_Block2_4_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(6)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(7) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block2_4_Channel3_Name_x, g_DRILL_DISPLAY_Block2_4_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(7)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(8) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block2_4_Channel4_Name_x, g_DRILL_DISPLAY_Block2_4_Channel4_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(8)), g_ENGINE_COLOUR_Black
          endif
        `Block 3
          if g_DS_SCREEN_Block3_DisplayFormat = 3
          	if CHANNEL_ID_ChannelLinkIndex(9) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block3_Channel1_Name_x, g_DRILL_DISPLAY_Block3_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(9)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(10) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block3_Channel2_Name_x, g_DRILL_DISPLAY_Block3_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(10)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(11) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block3_Channel3_Name_x, g_DRILL_DISPLAY_Block3_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(11)), g_ENGINE_COLOUR_Black
          endif
          if g_DS_SCREEN_Block3_DisplayFormat = 4
          	if CHANNEL_ID_ChannelLinkIndex(9) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block3_4_Channel1_Name_x, g_DRILL_DISPLAY_Block3_4_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(9)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(10) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block3_4_Channel2_Name_x, g_DRILL_DISPLAY_Block3_4_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(10)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(11) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block3_4_Channel3_Name_x, g_DRILL_DISPLAY_Block3_4_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(11)), g_ENGINE_COLOUR_Black
          	if CHANNEL_ID_ChannelLinkIndex(12) > 0 then d3d_text 13, g_DRILL_DISPLAY_Block3_4_Channel4_Name_x, g_DRILL_DISPLAY_Block3_4_Channel4_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(12)), g_ENGINE_COLOUR_Black
          endif
    d3d_endtext
  endif
  
  
  `PITS Screen - Channel NAMES
  if r_ScreenType = 2
    d3d_starttext
    
      `Block 1
        if g_PITS_SCREEN_Block1_DisplayFormat = 3
          if CHANNEL_ID_ChannelLinkIndex(13) > 0 then d3d_text 13, g_PITS_DISPLAY_Block1_Channel1_Name_x, g_PITS_DISPLAY_Block1_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(13)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(14) > 0 then d3d_text 13, g_PITS_DISPLAY_Block1_Channel2_Name_x, g_PITS_DISPLAY_Block1_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(14)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(15) > 0 then d3d_text 13, g_PITS_DISPLAY_Block1_Channel3_Name_x, g_PITS_DISPLAY_Block1_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(15)), g_ENGINE_COLOUR_Black
        endif
        if g_PITS_SCREEN_Block1_DisplayFormat = 4
          if CHANNEL_ID_ChannelLinkIndex(13) > 0 then d3d_text 13, g_PITS_DISPLAY_Block1_4_Channel1_Name_x, g_PITS_DISPLAY_Block1_4_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(13)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(14) > 0 then d3d_text 13, g_PITS_DISPLAY_Block1_4_Channel2_Name_x, g_PITS_DISPLAY_Block1_4_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(14)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(15) > 0 then d3d_text 13, g_PITS_DISPLAY_Block1_4_Channel3_Name_x, g_PITS_DISPLAY_Block1_4_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(15)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(16) > 0 then d3d_text 13, g_PITS_DISPLAY_Block1_4_Channel4_Name_x, g_PITS_DISPLAY_Block1_4_Channel4_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(16)), g_ENGINE_COLOUR_Black
        endif
      `Block 2
        if g_PITS_SCREEN_Block2_DisplayFormat = 3
          if CHANNEL_ID_ChannelLinkIndex(17) > 0 then d3d_text 13, g_PITS_DISPLAY_Block2_Channel1_Name_x, g_PITS_DISPLAY_Block2_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(17)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(18) > 0 then d3d_text 13, g_PITS_DISPLAY_Block2_Channel2_Name_x, g_PITS_DISPLAY_Block2_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(18)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(19) > 0 then d3d_text 13, g_PITS_DISPLAY_Block2_Channel3_Name_x, g_PITS_DISPLAY_Block2_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(19)), g_ENGINE_COLOUR_Black
        endif
        if g_PITS_SCREEN_Block2_DisplayFormat = 4
          if CHANNEL_ID_ChannelLinkIndex(17) > 0 then d3d_text 13, g_PITS_DISPLAY_Block2_4_Channel1_Name_x, g_PITS_DISPLAY_Block2_4_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(17)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(18) > 0 then d3d_text 13, g_PITS_DISPLAY_Block2_4_Channel2_Name_x, g_PITS_DISPLAY_Block2_4_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(18)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(19) > 0 then d3d_text 13, g_PITS_DISPLAY_Block2_4_Channel3_Name_x, g_PITS_DISPLAY_Block2_4_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(19)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(20) > 0 then d3d_text 13, g_PITS_DISPLAY_Block2_4_Channel4_Name_x, g_PITS_DISPLAY_Block2_4_Channel4_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(20)), g_ENGINE_COLOUR_Black
        endif
      `Block 3
        if g_PITS_SCREEN_Block3_DisplayFormat = 3
          if CHANNEL_ID_ChannelLinkIndex(21) > 0 then d3d_text 13, g_PITS_DISPLAY_Block3_Channel1_Name_x, g_PITS_DISPLAY_Block3_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(21)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(22) > 0 then d3d_text 13, g_PITS_DISPLAY_Block3_Channel2_Name_x, g_PITS_DISPLAY_Block3_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(22)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(23) > 0 then d3d_text 13, g_PITS_DISPLAY_Block3_Channel3_Name_x, g_PITS_DISPLAY_Block3_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(23)), g_ENGINE_COLOUR_Black
        endif
        if g_PITS_SCREEN_Block3_DisplayFormat = 4
          if CHANNEL_ID_ChannelLinkIndex(21) > 0 then d3d_text 13, g_PITS_DISPLAY_Block3_4_Channel1_Name_x, g_PITS_DISPLAY_Block3_4_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(21)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(22) > 0 then d3d_text 13, g_PITS_DISPLAY_Block3_4_Channel2_Name_x, g_PITS_DISPLAY_Block3_4_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(22)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(23) > 0 then d3d_text 13, g_PITS_DISPLAY_Block3_4_Channel3_Name_x, g_PITS_DISPLAY_Block3_4_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(23)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(24) > 0 then d3d_text 13, g_PITS_DISPLAY_Block3_4_Channel4_Name_x, g_PITS_DISPLAY_Block3_4_Channel4_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(24)), g_ENGINE_COLOUR_Black
        endif
      `Block 4
        if g_PITS_SCREEN_Block4_DisplayFormat = 3
          if CHANNEL_ID_ChannelLinkIndex(25) > 0 then d3d_text 13, g_PITS_DISPLAY_Block4_Channel1_Name_x, g_PITS_DISPLAY_Block4_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(25)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(26) > 0 then d3d_text 13, g_PITS_DISPLAY_Block4_Channel2_Name_x, g_PITS_DISPLAY_Block4_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(26)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(27) > 0 then d3d_text 13, g_PITS_DISPLAY_Block4_Channel3_Name_x, g_PITS_DISPLAY_Block4_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(27)), g_ENGINE_COLOUR_Black
        endif
        if g_PITS_SCREEN_Block4_DisplayFormat = 4
          if CHANNEL_ID_ChannelLinkIndex(25) > 0 then d3d_text 13, g_PITS_DISPLAY_Block4_4_Channel1_Name_x, g_PITS_DISPLAY_Block4_4_Channel1_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(25)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(26) > 0 then d3d_text 13, g_PITS_DISPLAY_Block4_4_Channel2_Name_x, g_PITS_DISPLAY_Block4_4_Channel2_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(26)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(27) > 0 then d3d_text 13, g_PITS_DISPLAY_Block4_4_Channel3_Name_x, g_PITS_DISPLAY_Block4_4_Channel3_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(27)), g_ENGINE_COLOUR_Black
          if CHANNEL_ID_ChannelLinkIndex(28) > 0 then d3d_text 13, g_PITS_DISPLAY_Block4_4_Channel4_Name_x, g_PITS_DISPLAY_Block4_4_Channel4_Name_y, 1, lib_Get_ChannelDisplayName(CHANNEL_ID_ChannelLinkIndex(28)), g_ENGINE_COLOUR_Black
        endif
    d3d_endtext
  endif


endfunction

function lib_CHANNEL_ID_PrintChannel_RANGES(r_ScreenType as integer)

  `NOTE: r_ScreenType: 1=Drilling Screen, 2=Pits Screen

  `DRILLING SCREEN
  if r_ScreenType = 1
    d3d_starttext
    
      `Block 1
        `3 Channels per chart
      		if g_DS_SCREEN_Block1_DisplayFormat = 3
      			if CHANNEL_ID_ChannelLinkIndex(1) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(1))
        			d3d_text 8, g_DRILL_DISPLAY_Block1_Channel1_LO_x, g_DRILL_DISPLAY_Block1_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line1_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block1_Channel1_HIGH_x, g_DRILL_DISPLAY_Block1_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(2) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(2))
        			d3d_text 8, g_DRILL_DISPLAY_Block1_Channel2_LO_x, g_DRILL_DISPLAY_Block1_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line2_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block1_Channel2_HIGH_x, g_DRILL_DISPLAY_Block1_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(3) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(3))
        			d3d_text 8, g_DRILL_DISPLAY_Block1_Channel3_LO_x, g_DRILL_DISPLAY_Block1_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line3_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block1_Channel3_HIGH_x, g_DRILL_DISPLAY_Block1_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line3_Colour
      			endif
      		endif
      	`4 Channels per chart	
      		if g_DS_SCREEN_Block1_DisplayFormat = 4
      			if CHANNEL_ID_ChannelLinkIndex(1) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(1))
        			d3d_text 8, g_DRILL_DISPLAY_Block1_4_Channel1_LO_x, g_DRILL_DISPLAY_Block1_4_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line1_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block1_4_Channel1_HIGH_x, g_DRILL_DISPLAY_Block1_4_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(2) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(2))
        			d3d_text 8, g_DRILL_DISPLAY_Block1_4_Channel2_LO_x, g_DRILL_DISPLAY_Block1_4_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line2_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block1_4_Channel2_HIGH_x, g_DRILL_DISPLAY_Block1_4_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(3) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(3))
        			d3d_text 8, g_DRILL_DISPLAY_Block1_4_Channel3_LO_x, g_DRILL_DISPLAY_Block1_4_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line3_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block1_4_Channel3_HIGH_x, g_DRILL_DISPLAY_Block1_4_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line3_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(4) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(4))
        			d3d_text 8, g_DRILL_DISPLAY_Block1_4_Channel4_LO_x, g_DRILL_DISPLAY_Block1_4_Channel4_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line4_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block1_4_Channel4_HIGH_x, g_DRILL_DISPLAY_Block1_4_Channel4_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line4_Colour
      			endif
      		endif
      
      `Block 2
        `3 Channels per chart  
      		if g_DS_SCREEN_Block2_DisplayFormat = 3
      			if CHANNEL_ID_ChannelLinkIndex(5) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(5))
        			d3d_text 8, g_DRILL_DISPLAY_Block2_Channel1_LO_x, g_DRILL_DISPLAY_Block2_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line1_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block2_Channel1_HIGH_x, g_DRILL_DISPLAY_Block2_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(6) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(6))
        			d3d_text 8, g_DRILL_DISPLAY_Block2_Channel2_LO_x, g_DRILL_DISPLAY_Block2_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line2_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block2_Channel2_HIGH_x, g_DRILL_DISPLAY_Block2_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(7) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(7))
        			d3d_text 8, g_DRILL_DISPLAY_Block2_Channel3_LO_x, g_DRILL_DISPLAY_Block2_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line3_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block2_Channel3_HIGH_x, g_DRILL_DISPLAY_Block2_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line3_Colour
      			endif
      		endif
      	`4 Channels per chart	
      		if g_DS_SCREEN_Block2_DisplayFormat = 4
      			if CHANNEL_ID_ChannelLinkIndex(5) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(5))
        			d3d_text 8, g_DRILL_DISPLAY_Block2_4_Channel1_LO_x, g_DRILL_DISPLAY_Block2_4_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line1_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block2_4_Channel1_HIGH_x, g_DRILL_DISPLAY_Block2_4_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(6) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(6))
        			d3d_text 8, g_DRILL_DISPLAY_Block2_4_Channel2_LO_x, g_DRILL_DISPLAY_Block2_4_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line2_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block2_4_Channel2_HIGH_x, g_DRILL_DISPLAY_Block2_4_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(7) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(7))
        			d3d_text 8, g_DRILL_DISPLAY_Block2_4_Channel3_LO_x, g_DRILL_DISPLAY_Block2_4_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line3_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block2_4_Channel3_HIGH_x, g_DRILL_DISPLAY_Block2_4_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line3_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(8) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(8))
        			d3d_text 8, g_DRILL_DISPLAY_Block2_4_Channel4_LO_x, g_DRILL_DISPLAY_Block2_4_Channel4_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line4_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block2_4_Channel4_HIGH_x, g_DRILL_DISPLAY_Block2_4_Channel4_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line4_Colour
      			endif
      		endif
      
      `Block 3
        `3 Channels per chart
      		if g_DS_SCREEN_Block3_DisplayFormat = 3
      			if CHANNEL_ID_ChannelLinkIndex(9) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(9))
        			d3d_text 8, g_DRILL_DISPLAY_Block3_Channel1_LO_x, g_DRILL_DISPLAY_Block3_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line1_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block3_Channel1_HIGH_x, g_DRILL_DISPLAY_Block3_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(10) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(10))
        			d3d_text 8, g_DRILL_DISPLAY_Block3_Channel2_LO_x, g_DRILL_DISPLAY_Block3_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line2_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block3_Channel2_HIGH_x, g_DRILL_DISPLAY_Block3_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(11) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(11))
        			d3d_text 8, g_DRILL_DISPLAY_Block3_Channel3_LO_x, g_DRILL_DISPLAY_Block3_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line3_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block3_Channel3_HIGH_x, g_DRILL_DISPLAY_Block3_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line3_Colour
      			endif
      		endif
      	`4 Channels per chart	
      		if g_DS_SCREEN_Block3_DisplayFormat = 4
      			if CHANNEL_ID_ChannelLinkIndex(9) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(9))
        			d3d_text 8, g_DRILL_DISPLAY_Block3_4_Channel1_LO_x, g_DRILL_DISPLAY_Block3_4_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line1_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block3_4_Channel1_HIGH_x, g_DRILL_DISPLAY_Block3_4_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(10) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(10))
        			d3d_text 8, g_DRILL_DISPLAY_Block3_4_Channel2_LO_x, g_DRILL_DISPLAY_Block3_4_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line2_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block3_4_Channel2_HIGH_x, g_DRILL_DISPLAY_Block3_4_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(11) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(11))
        			d3d_text 8, g_DRILL_DISPLAY_Block3_4_Channel3_LO_x, g_DRILL_DISPLAY_Block3_4_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line3_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block3_4_Channel3_HIGH_x, g_DRILL_DISPLAY_Block3_4_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line3_Colour
      			endif
        		if CHANNEL_ID_ChannelLinkIndex(12) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(12))
        			d3d_text 8, g_DRILL_DISPLAY_Block3_4_Channel4_LO_x, g_DRILL_DISPLAY_Block3_4_Channel4_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line4_Colour
        			d3d_text 8, g_DRILL_DISPLAY_Block3_4_Channel4_HIGH_x, g_DRILL_DISPLAY_Block3_4_Channel4_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line4_Colour
      			endif
      		endif
      
    d3d_endtext
    
  endif
  
  `PITS SCREEN
  if r_ScreenType = 2
  
    d3d_starttext
    
      `BLOCK 1
        `3 CHANNELS PER CHART
        	if g_PITS_SCREEN_Block1_DisplayFormat = 3
      			if CHANNEL_ID_ChannelLinkIndex(13) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(13))
        			d3d_text 8, g_PITS_DISPLAY_Block1_Channel1_LO_x, g_PITS_DISPLAY_Block1_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line1_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block1_Channel1_HIGH_x, g_PITS_DISPLAY_Block1_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(14) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(14))
        			d3d_text 8, g_PITS_DISPLAY_Block1_Channel2_LO_x, g_PITS_DISPLAY_Block1_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line2_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block1_Channel2_HIGH_x, g_PITS_DISPLAY_Block1_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(15) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(15))
        			d3d_text 8, g_PITS_DISPLAY_Block1_Channel3_LO_x, g_PITS_DISPLAY_Block1_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line3_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block1_Channel3_HIGH_x, g_PITS_DISPLAY_Block1_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line3_Colour
      			endif
        	endif
        `4 CHANNELS PER CHART
        	if g_PITS_SCREEN_Block1_DisplayFormat = 4
      			if CHANNEL_ID_ChannelLinkIndex(13) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(13))
        			d3d_text 8, g_PITS_DISPLAY_Block1_4_Channel1_LO_x, g_PITS_DISPLAY_Block1_4_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line1_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block1_4_Channel1_HIGH_x, g_PITS_DISPLAY_Block1_4_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(14) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(14))
        			d3d_text 8, g_PITS_DISPLAY_Block1_4_Channel2_LO_x, g_PITS_DISPLAY_Block1_4_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line2_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block1_4_Channel2_HIGH_x, g_PITS_DISPLAY_Block1_4_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(15) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(15))
        			d3d_text 8, g_PITS_DISPLAY_Block1_4_Channel3_LO_x, g_PITS_DISPLAY_Block1_4_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line3_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block1_4_Channel3_HIGH_x, g_PITS_DISPLAY_Block1_4_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line3_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(16) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(16))
        			d3d_text 8, g_PITS_DISPLAY_Block1_4_Channel4_LO_x, g_PITS_DISPLAY_Block1_4_Channel4_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block1_Line4_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block1_4_Channel4_HIGH_x, g_PITS_DISPLAY_Block1_4_Channel4_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block1_Line4_Colour
      			endif
        	endif
     	
      `BLOCK 2
        `3 CHANNELS PER CHART
        	if g_PITS_SCREEN_Block2_DisplayFormat = 3
      			if CHANNEL_ID_ChannelLinkIndex(17) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(17))
        			d3d_text 8, g_PITS_DISPLAY_Block2_Channel1_LO_x, g_PITS_DISPLAY_Block2_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line1_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block2_Channel1_HIGH_x, g_PITS_DISPLAY_Block2_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(18) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(18))
        			d3d_text 8, g_PITS_DISPLAY_Block2_Channel2_LO_x, g_PITS_DISPLAY_Block2_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line2_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block2_Channel2_HIGH_x, g_PITS_DISPLAY_Block2_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(19) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(19))
        			d3d_text 8, g_PITS_DISPLAY_Block2_Channel3_LO_x, g_PITS_DISPLAY_Block2_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line3_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block2_Channel3_HIGH_x, g_PITS_DISPLAY_Block2_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line3_Colour
      			endif
      		endif
        `4 CHANNELS PER CHART
        	if g_PITS_SCREEN_Block2_DisplayFormat = 4
      			if CHANNEL_ID_ChannelLinkIndex(17) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(17))
        			d3d_text 8, g_PITS_DISPLAY_Block2_4_Channel1_LO_x, g_PITS_DISPLAY_Block2_4_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line1_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block2_4_Channel1_HIGH_x, g_PITS_DISPLAY_Block2_4_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(18) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(18))
        			d3d_text 8, g_PITS_DISPLAY_Block2_4_Channel2_LO_x, g_PITS_DISPLAY_Block2_4_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line2_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block2_4_Channel2_HIGH_x, g_PITS_DISPLAY_Block2_4_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(19) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(19))
        			d3d_text 8, g_PITS_DISPLAY_Block2_4_Channel3_LO_x, g_PITS_DISPLAY_Block2_4_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line3_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block2_4_Channel3_HIGH_x, g_PITS_DISPLAY_Block2_4_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line3_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(20) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(20))
        			d3d_text 8, g_PITS_DISPLAY_Block2_4_Channel4_LO_x, g_PITS_DISPLAY_Block2_4_Channel4_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block2_Line4_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block2_4_Channel4_HIGH_x, g_PITS_DISPLAY_Block2_4_Channel4_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block2_Line4_Colour
      			endif
        	endif
      		      
      `BLOCK 3
        `3 CHANNELS PER CHART
        	if g_PITS_SCREEN_Block3_DisplayFormat = 3
      			if CHANNEL_ID_ChannelLinkIndex(21) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(21))
        			d3d_text 8, g_PITS_DISPLAY_Block3_Channel1_LO_x, g_PITS_DISPLAY_Block3_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line1_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block3_Channel1_HIGH_x, g_PITS_DISPLAY_Block3_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(22) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(22))
        			d3d_text 8, g_PITS_DISPLAY_Block3_Channel2_LO_x, g_PITS_DISPLAY_Block3_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line2_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block3_Channel2_HIGH_x, g_PITS_DISPLAY_Block3_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(23) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(23))
        			d3d_text 8, g_PITS_DISPLAY_Block3_Channel3_LO_x, g_PITS_DISPLAY_Block3_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line3_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block3_Channel3_HIGH_x, g_PITS_DISPLAY_Block3_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line3_Colour
      			endif
      		endif
        `4 CHANNELS PER CHART
        	if g_PITS_SCREEN_Block3_DisplayFormat = 4
      			if CHANNEL_ID_ChannelLinkIndex(21) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(21))
        			d3d_text 8, g_PITS_DISPLAY_Block3_4_Channel1_LO_x, g_PITS_DISPLAY_Block3_4_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line1_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block3_4_Channel1_HIGH_x, g_PITS_DISPLAY_Block3_4_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(22) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(22))
        			d3d_text 8, g_PITS_DISPLAY_Block3_4_Channel2_LO_x, g_PITS_DISPLAY_Block3_4_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line2_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block3_4_Channel2_HIGH_x, g_PITS_DISPLAY_Block3_4_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(23) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(23))
        			d3d_text 8, g_PITS_DISPLAY_Block3_4_Channel3_LO_x, g_PITS_DISPLAY_Block3_4_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line3_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block3_4_Channel3_HIGH_x, g_PITS_DISPLAY_Block3_4_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line3_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(24) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(24))
        			d3d_text 8, g_PITS_DISPLAY_Block3_4_Channel4_LO_x, g_PITS_DISPLAY_Block3_4_Channel4_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line4_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block3_4_Channel4_HIGH_x, g_PITS_DISPLAY_Block3_4_Channel4_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block3_Line4_Colour
      			endif
      		endif
      
      `BLOCK 4
        `3 CHANNELS PER CHART
        	if g_PITS_SCREEN_Block4_DisplayFormat = 3
      			if CHANNEL_ID_ChannelLinkIndex(25) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(25))
        			d3d_text 8, g_PITS_DISPLAY_Block4_Channel1_LO_x, g_PITS_DISPLAY_Block4_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block4_Line1_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block4_Channel1_HIGH_x, g_PITS_DISPLAY_Block4_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block4_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(26) > 0
        		 	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(26))
        			d3d_text 8, g_PITS_DISPLAY_Block4_Channel2_LO_x, g_PITS_DISPLAY_Block4_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block4_Line2_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block4_Channel2_HIGH_x, g_PITS_DISPLAY_Block4_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block4_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(27) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(27))
        			d3d_text 8, g_PITS_DISPLAY_Block4_Channel3_LO_x, g_PITS_DISPLAY_Block4_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block3_Line3_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block4_Channel3_HIGH_x, g_PITS_DISPLAY_Block4_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block4_Line3_Colour
      			endif
      		endif
        `4 CHANNELS PER CHART
        	if g_PITS_SCREEN_Block4_DisplayFormat = 4
      			if CHANNEL_ID_ChannelLinkIndex(25) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(25))
        			d3d_text 8, g_PITS_DISPLAY_Block4_4_Channel1_LO_x, g_PITS_DISPLAY_Block4_4_Channel1_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block4_Line1_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block4_4_Channel1_HIGH_x, g_PITS_DISPLAY_Block4_4_Channel1_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block4_Line1_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(26) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(26))
        			d3d_text 8, g_PITS_DISPLAY_Block4_4_Channel2_LO_x, g_PITS_DISPLAY_Block4_4_Channel2_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block4_Line2_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block4_4_Channel2_HIGH_x, g_PITS_DISPLAY_Block4_4_Channel2_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block4_Line2_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(27) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(27))
        			d3d_text 8, g_PITS_DISPLAY_Block4_4_Channel3_LO_x, g_PITS_DISPLAY_Block4_4_Channel3_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block4_Line3_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block4_4_Channel3_HIGH_x, g_PITS_DISPLAY_Block4_4_Channel3_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block4_Line3_Colour
      			endif
      			if CHANNEL_ID_ChannelLinkIndex(28) > 0
        			lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(28))
        			d3d_text 8, g_PITS_DISPLAY_Block4_4_Channel4_LO_x, g_PITS_DISPLAY_Block4_4_Channel4_LO_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, 0), g_Block4_Line4_Colour
        			d3d_text 8, g_PITS_DISPLAY_Block4_4_Channel4_HIGH_x, g_PITS_DISPLAY_Block4_4_Channel4_HIGH_y, 1, str$(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, 0), g_Block4_Line4_Colour
      			endif
      		endif
      
    d3d_endtext
    
  endif
  


endfunction

function lib_CHANNEL_ID_PrintChannel_ChartDivs(r_ScreenResolution as integer, r_ScreenType as integer)

  local l_Block1_X as integer
  local l_Block2_X as integer
  local l_Block3_X as integer
  local l_Block4_X as integer

  `This function Displays the Chart Range Divisions under the chart
  
  `WideScreen 1366x768
  if r_ScreenResolution = 1
    l_Block1_X = 0
    l_Block2_X = 373
    l_Block3_X = 690
    l_Block4_X = 1004
  endif
  `1024x768
  if r_ScreenResolution = 2
    l_Block1_X = 0
    l_Block2_X = 265
    l_Block3_X = 473
    l_Block4_X = 677
  endif

  
  `DRILLING SCREEN
  if r_ScreenType = 1
  
    `Block 1
    	if g_DS_SCREEN_Block1_DisplayFormat = 3
      	if CHANNEL_ID_ChannelLinkIndex(1) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(1))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 660, g_Block1_Line1_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(2) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(2))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 677, g_Block1_Line2_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(3) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(3))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 695, g_Block1_Line3_Colour, r_ScreenResolution)
      	endif
    	endif
    	`
    	if g_DS_SCREEN_Block1_DisplayFormat = 4
      	if CHANNEL_ID_ChannelLinkIndex(1) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(1))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 659, g_Block1_Line1_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(2) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(2))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 672, g_Block1_Line2_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(3) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(3))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 685, g_Block1_Line3_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(4) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(4))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 698, g_Block1_Line4_Colour, r_ScreenResolution)
      	endif
    	endif
      
    `Block 2
      if g_DS_SCREEN_Block2_DisplayFormat = 3
      	if CHANNEL_ID_ChannelLinkIndex(5) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(5))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 660, g_Block2_Line1_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(6) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(6))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 677, g_Block2_Line2_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(7) > 0
       	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(7))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 695, g_Block2_Line3_Colour, r_ScreenResolution)
      	endif
      endif
      `
      if g_DS_SCREEN_Block2_DisplayFormat = 4
      	if CHANNEL_ID_ChannelLinkIndex(5) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(5))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 659, g_Block2_Line1_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(6) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(6))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 672, g_Block2_Line2_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(7) > 0
       	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(7))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 685, g_Block2_Line3_Colour, r_ScreenResolution)
      	endif
        if CHANNEL_ID_ChannelLinkIndex(8) > 0
          lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(8))
          lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 698, g_Block1_Line4_Colour, r_ScreenResolution)
        endif
      endif
      
    `Block 3
      if g_DS_SCREEN_Block3_DisplayFormat = 3
      	if CHANNEL_ID_ChannelLinkIndex(9) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(9))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 660, g_Block3_Line1_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(10) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(10))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 677, g_Block3_Line2_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(11) > 0
       	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(11))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 695, g_Block3_Line3_Colour, r_ScreenResolution)
      	endif
      endif
      `
      if g_DS_SCREEN_Block3_DisplayFormat = 4	
      	if CHANNEL_ID_ChannelLinkIndex(9) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(9))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 659, g_Block3_Line1_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(10) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(10))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 672, g_Block3_Line2_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(11) > 0
       	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(11))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 685, g_Block3_Line3_Colour, r_ScreenResolution)
      	endif
      	if CHANNEL_ID_ChannelLinkIndex(12) > 0
        	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(12))
        	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 698, g_Block1_Line4_Colour, r_ScreenResolution)
      	endif
      endif
  endif
  
  
  `PITS SCREEN
  if r_ScreenType = 2
    d3d_starttext
    
      `Block 1
        if g_PITS_SCREEN_Block1_DisplayFormat = 3
        	if CHANNEL_ID_ChannelLinkIndex(13) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(13))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 660, g_Block1_Line1_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(14) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(14))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 677, g_Block1_Line2_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(15) > 0
         	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(15))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 695, g_Block1_Line3_Colour, r_ScreenResolution)
        	endif
        endif
        `	
        if g_PITS_SCREEN_Block1_DisplayFormat = 4
        	if CHANNEL_ID_ChannelLinkIndex(13) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(13))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 659, g_Block1_Line1_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(14) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(14))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 672, g_Block1_Line2_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(15) > 0
         	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(15))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 685, g_Block1_Line3_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(16) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(16))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block1_X, 698, g_Block1_Line4_Colour, r_ScreenResolution)
        	endif
        endif
        
      `Block 2
        if g_PITS_SCREEN_Block2_DisplayFormat = 3
        	if CHANNEL_ID_ChannelLinkIndex(17) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(17))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 660, g_Block2_Line1_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(18) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(18))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 677, g_Block2_Line2_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(19) > 0
         	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(19))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 695, g_Block2_Line3_Colour, r_ScreenResolution)
        	endif
        endif
        `
        if g_PITS_SCREEN_Block2_DisplayFormat = 4
        	if CHANNEL_ID_ChannelLinkIndex(17) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(17))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 659, g_Block2_Line1_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(18) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(18))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 672, g_Block2_Line2_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(19) > 0
         	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(19))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 685, g_Block2_Line3_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(20) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(20))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block2_X, 698, g_Block1_Line4_Colour, r_ScreenResolution)
        	endif
        endif

        
      `Block 3
        if g_PITS_SCREEN_Block3_DisplayFormat = 3
        	if CHANNEL_ID_ChannelLinkIndex(21) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(21))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 660, g_Block3_Line1_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(22) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(22))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 677, g_Block3_Line2_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(23) > 0
         	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(23))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 695, g_Block3_Line3_Colour, r_ScreenResolution)
        	endif
        endif
        `
        if g_PITS_SCREEN_Block3_DisplayFormat = 4
        	if CHANNEL_ID_ChannelLinkIndex(21) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(21))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 659, g_Block3_Line1_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(22) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(22))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 672, g_Block3_Line2_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(23) > 0
         	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(23))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 685, g_Block3_Line3_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(24) > 0
         		lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(24))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block3_X, 698, g_Block1_Line4_Colour, r_ScreenResolution)
        	endif
        endif

        
      `Block 4
        if g_PITS_SCREEN_Block4_DisplayFormat = 3
        	if CHANNEL_ID_ChannelLinkIndex(25) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(25))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block4_X, 660, g_Block4_Line1_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(26) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(26))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block4_X, 677, g_Block4_Line2_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(27) > 0
         	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(27))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block4_X, 695, g_Block4_Line3_Colour, r_ScreenResolution)
        	endif
        endif
        `
        if g_PITS_SCREEN_Block4_DisplayFormat = 4
        	if CHANNEL_ID_ChannelLinkIndex(25) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(25))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block4_X, 659, g_Block4_Line1_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(26) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(26))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block4_X, 672, g_Block4_Line2_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(27) > 0
         	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(27))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block4_X, 685, g_Block4_Line3_Colour, r_ScreenResolution)
        	endif
        	if CHANNEL_ID_ChannelLinkIndex(28) > 0
          	lib_CHANNEL_ID_Populate_RANGE_Outputs(CHANNEL_ID_ChannelLinkIndex(28))
          	lib_WideS_DS_CHARTS_Display_RangeDivs(g_FUNC_OUTPUT_ChnlID_RANGES_UPPER, g_FUNC_OUTPUT_ChnlID_RANGES_LOWER, l_Block4_X, 698, g_Block1_Line4_Colour, r_ScreenResolution)
        	endif
        endif

    d3d_endtext
    
  endif
  
  

endfunction

function lib_WideS_DS_CHARTS_Display_RangeDivs(r_UpperRangeVal as integer, r_LowerRangeVal as integer, r_XOffset as integer, r_YOffset as integer, r_LineColour as dword, r_ScreenRes as integer)


  local l_increment_val# as float
  
  l_increment_val# = ((r_UpperRangeVal - r_LowerRangeVal) + 0.0) / 5

  CHARTPLOT_RangeVals(0) = r_LowerRangeVal
  CHARTPLOT_RangeVals(1) = CHARTPLOT_RangeVals(0) + int(l_increment_val# + 0.5)
  CHARTPLOT_RangeVals(2) = CHARTPLOT_RangeVals(1) + int(l_increment_val# + 0.5)
  CHARTPLOT_RangeVals(3) = CHARTPLOT_RangeVals(2) + int(l_increment_val# + 0.5)
  CHARTPLOT_RangeVals(4) = CHARTPLOT_RangeVals(3) + int(l_increment_val# + 0.5)
  CHARTPLOT_RangeVals(5) = CHARTPLOT_RangeVals(4) + int(l_increment_val# + 0.5)
  CHARTPLOT_RangeVals(6) = r_UpperRangeVal

  if r_ScreenRes = 1
    d3d_starttext
      d3d_text 2, r_XOffset + 23, r_YOffset, 1, str$(CHARTPLOT_RangeVals(0)), r_LineColour
      d3d_text 2, r_XOffset + 68, r_YOffset, 1, str$(CHARTPLOT_RangeVals(1)), r_LineColour
      d3d_text 2, r_XOffset + 129, r_YOffset, 1, str$(CHARTPLOT_RangeVals(2)), r_LineColour
      d3d_text 2, r_XOffset + 190, r_YOffset, 1, str$(CHARTPLOT_RangeVals(3)), r_LineColour
      d3d_text 2, r_XOffset + 251, r_YOffset, 1, str$(CHARTPLOT_RangeVals(4)), r_LineColour
      d3d_text 2, r_XOffset + 298, r_YOffset, 1, str$(CHARTPLOT_RangeVals(5)), r_LineColour
    d3d_endtext
  else
    d3d_starttext
      d3d_text 2, r_XOffset + 23, r_YOffset, 1, str$(CHARTPLOT_RangeVals(0)), r_LineColour
      d3d_text 2, r_XOffset + 50, r_YOffset, 1, str$(CHARTPLOT_RangeVals(1)), r_LineColour
      d3d_text 2, r_XOffset + 87, r_YOffset, 1, str$(CHARTPLOT_RangeVals(2)), r_LineColour
      d3d_text 2, r_XOffset + 127, r_YOffset, 1, str$(CHARTPLOT_RangeVals(3)), r_LineColour
      d3d_text 2, r_XOffset + 163, r_YOffset, 1, str$(CHARTPLOT_RangeVals(4)), r_LineColour
      d3d_text 2, r_XOffset + 192, r_YOffset, 1, str$(CHARTPLOT_RangeVals(5)), r_LineColour
    d3d_endtext
  endif
  
endfunction

function lib_CHANNEL_ID_Set_IndexArray(r_BlockNum as integer, r_ChnlNum as integer, r_IndexArrPos as integer)


  `If CLEAR was clicked then set the Index Array Position to NULL
  if r_IndexArrPos = 29 then r_IndexArrPos = -1

  `If on DRILL SCREEN change correct drill screen channel index
  if g_ENGINE_HIST_DRILL_Screen_Routing = 1
  
    if r_BlockNum = 1 and r_ChnlNum = 1 then CHANNEL_ID_ChannelLinkIndex(1) = r_IndexArrPos
    if r_BlockNum = 1 and r_ChnlNum = 2 then CHANNEL_ID_ChannelLinkIndex(2) = r_IndexArrPos
    if r_BlockNum = 1 and r_ChnlNum = 3 then CHANNEL_ID_ChannelLinkIndex(3) = r_IndexArrPos
    if r_BlockNum = 1 and r_ChnlNum = 4 then CHANNEL_ID_ChannelLinkIndex(4) = r_IndexArrPos
    
    if r_BlockNum = 2 and r_ChnlNum = 1 then CHANNEL_ID_ChannelLinkIndex(5) = r_IndexArrPos
    if r_BlockNum = 2 and r_ChnlNum = 2 then CHANNEL_ID_ChannelLinkIndex(6) = r_IndexArrPos
    if r_BlockNum = 2 and r_ChnlNum = 3 then CHANNEL_ID_ChannelLinkIndex(7) = r_IndexArrPos
    if r_BlockNum = 2 and r_ChnlNum = 4 then CHANNEL_ID_ChannelLinkIndex(8) = r_IndexArrPos
    
    if r_BlockNum = 3 and r_ChnlNum = 1 then CHANNEL_ID_ChannelLinkIndex(9) = r_IndexArrPos
    if r_BlockNum = 3 and r_ChnlNum = 2 then CHANNEL_ID_ChannelLinkIndex(10) = r_IndexArrPos
    if r_BlockNum = 3 and r_ChnlNum = 3 then CHANNEL_ID_ChannelLinkIndex(11) = r_IndexArrPos
    if r_BlockNum = 3 and r_ChnlNum = 4 then CHANNEL_ID_ChannelLinkIndex(12) = r_IndexArrPos
  
  endif
  
  `If on PITS SCREEN change correct pits screen channel index
  if g_ENGINE_HIST_DRILL_Screen_Routing = 3
  
    if r_BlockNum = 1 and r_ChnlNum = 1 then CHANNEL_ID_ChannelLinkIndex(13) = r_IndexArrPos
    if r_BlockNum = 1 and r_ChnlNum = 2 then CHANNEL_ID_ChannelLinkIndex(14) = r_IndexArrPos
    if r_BlockNum = 1 and r_ChnlNum = 3 then CHANNEL_ID_ChannelLinkIndex(15) = r_IndexArrPos
    if r_BlockNum = 1 and r_ChnlNum = 4 then CHANNEL_ID_ChannelLinkIndex(16) = r_IndexArrPos
    
    if r_BlockNum = 2 and r_ChnlNum = 1 then CHANNEL_ID_ChannelLinkIndex(17) = r_IndexArrPos
    if r_BlockNum = 2 and r_ChnlNum = 2 then CHANNEL_ID_ChannelLinkIndex(18) = r_IndexArrPos
    if r_BlockNum = 2 and r_ChnlNum = 3 then CHANNEL_ID_ChannelLinkIndex(19) = r_IndexArrPos
    if r_BlockNum = 2 and r_ChnlNum = 4 then CHANNEL_ID_ChannelLinkIndex(20) = r_IndexArrPos
    
    if r_BlockNum = 3 and r_ChnlNum = 1 then CHANNEL_ID_ChannelLinkIndex(21) = r_IndexArrPos
    if r_BlockNum = 3 and r_ChnlNum = 2 then CHANNEL_ID_ChannelLinkIndex(22) = r_IndexArrPos
    if r_BlockNum = 3 and r_ChnlNum = 3 then CHANNEL_ID_ChannelLinkIndex(23) = r_IndexArrPos
    if r_BlockNum = 3 and r_ChnlNum = 4 then CHANNEL_ID_ChannelLinkIndex(24) = r_IndexArrPos
    
    if r_BlockNum = 4 and r_ChnlNum = 1 then CHANNEL_ID_ChannelLinkIndex(25) = r_IndexArrPos
    if r_BlockNum = 4 and r_ChnlNum = 2 then CHANNEL_ID_ChannelLinkIndex(26) = r_IndexArrPos
    if r_BlockNum = 4 and r_ChnlNum = 3 then CHANNEL_ID_ChannelLinkIndex(27) = r_IndexArrPos
    if r_BlockNum = 4 and r_ChnlNum = 4 then CHANNEL_ID_ChannelLinkIndex(28) = r_IndexArrPos
  
  endif


endfunction

function lib_CHANNEL_ID_Get_RT_Value(r_IndexPosition)

  local p_OUTPUT# as float

  if r_IndexPosition = 1 then p_OUTPUT# = g_COMMPORT_Receive_HoleDepth#
  if r_IndexPosition = 2 then p_OUTPUT# = g_COMMPORT_Receive_BitDepth#
  if r_IndexPosition = 3 then p_OUTPUT# = g_CALCULATED_Received_ROP#
  if r_IndexPosition = 4 then p_OUTPUT# = g_COMMPORT_Receive_WOB#
  if r_IndexPosition = 5 then p_OUTPUT# = g_COMMPORT_Receive_Hookload
  if r_IndexPosition = 6 then p_OUTPUT# = g_COMMPORT_Receive_RPM
  if r_IndexPosition = 7 then p_OUTPUT# = g_COMMPORT_Receive_Torque#
  if r_IndexPosition = 8 then p_OUTPUT# = g_COMMPORT_Receive_TripTank#
  if r_IndexPosition = 9 then p_OUTPUT# = g_COMMPORT_Receive_BlockPosition#
  if r_IndexPosition = 10 then p_OUTPUT# = g_COMMPORT_Receive_SPP
  if r_IndexPosition = 11 then p_OUTPUT# = g_COMMPORT_Receive_FlowIN
  if r_IndexPosition = 12 then p_OUTPUT# = g_COMMPORT_Receive_SPM1
  if r_IndexPosition = 13 then p_OUTPUT# = g_COMMPORT_Receive_SPM2
  if r_IndexPosition = 14 then p_OUTPUT# = g_COMMPORT_Receive_SPM3
  if r_IndexPosition = 15 then p_OUTPUT# = g_COMMPORT_Receive_TotalGas#
  if r_IndexPosition = 16 then p_OUTPUT# = g_COMMPORT_Receive_H2S#
  if r_IndexPosition = 17 then p_OUTPUT# = g_COMMPORT_Receive_PVT#
  if r_IndexPosition = 18 then p_OUTPUT# = g_COMMPORT_Receive_PIT1#
  if r_IndexPosition = 19 then p_OUTPUT# = g_COMMPORT_Receive_PIT2#
  if r_IndexPosition = 20 then p_OUTPUT# = g_COMMPORT_Receive_PIT3#
  if r_IndexPosition = 21 then p_OUTPUT# = g_COMMPORT_Receive_PIT4#
  if r_IndexPosition = 22 then p_OUTPUT# = g_COMMPORT_Receive_PIT5#
  if r_IndexPosition = 23 then p_OUTPUT# = g_COMMPORT_Receive_PIT6#
  if r_IndexPosition = 24 then p_OUTPUT# = g_COMMPORT_Receive_PIT7#
  if r_IndexPosition = 25 then p_OUTPUT# = g_COMMPORT_Receive_PIT8#
  if r_IndexPosition = 26 then p_OUTPUT# = g_COMMPORT_Receive_CSG
  if r_IndexPosition = 27 then p_OUTPUT# = g_COMMPORT_Receive_FlowOUT#
  if r_IndexPosition = 28 then p_OUTPUT# = g_COMMPORT_Receive_TotalStrokes

  `KEY
  `ChannelID_01=Hole_Depth
  `ChannelID_02=Bit_Depth
  `ChannelID_03=ROP
  `ChannelID_04=WOB
  `ChannelID_05=Hookload
  `ChannelID_06=RPM
  `ChannelID_07=Torque
  `ChannelID_08=Trip Tank
  `ChannelID_09=Block Pos
  `ChannelID_10=SPP
  `ChannelID_11=Flow In
  `ChannelID_12=SPM1
  `ChannelID_13=SPM2
  `ChannelID_14=SPM3
  `ChannelID_15=TG
  `ChannelID_16=H2S
  `ChannelID_17=Total Vol
  `ChannelID_18=PIT1
  `ChannelID_19=PIT2
  `ChannelID_20=PIT3
  `ChannelID_21=PIT4
  `ChannelID_22=PIT5
  `ChannelID_23=PIT6
  `ChannelID_24=PIT7
  `ChannelID_25=PIT8
  `ChannelID_26=CSG
  `ChannelID_27=FLOW OUT (The Paddle Sensor)
  `ChannelID_28=Total Strokes

endfunction p_OUTPUT#

function lib_CHANNEL_ID_Get_UNITS_DP(r_IndexPosition)

  `Ouputs the channels UNITS based on the same r_IndexPosition used to select the channel value (same value index number means same index number can be used for the units decimal places)

  local p_OUTPUT_DP as integer

  if r_IndexPosition = 1 then p_OUTPUT_DP = 1
  if r_IndexPosition = 2 then p_OUTPUT_DP = 1
  if r_IndexPosition = 3 then p_OUTPUT_DP = 1
  if r_IndexPosition = 4 then p_OUTPUT_DP = 1
  if r_IndexPosition = 5 then p_OUTPUT_DP = 0
  if r_IndexPosition = 6 then p_OUTPUT_DP = 0
  if r_IndexPosition = 7 then p_OUTPUT_DP = 0
  if r_IndexPosition = 8 then p_OUTPUT_DP = 2
  if r_IndexPosition = 9 then p_OUTPUT_DP = 1
  if r_IndexPosition = 10 then p_OUTPUT_DP = 0
  if r_IndexPosition = 11 then p_OUTPUT_DP = 0
  if r_IndexPosition = 12 then p_OUTPUT_DP = 0
  if r_IndexPosition = 13 then p_OUTPUT_DP = 0
  if r_IndexPosition = 14 then p_OUTPUT_DP = 0
  if r_IndexPosition = 15 then p_OUTPUT_DP = 2
  if r_IndexPosition = 16 then p_OUTPUT_DP = 0
  if r_IndexPosition = 17 then p_OUTPUT_DP = 1
  if r_IndexPosition = 18 then p_OUTPUT_DP = 1
  if r_IndexPosition = 19 then p_OUTPUT_DP = 1
  if r_IndexPosition = 20 then p_OUTPUT_DP = 1
  if r_IndexPosition = 21 then p_OUTPUT_DP = 1
  if r_IndexPosition = 22 then p_OUTPUT_DP = 1
  if r_IndexPosition = 23 then p_OUTPUT_DP = 1
  if r_IndexPosition = 24 then p_OUTPUT_DP = 1
  if r_IndexPosition = 25 then p_OUTPUT_DP = 1
  if r_IndexPosition = 26 then p_OUTPUT_DP = 0
  if r_IndexPosition = 27 then p_OUTPUT_DP = 1
  if r_IndexPosition = 28 then p_OUTPUT_DP = 0

  `KEY
  `ChannelID_01=Hole_Depth
  `ChannelID_02=Bit_Depth
  `ChannelID_03=ROP
  `ChannelID_04=WOB
  `ChannelID_05=Hookload
  `ChannelID_06=RPM
  `ChannelID_07=Torque
  `ChannelID_08=Trip Tank
  `ChannelID_09=Block Pos
  `ChannelID_10=SPP
  `ChannelID_11=Flow In
  `ChannelID_12=SPM1
  `ChannelID_13=SPM2
  `ChannelID_14=SPM3
  `ChannelID_15=TG
  `ChannelID_16=H2S
  `ChannelID_17=Total Vol
  `ChannelID_18=PIT1
  `ChannelID_19=PIT2
  `ChannelID_20=PIT3
  `ChannelID_21=PIT4
  `ChannelID_22=PIT5
  `ChannelID_23=PIT6
  `ChannelID_24=PIT7
  `ChannelID_25=PIT8
  `ChannelID_26=CSG
  `ChannelID_27=FLOW OUT % (Flow Paddle)
  `ChannelID_28=TOTAL STROKES

endfunction p_OUTPUT_DP


function lib_CHANNEL_ID_Populate_RANGE_Outputs(r_IndexPosition)

  local l_ArrPos as integer

  l_ArrPos = (r_IndexPosition * 2) - 1

  if l_ArrPos > 0
    g_FUNC_OUTPUT_ChnlID_RANGES_LOWER = CHANNEL_ID_ChannelRanges(l_ArrPos)
    g_FUNC_OUTPUT_ChnlID_RANGES_UPPER = CHANNEL_ID_ChannelRanges(l_ArrPos + 1)
  endif

endfunction

function lib_CHANNEL_ID_GetData(r_ChannelID_Num as integer, r_MEMDB_ArrPos as integer)

  local p_DataOutput# as float

  `This function is used as part of the chart plotting functions to get the data values from
  `the MEM DB for the corresponding r_IndexPosition position to be used in plotting the data lines
  
  if r_ChannelID_Num = 1 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Hole_Depth#
  if r_ChannelID_Num = 2 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Bit_Depth#
  if r_ChannelID_Num = 3 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).ROP#
  if r_ChannelID_Num = 4 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).WOB#
  if r_ChannelID_Num = 5 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Hookload
  if r_ChannelID_Num = 6 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).RPM
  if r_ChannelID_Num = 7 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Torque#
  if r_ChannelID_Num = 8 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).TripTank#
  if r_ChannelID_Num = 9 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).BlockPosition#
  if r_ChannelID_Num = 10 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).SPP
  if r_ChannelID_Num = 11 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).FlowIn
  if r_ChannelID_Num = 12 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).SPM1
  if r_ChannelID_Num = 13 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).SPM2
  if r_ChannelID_Num = 14 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).SPM3
  if r_ChannelID_Num = 15 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).TotalGas#
  if r_ChannelID_Num = 16 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).H2S#
  if r_ChannelID_Num = 17 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).PVT#
  if r_ChannelID_Num = 18 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Pit1#
  if r_ChannelID_Num = 19 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Pit2#
  if r_ChannelID_Num = 20 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Pit3#
  if r_ChannelID_Num = 21 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Pit4#
  if r_ChannelID_Num = 22 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Pit5#
  if r_ChannelID_Num = 23 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Pit6#
  if r_ChannelID_Num = 24 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Pit7#
  if r_ChannelID_Num = 25 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Pit8#
  if r_ChannelID_Num = 26 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).CSG
  if r_ChannelID_Num = 27 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).FlowOUT#
  if r_ChannelID_Num = 28 then p_DataOutput# = MEM_MAIN_DATABASE(r_MEMDB_ArrPos).Total_Strokes
  
endfunction p_DataOutput#


function __________DATA_LIST_SCREEN_________________________________________hfhuej2ke()
endfunction

function ENGINE_Data_List_Screen()

  `Display and handle the Data View Screen show/hide button
  lib_DLS_INPUT_Handle_MAIN_Button()

  `DATA LISTS SCREEN - TOGGLE ON
  if g_ENG_DLS_ToggleScreenON = 1
    lib_DLS_Handle_Background_And_TABS()
    lib_DLS_INPUT_Handle_Close_Button()
    lib_DLS_INPUT_Handle_DateSelection()
  endif
  
endfunction

function lib_DLS_INPUT_Handle_MAIN_Button()

  `Handle Button Image
  paste image c_DATALISTSCREEN_ButtonImg_Unlit, c_ENG_DLS_ButtonPos_X, c_ENG_DLS_ButtonPos_Y, 1

  `Handle Button INPUT `(Input Code Marker: 75526)
  if g_RCM_MSE_INPUT_Toggle = -1
    if mousex() > c_ENG_DLS_ButtonPos_X - 1 and mousex() < c_ENG_DLS_ButtonPos_X + 112
      if mousey() > c_ENG_DLS_ButtonPos_Y - 1 and mousey() < c_ENG_DLS_ButtonPos_Y + 31
        if mouseclick() = 1 and g_ENG_DLS_MouseClick_LEFT = -1
          g_ENG_DLS_MouseClick_LEFT = 1
          if g_ENG_DLS_ToggleScreenON = -1
            g_ENG_DLS_ToggleScreenON = 1
          else
            g_ENG_DLS_ToggleScreenON = -1
          endif    
        endif  
      endif
    endif
  endif  
  if mouseclick() = 0 and g_ENG_DLS_MouseClick_LEFT = 1 then g_ENG_DLS_MouseClick_LEFT = -1

endfunction

function lib_DLS_INPUT_Handle_Close_Button()

  local l_CloseBtn_XPos as integer
  local l_CloseBtn_YPos as integer
  
  l_CloseBtn_XPos = g_ENGINE_DLS_Background_ScreenX + c_DATALISTSCREEN_BkgdWidth - 38
  l_CloseBtn_YPos = g_ENGINE_DLS_Background_ScreenY + 7

  if mousex() > l_CloseBtn_XPos - 1 and mousex() < l_CloseBtn_XPos + 32 and mousey() > l_CloseBtn_YPos - 1 and mousey() < l_CloseBtn_YPos + 18
    paste image c_DATALISTSCREEN_CloseBtnImg_Lit, l_CloseBtn_XPos, l_CloseBtn_YPos
    if mouseclick() = 1 and g_ENG_DLS_TAB_MseClk_LEFT = -1
      g_ENG_DLS_TAB_MseClk_LEFT = 1
      g_ENG_DLS_ToggleScreenON = -1
    endif  
  else
    paste image c_DATALISTSCREEN_CloseBtnImg_Unlit, l_CloseBtn_XPos, l_CloseBtn_YPos
  endif

endfunction

function lib_DLS_INPUT_Handle_DateSelection()

  `DATA LISTS SCREEN - DATE SELECTION

  local l_DateBox_X as integer
  local l_DateBox_Y as integer
  
  local l_DateLeftBtn_X as integer
  local l_DateLeftBtn_Y as integer
  local l_DateRightBtn_X as integer
  local l_DateRightBtn_Y as integer
  local l_DateTodayBtn_X as integer
  local l_DateTodayBtn_Y as integer
  local l_GotoDateBtn_X as integer
  local l_GotoDateBtn_Y as integer
  local l_ExportDataBtn_X as integer
  local l_ExportDataBtn_Y as integer
  
  l_DateBox_X = g_ENGINE_DLS_Background_ScreenX + c_DATALISTSCREEN_BkgdWidth - 222
  l_DateBox_Y = g_ENGINE_DLS_Background_ScreenY + 77

  l_DateLeftBtn_X = l_DateBox_X - 21
  l_DateLeftBtn_Y = l_DateBox_Y
  
  l_DateRightBtn_X = l_DateBox_X + 100
  l_DateRightBtn_Y = l_DateBox_Y
  
  l_DateTodayBtn_X = l_DateBox_X + 130
  l_DateTodayBtn_Y = l_DateBox_Y - 3
  
  l_GotoDateBtn_X = l_DateBox_X + 4
  l_GotoDateBtn_Y = l_DateBox_Y + 25
  
  l_ExportDataBtn_X = l_GotoDateBtn_X
  l_ExportDataBtn_Y = l_GotoDateBtn_Y + 30

  `Paste bkgd image box that displays the selected date
  paste image c_DATALISTSCREEN_SelectDateBoxImg, l_DateBox_X, l_DateBox_Y, 1
  
  `Change Date - Left Button (1 day earlier)
  if mousex() > l_DateLeftBtn_X - 1 and mousex() < l_DateLeftBtn_X + 17 and mousey() > l_DateLeftBtn_Y - 1 and mousey() < l_DateLeftBtn_Y + 19
    paste image c_DATALISTSCREEN_SelectDateLeftLitImg, l_DateLeftBtn_X, l_DateLeftBtn_Y, 1
    if mouseclick() = 1 and g_ENG_DLS_MouseClick_LEFT = -1
      g_ENG_DLS_MouseClick_LEFT = 1
      if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr > 0 then lib_DLS_ChangeDate_1Day_Earlier()
    endif    
  else
    paste image c_DATALISTSCREEN_SelectDateLeftImg, l_DateLeftBtn_X, l_DateLeftBtn_Y, 1
  endif
  
  `Change Date - Right Button (1 day later)
  if mousex() > l_DateRightBtn_X - 1 and mousex() < l_DateRightBtn_X + 17 and mousey() > l_DateRightBtn_Y - 1 and mousey() < l_DateRightBtn_Y + 19
    paste image c_DATALISTSCREEN_SelectDateRightLitImg, l_DateRightBtn_X, l_DateRightBtn_Y, 1
    if mouseclick() = 1 and g_ENG_DLS_MouseClick_LEFT = -1
      g_ENG_DLS_MouseClick_LEFT = 1
      if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr <> g_DATABASE_MEM_Total_Num_Records
        lib_DLS_ChangeDate_1Day_Later()
      endif  
    endif
  else
    paste image c_DATALISTSCREEN_SelectDateRightImg, l_DateRightBtn_X, l_DateRightBtn_Y, 1
  endif
  
  `TODAY Button (Now Button - set to last MEMDB record)
  if mousex() > l_DateTodayBtn_X - 1 and mousex() < l_DateTodayBtn_X + 52 and mousey() > l_DateTodayBtn_Y - 1 and mousey() < l_DateTodayBtn_Y + 26
    paste image c_DATALISTSCREEN_SlctDateTodayBtnLitImg, l_DateTodayBtn_X, l_DateTodayBtn_Y, 1
    if mouseclick() = 1 and g_ENG_DLS_MouseClick_LEFT = -1
      g_ENG_DLS_MouseClick_LEFT = 1
      lib_DLS_STARTUP_Populate_From_LastMemDB(g_DATABASE_MEM_Total_Num_Records)
    endif
  else
    paste image c_DATALISTSCREEN_SlctDateTodayBtnImg, l_DateTodayBtn_X, l_DateTodayBtn_Y, 1
  endif

  `EXPORT DATA BUTTON
  if mousex() > l_ExportDataBtn_X - 1 and mousex() < l_ExportDataBtn_X + 89 and mousey() > l_ExportDataBtn_Y - 1 and mousey() < l_ExportDataBtn_Y + 26
    paste image c_DATALISTSCREEN_ExportDataBtnImg_Lit, l_ExportDataBtn_X, l_ExportDataBtn_Y
    if mouseclick() = 1 and g_ENG_DLS_MouseClick_LEFT = -1
      g_ENG_DLS_MouseClick_LEFT = 1
      g_ENG_DLS_ToggleScreenON = -1
      EXPORT_DATA_Handle()
    endif
  else
    paste image c_DATALISTSCREEN_ExportDataBtnImg, l_ExportDataBtn_X, l_ExportDataBtn_Y
  endif  
  
  `GOTO SELECTED DATE (IF AVAILABLE)
  if mousex() > l_GotoDateBtn_X - 1 and mousex() < l_GotoDateBtn_X + 89 and mousey() > l_GotoDateBtn_Y - 1 and mousey() < l_GotoDateBtn_Y + 26
    `Highlight button if hovered over
      paste image c_DATALISTSCREEN_SlctGotoDateBtnLitImg, l_GotoDateBtn_X, l_GotoDateBtn_Y
    `Paste Tooltip
      paste image c_DATALISTSCREEN_GotoDateToolTip, mousex(), mousey()
    if mouseclick() = 1 and g_ENG_DLS_MouseClick_LEFT = -1
      g_ENG_DLS_MouseClick_LEFT = 1
      lib_DLS_Goto_Selected_Date()
      g_ENG_DLS_ToggleScreenON = -1
      g_DLS_LOCK_UNTIL_CLOSED = 1
    endif
  else
    paste image c_DATALISTSCREEN_SlctGotoDateBtnImg, l_GotoDateBtn_X, l_GotoDateBtn_Y
  endif
  

  
  `---------------------------------
    
  `Print Selected Date text
  d3d_starttext
    d3d_text 2, l_DateBox_X + 48, l_DateBox_Y + 3, 1, g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_Converted$, g_ENGINE_COLOUR_Black
  d3d_endtext

endfunction

function lib_DLS_Handle_Background_And_TABS()

  `DATA LISTS SCREEN - BACKGROUND

  local l_CurntTAB_XPos as integer
  local l_CurntTAB_YPos as integer
  local l_RETURN_VAL# as float
  local l_Exit_INPUTPAD as integer
  local x_pos as integer
  local y_pos as integer

  `Background Image
  paste sprite c_SPRITE_DLS_Background, g_ENGINE_DLS_Background_ScreenX, g_ENGINE_DLS_Background_ScreenY

    `TABS
    for print_tabs_lp = 0 to c_ENG_DLS_TAB_TotalTabs
      x_pos = g_ENGINE_DLS_Background_ScreenX + 10 + (print_tabs_lp * 157)
      y_pos = g_ENGINE_DLS_Background_ScreenY + 5
            
      if mousex() > x_pos and mousex() < x_pos + 153 and mousey() > y_pos and mousey() < y_pos + 27
        paste sprite c_SPRITE_DLS_TABImg_Lit, x_pos, y_pos
        if mouseclick() = 1 and g_ENG_DLS_TAB_MseClk_LEFT = -1
          g_ENG_DLS_TAB_ActiveTab = print_tabs_lp
        endif
      else
        paste sprite c_SPRITE_DLS_TABImg_Unlit, x_pos, y_pos
      endif
      
      `If it is the Active Tab then store the screen X, Y positions for use later
      if print_tabs_lp = g_ENG_DLS_TAB_ActiveTab
        l_CurntTAB_XPos = x_pos
        l_CurntTAB_YPos = y_pos
      endif
      
      d3d_starttext
        d3d_text 2, x_pos + 76, y_pos + 4, 1, DLS_TABS(print_tabs_lp).Tab_Text$, g_ENGINE_COLOUR_Black
      d3d_endtext
      
    next print_tabs_lp
    if mouseclick() = 0 and g_ENG_DLS_TAB_MseClk_LEFT = 1 then g_ENG_DLS_TAB_MseClk_LEFT = -1
  
    `TABS - Connect tabs to main box
      `Line from under TAB
        d3d_line l_CurntTAB_XPos + 76, l_CurntTAB_YPos + 25, l_CurntTAB_XPos + 76, l_CurntTAB_YPos + 43, g_ENGINE_COLOUR_Black
      `Line from under TAB to above the Print Box
        d3d_line l_CurntTAB_XPos + 76, l_CurntTAB_YPos + 43, g_ENGINE_DLS_Background_ScreenX + (c_DATALISTSCREEN_BkgdWidth/2), g_ENGINE_DLS_Background_ScreenY + 48, g_ENGINE_COLOUR_Black
      `Line from top of Print Box
        d3d_line g_ENGINE_DLS_Background_ScreenX + (c_DATALISTSCREEN_BkgdWidth/2), g_ENGINE_DLS_Background_ScreenY + 48, g_ENGINE_DLS_Background_ScreenX + (c_DATALISTSCREEN_BkgdWidth/2), g_ENGINE_DLS_Background_ScreenY + 66, g_ENGINE_COLOUR_Black
    
    `Draw Print Box
      `Top Line
        d3d_line g_ENGINE_DLS_Background_ScreenX + 10, g_ENGINE_DLS_Background_ScreenY + 66, g_ENGINE_DLS_Background_ScreenX + c_DATALISTSCREEN_BkgdWidth - 20, g_ENGINE_DLS_Background_ScreenY + 66, rgb(0, 0, 0)
      `Left Line
        d3d_line g_ENGINE_DLS_Background_ScreenX + 10, g_ENGINE_DLS_Background_ScreenY + 66, g_ENGINE_DLS_Background_ScreenX + 10, g_ENGINE_DLS_Background_ScreenY + c_DATALISTSCREEN_BkgdHeight - 50, rgb(0, 0, 0)
      `Right Line
        d3d_line g_ENGINE_DLS_Background_ScreenX + c_DATALISTSCREEN_BkgdWidth - 20, g_ENGINE_DLS_Background_ScreenY + 66, g_ENGINE_DLS_Background_ScreenX + c_DATALISTSCREEN_BkgdWidth - 20, g_ENGINE_DLS_Background_ScreenY + c_DATALISTSCREEN_BkgdHeight - 50, rgb(0, 0, 0)
  
    `Pump Data GPM Threshold Input Background Image - (To input value used to calculate pump time within this GPM threshold)
      paste image c_DATALISTSCREEN_SelectDateBoxImg, g_ENGINE_DLS_Background_ScreenX + c_DATALISTSCREEN_BkgdWidth - 205, g_ENGINE_DLS_Background_ScreenY + 377, 1
        `Handle GPM Threshold Input Box Mouse Event
        	if mousex() > g_ENGINE_DLS_Background_ScreenX + c_DATALISTSCREEN_BkgdWidth - 205 and mousex() < g_ENGINE_DLS_Background_ScreenX + c_DATALISTSCREEN_BkgdWidth - 205 + image width(c_DATALISTSCREEN_SelectDateBoxImg)
          	if mousey() > g_ENGINE_DLS_Background_ScreenY + 377 and mousey() < g_ENGINE_DLS_Background_ScreenY + 377 + image height(c_DATALISTSCREEN_SelectDateBoxImg)
            	`
              d3d_box g_ENGINE_DLS_Background_ScreenX + c_DATALISTSCREEN_BkgdWidth - 204, g_ENGINE_DLS_Background_ScreenY + 378, g_ENGINE_DLS_Background_ScreenX + c_DATALISTSCREEN_BkgdWidth - 206 + image width(c_DATALISTSCREEN_SelectDateBoxImg), g_ENGINE_DLS_Background_ScreenY + 376 + image height(c_DATALISTSCREEN_SelectDateBoxImg), rgb(233,233,233)	
            	`
            	if mouseclick() = 1 and g_DLS_DATA_CircTimePerPump_InputToggle = -1
            	  g_DLS_DATA_CircTimePerPump_InputToggle = 1
            	  g_INPUTPAD_BuildValue$ = ""
            	endif
            	`
          	endif
        	endif


    `Call Active TAB Text/Variables
      if g_ENG_DLS_TAB_ActiveTab = 0 then lib_DLS_ScreenType_OVERVIEW(g_ENGINE_DLS_Background_ScreenX, g_ENGINE_DLS_Background_ScreenY)
 
 
 
   `Handle GPM Threshold Input
  	if g_DLS_DATA_CircTimePerPump_InputToggle = 1
  	
    	l_RETURN_VAL# = INPUTPAD_DISPLAY_Inputpad("Set Calc GPM Threshold")
    	
    	if l_RETURN_VAL# = -9999
      	l_Exit_INPUTPAD = 1
    	endif
    	
    	if l_RETURN_VAL# <> -1 and l_RETURN_VAL# <> -9999
      	g_DLS_DATA_CircTimePerPump_GPMThreshold$ = str$(l_RETURN_VAL#)
      	SAVE_OTHER_Variables()
      	lib_DLS_GET_DATA()
      	l_Exit_INPUTPAD = 1
    	endif
    	
      	if l_Exit_INPUTPAD = 1
        	`
        	g_DLS_DATA_CircTimePerPump_InputToggle = -1
        	`
        	INPUTPAD_Deactivate()
        	g_RCM_ACTION_Toggle_EditWellData = -1
        	g_LOCKOUT_INPUTPAD_ChartInfoBoxes = -1
        	g_LOCKOUT_INPUTPAD_TimePeriodButtons = -1
        	g_LOCKOUT_INPUTPAD_DS_ChannelRanges = -1
        	g_LOCKOUT_INPUTPAD_PITS_ChannelRanges = -1
        	g_INPUTPAD_Startup_Stage = -1
        	g_INFOBOX_INPUT_LMB_State = 1
        	g_INFOBOX_INPUT_LMB_CheckForModeState2 = -99
      	endif
  	
  	endif
 
 
  
endfunction


function lib_DLS_ScreenType_OVERVIEW(r_StartX, r_StartY)

  `DATA LISTS SCREEN - OVERVIEW

  local l_Ttl_K_Revs_ALL# as float
  local l_Ttl_K_Revs_ONBOTT# as float

  sp = 0

  d3d_starttext
  
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "OVERVIEW", g_ENGINE_COLOUR_Black
    inc sp, 10
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "  Selected Range", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    - Date", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    - Start Time", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    - End Time", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    - Start Depth", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    - End Depth", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    - Start Record", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    - End Record", g_ENGINE_COLOUR_Black
    dec sp, 140
    inc sp, 20 : d3d_text 2, r_StartX + 140, r_StartY + 60 + sp, 0, ": " + g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_Converted$, g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 140, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_StartTime$, g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 140, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_EndTime$, g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 140, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_StartDepth$, g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 140, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_EndDepth$, g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 140, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_StartRecord$, g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 140, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_EndRecord$, g_ENGINE_COLOUR_Black
        
    inc sp, 10
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "  24hr Period Data", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    - Total On Bottom Time", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "        - (Rotating ONLY)", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    - Total Rotating Time", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    - Total Circulating Time", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "        - (Per Pump)", g_ENGINE_COLOUR_Black
    dec sp, 100
    inc sp, 20 : d3d_text 2, r_StartX + 220, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_OnBottomTime$, g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 220, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_OnBottomTime_RotatingOnly$ + " *", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 220, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_RotatingTime$, g_ENGINE_COLOUR_Black
    
    if val(g_DLS_DATA_CircTimePerPump_GPMThreshold$) = 0
      inc sp, 20 : d3d_text 2, r_StartX + 220, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_CirculatingTime$ + " *", g_ENGINE_COLOUR_Black
    else
      inc sp, 20 : d3d_text 2, r_StartX + 220, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_CirculatingTime$ + " at => " + g_DLS_DATA_CircTimePerPump_GPMThreshold$ + " gpm *", g_ENGINE_COLOUR_Black
    endif
    
    inc sp, 20 : d3d_text 2, r_StartX + 220, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_CirculatingTimePerPump$, g_ENGINE_COLOUR_Black
   
   
   
    `Pump GPM Thershold Value
    d3d_text 2, g_ENGINE_DLS_Background_ScreenX + c_DATALISTSCREEN_BkgdWidth - 205, g_ENGINE_DLS_Background_ScreenY + 377 - 20, 0, "Circ Time GPM Threshold", g_ENGINE_COLOUR_Black
    d3d_text 2, g_ENGINE_DLS_Background_ScreenX + c_DATALISTSCREEN_BkgdWidth - 158, g_ENGINE_DLS_Background_ScreenY + 380, 1, g_DLS_DATA_CircTimePerPump_GPMThreshold$, g_ENGINE_COLOUR_Black

    inc sp, 10
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    - TOTAL REVS: All", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    - TOTAL REVS: On Bottom", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    -   MM Revs: All", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    -   MM Revs: On Bottom", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    -   RT Revs: All", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 20, r_StartY + 60 + sp, 0, "    -   RT Revs: On Bottom", g_ENGINE_COLOUR_Black
    dec sp, 120
    l_Ttl_K_Revs_ALL# = (val(g_DLS_DATA_Combined_RT_MM_Revs_ALL$) + 0.0) / 1000.0
    l_Ttl_K_Revs_ONBOTT# = (val(g_DLS_DATA_Combined_RT_MM_Revs_ON_BOTTOM_ONLY$) + 0.0) / 1000.0
    inc sp, 20 : d3d_text 2, r_StartX + 220, r_StartY + 60 + sp, 0, ": " + str$(l_Ttl_K_Revs_ALL#, 1) + "k", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 220, r_StartY + 60 + sp, 0, ": " + str$(l_Ttl_K_Revs_ONBOTT#, 1) + "k *", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 220, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_Total_MM_Revs$ + " (Mud Motor Factor: " + str$(WELLDATA_MudMotorFactor_RevsGallon#, 2) + " revs/gal)", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 220, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_Total_MM_Revs_ON_BOTTOM_ONLY$  + " (Mud Motor Factor: " + str$(WELLDATA_MudMotorFactor_RevsGallon#, 2) + " revs/gal)", g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 220, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_Total_RT_Revs$, g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 220, r_StartY + 60 + sp, 0, ": " + g_DLS_DATA_Total_RT_Revs_ON_BOTTOM_ONLY$, g_ENGINE_COLOUR_Black
  
  d3d_endtext




endfunction



function lib_DLS_ChangeDate_1Day_Earlier()

  `Find the next Date Range 1 day (1 Change) earlier
  
  l_counter = g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr
    if l_counter > g_DATABASE_MEM_Total_Num_Records then l_counter = g_DATABASE_MEM_Total_Num_Records
    if l_counter < 0 then l_counter = 0
    
  g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = -1
  g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = -1
  
  
  
  do
  
    if l_counter < 0 then l_counter = 0
    if l_counter > g_DATABASE_MEM_Total_Num_Records then l_counter = g_DATABASE_MEM_Total_Num_Records
      l_CheckStr$ = MEM_MAIN_DATABASE(l_counter).Date$

    `1. Discover the next Start Arr (working backwards this is the next date change)
    `   We know that this is next to the last g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr,
    `   but we will search from 10 records ahead just to make sure we get it.
    if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = -1
      if l_CheckStr$ <> g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_RAWUnconverted$
        g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = l_counter
        g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_RAWUnconverted$ = l_CheckStr$
        g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_Converted$ = lib_CONVERT_DATE_US_to_UK_Format(l_CheckStr$)
      endif
    endif
   `2. Match the Start Array to the next change of Day and Month
    if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr <> -1
      if l_CheckStr$ <> g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_RAWUnconverted$
        g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = l_counter + 1
      endif
    endif
  
    dec l_counter, 1
  
    `Exit Conditions
      `If counter = zero
      if l_counter = 0 or l_counter < 0
        exit
      endif  
      `If Start and End points found
      if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr <> -1 and g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr <> -1
        exit
      endif
  
  loop
  
  `Some quick checks to stop the progrm crashing
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr < 0 then g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = 0
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr < 0  then g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = 0
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr > g_DATABASE_MEM_Total_Num_Records then g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = g_DATABASE_MEM_Total_Num_Records
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr > g_DATABASE_MEM_Total_Num_Records then g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = g_DATABASE_MEM_Total_Num_Records

  g_DLS_TIME_BRKDOWN_Slctd_Day = val(first token$(g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_Converted$,"/"))
  g_DLS_TIME_BRKDOWN_Slctd_Month = val(next token$("/"))
  
  lib_DLS_GET_DATA()

endfunction



function lib_DLS_ChangeDate_1Day_Later()

  `Find the next Date Range 1 day (1 Change) later
  
  l_counter = g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr
    if l_counter > g_DATABASE_MEM_Total_Num_Records then l_counter = g_DATABASE_MEM_Total_Num_Records
    if l_counter < 0 then l_counter = 0
    
  g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = -1
  g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = -1
  
  
  
  do
  
    if l_counter < 0 then l_counter = 0
    if l_counter > g_DATABASE_MEM_Total_Num_Records then l_counter = g_DATABASE_MEM_Total_Num_Records
    
    `
    
      l_CheckStr$ = MEM_MAIN_DATABASE(l_counter).Date$

    `1. Discover the next Start Arr (working forwards this is the next date change)
    `   We know that this is next to the last g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr,
    `   but we will search from 10 records ahead just to make sure we get it.
    if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = -1
      if l_CheckStr$ <> g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_RAWUnconverted$
        g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = l_counter
        g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_RAWUnconverted$ = l_CheckStr$
        g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_Converted$ = lib_CONVERT_DATE_US_to_UK_Format(l_CheckStr$)
      endif
    endif
   `2. Match the Start Array to the next change of Day and Month
    if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr <> -1
      if l_CheckStr$ <> g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_RAWUnconverted$
        g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = l_counter - 1
      endif
      if l_counter = g_DATABASE_MEM_Total_Num_Records
        g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = g_DATABASE_MEM_Total_Num_Records
      endif
    endif
  
    inc l_counter, 1
  
    `Exit Conditions
      `If counter = zero
      if l_counter = 0 or l_counter < 0
        exit
      endif
      if l_counter = g_DATABASE_MEM_Total_Num_Records + 1
      ` or l_counter > g_DATABASE_MEM_Total_Num_Records
        exit
      endif
      `If Start and End points found
      if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr <> -1 and g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr <> -1
        exit
      endif
  
  loop
  
  `Some quick checks to stop the progrm crashing
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr < 0 then g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = 0
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr < 0  then g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = 0
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr > g_DATABASE_MEM_Total_Num_Records then g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = g_DATABASE_MEM_Total_Num_Records
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr > g_DATABASE_MEM_Total_Num_Records then g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = g_DATABASE_MEM_Total_Num_Records

  g_DLS_TIME_BRKDOWN_Slctd_Day = val(first token$(g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_Converted$,"/"))
  g_DLS_TIME_BRKDOWN_Slctd_Month = val(next token$("/"))
  
  lib_DLS_GET_DATA()

endfunction


function lib_DLS_Goto_Selected_Date()

  local l_Calc_Rec_Offset as integer

  `This function goes to the selected data list screen date. Letting the user
  `use the arrow buttons to choose a past date and then quickly jump to MIDNIGHT on that date.

  `It sets g_DS_CHART_Scroll_Array_Offset to the midnight record of the selected date.

  
  l_Calc_Rec_Offset = g_DATABASE_MEM_Total_Num_Records - g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr
  
 
  g_DS_CHART_Scroll_Array_Offset = l_Calc_Rec_Offset
  g_PITS_CHART_Scroll_Array_Offset = l_Calc_Rec_Offset
  
  `Update RT Charts
    if g_ENGINE_HIST_DRILL_Screen_Routing = 1
      ENGINE_DS_CHART_IMAGE_Creation()
    endif
    if g_ENGINE_HIST_DRILL_Screen_Routing = 3
      ENGINE_PITS_CHART_IMAGE_Creation()
    endif
    
endfunction

function EXPORT_DATA_Handle()

  local l_Export_Data_Folder$ as string

  `This function is called from the Export Data Button on the DATA LISTS Screen.
  `It exports the currently selected 24hr period to text files in a folder on the desktop.
    
  `1. Check / Create Folder
  	l_Export_Data_Folder$ = dir desktop() + "\GDS RDS - DATA EXPORT"
  	if path exist(l_Export_Data_Folder$) = 0
    	make directory l_Export_Data_Folder$
  	endif
  
  `2. Export Data to Text Files
    lib_EXPORT_DATA()
  
  
  

  
  

endfunction

function lib_EXPORT_DATA()

  local l_Export_Data_Folder$ as string : l_Export_Data_Folder$ = dir desktop() + "\GDS RDS - DATA EXPORT"
  local l_Export_Data_FullFilePath$ as string
  local l_Date$ as string
  local l_Date_UKFormat$ as string
  local l_Day$ as string
  local l_Month$ as string
  local l_Year$ as string
  local l_Counter as integer
  local l_CounterMax as integer
  


  l_Date_UKFormat$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr).Date$) 

  l_Day$ = left$(l_Date_UKFormat$, 2)
  l_Month$ = right$(left$(l_Date_UKFormat$, 5), 2)
  l_Year$ = right$(l_Date_UKFormat$, 2)

  l_Export_Data_FullFilePath$ = l_Export_Data_Folder$ + "\" + l_Day$ + l_Month$ + l_Year$ + "_DataExport.txt"

  
  
  g_PrntOffset_Xpos = 0

  `1.WRITE - SINGLE LARGE FILE
  if file exist(l_Export_Data_FullFilePath$) = 1
    delete file l_Export_Data_FullFilePath$
  endif
  

  
  `g_ENG_OUTPUT_TXT_File_FullPath$
  open to write 1, l_Export_Data_FullFilePath$
    `Write Header
    write string 1, "Date" + chr$(9) + "Time" + chr$(9) + "Hole Depth" + chr$(9) + "Bit Depth" + chr$(9) + "ROP" + chr$(9) + "WOB" + chr$(9) + "Hookload" + chr$(9) + "RPM" + chr$(9) + "Torque" + chr$(9) + "Triptank" + chr$(9) + "Block Position" + chr$(9) + "PVT" + chr$(9) + "Pit 1" + chr$(9) + "Pit 2" + chr$(9) + "Pit 3" + chr$(9) + "Pit 4" + chr$(9) + "Pit 5" + chr$(9) + "Pit 6" + chr$(9) + "Pit 7" + chr$(9) + "Pit 8" + chr$(9) + "SPP" + chr$(9) + "FlowIn" + chr$(9) + "SPM1" + chr$(9) + "SPM2" + chr$(9) + "SPM3" + chr$(9) + "Total Gas %" + chr$(9) + "H2S" + chr$(9) + "Temp IN" + chr$(9) + "Temp OUT" + chr$(9) + "Comment" + chr$(9) + "CSG Press" + chr$(9) + "Flow OUT" + chr$(9) + "Total Strokes"
    
     
    
    `g_DATABASE_HD_Total_Num_Records
    l_Counter = 0
    l_CounterMax = g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr-g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr
    for write_lp = g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr to g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr
    
      inc l_Counter, 1
      
      l_Date$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(write_lp).Date$)
      
      write string 1, l_Date$ + chr$(9) + MEM_MAIN_DATABASE(write_lp).Time$ + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Hole_Depth#, 1) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Bit_Depth#, 1) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).ROP#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).WOB#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Hookload) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).RPM) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Torque#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).TripTank#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).BlockPosition#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).PVT#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Pit1#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Pit2#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Pit3#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Pit4#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Pit5#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Pit6#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Pit7#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Pit8#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).SPP) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).FlowIn) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).SPM1) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).SPM2) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).SPM3) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).TotalGas#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).H2S#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).TempIN#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).TempOUT#) + chr$(9) + MEM_MAIN_DATABASE(write_lp).Comment$ + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).CSG) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).FlowOUT#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Total_Strokes)
      
       
      if timer() > g_EXPORTDATA_ScreenUpdateTimer
      
        g_EXPORTDATA_ScreenUpdateTimer = timer() + 50
        
        cls
        
        print "EXPORTING DATA TO FILE (Program Paused)"
        print
        print "Date: " + l_Date_UKFormat$
        print
        print "Creating file : "
        
        
        	l_Box_XPos = 100
        	l_Box_YPos = 300
        	l_Box_Height = 100
        	l_Box_MaxWidth = 600
        	
        	`Top Line
        	LINE l_Box_XPos, l_Box_YPos, l_Box_XPos + l_Box_MaxWidth, l_Box_YPos
        	`Bottom Line
        	LINE l_Box_XPos, l_Box_YPos + l_Box_Height, l_Box_XPos + l_Box_MaxWidth, l_Box_YPos + l_Box_Height
        	`Left Line
        	LINE l_Box_XPos, l_Box_YPos, l_Box_XPos, l_Box_YPos + l_Box_Height
        	`Right Line
        	LINE l_Box_XPos + l_Box_MaxWidth, l_Box_YPos, l_Box_XPos + l_Box_MaxWidth, l_Box_YPos + l_Box_Height
        	
        	l_PercentFill# = (l_Counter + 0.0) / ((l_CounterMax) + 0.0)
        	l_BarFill_Xpox = int(l_Box_MaxWidth * l_PercentFill#)
        	
        	BOX l_Box_XPos + 3, l_Box_YPos + 3, l_Box_XPos + l_BarFill_Xpox - 2, l_Box_YPos + l_Box_Height - 2
        
        
        
        sync
        
      endif  
      
      
      ``Update the Screen every 50ms (+ on 1st loop)
      `if timer() > g_ENG_TIMER_MainProgTimer + 50
      `  g_ENG_TIMER_MainProgTimer = timer()
      `  l_CalcWriteDispPos = write_lp - g_ENG_EXPORTRANGE_ArrPos_Start
      `  SCREEN4_Update1_SingleFile(l_CalcWriteDispPos)
      `endif
      
    next write_lp
  
  close file 1
// 
//   g_ENG_TIMER_MainProgTimer = timer() - 5000: `Set timer to force next screen to update immediately
// 
// 
// 
//   `2.WRITE - MULTIPLE SMALLER FILES (need small files as Excel Max Row is not huge)
//   `Only run if there are enough records in the DB to justify multiple files
//   if (g_ENG_EXPORTRANGE_ArrPos_End - g_ENG_EXPORTRANGE_ArrPos_Start) > c_ENG_OUTPUT_MultiFile_SplitPoint
// 
//     g_FilesCreatedCounter = 1
//     ENG_OUTPUT_TXT_MultiFileDetails_FileNames$(g_FilesCreatedCounter, 0) = "Build_1.txt" 
//     l_GeneratedFilename$ = ENG_OUTPUT_TXT_MultiFileDetails_FileNames$(g_FilesCreatedCounter, 0)
//     l_NextWriteSplitPoint = c_ENG_OUTPUT_MultiFile_SplitPoint
//     
//     G_ENG_Multifile_CalcTotalMultiFiles# = ((g_ENG_EXPORTRANGE_ArrPos_End - g_ENG_EXPORTRANGE_ArrPos_Start) + 0.0) / c_ENG_OUTPUT_MultiFile_SplitPoint
//     `G_ENG_Multifile_TotalMultiFiles = lib_Round_Float_Up(G_ENG_Multifile_CalcTotalMultiFiles#)
//     G_ENG_Multifile_TotalMultiFiles = lib_Count_Req_Number_Of_MultiFiles()
// 
//     g_ENG_FileName_Start_RecordNum = g_ENG_EXPORTRANGE_ArrPos_Start
//     
//     open to write 1, l_GeneratedFilename$
//     
//     `Write header into 1st file
//     write string 1, "Date" + chr$(9) + "Time" + chr$(9) + "Hole Depth" + chr$(9) + "Bit Depth" + chr$(9) + "ROP" + chr$(9) + "WOB" + chr$(9) + "Hookload" + chr$(9) + "RPM" + chr$(9) + "Triptank" + chr$(9) + "Block Position" + chr$(9) + "PVT" + chr$(9) + "SPP" + chr$(9) + "FlowIn" + chr$(9) + "SPM1" + chr$(9) + "SPM2" + chr$(9) + "Total Gas %" + chr$(9) + "H2S"
//       
//     l_SPLIT_COUNTER = 0
//     for write_lp = g_ENG_EXPORTRANGE_ArrPos_Start to g_ENG_EXPORTRANGE_ArrPos_End
// 
//       inc l_SPLIT_COUNTER, 1
// 
//       write string 1, MEM_MAIN_DATABASE(write_lp).Date$ + chr$(9) + MEM_MAIN_DATABASE(write_lp).Time$ + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Hole_Depth#, 1) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Bit_Depth#, 1) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).ROP#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).WOB#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).Hookload) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).RPM) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).TripTank#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).BlockPosition#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).PVT#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).SPP) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).FlowIn) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).SPM1) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).SPM2) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).TotalGas#) + chr$(9) + str$(MEM_MAIN_DATABASE(write_lp).H2S#)
//       inc ENG_OUTPUT_TXT_MultiFileDetails_NumRecords(g_FilesCreatedCounter), 1
//       
//       `If it is the last record in the Database then it will need to act as a special split point to name the last file etc
//       if write_lp = g_DATABASE_HD_Total_Num_Records 
//         l_NextWriteSplitPoint = l_SPLIT_COUNTER
//       endif
//       
//       `If it is the last record in the Range then it will need to act as a special split point to name the last file etc
//       if write_lp = g_ENG_EXPORTRANGE_ArrPos_End 
//         l_NextWriteSplitPoint = l_SPLIT_COUNTER
//       endif
//       
//       `At the split point begin writing into a new txt file
//       if l_SPLIT_COUNTER = l_NextWriteSplitPoint and l_SPLIT_COUNTER < g_DATABASE_HD_Total_Num_Records + 1
//         l_NextWriteSplitPoint = l_SPLIT_COUNTER + c_ENG_OUTPUT_MultiFile_SplitPoint
//         close file 1
//         
//         g_ENG_FileName_End_RecordNum = write_lp
//         lib_Make_OUTPUT_TXT_Filename_fromDateTime(g_FilesCreatedCounter, g_ENG_FileName_Start_RecordNum, g_ENG_FileName_End_RecordNum) 
//         g_ENG_FileName_Start_RecordNum = write_lp + 1
//         
//         if write_lp <> g_ENG_EXPORTRANGE_ArrPos_End
//           inc g_FilesCreatedCounter, 1
//           l_GeneratedFilename$ = "Build_" + str$(g_FilesCreatedCounter) + ".txt"
//           ENG_OUTPUT_TXT_MultiFileDetails_FileNames$(g_FilesCreatedCounter, 0) = l_GeneratedFilename$ 
//           if file exist(l_GeneratedFilename$) = 1
//             delete file l_GeneratedFilename$
//           endif
//           open to write 1, l_GeneratedFilename$
//           write string 1, "Date" + chr$(9) + "Time" + chr$(9) + "Hole Depth" + chr$(9) + "Bit Depth" + chr$(9) + "ROP" + chr$(9) + "WOB" + chr$(9) + "Hookload" + chr$(9) + "RPM" + chr$(9) + "Triptank" + chr$(9) + "Block Position" + chr$(9) + "PVT" + chr$(9) + "SPP" + chr$(9) + "FlowIn" + chr$(9) + "SPM1" + chr$(9) + "SPM2" + chr$(9) + "Total Gas %" + chr$(9) + "H2S"
//         endif
//         
//       endif
//       
//       
//       
//       if timer() > g_ENG_TIMER_MainProgTimer + 50
//         g_ENG_TIMER_MainProgTimer = timer()
//         SCREEN4_Update2_MultiFiles(g_FilesCreatedCounter, write_lp)
//       endif
//     
//     next write_lp
//     
//     `if file open(1) = 1
// 
//     close file 1
//     `endif
//     
//   endif
// 
//   g_ENG_ProgramStageCounter = 5





endfunction


function lib_DLS_STARTUP_Populate_From_LastMemDB(r_ArrayPos)

  local l_CheckStr$ as string

  `This function is used at program start to ensure that the values are set prior to running for the
  `first time.
  
  `g_DLS_TIME_BRKDOWN_Slctd_DisplayDate$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(r_ArrayPos).Date$)
    
  g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_Converted$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(r_ArrayPos).Date$)
  g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_RAWUnconverted$ = MEM_MAIN_DATABASE(r_ArrayPos).Date$
 
  g_DLS_TIME_BRKDOWN_Slctd_Day = val(first token$(g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_Converted$,"/"))
  g_DLS_TIME_BRKDOWN_Slctd_Month = val(next token$("/"))
  
  g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = -1
  g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = -1
  
  l_counter = g_DATABASE_MEM_Total_Num_Records
    
  do
  
    l_CheckStr$ = MEM_MAIN_DATABASE(l_counter).Date$

   `1. Match the End Array to the first instance found of the Matched Day and Month
    if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = -1
      if l_CheckStr$ = g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_RAWUnconverted$
        g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = l_counter
      endif
    endif
   `2. Match the Start Array to the next change of Day and Month
    if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr <> -1
      if l_CheckStr$ <> g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_RAWUnconverted$
        g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = l_counter + 1
      endif
    endif
  
    dec l_counter, 1
  
    `Exit Conditions
      `If we entered the loop with an EMPTY/ZERO DATABASE then l_counter started at zero (g_DATABASE_MEM_Total_Num_Records = 0) and now is decreased to = -1
      if l_counter = -1
        exit
      endif 
      `If counter = zero
      if l_counter = 0
        exit
      endif  
      `If Start and End points found
      if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr <> -1 and g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr <> -1
        exit
      endif
  
  loop
  
  `Some quick checks to stop the progrm crashing
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr < 0 then g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = 0
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr < 0  then g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = 0
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr > g_DATABASE_MEM_Total_Num_Records then g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = g_DATABASE_MEM_Total_Num_Records
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr > g_DATABASE_MEM_Total_Num_Records then g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = g_DATABASE_MEM_Total_Num_Records

  lib_DLS_GET_DATA()

endfunction


function lib_DLS_GETDATA_Date_StartEnd_ArrayPtrs(r_MatchDayNum as integer, r_MatchMonthNum as integer)

  local l_StartDate$ as string
  local l_StartDay as integer
  local l_StartMonth as integer
  
  Local l_CheckDate$ as string
  local l_CheckDay as integer
  local l_CheckMonth as integer

  g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = -1
  g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = -1
  
  `l_StartDate$ = MEM_MAIN_DATABASE(l_counter).Date$
  `l_StartDay = val(first token$(l_StartDate$,"/"))
  `l_StartMonth = val(next token$("/"))
  
  `l_StartDay = r_MatchDayNum
  `l_StartMonth = r_MatchMonthNum
  
  l_counter = g_DATABASE_MEM_Total_Num_Records
  do
  
   `l_CheckDate$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_counter).Date$)
   `l_CheckDay = val(first token$(l_CheckDate$,"/"))
   `l_CheckMonth = val(next token$("/"))
   
   ``1. Match the End Array to the first instance found of the Matched Day and Month
   ` if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = -1
   `   if l_CheckDay = l_StartDay and l_CheckMonth = l_StartMonth
   `     g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = l_counter
   `   endif
   ` endif
   
   ``2. Match the Start Array to the next change of Day and Month
   ` if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr <> -1
   `   if l_CheckDay <> l_StartDay or l_CheckMonth <> l_StartMonth
   `     g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = l_counter + 1
   `   endif
   ` endif
  
    dec l_counter, 1
  
    `Exit Conditions
      `If counter = zero
      if l_counter = 0
        exit
      endif  
      `If Start and End points found
      if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr <> -1 and g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr <> -1
        exit
      endif
  
  loop
  
  `Some quick checks to stop the progrm crashing
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr < 0 then g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = 0
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr < 0  then g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = 0
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr > g_DATABASE_MEM_Total_Num_Records then g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = g_DATABASE_MEM_Total_Num_Records
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr > g_DATABASE_MEM_Total_Num_Records then g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = g_DATABASE_MEM_Total_Num_Records

endfunction

function lib_DLS_GET_DATA()


  local l_OnBottomROPMins as integer
  local l_OnBottomTime# as float
  local l_OnBottomROPMins as integer
  local l_TotalRotatingMins as integer
  local l_TotalRotatingTime# as float
  local l_TotalCirculatingMins as integer
  local l_TotalCircTime# as float
  
  
   ` global g_DLS_DATA_OnBottomTime$ as string
   ` global g_DLS_DATA_CirculatingTime$ as string
   ` global g_DLS_DATA_RotatingTime$ as string
   
   ` g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr 
   ` g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr
   
   
     g_DLS_DATA_StartTime$ = MEM_MAIN_DATABASE(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr).Time$
     g_DLS_DATA_EndTime$ = MEM_MAIN_DATABASE(g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr).Time$
     g_DLS_DATA_StartDepth$ = str$(MEM_MAIN_DATABASE(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr).Hole_Depth#, 1)
     g_DLS_DATA_EndDepth$ = str$(MEM_MAIN_DATABASE(g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr).Hole_Depth#, 1)

     g_DLS_DATA_StartRecord$ = str$(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr)
     g_DLS_DATA_EndRecord$ = str$(g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr)
   
   
    `Get On Bottom Time (ALL)
      l_OnBottomROPMins = lib_ROP_GetOnBOTTOM_MINUTES(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr, g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr)
      if l_OnBottomROPMins < 60
        g_DLS_DATA_OnBottomTime$ = str$(l_OnBottomROPMins) + " Mins"
        l_OnBottomTime# = 0.0 + (l_OnBottomROPMins / 60.0)
      else
        l_OnBottomTime# = 0.0 + (l_OnBottomROPMins / 60.0)
        g_DLS_DATA_OnBottomTime$ = str$(l_OnBottomTime#, 1) + " hrs"
      endif
      
      
      
    `Get On Bottom Time (ROTATING ONLY)
      l_OnBottomROPMins = lib_ROP_GetOnBOTTOM_MINUTES_ROTONLY(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr, g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr)
      if l_OnBottomROPMins < 60
        g_DLS_DATA_OnBottomTime_RotatingOnly$ = str$(l_OnBottomROPMins) + " Mins"
        l_OnBottomTime# = 0.0 + (l_OnBottomROPMins / 60.0)
      else
        l_OnBottomTime# = 0.0 + (l_OnBottomROPMins / 60.0)
        g_DLS_DATA_OnBottomTime_RotatingOnly$ = str$(l_OnBottomTime#, 1) + " hrs"
      endif
      
      
      `Get Total Rotating Time
      l_TotalRotatingMins = lib_Get_TOTAL_ROTATING_MINUTES(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr, g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr)
        if l_TotalRotatingMins < 60
          g_DLS_DATA_RotatingTime$ = str$(l_TotalRotatingMins) + " Mins"
          `l_TotalCircTime# = 0.0 + (l_TotalCirculatingMins / 60.0)
        else
          l_TotalRotatingTime# = 0.0 + (l_TotalRotatingMins / 60.0)
          g_DLS_DATA_RotatingTime$ = str$(l_TotalRotatingTime#, 1) + " hrs"
        endif
        
      `Get Total Bit Revs ()
      lib_Get_TOTAL_BIT_REVS(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr, g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr)
        
      `Get Total Circulating Time  
        l_TotalCirculatingMins = lib_Get_TOTAL_CIRCULATING_MINUTES(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr, g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr, val(g_DLS_DATA_CircTimePerPump_GPMThreshold$))
          if l_TotalCirculatingMins < 60
            l_TotalCircTime# = 0.0 + (l_TotalCirculatingMins / 60.0)
            g_DLS_DATA_CirculatingTime$ = str$(l_TotalCircTime#, 1) + " hrs"
            `ORIGINAL MINUTES LINE, REMOVED AS HRS IS BETTER, NOONE EVER ASKS FOR MINS: g_DLS_DATA_CirculatingTime$ = str$(l_TotalCirculatingMins) + " Mins"
          else
            l_TotalCircTime# = 0.0 + (l_TotalCirculatingMins / 60.0)
            g_DLS_DATA_CirculatingTime$ = str$(l_TotalCircTime#, 1) + " hrs"
          endif
          
          
      `Get Total Circulating Time PER PUMP (A breakdown of the time per pump)
      g_DLS_DATA_CirculatingTimePerPump$ = ""
        `PUMP1
        	l_TotalCirculatingMins = lib_Get_TOTAL_CIRCULATING_MINUTES_PUMP1(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr, g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr)
          	if l_TotalCirculatingMins < 60
          	  l_TotalCircTime# = 0.0 + (l_TotalCirculatingMins / 60.0)
            	g_DLS_DATA_CirculatingTimePerPump$ = g_DLS_DATA_CirculatingTimePerPump$ + "Pump1: " + str$(l_TotalCircTime#, 2) + " hrs"
            	`ORIGINAL MINUTES LINE, REMOVED AS HRS IS BETTER, NOONE EVER ASKS FOR MINS: g_DLS_DATA_CirculatingTimePerPump$ = g_DLS_DATA_CirculatingTimePerPump$ + "Pump1: " + str$(l_TotalCirculatingMins) + " Mins"
          	else
            	l_TotalCircTime# = 0.0 + (l_TotalCirculatingMins / 60.0)
            	g_DLS_DATA_CirculatingTimePerPump$ = g_DLS_DATA_CirculatingTimePerPump$ + "Pump1: " + str$(l_TotalCircTime#, 1) + " hrs"
          	endif
        `PUMP2
        	l_TotalCirculatingMins = lib_Get_TOTAL_CIRCULATING_MINUTES_PUMP2(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr, g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr)
          	if l_TotalCirculatingMins < 60
          	  l_TotalCircTime# = 0.0 + (l_TotalCirculatingMins / 60.0)
            	g_DLS_DATA_CirculatingTimePerPump$ = g_DLS_DATA_CirculatingTimePerPump$ + ",   Pump2: " + str$(l_TotalCircTime#, 2) + " hrs"
            	`ORIGINAL MINUTES LINE, REMOVED AS HRS IS BETTER, NOONE EVER ASKS FOR MINS: g_DLS_DATA_CirculatingTimePerPump$ = g_DLS_DATA_CirculatingTimePerPump$ + ",   Pump2: " + str$(l_TotalCirculatingMins) + " Mins"
          	else
            	l_TotalCircTime# = 0.0 + (l_TotalCirculatingMins / 60.0)
            	g_DLS_DATA_CirculatingTimePerPump$ = g_DLS_DATA_CirculatingTimePerPump$ + ",   Pump2: " + str$(l_TotalCircTime#, 1) + " hrs"
          	endif
        `PUMP3
        	l_TotalCirculatingMins = lib_Get_TOTAL_CIRCULATING_MINUTES_PUMP3(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr, g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr)
          	if l_TotalCirculatingMins < 60
          	  l_TotalCircTime# = 0.0 + (l_TotalCirculatingMins / 60.0)
            	g_DLS_DATA_CirculatingTimePerPump$ = g_DLS_DATA_CirculatingTimePerPump$ + ",   Pump3: " + str$(l_TotalCircTime#, 2) + " hrs"
            	`ORIGINAL MINUTES LINE, REMOVED AS HRS IS BETTER, NOONE EVER ASKS FOR MINS: g_DLS_DATA_CirculatingTimePerPump$ = g_DLS_DATA_CirculatingTimePerPump$ + ",   Pump3: " + str$(l_TotalCirculatingMins) + " Mins"
          	else
            	l_TotalCircTime# = 0.0 + (l_TotalCirculatingMins / 60.0)
            	g_DLS_DATA_CirculatingTimePerPump$ = g_DLS_DATA_CirculatingTimePerPump$ + ",   Pump3: " + str$(l_TotalCircTime#, 1) + " hrs"
          	endif
          	
          	
          
      `Get Total Bit Revs
      `  l_TotalCirculatingMins = lib_Get_TOTAL_CIRCULATING_MINUTES(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr, g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr)


endfunction


function __________PORTABLE_VIEWER_MODE________________________________________jdne93hdh()
endfunction


function PORTABLE_ENG_Set_All_Program_Variables()

  local l_Savename_ARR$ as string

  `  This is a MONSTER FUNCTION.
  `  It sets all variables that are set in text config files when the Client is run normally.
  `    so that all variables are set without having to create the file structure and files
  `    the Client normally creates, i.e. so it is portable. Note: 1 special file is created
  `    where the portable file is run so the user can still modify channel ranges etc and have this
  `    be maintained over program instances. But only 1 file is used, not the whole normal file structure.
  
  `  OUCH!!! Gonna be a pain to program (Started/this line written 150518, 21:44, On IGas Stockbridge 27).


  `1. HANDLE THE MAIN CONFIG FILES. CREATE OR LOAD ETC
  
    `1a. Set all variables to the default so all variables contain realistic data for a bootup.
      
      lib_PORTABLE_Set_All_Vars_To_Default()
    
    `1b. If a Portable Savefile exists load it and overwrite the variables from 1a with the user edited data
    `    else create the file so it can be edited/saved by the user when they change anything in the Client.
  		
  		`l_Savename_ARR$ = g_autodir_full_directory_path$ + "\GDS_RDS_PORTABLE_Settings.txt"
  		`if file exist(l_Savename_ARR$) = 1
    	`	LOAD_PORTABLE_VIEWER_MODE()
    	`else
      `	CREATE_PORTABLE_VIEWER_MODE()
  		`endif

  `2. If running in PORTABLE MODE then Engine Logging is always set to OFF by default
    g_ENG_Logging_Active = -1
      

  `3. Initialise the Graphics System
    INITIALISE_GRAPHICS_SYSTEM()



endfunction

function lib_PORTABLE_BootGUI_MenuChoice()

  `This function can be run at startup to give the user an option to boot the Client
  `into either the PORTABLE Viewer Mode or the FULL MUDLOGGING CLIENT MODE
  
  local l_OUTPUT$ as string
  local l_Exit_Function as integer : l_Exit_Function = -1
  local l_NewWellFunc_ReturnVal as integer : l_NewWellFunc_ReturnVal = -1

  set window size 859, 527
  set display mode 859, 527, 32
  
  set window title "GDS CLIENT - BOOT TYPE MENU"
  
  LOAD_PORTABLE_All_Images_And_Sprites()

  set window position (desktop width() / 2) - (430 + 20), (desktop height() / 2) - (264 + 20)

  repeat
  
    cls
    
    paste image c_PORTABLE_ENG_IMG_Bootup_BKGD, 0, 0
    
    `Mouse Sprite
      sprite c_SPRITE_PORTABLE_MousePxl, mousex(), mousey(), c_PORTABLE_ENG_IMG_MouseSprite


    `Handle Button 1 - PORTABLE MODE (MOUNT/LOAD DATABASE FILE)
      if sprite collision(c_SPRITE_PORTABLE_MousePxl, c_SPRITE_PORTABLE_Button_1) = 1
        `Handle Sprite
          sprite c_SPRITE_PORTABLE_Button_1, 157, 224, c_PORTABLE_ENG_IMG_Button1_Lit
        `Handle Tooltip
          show sprite c_SPRITE_PORTABLE_ToolTip_1
          sprite c_SPRITE_PORTABLE_ToolTip_1, mousex(), mousey(), c_PORTABLE_ENG_IMG_DBViewer_ToolTip
        `
        if mouseclick() = 1
          g_PORTABLE_ENG_WindowsBox_OpenFileName$ = lib_PORTABLE_Windows_OpenFileBox("load","Select new Database File","Database DAT",".bmp;*.gif;*.dat")
          if g_PORTABLE_ENG_WindowsBox_OpenFileName$ <> ""
            l_Exit_Function = 1
            g_PORTABLE_ENG_RunAs_VIEWER = 1
              `Get Database File Path/Name for display later on
              l_DBFileNameLEN = len(g_PORTABLE_ENG_WindowsBox_OpenFileName$)
              l_SeperatorPoint = -1
              for find_lp = 1 to l_DBFileNameLEN
                if mid$(g_PORTABLE_ENG_WindowsBox_OpenFileName$, find_lp) = "\"
                  l_SeperatorPoint = find_lp
                endif
              next
              if l_SeperatorPoint <> -1
                g_PORTABLE_ENG_DispClientDBName$ = right$(g_PORTABLE_ENG_WindowsBox_OpenFileName$, (l_DBFileNameLEN - l_SeperatorPoint))
              else
                g_PORTABLE_ENG_DispClientDBName$ = g_PORTABLE_ENG_WindowsBox_OpenFileName$
              endif
          endif
        endif
        
      else
        sprite c_SPRITE_PORTABLE_Button_1, 157, 224, c_PORTABLE_ENG_IMG_Button1_Unlit
        hide sprite c_SPRITE_PORTABLE_ToolTip_1
      endif
    
    `Handle Button 2 - FULL MUDLOGGING MODE
      if sprite collision(c_SPRITE_PORTABLE_MousePxl, c_SPRITE_PORTABLE_Button_2) = 1
        `Handle Sprite
          sprite c_SPRITE_PORTABLE_Button_2, 468, 224, c_PORTABLE_ENG_IMG_Button2_Lit
        `Handle Tooltip
          show sprite c_SPRITE_PORTABLE_ToolTip_2
          sprite c_SPRITE_PORTABLE_ToolTip_2, mousex(), mousey(), c_PORTABLE_ENG_IMG_MudLogMode_ToolTip
        `    
        if mouseclick() = 1
          l_Exit_Function = 1
          g_PORTABLE_ENG_RunAs_VIEWER = -1
        endif
      else
        sprite c_SPRITE_PORTABLE_Button_2, 468, 224, c_PORTABLE_ENG_IMG_Button2_Unlit
        hide sprite c_SPRITE_PORTABLE_ToolTip_2
      endif
      
    `HandleStart New Well Button
      if sprite collision(c_SPRITE_PORTABLE_MousePxl, c_SPRITE_PORTABLE_Button_NewWell) = 1
        sprite c_SPRITE_PORTABLE_Button_NewWell, 210, 475, c_PORTABLE_ENG_IMG_StartNewWell_Lit
        if mouseclick() = 1
          g_PORTABLE_ENG_RunAs_VIEWER = -1
          l_NewWellFunc_ReturnVal = lib_STARTUP_GUI_CreateNewWell()
          if l_NewWellFunc_ReturnVal = 1
            l_Exit_Function = 1
          endif
        endif
      else
        sprite c_SPRITE_PORTABLE_Button_NewWell, 210, 475, c_PORTABLE_ENG_IMG_StartNewWell_Unlit
      endif 

    sync

  until l_Exit_Function = 1
  
  if sprite exist(c_SPRITE_PORTABLE_Button_1) = 1 then delete sprite c_SPRITE_PORTABLE_Button_1
  if sprite exist(c_SPRITE_PORTABLE_Button_2) = 1 then delete sprite c_SPRITE_PORTABLE_Button_2
  if sprite exist(c_SPRITE_PORTABLE_Button_NewWell) = 1 then delete sprite c_SPRITE_PORTABLE_Button_NewWell

endfunction


function lib_PORTABLE_Set_All_Vars_To_Default()

  `Handle Variables : LOAD_CLIENT_TXT_File()
    
    if display width() > 1300
      g_ENGINE_Screen_Resolution = 1
    else
      g_ENGINE_Screen_Resolution = 0
    endif
    
    g_WITS_Transmission_Interval_Int = 3
    
    
    
    g_CLIENT_Database_Filename$ = "Database.dat"
    g_CLIENT_Database_Full_Path$ = g_autodir_full_directory_path$ + "\Database\" + g_CLIENT_Database_Filename$
    
    
    
  	if g_ENGINE_Screen_Resolution = 1
    	
    	`From LOAD_RTDisp_Drilling_Widescreen() - OK
    	
    		g_DRILL_DISPLAY_Block1_Channel1_Name_x=158
    		g_DRILL_DISPLAY_Block1_Channel1_Name_y=9
    		g_DRILL_DISPLAY_Block1_Channel2_Name_x=158
    		g_DRILL_DISPLAY_Block1_Channel2_Name_y=71
    		g_DRILL_DISPLAY_Block1_Channel3_Name_x=158
    		g_DRILL_DISPLAY_Block1_Channel3_Name_y=133
    		
    		g_DRILL_DISPLAY_Block2_Channel1_Name_x=528
    		g_DRILL_DISPLAY_Block2_Channel1_Name_y=9
    		g_DRILL_DISPLAY_Block2_Channel2_Name_x=528
    		g_DRILL_DISPLAY_Block2_Channel2_Name_y=71
    		g_DRILL_DISPLAY_Block2_Channel3_Name_x=528
    		g_DRILL_DISPLAY_Block2_Channel3_Name_y=133
    		
    		g_DRILL_DISPLAY_Block3_Channel1_Name_x=851
    		g_DRILL_DISPLAY_Block3_Channel1_Name_y=9
    		g_DRILL_DISPLAY_Block3_Channel2_Name_x=851
    		g_DRILL_DISPLAY_Block3_Channel2_Name_y=71
    		g_DRILL_DISPLAY_Block3_Channel3_Name_x=851
    		g_DRILL_DISPLAY_Block3_Channel3_Name_y=133
    		
    		g_DRILL_DISPLAY_Block1_Channel1_LO_x=80
    		g_DRILL_DISPLAY_Block1_Channel1_LO_y=48
    		g_DRILL_DISPLAY_Block1_Channel1_HIGH_x=234
    		g_DRILL_DISPLAY_Block1_Channel1_HIGH_y=48
    		g_DRILL_DISPLAY_Block1_Channel2_LO_x=80
    		g_DRILL_DISPLAY_Block1_Channel2_LO_y=110
    		g_DRILL_DISPLAY_Block1_Channel2_HIGH_x=234
    		g_DRILL_DISPLAY_Block1_Channel2_HIGH_y=110
    		g_DRILL_DISPLAY_Block1_Channel3_LO_x=80
    		g_DRILL_DISPLAY_Block1_Channel3_LO_y=172
    		g_DRILL_DISPLAY_Block1_Channel3_HIGH_x=234
    		g_DRILL_DISPLAY_Block1_Channel3_HIGH_y=172
    		
    		g_DRILL_DISPLAY_Block2_Channel1_LO_x=458
    		g_DRILL_DISPLAY_Block2_Channel1_LO_y=48
    		g_DRILL_DISPLAY_Block2_Channel1_HIGH_x=605
    		g_DRILL_DISPLAY_Block2_Channel1_HIGH_y=48
    		g_DRILL_DISPLAY_Block2_Channel2_LO_x=458
    		g_DRILL_DISPLAY_Block2_Channel2_LO_y=110
    		g_DRILL_DISPLAY_Block2_Channel2_HIGH_x=605
    		g_DRILL_DISPLAY_Block2_Channel2_HIGH_y=110
    		g_DRILL_DISPLAY_Block2_Channel3_LO_x=458
    		g_DRILL_DISPLAY_Block2_Channel3_LO_y=172
    		g_DRILL_DISPLAY_Block2_Channel3_HIGH_x=605
    		g_DRILL_DISPLAY_Block2_Channel3_HIGH_y=172
    		
    		g_DRILL_DISPLAY_Block3_Channel1_LO_x=773
    		g_DRILL_DISPLAY_Block3_Channel1_LO_y=48
    		g_DRILL_DISPLAY_Block3_Channel1_HIGH_x=927
    		g_DRILL_DISPLAY_Block3_Channel1_HIGH_y=48
    		g_DRILL_DISPLAY_Block3_Channel2_LO_x=773
    		g_DRILL_DISPLAY_Block3_Channel2_LO_y=110
    		g_DRILL_DISPLAY_Block3_Channel2_HIGH_x=927
    		g_DRILL_DISPLAY_Block3_Channel2_HIGH_y=110
    		g_DRILL_DISPLAY_Block3_Channel3_LO_x=773
    		g_DRILL_DISPLAY_Block3_Channel3_LO_y=172
    		g_DRILL_DISPLAY_Block3_Channel3_HIGH_x=927
    		g_DRILL_DISPLAY_Block3_Channel3_HIGH_y=172
    		
    		g_DRILL_DISPLAY_Block1_Channel1_ValuePos_x=158
    		g_DRILL_DISPLAY_Block1_Channel1_ValuePos_y=40
    		g_DRILL_DISPLAY_Block1_Channel2_ValuePos_x=158
    		g_DRILL_DISPLAY_Block1_Channel2_ValuePos_y=102
    		g_DRILL_DISPLAY_Block1_Channel3_ValuePos_x=158
    		g_DRILL_DISPLAY_Block1_Channel3_ValuePos_y=164
    		
    		g_DRILL_DISPLAY_Block2_Channel1_ValuePos_x=528
    		g_DRILL_DISPLAY_Block2_Channel1_ValuePos_y=40
    		g_DRILL_DISPLAY_Block2_Channel2_ValuePos_x=528
    		g_DRILL_DISPLAY_Block2_Channel2_ValuePos_y=102
    		g_DRILL_DISPLAY_Block2_Channel3_ValuePos_x=528
    		g_DRILL_DISPLAY_Block2_Channel3_ValuePos_y=164
    		
    		g_DRILL_DISPLAY_Block3_Channel1_ValuePos_x=851
    		g_DRILL_DISPLAY_Block3_Channel1_ValuePos_y=40
    		g_DRILL_DISPLAY_Block3_Channel2_ValuePos_x=851
    		g_DRILL_DISPLAY_Block3_Channel2_ValuePos_y=102
    		g_DRILL_DISPLAY_Block3_Channel3_ValuePos_x=851
    		g_DRILL_DISPLAY_Block3_Channel3_ValuePos_y=164
    	
      `From LOAD_RTDisp_Screen_Units_WideScreen - OK
      
      	g_DS_Units_Block1Line1_Name$ = "ft/hr"
      	g_DS_Units_Block1Line2_Name$ = "klbs"
      	g_DS_Units_Block1Line3_Name$ = "klbs"
      	g_DS_Units_Block2Line1_Name$ = "rpm"
      	g_DS_Units_Block2Line2_Name$ = "bbls"
      	g_DS_Units_Block2Line3_Name$ = "mtrs"
      	g_DS_Units_Block3Line1_Name$ = "bbls"
      	g_DS_Units_Block3Line2_Name$ = "psi"
      	g_DS_Units_Block3Line3_Name$ = "g/min"

      	g_DS_Units_Block1Line1_X = 205
      	g_DS_Units_Block1Line1_Y = 30
      	g_DS_Units_Block1Line2_X = 205
      	g_DS_Units_Block1Line2_Y = 90
      	g_DS_Units_Block1Line3_X = 205
      	g_DS_Units_Block1Line3_Y = 154
      	
      	g_DS_Units_Block2Line1_X = 576
      	g_DS_Units_Block2Line1_Y = 30
      	g_DS_Units_Block2Line2_X = 576
      	g_DS_Units_Block2Line2_Y = 90
      	g_DS_Units_Block2Line3_X = 576
      	g_DS_Units_Block2Line3_Y = 154
      	
      	g_DS_Units_Block3Line1_X = 899
      	g_DS_Units_Block3Line1_Y = 30
      	g_DS_Units_Block3Line2_X = 899
      	g_DS_Units_Block3Line2_Y = 90
      	g_DS_Units_Block3Line3_X = 899
      	g_DS_Units_Block3Line3_Y = 154

    	`LOAD_RTDisp_Pits_Widescreen()
    	
        g_PITS_DISPLAY_Block1_Channel1_Name_x = 158
        g_PITS_DISPLAY_Block1_Channel1_Name_y = 9
        g_PITS_DISPLAY_Block1_Channel2_Name_x = 158
        g_PITS_DISPLAY_Block1_Channel2_Name_y = 71
        g_PITS_DISPLAY_Block1_Channel3_Name_x = 158
        g_PITS_DISPLAY_Block1_Channel3_Name_y = 133
    
        g_PITS_DISPLAY_Block2_Channel1_Name_x = 528
        g_PITS_DISPLAY_Block2_Channel1_Name_y = 9
        g_PITS_DISPLAY_Block2_Channel2_Name_x = 528
        g_PITS_DISPLAY_Block2_Channel2_Name_y = 71
        g_PITS_DISPLAY_Block2_Channel3_Name_x = 528
        g_PITS_DISPLAY_Block2_Channel3_Name_y = 133
    
        g_PITS_DISPLAY_Block3_Channel1_Name_x = 851
        g_PITS_DISPLAY_Block3_Channel1_Name_y = 9
        g_PITS_DISPLAY_Block3_Channel2_Name_x = 851
        g_PITS_DISPLAY_Block3_Channel2_Name_y = 71
        g_PITS_DISPLAY_Block3_Channel3_Name_x = 851
        g_PITS_DISPLAY_Block3_Channel3_Name_y = 133
    
        g_PITS_DISPLAY_Block4_Channel1_Name_x = 1166
        g_PITS_DISPLAY_Block4_Channel1_Name_y = 9
        g_PITS_DISPLAY_Block4_Channel2_Name_x = 1166
        g_PITS_DISPLAY_Block4_Channel2_Name_y = 71
        g_PITS_DISPLAY_Block4_Channel3_Name_x = 1166
        g_PITS_DISPLAY_Block4_Channel3_Name_y = 133
    
        g_PITS_DISPLAY_Block1_Channel1_LO_x = 80
        g_PITS_DISPLAY_Block1_Channel1_LO_y = 48
        g_PITS_DISPLAY_Block1_Channel1_HIGH_x = 234
        g_PITS_DISPLAY_Block1_Channel1_HIGH_y = 48
        g_PITS_DISPLAY_Block1_Channel2_LO_x = 80
        g_PITS_DISPLAY_Block1_Channel2_LO_y = 110
        g_PITS_DISPLAY_Block1_Channel2_HIGH_x = 234
        g_PITS_DISPLAY_Block1_Channel2_HIGH_y = 110
        g_PITS_DISPLAY_Block1_Channel3_LO_x = 80
        g_PITS_DISPLAY_Block1_Channel3_LO_y = 172
        g_PITS_DISPLAY_Block1_Channel3_HIGH_x = 234
        g_PITS_DISPLAY_Block1_Channel3_HIGH_y = 172
    
        g_PITS_DISPLAY_Block2_Channel1_LO_x = 458
        g_PITS_DISPLAY_Block2_Channel1_LO_y = 48
        g_PITS_DISPLAY_Block2_Channel1_HIGH_x = 605
        g_PITS_DISPLAY_Block2_Channel1_HIGH_y = 48
        g_PITS_DISPLAY_Block2_Channel2_LO_x = 458
        g_PITS_DISPLAY_Block2_Channel2_LO_y = 110
        g_PITS_DISPLAY_Block2_Channel2_HIGH_x = 605
        g_PITS_DISPLAY_Block2_Channel2_HIGH_y = 110
        g_PITS_DISPLAY_Block2_Channel3_LO_x = 458
        g_PITS_DISPLAY_Block2_Channel3_LO_y = 172
        g_PITS_DISPLAY_Block2_Channel3_HIGH_x = 605
        g_PITS_DISPLAY_Block2_Channel3_HIGH_y = 172
    
        g_PITS_DISPLAY_Block3_Channel1_LO_x = 773
        g_PITS_DISPLAY_Block3_Channel1_LO_y = 48
        g_PITS_DISPLAY_Block3_Channel1_HIGH_x = 927
        g_PITS_DISPLAY_Block3_Channel1_HIGH_y = 48
        g_PITS_DISPLAY_Block3_Channel2_LO_x = 773
        g_PITS_DISPLAY_Block3_Channel2_LO_y = 110
        g_PITS_DISPLAY_Block3_Channel2_HIGH_x = 927
        g_PITS_DISPLAY_Block3_Channel2_HIGH_y = 110
        g_PITS_DISPLAY_Block3_Channel3_LO_x = 773
        g_PITS_DISPLAY_Block3_Channel3_LO_y = 172
        g_PITS_DISPLAY_Block3_Channel3_HIGH_x = 927
        g_PITS_DISPLAY_Block3_Channel3_HIGH_y = 172
    
        g_PITS_DISPLAY_Block4_Channel1_LO_x = 1087
        g_PITS_DISPLAY_Block4_Channel1_LO_y = 48
        g_PITS_DISPLAY_Block4_Channel1_HIGH_x = 1242
        g_PITS_DISPLAY_Block4_Channel1_HIGH_y = 48
        g_PITS_DISPLAY_Block4_Channel2_LO_x = 1087
        g_PITS_DISPLAY_Block4_Channel2_LO_y = 110
        g_PITS_DISPLAY_Block4_Channel2_HIGH_x = 1242
        g_PITS_DISPLAY_Block4_Channel2_HIGH_y = 110
        g_PITS_DISPLAY_Block4_Channel3_LO_x = 1087
        g_PITS_DISPLAY_Block4_Channel3_LO_y = 172
        g_PITS_DISPLAY_Block4_Channel3_HIGH_x = 1242
        g_PITS_DISPLAY_Block4_Channel3_HIGH_y = 172
    
        g_PITS_DISPLAY_Block1_Channel1_ValuePos_x = 158
        g_PITS_DISPLAY_Block1_Channel1_ValuePos_y = 40
        g_PITS_DISPLAY_Block1_Channel2_ValuePos_x = 158
        g_PITS_DISPLAY_Block1_Channel2_ValuePos_y = 102
        g_PITS_DISPLAY_Block1_Channel3_ValuePos_x = 158
        g_PITS_DISPLAY_Block1_Channel3_ValuePos_y = 164
    
        g_PITS_DISPLAY_Block2_Channel1_ValuePos_x = 528
        g_PITS_DISPLAY_Block2_Channel1_ValuePos_y = 40
        g_PITS_DISPLAY_Block2_Channel2_ValuePos_x = 528
        g_PITS_DISPLAY_Block2_Channel2_ValuePos_y = 102
        g_PITS_DISPLAY_Block2_Channel3_ValuePos_x = 528
        g_PITS_DISPLAY_Block2_Channel3_ValuePos_y = 164
    
        g_PITS_DISPLAY_Block3_Channel1_ValuePos_x = 851
        g_PITS_DISPLAY_Block3_Channel1_ValuePos_y = 40
        g_PITS_DISPLAY_Block3_Channel2_ValuePos_x = 851
        g_PITS_DISPLAY_Block3_Channel2_ValuePos_y = 102
        g_PITS_DISPLAY_Block3_Channel3_ValuePos_x = 851
        g_PITS_DISPLAY_Block3_Channel3_ValuePos_y = 164
    
        g_PITS_DISPLAY_Block4_Channel1_ValuePos_x = 1166
        g_PITS_DISPLAY_Block4_Channel1_ValuePos_y = 40
        g_PITS_DISPLAY_Block4_Channel2_ValuePos_x = 1166
        g_PITS_DISPLAY_Block4_Channel2_ValuePos_y = 102
        g_PITS_DISPLAY_Block4_Channel3_ValuePos_x = 1166
        g_PITS_DISPLAY_Block4_Channel3_ValuePos_y = 164
    	 	
      `DRILLING SCREEN PLOT POSITIONS
      	`Widescreen
      	g_N_Chart_Width = 301
      	g_N_Block1_MinX = 0
      	g_N_Block1_MaxX = 301
      	g_N_Block2_MinX = 0
      	g_N_Block2_MaxX = 301
      	g_N_Block3_MinX = 0
      	g_N_Block3_MaxX = 301
      	g_N_Block4_MinX = 0
      	g_N_Block4_MaxX = 301
      	
    	`HISTORICAL SCREEN PLOT CONSTANTS
      	g_HS_CHARTBOX_Screen_Left = 75
      	g_HS_CHARTBOX_Screen_Right = 1323
      	g_HS_CHARTBOX_Screen_Top = 64
      	g_HS_CHARTBOX_Screen_Bottom = 504
      	
      	g_HS_CHARTBOX_Ttl_Height = 442
      	g_HS_CHARTBOX_Ttl_Width = 1248
	
  	else
    	
    	`LOAD_RTDisp_Drilling_1024x768()
    	`LOAD_RTDisp_Screen_Units_1024x768()
    	`LOAD_RTDisp_Pits_1024x768()
    	
    	`HISTORICAL SCREEN PLOT CONSTANTS
      	`1024x768
      	g_N_Chart_Width = 193
      	g_N_Block1_MinX = 0
      	g_N_Block1_MaxX = 193
      	g_N_Block2_MinX = 0
      	g_N_Block2_MaxX = 193
      	g_N_Block3_MinX = 0
      	g_N_Block3_MaxX = 193
      	g_N_Block4_MinX = 0
      	g_N_Block4_MaxX = 193
    	`HISTORICAL SCREEN PLOT CONSTANTS
      	g_HS_CHARTBOX_Screen_Left = 75
      	g_HS_CHARTBOX_Screen_Right = 983
      	g_HS_CHARTBOX_Screen_Top = 64
      	g_HS_CHARTBOX_Screen_Bottom = 504
      	
      	g_HS_CHARTBOX_Ttl_Height = 442
      	g_HS_CHARTBOX_Ttl_Width = 908
      	
  	endif
  	

  `--- ENGINE SETUP -------------------------------------------------------------------


  g_ENGINE_MEMDB_Runtime_DAYS = 90
  g_ENGINE_CoreFunctionType = 2
  g_ENGINE_First_Runtime = -1
  g_ENGINE_ProgrammerMODE = -1
  g_ENGINE_SwapDayMonthFormat = 1
  g_ENGINE_RTIntGadgets = 1
  g_ENGINE_UNITS_FT_or_M = 1
  g_ROPCALC_ROPCalcDepthInterval# = 0.3
  g_LAGDEPTH_AdjustValue# = 1.6
  
  g_DATABASE_MaxTotalRecords = g_ENGINE_MEMDB_Runtime_DAYS * 21600


  `--- CHANNEL ID - CHANNEL INDEX -------------------------------------------------------------------
  
  	CHANNEL_ID_ChannelLinkIndex(1) = 3
  	CHANNEL_ID_ChannelLinkIndex(2) = 4
  	CHANNEL_ID_ChannelLinkIndex(3) = 5
  	CHANNEL_ID_ChannelLinkIndex(4) = 6
  	CHANNEL_ID_ChannelLinkIndex(5) = 8
  	CHANNEL_ID_ChannelLinkIndex(6) = 9
  	CHANNEL_ID_ChannelLinkIndex(7) = 17
  	CHANNEL_ID_ChannelLinkIndex(8) = 10
  	CHANNEL_ID_ChannelLinkIndex(9) = 11
  	CHANNEL_ID_ChannelLinkIndex(10) = 9
  	CHANNEL_ID_ChannelLinkIndex(11) = 5
  	CHANNEL_ID_ChannelLinkIndex(12) = 4
  	CHANNEL_ID_ChannelLinkIndex(13) = 18
  	CHANNEL_ID_ChannelLinkIndex(14) = 19
  	CHANNEL_ID_ChannelLinkIndex(15) = 20
  	CHANNEL_ID_ChannelLinkIndex(16) = 21
  	CHANNEL_ID_ChannelLinkIndex(17) = -1
  	CHANNEL_ID_ChannelLinkIndex(18) = -1
  	CHANNEL_ID_ChannelLinkIndex(19) = 11
  	CHANNEL_ID_ChannelLinkIndex(20) = 10
  	CHANNEL_ID_ChannelLinkIndex(21) = 17
  	
  	CHANNEL_ID_ChannelRanges(1) = 0
  	CHANNEL_ID_ChannelRanges(2) = 1000
  	CHANNEL_ID_ChannelRanges(3) = 0
  	CHANNEL_ID_ChannelRanges(4) = 1000
  	CHANNEL_ID_ChannelRanges(5) = 0
  	CHANNEL_ID_ChannelRanges(6) = 50
  	CHANNEL_ID_ChannelRanges(7) = 0
  	CHANNEL_ID_ChannelRanges(8) = 25
  	CHANNEL_ID_ChannelRanges(9) = 0
  	CHANNEL_ID_ChannelRanges(10) = 100
  	CHANNEL_ID_ChannelRanges(11) = 0
  	CHANNEL_ID_ChannelRanges(12) = 200
  	CHANNEL_ID_ChannelRanges(13) = 0
  	CHANNEL_ID_ChannelRanges(14) = 0000
  	CHANNEL_ID_ChannelRanges(15) = 0
  	CHANNEL_ID_ChannelRanges(16) = 300
  	CHANNEL_ID_ChannelRanges(17) = 0
  	CHANNEL_ID_ChannelRanges(18) = 150
  	CHANNEL_ID_ChannelRanges(19) = 0
  	CHANNEL_ID_ChannelRanges(20) = 3000
  	CHANNEL_ID_ChannelRanges(21) = 0
  	CHANNEL_ID_ChannelRanges(22) = 1000
  	CHANNEL_ID_ChannelRanges(23) = 0
  	CHANNEL_ID_ChannelRanges(24) = 150
  	CHANNEL_ID_ChannelRanges(25) = 0
  	CHANNEL_ID_ChannelRanges(26) = 50
  	CHANNEL_ID_ChannelRanges(27) = 0
  	CHANNEL_ID_ChannelRanges(28) = 150
  	CHANNEL_ID_ChannelRanges(29) = 0
  	CHANNEL_ID_ChannelRanges(30) = 100
  	CHANNEL_ID_ChannelRanges(31) = 0
  	CHANNEL_ID_ChannelRanges(32) = 50
  	CHANNEL_ID_ChannelRanges(33) = 0
  	CHANNEL_ID_ChannelRanges(34) = 500
  	CHANNEL_ID_ChannelRanges(35) = 0
  	CHANNEL_ID_ChannelRanges(36) = 200
  	CHANNEL_ID_ChannelRanges(37) = 0
  	CHANNEL_ID_ChannelRanges(38) = 200
  	CHANNEL_ID_ChannelRanges(39) = 0
  	CHANNEL_ID_ChannelRanges(40) = 200
  	CHANNEL_ID_ChannelRanges(41) = 0
  	CHANNEL_ID_ChannelRanges(42) = 200
  	CHANNEL_ID_ChannelRanges(43) = 0
  	CHANNEL_ID_ChannelRanges(44) = 200
  	CHANNEL_ID_ChannelRanges(45) = 0
  	CHANNEL_ID_ChannelRanges(46) = 200
  	CHANNEL_ID_ChannelRanges(47) = 0
  	CHANNEL_ID_ChannelRanges(48) = 200
  	CHANNEL_ID_ChannelRanges(49) = 0
  	CHANNEL_ID_ChannelRanges(50) = 1500
  	CHANNEL_ID_ChannelRanges(51) = 0
  	CHANNEL_ID_ChannelRanges(52) = 5000
  	CHANNEL_ID_ChannelRanges(53) = 0
  	CHANNEL_ID_ChannelRanges(54) = 100
  	
  	CHANNEL_ID_ChannelNames$(1) = "Hole Depth"
  	CHANNEL_ID_ChannelNames$(2) = "Bit Depth"
  	CHANNEL_ID_ChannelNames$(3) = "ROP"
  	CHANNEL_ID_ChannelNames$(4) = "WOB"
  	CHANNEL_ID_ChannelNames$(5) = "Hookload"	
  	CHANNEL_ID_ChannelNames$(6) = "RPM"
  	CHANNEL_ID_ChannelNames$(7) = "Torque"
  	CHANNEL_ID_ChannelNames$(8) = "Trip Tank"
  	CHANNEL_ID_ChannelNames$(9) = "Block Pos"
  	CHANNEL_ID_ChannelNames$(10) = "SPP"
  	CHANNEL_ID_ChannelNames$(11) = "Flow In"
  	CHANNEL_ID_ChannelNames$(12) = "SPM1"
  	CHANNEL_ID_ChannelNames$(13) = "SPM2"
  	CHANNEL_ID_ChannelNames$(14) = "SPM3"
  	CHANNEL_ID_ChannelNames$(15) = "TG"
  	CHANNEL_ID_ChannelNames$(16) = "H2S"
  	CHANNEL_ID_ChannelNames$(17) = "Total Vol"
  	CHANNEL_ID_ChannelNames$(18) = "PIT1"
  	CHANNEL_ID_ChannelNames$(19) = "PIT2"
  	CHANNEL_ID_ChannelNames$(20) = "PIT3"
  	CHANNEL_ID_ChannelNames$(21) = "PIT4"
  	CHANNEL_ID_ChannelNames$(22) = "PIT5"
  	CHANNEL_ID_ChannelNames$(23) = "PIT6"
  	CHANNEL_ID_ChannelNames$(24) = "PIT7"
  	CHANNEL_ID_ChannelNames$(25) = "PIT8"
  	CHANNEL_ID_ChannelNames$(26) = "CSG"
  	CHANNEL_ID_ChannelNames$(27) = "FLOW OUT"
  

  `--- HISTORICAL SCREEN ------------------------------------------------------------------------------
  
    `From LOAD_HS_Channel_ID()
    	HS_Channel_Names$(1) = "Hole Depth"
    	HS_Channel_Names$(2) = "Bit Depth"
    	HS_Channel_Names$(3) = "ROP"
    	HS_Channel_Names$(4) = "WOB"
    	HS_Channel_Names$(5) = "Hookload"
    	HS_Channel_Names$(6) = "RPM"
    	HS_Channel_Names$(7) = "Triptank"
    	HS_Channel_Names$(8) = "Block Height"
    	HS_Channel_Names$(9) = "Active Volume"
    	HS_Channel_Names$(10) = "SPP"
    	HS_Channel_Names$(11) = "Flow IN"
    	HS_Channel_Names$(12) = "SPM 1"
    	HS_Channel_Names$(13) = "SPM 2"
    	HS_Channel_Names$(14) = "TG"
    	HS_Channel_Names$(15) = "H2S"
    	HS_Channel_Names$(16) = "XXXX"
    	HS_Channel_Names$(17) = "XXXX"
    	HS_Channel_Names$(18) = "XXXX"
    	HS_Channel_Names$(19) = "XXXX"
    	HS_Channel_Names$(20) = "XXXX"
    	
    	HS_Channel_Units$(1) = "ft"
    	HS_Channel_Units$(2) = "ft"
    	HS_Channel_Units$(3) = "ft/hr"
    	HS_Channel_Units$(4) = "klbs"
    	HS_Channel_Units$(5) = "klbs"
    	HS_Channel_Units$(6) = "rpm"
    	HS_Channel_Units$(7) = "bbls"
    	HS_Channel_Units$(8) = "m"
    	HS_Channel_Units$(9) = "bbls"
    	HS_Channel_Units$(10) = "psi"
    	HS_Channel_Units$(11) = "g/min"
    	HS_Channel_Units$(12) = "spm"
    	HS_Channel_Units$(13) = "spm"
    	HS_Channel_Units$(14) = "%"
    	HS_Channel_Units$(15) = "ppm"
    	HS_Channel_Units$(16) = "xxxx"
    	HS_Channel_Units$(17) = "xxxx"
    	HS_Channel_Units$(18) = "xxxx"
    	HS_Channel_Units$(19) = "xxxx"
    	HS_Channel_Units$(20) = "xxxx"


    `From LOAD_HS_Range_Values()
    	HS_Chart_Range_Values#(1) = 12000 : `Hole Depth Upper
    	HS_Chart_Range_Values#(2) = 0 : `Hole Depth Lower
    	HS_Chart_Range_Values#(3) = 12000 : `Bit Depth Upper
    	HS_Chart_Range_Values#(4) = 0 : `Bit Depth Lower
    	HS_Chart_Range_Values#(5) = 50 : `ROP Upper
    	HS_Chart_Range_Values#(6) = 0 : `ROP Lower
    	HS_Chart_Range_Values#(7) = 25 : `WOB Upper
    	HS_Chart_Range_Values#(8) = 0 : `WOB Lower
    	HS_Chart_Range_Values#(9) = 400 : `HKLD Upper
    	HS_Chart_Range_Values#(10) = 0 : `HKLD Lower
    	HS_Chart_Range_Values#(11) = 200 : `RPM Upper
    	HS_Chart_Range_Values#(12) = 0 : `RPM Lower
    	HS_Chart_Range_Values#(13) = 100 : `TT Upper
    	HS_Chart_Range_Values#(14) = 0 : `TT Lower
    	HS_Chart_Range_Values#(15) = 50 : `BLOCK POS Upper
    	HS_Chart_Range_Values#(16) = 0 : `BLOCK POS Lower
    	HS_Chart_Range_Values#(17) = 800 : `PVT Upper
    	HS_Chart_Range_Values#(18) = 0 : `PVT Lower
    	HS_Chart_Range_Values#(19) = 4000 : `SPP Upper
    	HS_Chart_Range_Values#(20) = 0 : `SPP Lower
    	HS_Chart_Range_Values#(21) = 500 : `FLOW IN Upper
    	HS_Chart_Range_Values#(22) = 0 : `FLOW IN Lower
    	HS_Chart_Range_Values#(23) = 300 : `SPM1 Upper
    	HS_Chart_Range_Values#(24) = 0 : `SPM1 Lower
    	HS_Chart_Range_Values#(25) = 300 : `SPM2 Upper
    	HS_Chart_Range_Values#(26) = 0 : `SPM2 Lower
    	HS_Chart_Range_Values#(27) = 300 : `SPM3 Upper
    	HS_Chart_Range_Values#(28) = 0 : `SPM3 Lower
    	HS_Chart_Range_Values#(29) = 100 : `TG% Upper
    	HS_Chart_Range_Values#(30) = 0 : `TG% Lower
    	HS_Chart_Range_Values#(31) = 50 : `H2S Upper
    	HS_Chart_Range_Values#(32) = 0 : `H2S Lower
    	HS_Chart_Range_Values#(33) = 150 : `Temp IN Upper
    	HS_Chart_Range_Values#(34) = 0 : `Temp IN Lower
    	HS_Chart_Range_Values#(35) = 150 : `Temp OUT Upper
    	HS_Chart_Range_Values#(36) = 0 : `Temp OUT Lower
    	HS_Chart_Range_Values#(37) = 4000 : `CSG Upper
    	HS_Chart_Range_Values#(38) = 0 : `CSG Lower
    	HS_Chart_Range_Values#(39) = 5000 : `Total Strokes Upper
    	HS_Chart_Range_Values#(40) = 0 : `Total Strokes Lower

    `From LOAD_HS_Channel_States()
    	HS_TickBox_States(1) = 1
    	HS_TickBox_States(2) = -1
    	HS_TickBox_States(3) = -1
    	HS_TickBox_States(4) = -1
    	HS_TickBox_States(5) = 1
    	HS_TickBox_States(6) = -1
    	HS_TickBox_States(7) = -1
    	HS_TickBox_States(8) = -1
    	HS_TickBox_States(9) = 1
    	HS_TickBox_States(10) = 1
    	HS_TickBox_States(11) = 1
    	HS_TickBox_States(12) = 1
    	HS_TickBox_States(13) = -1
    	HS_TickBox_States(14) = -1
    	HS_TickBox_States(15) = -1
    	HS_TickBox_States(16) = -1
    	HS_TickBox_States(17) = -1
    	HS_TickBox_States(18) = -1
    	HS_TickBox_States(19) = -1
    	HS_TickBox_States(20) = -1

    `From LOAD_HS_Channel_Colours()
    	HS_CHART_Line_String$(1) = "=0,0,0"
    	HS_CHART_Line_String$(2) = "=80,65,148"
    	HS_CHART_Line_String$(3) = "=0,88,60"
    	HS_CHART_Line_String$(4) = "=0,0,255"
    	HS_CHART_Line_String$(5) = "=240,100,100"
    	HS_CHART_Line_String$(6) = "=128,255,255"
    	HS_CHART_Line_String$(7) = "=128,128,128"
    	HS_CHART_Line_String$(8) = "=255,128,255"
    	HS_CHART_Line_String$(9) = "=0,0,255"
    	HS_CHART_Line_String$(10) = "=255,0,0"
    	HS_CHART_Line_String$(11) = "=0,255,0"
    	HS_CHART_Line_String$(12) = "=255,255,64"
    	HS_CHART_Line_String$(13) = "=128,128,0"
    	HS_CHART_Line_String$(14) = "=255,125,0"
    	HS_CHART_Line_String$(15) = "=140,0,180"
    	HS_CHART_Line_String$(16) = "=0,255,0"
    	HS_CHART_Line_String$(17) = "=255,255,64"
    	HS_CHART_Line_String$(18) = "=128,128,0"
    	HS_CHART_Line_String$(19) = "=255,125,0"
    	HS_CHART_Line_String$(20) = "=140,0,180"

      ENGINE_HS_Get_Chart_Colours()
 
  
endfunction

function lib_PORTABLE_Windows_OpenFileBox(mode$,FileBoxTitle$,ShownFileFilter$,RealFileFilter$)

  FileBoxTitle$ = FileBoxTitle$+"^"
  FileFilter$ = ShownFileFilter$+"^"+RealFileFilter$+"^^"
  
  `Offset Table OPENFILENAME Struct
  lStructSize       = 0
  hwndOwner         = 4
  hInstance         = 8
  lpstrFilter       = 12
  lpstrCustomFilter = 16
  nMaxCustFilter    = 20
  nFilterIndex      = 24
  lpstrFile         = 28
  nMaxFile          = 32
  lpstrFileTitle    = 36
  nMaxFileTitle     = 40
  lpstrInitialDir   = 44
  lpstrTitle        = 48
  Flags             = 52
  nFileOffset       = 56
  nFileExtension    = 58
  lpstrDefExt       = 60
  lCustData         = 64
  lpfnHook          = 68
  lpTemplateName    = 72
  StructEnd         = 76
 
  `OPENFILENAME Flag Table
  OFN_ALLOWMULTISELECT       = 512 : `0x00000200
  OFN_CREATEPROMPT           = 8192 : `0x00002000
  OFN_ENABLEHOOK             = 32 : `0x00000020
  OFN_ENABLETEMPLATE         = 64 : `0x00000040
  OFN_ENABLETEMPLATEHANDLE   = 128 : `0x00000080
  OFN_EXPLORER               = 524288 : `0x00080000
  OFN_EXTENSIONDIFFERENT     = 1024 : `0x00000400
  OFN_FILEMUSTEXIST          = 4096 : `0x00001000
  OFN_HIDEREADONLY           = 4 : `0x00000004
  OFN_LONGNAMES              = 2097152 : `0x00200000
  OFN_NOCHANGEDIR            = 8 : `0x00000008
  OFN_NODEREFERENCELINKS     = 1048576 : `0x00100000
  OFN_NOLONGNAMES            = 262144 : `0x00040000
  OFN_NONETWORKBUTTON        = 131072 : `0x00020000
  OFN_NOREADONLYRETURN       = 32768 : `0x00008000
  OFN_NOTESTFILECREATE       = 65536 : `0x00010000
  OFN_NOVALIDATE             = 256 : `0x00000100
  OFN_OVERWRITEPROMPT        = 2 : `0x00000002
  OFN_PATHMUSTEXIST          = 2048 : `0x00000800
  OFN_READONLY               = 1 : `0x00000001
  OFN_SHAREAWARE             = 16384 : `0x00004000
  OFN_SHOWHELP               = 16 : `0x00000010
 
  rem FileBox Info
  FileBoxFlags   = OFN_EXPLORER + OFN_FILEMUSTEXIST + OFN_PATHMUSTEXIST + OFN_LONGNAMES + OFN_HIDEREADONLY + OFN_NONETWORKBUTTON
  PathBufferSize = 256
  hWnd           = call dll(c_User32DLL,"GetActiveWindow")
  hMod           = call dll(c_Kernel32DLL,"GetModuleHandleA",0)
 
  rem Create necessary memblocks
  OFN_MB          = 14
  PathBuffer_MB   = 15
  FileFilter_MB   = 16
  FileBoxTitle_MB = 17
  make memblock OFN_MB,StructEnd
  make memblock PathBuffer_MB,PathBufferSize
  make memblock FileFilter_MB,len(FileFilter$)
  make memblock FileBoxTitle_MB,len(FileBoxTitle$)
 
  rem Get the memblocks pointers
  OFN          = get memblock ptr(OFN_MB)
  PathBuffer   = get memblock ptr(PathBuffer_MB)
  FileFilter   = get memblock ptr(FileFilter_MB)
  FileBoxTitle = get memblock ptr(FileBoxTitle_MB)
 
  rem write Strings to Memblock
  `Write String To Memblock(FileFilter_MB, FileFilter$)
  for pos = 1 to len(FileFilter$)
    b = asc(mid$(FileFilter$, pos))
    if b = asc("^") then b = 0
    write memblock byte FileFilter_MB, pos - 1, b
  next pos
  `Write String To Memblock(FileBoxTitle_MB,FileBoxTitle$)
  for pos = 1 to len(FileBoxTitle$)
    b = asc(mid$(FileBoxTitle$, pos))
    if b = asc("^") then b = 0
    write memblock byte FileBoxTitle_MB, pos - 1, b
  next pos
 
  rem Write to OPENFILENAME Struct
  write memblock dword OFN_MB,lStructSize,StructEnd
  write memblock dword OFN_MB,hWndOwner,hWnd
  write memblock dword OFN_MB,hInstance,hMod
  write memblock dword OFN_MB,lpstrFilter,FileFilter
  write memblock dword OFN_MB,lpstrFile,PathBuffer
  write memblock dword OFN_MB,nMaxFile,PathBufferSize
  write memblock dword OFN_MB,Flags,FileBoxFlags
  write memblock dword OFN_MB,lpstrTitle,FileBoxTitle
 
  rem Open the FileBox
  if mode$="save"
    call dll c_Comdlg32DLL,"GetSaveFileNameA",OFN
  else
    call dll c_Comdlg32DLL,"GetOpenFileNameA",OFN
  endif
  
  `Read String from Memblock
  pos=0
  l_OUTPUT$ = ""
  do
    b=memblock byte(PathBuffer_MB, pos)
    if b = 0 then exit
    l_OUTPUT$ = l_OUTPUT$ + chr$(b)
    inc pos
  loop
 
  `Delete the memblocks
  delete memblock OFN_MB
  delete memblock PathBuffer_MB
  delete memblock FileFilter_MB
  delete memblock FileBoxTitle_MB
 
 
endfunction l_OUTPUT$


function __________Old_Commands_Delete_________________________________________hfgw7gie()
endfunction

















function lib_ChangeDate_1Day_Earlier_OLD_DELETE()

  local l_CurrentDate$ as string
  local l_Current_DayNum as integer
  local l_Current_MonthNum as integer
  
  Local l_CheckDate$ as string
  local l_CheckDay as integer
  local l_CheckMonth as integer
  
  local l_found_ArrayPosition as integer : l_found_ArrayPosition = -1
  local l_found_Day as integer : l_found_Day = -1
  local l_found_Month as integer : l_found_Month = -1
  
  local l_counter as integer
  

  `This button will attempt to go back 1 day from the currently selected date

   `l_CheckDate$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_counter).Date$)
  l_CurrentDate$ = g_DLS_TIME_BRKDOWN_Slctd_DisplayDate$
  l_Current_DayNum = val(first token$(l_CurrentDate$,"/"))
  l_Current_MonthNum = val(next token$("/"))
    
  l_counter = g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr
  do
  
   l_CheckDate$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_counter).Date$)
   l_CheckDay = val(first token$(l_CheckDate$,"/"))
   l_CheckMonth = val(next token$("/"))
     
   `1. Find the first change in the date field
    if l_CheckDay <> l_Current_DayNum or l_CheckMonth <> l_Current_MonthNum
      l_Found_ArrayPosition = l_counter
      g_DLS_TIME_BRKDOWN_Slctd_Day = l_CheckDay
      g_DLS_TIME_BRKDOWN_Slctd_Month = l_CheckMonth
      g_DLS_TIME_BRKDOWN_Slctd_DisplayDate$ = l_CheckDate$
      exit
    endif
 
    dec l_counter, 1
  
    `Other Exit Conditions
      `If counter = zero
      if l_counter = 0
        exit
      endif  
  
  loop
   
  


endfunction






function lib_GetData_Date_StartEnd_ArrayPoints_OLDDELETE(r_MatchDayNum as integer, r_MatchMonthNum as integer)

  local l_StartDate$ as string
  local l_StartDay as integer
  local l_StartMonth as integer
  
  Local l_CheckDate$ as string
  local l_CheckDay as integer
  local l_CheckMonth as integer

  g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = -1
  g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = -1
  
  `l_StartDate$ = MEM_MAIN_DATABASE(l_counter).Date$
  `l_StartDay = val(first token$(l_StartDate$,"/"))
  `l_StartMonth = val(next token$("/"))
  
  l_StartDay = r_MatchDayNum
  l_StartMonth = r_MatchMonthNum
  
  l_counter = g_DATABASE_MEM_Total_Num_Records
  do
  
   l_CheckDate$ = lib_CONVERT_DATE_US_to_UK_Format(MEM_MAIN_DATABASE(l_counter).Date$)
   l_CheckDay = val(first token$(l_CheckDate$,"/"))
   l_CheckMonth = val(next token$("/"))
   
   `1. Match the End Array to the first instance found of the Matched Day and Month
    if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = -1
      if l_CheckDay = l_StartDay and l_CheckMonth = l_StartMonth
        g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = l_counter
      endif
    endif
   
   `2. Match the Start Array to the next change of Day and Month
    if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr <> -1
      if l_CheckDay <> l_StartDay or l_CheckMonth <> l_StartMonth
        g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = l_counter + 1
      endif
    endif
  
    dec l_counter, 1
  
    `Exit Conditions
      `If counter = zero
      if l_counter = 0
        exit
      endif  
      `If Start and End points found
      if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr <> -1 and g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr <> -1
        exit
      endif
  
  loop
  
  `Some quick checks to stop the progrm crashing
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr < 0 then g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = 0
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr < 0  then g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = 0
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr > g_DATABASE_MEM_Total_Num_Records then g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr = g_DATABASE_MEM_Total_Num_Records
  if g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr > g_DATABASE_MEM_Total_Num_Records then g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr = g_DATABASE_MEM_Total_Num_Records

endfunction

function DLS_PrintTestVariables(r_StartX, r_StartY)

  sp = 0

  d3d_starttext
  
    inc sp, 20 : d3d_text 2, r_StartX + 30, r_StartY + 70 + sp, 0, "Date: " + g_DLS_TIME_BRKDOWN_Slctd_DisplayDate_Converted$, g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 30, r_StartY + 70 + sp, 0, "Day: " + str$(g_DLS_TIME_BRKDOWN_Slctd_Day), g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 30, r_StartY + 70 + sp, 0, "Month: " + str$(g_DLS_TIME_BRKDOWN_Slctd_Month), g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 30, r_StartY + 70 + sp, 0, "Start Arr: " + str$(g_DLS_TIME_BRKDOWN_SlctdRANGE_StartArr), g_ENGINE_COLOUR_Black
    inc sp, 20 : d3d_text 2, r_StartX + 30, r_StartY + 70 + sp, 0, "End Arr: " + str$(g_DLS_TIME_BRKDOWN_SlctdRANGE_EndArr), g_ENGINE_COLOUR_Black
 
  d3d_endtext

endfunction

function _________UNIFIED_TEST_VARIABLE_SYSTEM____________________________________________________ji0fohf9844()
endfunction

function lib_TESTVAR_Add(r_Add_Str$ as string)

  `type TestVariable_Type
  `  Value_Text$ as string
  `  Value_Integer as integer
  `  Value_Float as float
  `endtype
  `dim TestVariable(10) as TestVariable_Type

  `Sort
  for sort_lp = 50 to 1 step -1
    TestVariable(sort_lp).Value_Text$ = TestVariable(sort_lp-1).Value_Text$
  next sort_lp

  g_TESTVAR_DisplayArr_Toggle = 1
  
  if g_TESTVAR_Total_Items > c_TESTVAR_MaxView_Items then g_TESTVAR_Total_Items = c_TESTVAR_MaxView_Items
  
  TestVariable(1).Value_Text$ = r_Add_Str$

endfunction

function lib_TESTVAR_DisplayAll()

  `This function displays whatever is in the Test Variable Array at the end of the main program loop
  `it allows you to dump variables into the Test Variable Array anywhere in the code and have them
  `displayed at the end. The function then clears the array ready for the next program loop.
  `If there are no variables to be displayed then displaying anything is skipped.

  if g_TESTVAR_DisplayArr_Toggle = 1

  	d3d_starttext
  	
  	  d3d_text 1, 1025, 480, 0, "TEST VARIABLE LIST", g_ENGINE_COLOUR_Black
  	
    	for print_lp = 1 to c_TESTVAR_MaxView_Items
    	
    	  d3d_text 1, 1025, 480 + (print_lp * 19), 0, str$(print_lp) + ": " + TestVariable(print_lp).Value_Text$, g_ENGINE_COLOUR_Black
    	
    	next print_lp

  	d3d_endtext
  	
  endif

endfunction

function __________DEBUG_COMMANDS____________________________________________thhy6733jd()
endfunction

function DEBUG_Display_DrawCharts_Timers()

  l_BoxPos_x = 300
  l_BoxPos_y = 50

  paste image c_DEBUG_DRAWCHARTS_Timers_BkgdIMG, l_BoxPos_x, l_BoxPos_y
  
  `Handle Close Button
  paste image c_CHANNEL_ID_CloseButton, l_BoxPos_x + 480, l_BoxPos_y + 1
  if mousex() > l_BoxPos_x + 480 and mousex() < l_BoxPos_x + 499
    if mousey() > l_BoxPos_y + 1 and mousey() < l_BoxPos_y + 18
      if mouseclick() = 1
        g_DEBUG_ChartDrawTimerBreakdown_Toggle = -1
        mouse_click(1) = 1
      endif
    endif
  endif


  d3d_starttext
  
    sp = l_BoxPos_y

    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "Draw Charts Timer Breakdown", g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "All times in ms", g_ENGINE_COLOUR_White
  
    inc sp, 20
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "DRILL SCREEN", g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "  Total Time: " + str$(g_DEBUG_DSCharts_UpdateTimeInMS), g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "  Block 1", g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    Total Time: " + str$(g_DEBUG_DSCharts_UpdateTime_Block1)
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    MemBlock: " + str$(g_DEBUG_DSCharts_UpdateTime_Block1_Memblock) + ", Draw Lines: " + str$(g_DEBUG_DSCharts_UpdateTime_Block1_WriteData), g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "  Block 2", g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    Total Time: " + str$(g_DEBUG_DSCharts_UpdateTime_Block2)
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    MemBlock: " + str$(g_DEBUG_DSCharts_UpdateTime_Block2_Memblock) + ", Draw Lines: " + str$(g_DEBUG_DSCharts_UpdateTime_Block2_WriteData), g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "  Block 3", g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    Total Time: " + str$(g_DEBUG_DSCharts_UpdateTime_Block3)
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    MemBlock: " + str$(g_DEBUG_DSCharts_UpdateTime_Block3_Memblock) + ", Draw Lines: " + str$(g_DEBUG_DSCharts_UpdateTime_Block3_WriteData), g_ENGINE_COLOUR_White
    
    inc sp, 20
    inc sp, 20
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "PITS SCREEN", g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "  Total Time: " + str$(g_DEBUG_PITSCharts_UpdateTimeInMS), g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "  Block 1", g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    Total Time: " + str$(g_DEBUG_PITSCharts_UpdateTime_Block1)
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    MemBlock: " + str$(g_DEBUG_PITSCharts_UpdateTime_Block1_Memblock) + ", Draw Lines: " + str$(g_DEBUG_PITSCharts_UpdateTime_Block1_WriteData), g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "  Block 2", g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    Total Time: " + str$(g_DEBUG_PITSCharts_UpdateTime_Block2)
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    MemBlock: " + str$(g_DEBUG_PITSCharts_UpdateTime_Block2_Memblock) + ", Draw Lines: " + str$(g_DEBUG_PITSCharts_UpdateTime_Block2_WriteData), g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "  Block 3", g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    Total Time: " + str$(g_DEBUG_PITSCharts_UpdateTime_Block3)
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    MemBlock: " + str$(g_DEBUG_PITSCharts_UpdateTime_Block3_Memblock) + ", Draw Lines: " + str$(g_DEBUG_PITSCharts_UpdateTime_Block3_WriteData), g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "  Block 4", g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    Total Time: " + str$(g_DEBUG_PITSCharts_UpdateTime_Block4)
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, "    MemBlock: " + str$(g_DEBUG_PITSCharts_UpdateTime_Block4_Memblock) + ", Draw Lines: " + str$(g_DEBUG_PITSCharts_UpdateTime_Block4_WriteData), g_ENGINE_COLOUR_White

  
    sp = l_BoxPos_y + 60

    inc sp, 20 : d3d_text 2, l_BoxPos_x + 250, sp, 0, "HISTORICAL SCREEN", g_ENGINE_COLOUR_White
    inc sp, 20 : d3d_text 2, l_BoxPos_x + 250, sp, 0, "  Total Time: " + str$(g_DEBUG_HS_UpdateTime_UpdateTimeInMS), g_ENGINE_COLOUR_White

    
    `inc sp, 5
    `inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, ": " + str$(g_ENG_RTChart_Height) + " / " + str$(g_ENG_RTChart_Width), g_ENGINE_COLOUR_White
    `inc sp, 20 : d3d_text 2, l_BoxPos_x + 20, sp, 0, ": " + str$(g_ENG_RTChart_Width), g_ENGINE_COLOUR_White


  
  d3d_endtext
  

endfunction

function DEBUG_DispVar(r_FuncName$ as string, r_VarName$ as string, r_TestVal$ as string, r_RunOnlyOnce as integer)

  `  DEBUG_DispVar("xxxxxx", "xxxxxx", str$(xxxxxx))
  
  `NOTE: The g_DEBUG_VAR_Function_RunOnlyOnce variable is set at -1 at program startup. If it is ever set
  `      at 1 then this function will skip even if called. If r_RunOnlyOnce is set to 1 then at the end
  `      of this function it sets the global variable to 1 so that this function will be skipped from then.

  if g_DEBUG_VAR_Function_RunOnlyOnce = -1

  	l_Exit_Condition = -1
  	l_KeyPress = 1
  	repeat
    	cls
    	print
    	print "DEBUG TEST VALUES SCREEN"
    	print
    	print "Debug. Function Identifier: [" + r_FuncName$ + "]"
    	print "Debug. Variable Name: [" + r_VarName$ + "]"
    	print "Debug. Variable: [" + r_TestVal$ + "]"
    	print
    	print "Press any key to continue."
	
    	
    	if scancode() = 0 and l_KeyPress = 1 then l_KeyPress = -1
    	if scancode() <> 0 and l_KeyPress = -1 then l_Exit_Condition = 1
    	
    	sync
  	
  	until l_Exit_Condition = 1
  
  endif
  
  `Set the Run Only Once variable - this function will then not run again.
  if r_RunOnlyOnce = 1
    g_DEBUG_VAR_Function_RunOnlyOnce = 1
  endif

endfunction


function DEBUG_DISPLAY(r_TestVal1$ as string, r_TestVal2$ as string, r_TestVal3$ as string)

  `This function is designed to make it easy see what values hold at a point in the program
  `with a single line function call.
  
  `   debug_display(str$(xxxxxx),"n/a", "n/a")

  l_exit_test = -1
  repeat
    cls
    print
    print "DEBUG TEST VALUES SCREEN"
    print
    print "Debug. TestValue1: [" + r_TestVal1$ + "]"
    print "Debug. TestValue2: [" + r_TestVal2$ + "]"
    print "Debug. TestValue3: [" + r_TestVal3$ + "]"
    
    if scancode() <> 0 then l_exit_test = 1
    
    sync
  
  until l_exit_test = 1

endfunction

function DEBUG_WriteFile(r_Debug_Variable1$ as string, r_Debug_Variable2$ as string)

  g_save_final_name$ = g_autodir_full_directory_path$ + "\Engine Data\DEBUG.txt"
  
  if file exist(g_save_final_name$) = 1
    delete file g_save_final_name$
  endif
    
  open to write 1, g_save_final_name$

    write string 1, "[DEBUG FILE]"
    write string 1, "r_Debug_Variable1$ : " + r_Debug_Variable1$
    write string 1, "r_Debug_Variable2$ : " + r_Debug_Variable2$
    
  close file 1

endfunction

function DEBUG_UseExternalValue()

  `Calling this function does two things.
  ` 1) Test that the external file exists that will hold the value - if not then create and disp error showing creation
  ` 2) Load value from file into the test value (note done after all variables defined)
  local l_tempVAL$ as string
  local l_empty_string$ as string
  local l_DEBUG_FileName$ as string
  l_DEBUG_FileName$ = g_autodir_full_directory_path$ + "\Engine Data\DEBUG_Value.txt"

  `1)
  if file exist(l_DEBUG_FileName$) = 0
    open to write 1, l_DEBUG_FileName$
      write string 1, "This file stores the Debug Value"
      write string 1, "Float_Value=5.0"
    close file 1
    INITIALISE_D3D_FUNC()
    lib_ON_ERROR_Handle("Debug Value File Not Found", "The file has been created", "The program can be restarted", -1)
  endif
  
  `2)
  if file exist(l_DEBUG_FileName$) = 1
  
    open to read 1, l_DEBUG_FileName$
      read string 1, l_empty_string$
      read string 1, l_tempVAL$ : lib_Get_String_VAL(l_tempVAL$) : g_DEBUG_ExternalValue# = g_LGSV_ConvertedString_Output_FLT#
    close file 1
  
  endif

endfunction

function DEBUG_Wits_WritePortDatafile(r_DataStr$ as string)

  local l_WritePathStr$ as string

  `This function creates and then writes to a file that shows what
  `is read from the port each program loop so that we can
  `see what is being read from the port and parsed over by the
  `code in detail for each loop.

  l_WritePathStr$ = g_autodir_full_directory_path$ + "\Engine Data\DeEBUG_WITS_PortData.txt"


  if file exist(l_WritePathStr$) = 0
    open to write 1, l_WritePathStr$
      write string 1, r_DataStr$
    close file 1
  else
    open datafile to update 1, l_WritePathStr$
      set datafile position 1, (datafile size(1))
      write datafile string 1, r_DataStr$
    close datafile 1
  endif


endfunction
